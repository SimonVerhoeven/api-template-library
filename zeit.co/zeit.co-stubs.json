{
  "mappings" : [ {
    "id" : "a4c89721-db74-313b-962e-ad5145e6c12e",
    "name" : "Get a domain for the authenticated user by name",
    "request" : {
      "urlPath" : "/v4/domains/Wilber+Wuckert",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"error\" : {\n    \"code\" : \"not_found\",\n    \"message\" : \"The domain with name zeit.rocks could not be found\",\n    \"name\" : \"zeit.rocks\"\n  }\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a4c89721-db74-313b-962e-ad5145e6c12e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "getDomain",
          "schema" : {
            "example" : {
              "error" : {
                "code" : "not_found",
                "message" : "The domain with name zeit.rocks could not be found",
                "name" : "zeit.rocks"
              }
            },
            "properties" : {
              "error" : {
                "properties" : {
                  "code" : {
                    "enum" : [ "not_found" ],
                    "type" : "string"
                  },
                  "message" : {
                    "type" : "string"
                  },
                  "name" : {
                    "type" : "string"
                  }
                },
                "required" : [ "code", "message", "name" ],
                "type" : "object"
              }
            },
            "required" : [ "error" ],
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 0
  }, {
    "id" : "0e3ce964-6c29-3c17-96da-ede1c2223460",
    "name" : "Get a domain for the authenticated user by name",
    "request" : {
      "urlPath" : "/v4/domains/Julissa+Wisozk+DVM",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"domain\" : {\n    \"aliases\" : [ ],\n    \"boughtAt\" : null,\n    \"cdnEnabled\" : false,\n    \"certs\" : [ ],\n    \"createdAt\" : 1544658552174,\n    \"creator\" : {\n      \"customerId\" : \"cus_COxSxT1ysva5Xa\",\n      \"email\" : \"demo@zeit.co\",\n      \"id\" : \"ZspSRT4ljIEEmMHgoDwKWDei\",\n      \"username\" : \"zeit_user\"\n    },\n    \"expiresAt\" : null,\n    \"id\" : \"EmTbe5CEJyTk2yVAHBUWy4A3sRusca3GCwRjTC1bpeVnt1\",\n    \"intendedNameservers\" : [ \"a.zeit-world.co.uk\", \"c.zeit-world.org\", \"d.zeit-world.com\", \"f.zeit-world.net\" ],\n    \"name\" : \"my-zeit-domain.website\",\n    \"nameservers\" : [ \"ns1.nameserver.net\", \"ns2.nameserver.net\" ],\n    \"nsVerifiedAt\" : null,\n    \"serviceType\" : \"external\",\n    \"suffix\" : false,\n    \"txtVerifiedAt\" : null,\n    \"verificationRecord\" : \"YMc9dEJKbAncYtTqSH8dp1j5NXycfEzyjkzBJ3m3UGwR43\",\n    \"verified\" : false\n  }\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0e3ce964-6c29-3c17-96da-ede1c2223460",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "getDomain",
          "schema" : {
            "example" : {
              "domain" : {
                "aliases" : [ ],
                "cdnEnabled" : false,
                "certs" : [ ],
                "createdAt" : 1544658552174,
                "creator" : {
                  "customerId" : "cus_COxSxT1ysva5Xa",
                  "email" : "demo@zeit.co",
                  "id" : "ZspSRT4ljIEEmMHgoDwKWDei",
                  "username" : "zeit_user"
                },
                "id" : "EmTbe5CEJyTk2yVAHBUWy4A3sRusca3GCwRjTC1bpeVnt1",
                "intendedNameservers" : [ "a.zeit-world.co.uk", "c.zeit-world.org", "d.zeit-world.com", "f.zeit-world.net" ],
                "name" : "my-zeit-domain.website",
                "nameservers" : [ "ns1.nameserver.net", "ns2.nameserver.net" ],
                "serviceType" : "external",
                "suffix" : false,
                "verificationRecord" : "YMc9dEJKbAncYtTqSH8dp1j5NXycfEzyjkzBJ3m3UGwR43",
                "verified" : false
              }
            },
            "properties" : {
              "domain" : {
                "description" : "The domain information",
                "properties" : {
                  "aliases" : {
                    "description" : "Collection of aliases where the domain is used.",
                    "items" : {
                      "properties" : {
                        "alias" : {
                          "type" : "string"
                        },
                        "created" : {
                          "type" : "integer"
                        },
                        "id" : {
                          "type" : "string"
                        }
                      },
                      "required" : [ "id", "alias", "created" ],
                      "type" : "object"
                    },
                    "type" : "array"
                  },
                  "boughtAt" : {
                    "description" : "A timestamp to tell when the domain was purchase if it was purchased with ZEIT",
                    "nullable" : true,
                    "type" : "integer"
                  },
                  "cdnEnabled" : {
                    "description" : "Wether the Cloudfare CDN is enabled for the domain or not",
                    "type" : "boolean"
                  },
                  "certs" : {
                    "description" : "Collection of certs for the domain",
                    "items" : {
                      "properties" : {
                        "cns" : {
                          "items" : {
                            "type" : "string"
                          },
                          "type" : "array"
                        },
                        "created" : {
                          "type" : "integer"
                        },
                        "id" : {
                          "type" : "string"
                        }
                      },
                      "required" : [ "id", "cns", "created" ],
                      "type" : "object"
                    },
                    "type" : "array"
                  },
                  "createdAt" : {
                    "description" : "A timestamp that shows when the domain was created",
                    "nullable" : true,
                    "type" : "integer"
                  },
                  "creator" : {
                    "description" : "Information about who added the domain",
                    "properties" : {
                      "customerId" : {
                        "type" : "string"
                      },
                      "email" : {
                        "type" : "string"
                      },
                      "id" : {
                        "type" : "string"
                      },
                      "isDomainReseller" : {
                        "type" : "boolean"
                      },
                      "username" : {
                        "type" : "string"
                      }
                    },
                    "required" : [ "id", "email", "username" ],
                    "type" : "object"
                  },
                  "expiresAt" : {
                    "description" : "The expiration date for the domain in case it's in ZEIT",
                    "nullable" : true,
                    "type" : "integer"
                  },
                  "id" : {
                    "description" : "The unique identifier of the domain.",
                    "type" : "string"
                  },
                  "intendedNameservers" : {
                    "description" : "The set of nameservers ZEIT requires the user to set to verify the domain with Nameservers",
                    "items" : {
                      "description" : "An intended nameserver for the domain",
                      "type" : "string"
                    },
                    "type" : "array"
                  },
                  "name" : {
                    "description" : "The domain name including the TLD",
                    "type" : "string"
                  },
                  "nameservers" : {
                    "description" : "The current nameservers we have detected for the domain",
                    "items" : {
                      "description" : "A nameserver the domain has set",
                      "type" : "string"
                    },
                    "type" : "array"
                  },
                  "nsVerifiedAt" : {
                    "description" : "The timestamp of the last time the domain was verified using Nameservers",
                    "nullable" : true,
                    "type" : "integer"
                  },
                  "orderedAt" : {
                    "description" : "A timestamp indicating when the domain was ordered if it was purchased with ZEIT",
                    "nullable" : true,
                    "type" : "integer"
                  },
                  "serviceType" : {
                    "description" : "Indicates the current DNS service the domain is using",
                    "enum" : [ "zeit.world", "external", "na" ],
                    "type" : "string"
                  },
                  "suffix" : {
                    "description" : "Tells if the domain is being used as a custom suffix for the user or team",
                    "type" : "boolean"
                  },
                  "transferredAt" : {
                    "description" : "If the domain was transferred to ZEIT, it indicates the timestamp for when the transfer was started",
                    "nullable" : true,
                    "type" : "integer"
                  },
                  "txtVerifiedAt" : {
                    "description" : "The timestamp of the last time the domain was verified using a TXT record",
                    "nullable" : true,
                    "type" : "integer"
                  },
                  "verificationRecord" : {
                    "description" : "Indicates the verification record that should be used to verify the domain using a TXT record",
                    "type" : "string"
                  },
                  "verified" : {
                    "description" : "Indicates if the domain ownership was already verified",
                    "type" : "boolean"
                  }
                },
                "required" : [ "boughtAt", "cdnEnabled", "createdAt", "expiresAt", "id", "intendedNameservers", "name", "nameservers", "nsVerifiedAt", "serviceType", "txtVerifiedAt", "verificationRecord", "verified", "suffix", "aliases", "certs", "creator" ],
                "type" : "object"
              }
            },
            "required" : [ "domain" ],
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 1
  }, {
    "id" : "6c4caebe-1afe-3c75-b20d-d8bae31bb92b",
    "name" : "Gets a list of domains registered for the authenticating user.",
    "request" : {
      "urlPath" : "/v4/domains",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"domains\" : [ {\n    \"boughtAt\" : 1549492066000,\n    \"cdnEnabled\" : false,\n    \"createdAt\" : 1549492062697,\n    \"expiresAt\" : 1581033599000,\n    \"id\" : \"Qmf2RSrNz5sqt6nznp4JpAyXgT6pY65qwJJn8gESt2iKoi\",\n    \"intendedNameservers\" : [ \"b.zeit-world.co.uk\", \"c.zeit-world.org\", \"e.zeit-world.com\", \"f.zeit-world.net\" ],\n    \"name\" : \"zeit.rocks\",\n    \"nameservers\" : [ \"f.zeit-world.net\", \"e.zeit-world.com\", \"b.zeit-world.co.uk\", \"c.zeit-world.org\" ],\n    \"nsVerifiedAt\" : 1549492417256,\n    \"orderedAt\" : 1549492057859,\n    \"serviceType\" : \"zeit.world\",\n    \"txtVerifiedAt\" : null,\n    \"verificationRecord\" : \"QmReErtvkKUkogSYEAFJCQVPboxRcrCygaFG8xUKinurD4\",\n    \"verified\" : true\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6c4caebe-1afe-3c75-b20d-d8bae31bb92b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "getDomains",
          "schema" : {
            "example" : {
              "domains" : [ {
                "boughtAt" : 1549492066000,
                "cdnEnabled" : false,
                "createdAt" : 1549492062697,
                "expiresAt" : 1581033599000,
                "id" : "Qmf2RSrNz5sqt6nznp4JpAyXgT6pY65qwJJn8gESt2iKoi",
                "intendedNameservers" : [ "b.zeit-world.co.uk", "c.zeit-world.org", "e.zeit-world.com", "f.zeit-world.net" ],
                "name" : "zeit.rocks",
                "nameservers" : [ "f.zeit-world.net", "e.zeit-world.com", "b.zeit-world.co.uk", "c.zeit-world.org" ],
                "nsVerifiedAt" : 1549492417256,
                "orderedAt" : 1549492057859,
                "serviceType" : "zeit.world",
                "verificationRecord" : "QmReErtvkKUkogSYEAFJCQVPboxRcrCygaFG8xUKinurD4",
                "verified" : true
              } ]
            },
            "properties" : {
              "domains" : {
                "description" : "An Array of domains for the given account",
                "items" : {
                  "properties" : {
                    "boughtAt" : {
                      "description" : "A timestamp to tell when the domain was purchase if it was purchased with ZEIT",
                      "nullable" : true,
                      "type" : "integer"
                    },
                    "cdnEnabled" : {
                      "description" : "Wether the Cloudfare CDN is enabled for the domain or not",
                      "type" : "boolean"
                    },
                    "createdAt" : {
                      "description" : "A timestamp that shows when the domain was created",
                      "nullable" : true,
                      "type" : "integer"
                    },
                    "expiresAt" : {
                      "description" : "The expiration date for the domain in case it's in ZEIT",
                      "nullable" : true,
                      "type" : "integer"
                    },
                    "id" : {
                      "description" : "The unique identifier of the domain.",
                      "type" : "string"
                    },
                    "intendedNameservers" : {
                      "description" : "The set of nameservers ZEIT requires the user to set to verify the domain with Nameservers",
                      "items" : {
                        "description" : "An intended nameserver for the domain",
                        "type" : "string"
                      },
                      "type" : "array"
                    },
                    "name" : {
                      "description" : "The domain name including the TLD",
                      "type" : "string"
                    },
                    "nameservers" : {
                      "description" : "The current nameservers we have detected for the domain",
                      "items" : {
                        "description" : "A nameserver the domain has set",
                        "type" : "string"
                      },
                      "type" : "array"
                    },
                    "nsVerifiedAt" : {
                      "description" : "The timestamp of the last time the domain was verified using Nameservers",
                      "nullable" : true,
                      "type" : "integer"
                    },
                    "orderedAt" : {
                      "description" : "A timestamp indicating when the domain was ordered if it was purchased with ZEIT",
                      "nullable" : true,
                      "type" : "integer"
                    },
                    "serviceType" : {
                      "description" : "Indicates the current DNS service the domain is using",
                      "enum" : [ "zeit.world", "external", "na" ],
                      "type" : "string"
                    },
                    "transferredAt" : {
                      "description" : "If the domain was transferred to ZEIT, it indicates the timestamp for when the transfer was started",
                      "nullable" : true,
                      "type" : "integer"
                    },
                    "txtVerifiedAt" : {
                      "description" : "The timestamp of the last time the domain was verified using a TXT record",
                      "nullable" : true,
                      "type" : "integer"
                    },
                    "verificationRecord" : {
                      "description" : "Indicates the verification record that should be used to verify the domain using a TXT record",
                      "type" : "string"
                    },
                    "verified" : {
                      "description" : "Indicates if the domain ownership was already verified",
                      "type" : "boolean"
                    }
                  },
                  "required" : [ "boughtAt", "cdnEnabled", "createdAt", "expiresAt", "id", "intendedNameservers", "name", "nameservers", "nsVerifiedAt", "serviceType", "txtVerifiedAt", "verificationRecord", "verified" ],
                  "type" : "object"
                },
                "type" : "array"
              }
            },
            "required" : [ "domains" ],
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 2
  }, {
    "id" : "eef646c4-4331-3ff4-a51e-36f71be9299b",
    "name" : "Remove a webhook by id - 204",
    "request" : {
      "urlPath" : "/v1/integrations/webhooks/:id",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 204
    },
    "uuid" : "eef646c4-4331-3ff4-a51e-36f71be9299b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "deleteWebhooks"
        }
      }
    },
    "insertionIndex" : 3
  }, {
    "id" : "9615f02e-d24b-3088-b09e-013acbdc9022",
    "name" : "Create a new webhook",
    "request" : {
      "urlPath" : "/v1/integrations/webhooks",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"createdAt\" : 8985412933680451404,\n  \"name\" : \"Noe Altenwerth DVM\",\n  \"configurationId\" : \"6qh8\",\n  \"id\" : \"mce1\",\n  \"ownerId\" : \"89bj\",\n  \"events\" : [ \"gmrjwsobb08ezk3pclifjtw6n0wrciay7ow4ocpili5bhp8yd4d9ij7amirg58xy689wotr3v1iwax21mf6orpgxjyk39z4ef8v4r0xxk\" ],\n  \"url\" : \"https://web.example.mocklab.io/150778\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9615f02e-d24b-3088-b09e-013acbdc9022",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "createWebhook",
          "schema" : {
            "description" : "A webhook subscription with an URL where ZEIT will POST events.",
            "properties" : {
              "configurationId" : {
                "description" : "An id that corresponds to the configuration that generated the token that was used to create the webhook",
                "type" : "string"
              },
              "createdAt" : {
                "description" : "Timestamp that tells when was the webhook created",
                "type" : "integer"
              },
              "events" : {
                "description" : "An array with the event identifiers that the webhook can receive",
                "items" : {
                  "type" : "string"
                },
                "type" : "array"
              },
              "id" : {
                "description" : "Id of the webhook",
                "type" : "string"
              },
              "name" : {
                "description" : "A name for the webhook that serves as a canonical description",
                "type" : "string"
              },
              "ownerId" : {
                "description" : "Id of the owner which can be a user or a team",
                "type" : "string"
              },
              "url" : {
                "description" : "The URL where the POST request will be sent",
                "type" : "string"
              }
            },
            "required" : [ "id", "url", "name", "events", "onwerId", "createdAt", "configurationId" ]
          }
        }
      }
    },
    "insertionIndex" : 4
  }, {
    "id" : "f9b9d935-cefd-3c91-9780-d94f7fdba37d",
    "name" : "Get a list of existent webhooks",
    "request" : {
      "urlPath" : "/v1/integrations/webhooks",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "[ {\n  \"createdAt\" : 6503828942458111112,\n  \"name\" : \"Ted Metz\",\n  \"configurationId\" : \"z706\",\n  \"id\" : \"z501\",\n  \"ownerId\" : \"9646\",\n  \"events\" : [ \"46zy201lwkmjy2u1jfak28gyzzbrrse1mwygj1pijvp\", \"di2ry7p5erm245glvt0l418uus7elqfwwpzulvxz0n7f3rf8pdxzp4akep6w2rar7o5du3aqr6fumesthi1oqh6h90z938\", \"mioaxcl8ej9rknxir0s6218yydyjbgw8di3rvnwboz7b64q7cr499cx607v4n0zdauimw4oep821heo9mdi0dpkkitp05fdtdn0uktjwu4lxf3rbk2pa2jxruu7tc0a7fcp6r5j1a09zxlfuatyin280i\", \"185eoz3wvcble6ya044m\", \"sarp375ccbks\" ],\n  \"url\" : \"https://web.example.mocklab.io/417832\"\n}, {\n  \"createdAt\" : 1791802421521451368,\n  \"name\" : \"Dorothy Gottlieb\",\n  \"configurationId\" : \"ps00\",\n  \"id\" : \"70b7\",\n  \"ownerId\" : \"ru0q\",\n  \"events\" : [ \"l2tknk4ff4beh74w587cblrouyrb6gzm813mneyqebj3uidthaqa4fjfdfizeh1vnmj86htt6on4tlgokj8xx9mj71vyfnm7ydlhwfhbv8aalvhz4pjpkw3dgkhzh2oel6thr7llxzw3rdsq7m6iqe48gwg29rt7k0kkua2q0w5ox58mrz5gx9uhzcc76ox7vp\", \"2edrb16n4o73glgfjqpn3mgvyy0eryhxgcz895y6snzwgc0wmi5zmrjw78jjttonvdrhnd3j6mlcipv4iu10sg1dakmn4l0m35ooefrp1dqsm8svlykm98f15uy8q1dtegbiy6x8pzi4g99ciwb1tzmc42nkc1ntm5j3jm5t7hwjr9lvye25318rd38dmxu1\", \"7xk13rijy5j7jznrj7vhix4lqmim1nxwr7rgi3mo9er1bo45xoqr4p8juf9gr3c0nxny7f9jafqbn6585bgqqykq5mos3f97hmkbov4ap0u\", \"gj1f9gfcie12nlea2\", \"5lzm1frtvgoekuqbmc9mgigc2ufwx2il32lu89cxc88pwvxidtr1gfs0g4sn7o4unjl9aeofw9ja97faofx8a40r8p18zzrbiwq2nce55rc3qfk0f0j4oppxe10pdojoc5hlgqa78qhay2g00apgvj65tkrk2msc8uieftlyzuslzk0hg\", \"3pp38sns736jqirbubxn3a9o2wu2suecb4deeygjdxysv7v9k621\" ],\n  \"url\" : \"https://web.example.mocklab.io/329929\"\n}, {\n  \"createdAt\" : 6815424652265983488,\n  \"name\" : \"Mr. Bryant Harvey\",\n  \"configurationId\" : \"0kj0\",\n  \"id\" : \"828m\",\n  \"ownerId\" : \"9g00\",\n  \"events\" : [ \"p44jkzbsavsp4cxx05x85diq7ecgkvihguqkyegtb5lqocmkqosfuj2mcoy1nie9anbi3mpl1ax7pq23l7k08hwwbmx1d4kkjeigbv45yz4rqqvrd37gouuio6qly7stnnbfzsmns7ikvsra63z7958ebj78l19ky7fzfvattekfhsf64rfg8oc3c2y373xuxttv2\", \"5turwn2tol36cfdv7h7fz2wyrjym4xmiwhcfsbq38344x4ttq2l8s6z45ty7snhh0gkbjt9ftg8lq\", \"zgi19hxzm93r9lmw7wgit0qe8oqx2p1va0vasagnd1b8nwl9ib3q6h8d0xbes0aatp1i1hepba2xwiswlo1uj6kg5ikbnl176jscn84qxgmhi983\", \"kdcg6czdjgmra2ukabiel2zd2bbv2i\", \"aumja7rjzcqs7w98zwxhpkqaykyktr0mexh6281p4acvtal12s98yepr6iatkapc806a4u2uo923i7ti0mlaapylberlc20w4av\", \"s8j9boqob3ahi3vs92ogd5xgxz4em016a213dfyhu1lf58xfrm0lf1x5xh0udw4k\", \"1j9ntnolbus4oq6gwda6isui7tq6uo9zjuilewyh3wwi9qzykk2mggl5371b7flp6veqe3zf1ju4qtzcj3vjgfo54xmeyzyg20egzkptyxkxdfuyhlbp923hqvab40wegcu6j3u6lp6akrhczmjfxhvv424hi1nab05mfvx6fnqecvi31e6afgie6p\" ],\n  \"url\" : \"https://web.example.mocklab.io/579066\"\n}, {\n  \"createdAt\" : 996462896622232592,\n  \"name\" : \"Mitch Bruen\",\n  \"configurationId\" : \"8hk4\",\n  \"id\" : \"ghv8\",\n  \"ownerId\" : \"1mfk\",\n  \"events\" : [ \"s8zvk8t1yyqjzr6gthy1md4kxb0lro7czgliae6p1hd8dg1nx6h10tr0qem61i8qpfzx4hcj4wqp3k5uygn3fspccaf19pp1xpljymqz3jk3uvr7ng7eochktxfe701qp3o4y810erbdxknf6s9rtfvs3ee2oc5jnr6xqlgg0mzswv8mdeow09h\" ],\n  \"url\" : \"https://web.example.mocklab.io/294729\"\n}, {\n  \"createdAt\" : 3032722263125323319,\n  \"name\" : \"Gerardo Yost\",\n  \"configurationId\" : \"udfx\",\n  \"id\" : \"525w\",\n  \"ownerId\" : \"imm2\",\n  \"events\" : [ \"wf08rl3n2yuo46wtkti8wpqkxsuief31xa7xpplcfxrmk50kisiwrwssngolcryjdakgz4mdu0z07b709pdn88lcqfzmfdakbpyh71mz602ljxezk80jhbrini2w5gk8\", \"cg32ytwssrw2eyz4sro3kawer56l81aq1mwz808dhxp\" ],\n  \"url\" : \"https://web.example.mocklab.io/555361\"\n} ]",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f9b9d935-cefd-3c91-9780-d94f7fdba37d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "getWebhooks",
          "schema" : {
            "description" : "An Array of webhooks for the given account",
            "items" : {
              "$ref" : "#/components/schemas/webhook"
            },
            "type" : "array"
          }
        }
      }
    },
    "insertionIndex" : 5
  } ]
}