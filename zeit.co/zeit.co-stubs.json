{
  "mappings" : [ {
    "id" : "9c65ff81-4395-46ff-ae67-fe0491f80d6c",
    "name" : "Get a domain for the authenticated user by name",
    "request" : {
      "urlPath" : "/v4/domains/Jonas+Weimann",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"error\" : {\n    \"code\" : \"not_found\",\n    \"message\" : \"The domain with name zeit.rocks could not be found\",\n    \"name\" : \"zeit.rocks\"\n  }\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9c65ff81-4395-46ff-ae67-fe0491f80d6c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:52.733348Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "getDomain",
          "schema" : {
            "example" : {
              "error" : {
                "code" : "not_found",
                "message" : "The domain with name zeit.rocks could not be found",
                "name" : "zeit.rocks"
              }
            },
            "properties" : {
              "error" : {
                "properties" : {
                  "code" : {
                    "enum" : [ "not_found" ],
                    "type" : "string"
                  },
                  "message" : {
                    "type" : "string"
                  },
                  "name" : {
                    "type" : "string"
                  }
                },
                "required" : [ "code", "message", "name" ],
                "type" : "object"
              }
            },
            "required" : [ "error" ],
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 0
  }, {
    "id" : "ff063a8f-9727-4b16-be85-79710b037ce9",
    "name" : "Get a domain for the authenticated user by name",
    "request" : {
      "urlPath" : "/v4/domains/Paul+Parker+Jr.",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"domain\" : {\n    \"aliases\" : [ ],\n    \"boughtAt\" : null,\n    \"cdnEnabled\" : false,\n    \"certs\" : [ ],\n    \"createdAt\" : 1544658552174,\n    \"creator\" : {\n      \"customerId\" : \"cus_COxSxT1ysva5Xa\",\n      \"email\" : \"demo@zeit.co\",\n      \"id\" : \"ZspSRT4ljIEEmMHgoDwKWDei\",\n      \"username\" : \"zeit_user\"\n    },\n    \"expiresAt\" : null,\n    \"id\" : \"EmTbe5CEJyTk2yVAHBUWy4A3sRusca3GCwRjTC1bpeVnt1\",\n    \"intendedNameservers\" : [ \"a.zeit-world.co.uk\", \"c.zeit-world.org\", \"d.zeit-world.com\", \"f.zeit-world.net\" ],\n    \"name\" : \"my-zeit-domain.website\",\n    \"nameservers\" : [ \"ns1.nameserver.net\", \"ns2.nameserver.net\" ],\n    \"nsVerifiedAt\" : null,\n    \"serviceType\" : \"external\",\n    \"suffix\" : false,\n    \"txtVerifiedAt\" : null,\n    \"verificationRecord\" : \"YMc9dEJKbAncYtTqSH8dp1j5NXycfEzyjkzBJ3m3UGwR43\",\n    \"verified\" : false\n  }\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ff063a8f-9727-4b16-be85-79710b037ce9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:52.733215Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "getDomain",
          "schema" : {
            "example" : {
              "domain" : {
                "aliases" : [ ],
                "cdnEnabled" : false,
                "certs" : [ ],
                "createdAt" : 1544658552174,
                "creator" : {
                  "customerId" : "cus_COxSxT1ysva5Xa",
                  "email" : "demo@zeit.co",
                  "id" : "ZspSRT4ljIEEmMHgoDwKWDei",
                  "username" : "zeit_user"
                },
                "id" : "EmTbe5CEJyTk2yVAHBUWy4A3sRusca3GCwRjTC1bpeVnt1",
                "intendedNameservers" : [ "a.zeit-world.co.uk", "c.zeit-world.org", "d.zeit-world.com", "f.zeit-world.net" ],
                "name" : "my-zeit-domain.website",
                "nameservers" : [ "ns1.nameserver.net", "ns2.nameserver.net" ],
                "serviceType" : "external",
                "suffix" : false,
                "verificationRecord" : "YMc9dEJKbAncYtTqSH8dp1j5NXycfEzyjkzBJ3m3UGwR43",
                "verified" : false
              }
            },
            "properties" : {
              "domain" : {
                "description" : "The domain information",
                "properties" : {
                  "aliases" : {
                    "description" : "Collection of aliases where the domain is used.",
                    "items" : {
                      "properties" : {
                        "alias" : {
                          "type" : "string"
                        },
                        "created" : {
                          "type" : "integer"
                        },
                        "id" : {
                          "type" : "string"
                        }
                      },
                      "required" : [ "id", "alias", "created" ],
                      "type" : "object"
                    },
                    "type" : "array"
                  },
                  "boughtAt" : {
                    "description" : "A timestamp to tell when the domain was purchase if it was purchased with ZEIT",
                    "nullable" : true,
                    "type" : "integer"
                  },
                  "cdnEnabled" : {
                    "description" : "Wether the Cloudfare CDN is enabled for the domain or not",
                    "type" : "boolean"
                  },
                  "certs" : {
                    "description" : "Collection of certs for the domain",
                    "items" : {
                      "properties" : {
                        "cns" : {
                          "items" : {
                            "type" : "string"
                          },
                          "type" : "array"
                        },
                        "created" : {
                          "type" : "integer"
                        },
                        "id" : {
                          "type" : "string"
                        }
                      },
                      "required" : [ "id", "cns", "created" ],
                      "type" : "object"
                    },
                    "type" : "array"
                  },
                  "createdAt" : {
                    "description" : "A timestamp that shows when the domain was created",
                    "nullable" : true,
                    "type" : "integer"
                  },
                  "creator" : {
                    "description" : "Information about who added the domain",
                    "properties" : {
                      "customerId" : {
                        "type" : "string"
                      },
                      "email" : {
                        "type" : "string"
                      },
                      "id" : {
                        "type" : "string"
                      },
                      "isDomainReseller" : {
                        "type" : "boolean"
                      },
                      "username" : {
                        "type" : "string"
                      }
                    },
                    "required" : [ "id", "email", "username" ],
                    "type" : "object"
                  },
                  "expiresAt" : {
                    "description" : "The expiration date for the domain in case it's in ZEIT",
                    "nullable" : true,
                    "type" : "integer"
                  },
                  "id" : {
                    "description" : "The unique identifier of the domain.",
                    "type" : "string"
                  },
                  "intendedNameservers" : {
                    "description" : "The set of nameservers ZEIT requires the user to set to verify the domain with Nameservers",
                    "items" : {
                      "description" : "An intended nameserver for the domain",
                      "type" : "string"
                    },
                    "type" : "array"
                  },
                  "name" : {
                    "description" : "The domain name including the TLD",
                    "type" : "string"
                  },
                  "nameservers" : {
                    "description" : "The current nameservers we have detected for the domain",
                    "items" : {
                      "description" : "A nameserver the domain has set",
                      "type" : "string"
                    },
                    "type" : "array"
                  },
                  "nsVerifiedAt" : {
                    "description" : "The timestamp of the last time the domain was verified using Nameservers",
                    "nullable" : true,
                    "type" : "integer"
                  },
                  "orderedAt" : {
                    "description" : "A timestamp indicating when the domain was ordered if it was purchased with ZEIT",
                    "nullable" : true,
                    "type" : "integer"
                  },
                  "serviceType" : {
                    "description" : "Indicates the current DNS service the domain is using",
                    "enum" : [ "zeit.world", "external", "na" ],
                    "type" : "string"
                  },
                  "suffix" : {
                    "description" : "Tells if the domain is being used as a custom suffix for the user or team",
                    "type" : "boolean"
                  },
                  "transferredAt" : {
                    "description" : "If the domain was transferred to ZEIT, it indicates the timestamp for when the transfer was started",
                    "nullable" : true,
                    "type" : "integer"
                  },
                  "txtVerifiedAt" : {
                    "description" : "The timestamp of the last time the domain was verified using a TXT record",
                    "nullable" : true,
                    "type" : "integer"
                  },
                  "verificationRecord" : {
                    "description" : "Indicates the verification record that should be used to verify the domain using a TXT record",
                    "type" : "string"
                  },
                  "verified" : {
                    "description" : "Indicates if the domain ownership was already verified",
                    "type" : "boolean"
                  }
                },
                "required" : [ "boughtAt", "cdnEnabled", "createdAt", "expiresAt", "id", "intendedNameservers", "name", "nameservers", "nsVerifiedAt", "serviceType", "txtVerifiedAt", "verificationRecord", "verified", "suffix", "aliases", "certs", "creator" ],
                "type" : "object"
              }
            },
            "required" : [ "domain" ],
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 1
  }, {
    "id" : "3273309a-8019-46d6-ac78-0327ac0a7190",
    "name" : "Gets a list of domains registered for the authenticating user.",
    "request" : {
      "urlPath" : "/v4/domains",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"domains\" : [ {\n    \"boughtAt\" : 1549492066000,\n    \"cdnEnabled\" : false,\n    \"createdAt\" : 1549492062697,\n    \"expiresAt\" : 1581033599000,\n    \"id\" : \"Qmf2RSrNz5sqt6nznp4JpAyXgT6pY65qwJJn8gESt2iKoi\",\n    \"intendedNameservers\" : [ \"b.zeit-world.co.uk\", \"c.zeit-world.org\", \"e.zeit-world.com\", \"f.zeit-world.net\" ],\n    \"name\" : \"zeit.rocks\",\n    \"nameservers\" : [ \"f.zeit-world.net\", \"e.zeit-world.com\", \"b.zeit-world.co.uk\", \"c.zeit-world.org\" ],\n    \"nsVerifiedAt\" : 1549492417256,\n    \"orderedAt\" : 1549492057859,\n    \"serviceType\" : \"zeit.world\",\n    \"txtVerifiedAt\" : null,\n    \"verificationRecord\" : \"QmReErtvkKUkogSYEAFJCQVPboxRcrCygaFG8xUKinurD4\",\n    \"verified\" : true\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3273309a-8019-46d6-ac78-0327ac0a7190",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:52.732859Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "getDomains",
          "schema" : {
            "example" : {
              "domains" : [ {
                "boughtAt" : 1549492066000,
                "cdnEnabled" : false,
                "createdAt" : 1549492062697,
                "expiresAt" : 1581033599000,
                "id" : "Qmf2RSrNz5sqt6nznp4JpAyXgT6pY65qwJJn8gESt2iKoi",
                "intendedNameservers" : [ "b.zeit-world.co.uk", "c.zeit-world.org", "e.zeit-world.com", "f.zeit-world.net" ],
                "name" : "zeit.rocks",
                "nameservers" : [ "f.zeit-world.net", "e.zeit-world.com", "b.zeit-world.co.uk", "c.zeit-world.org" ],
                "nsVerifiedAt" : 1549492417256,
                "orderedAt" : 1549492057859,
                "serviceType" : "zeit.world",
                "verificationRecord" : "QmReErtvkKUkogSYEAFJCQVPboxRcrCygaFG8xUKinurD4",
                "verified" : true
              } ]
            },
            "properties" : {
              "domains" : {
                "description" : "An Array of domains for the given account",
                "items" : {
                  "properties" : {
                    "boughtAt" : {
                      "description" : "A timestamp to tell when the domain was purchase if it was purchased with ZEIT",
                      "nullable" : true,
                      "type" : "integer"
                    },
                    "cdnEnabled" : {
                      "description" : "Wether the Cloudfare CDN is enabled for the domain or not",
                      "type" : "boolean"
                    },
                    "createdAt" : {
                      "description" : "A timestamp that shows when the domain was created",
                      "nullable" : true,
                      "type" : "integer"
                    },
                    "expiresAt" : {
                      "description" : "The expiration date for the domain in case it's in ZEIT",
                      "nullable" : true,
                      "type" : "integer"
                    },
                    "id" : {
                      "description" : "The unique identifier of the domain.",
                      "type" : "string"
                    },
                    "intendedNameservers" : {
                      "description" : "The set of nameservers ZEIT requires the user to set to verify the domain with Nameservers",
                      "items" : {
                        "description" : "An intended nameserver for the domain",
                        "type" : "string"
                      },
                      "type" : "array"
                    },
                    "name" : {
                      "description" : "The domain name including the TLD",
                      "type" : "string"
                    },
                    "nameservers" : {
                      "description" : "The current nameservers we have detected for the domain",
                      "items" : {
                        "description" : "A nameserver the domain has set",
                        "type" : "string"
                      },
                      "type" : "array"
                    },
                    "nsVerifiedAt" : {
                      "description" : "The timestamp of the last time the domain was verified using Nameservers",
                      "nullable" : true,
                      "type" : "integer"
                    },
                    "orderedAt" : {
                      "description" : "A timestamp indicating when the domain was ordered if it was purchased with ZEIT",
                      "nullable" : true,
                      "type" : "integer"
                    },
                    "serviceType" : {
                      "description" : "Indicates the current DNS service the domain is using",
                      "enum" : [ "zeit.world", "external", "na" ],
                      "type" : "string"
                    },
                    "transferredAt" : {
                      "description" : "If the domain was transferred to ZEIT, it indicates the timestamp for when the transfer was started",
                      "nullable" : true,
                      "type" : "integer"
                    },
                    "txtVerifiedAt" : {
                      "description" : "The timestamp of the last time the domain was verified using a TXT record",
                      "nullable" : true,
                      "type" : "integer"
                    },
                    "verificationRecord" : {
                      "description" : "Indicates the verification record that should be used to verify the domain using a TXT record",
                      "type" : "string"
                    },
                    "verified" : {
                      "description" : "Indicates if the domain ownership was already verified",
                      "type" : "boolean"
                    }
                  },
                  "required" : [ "boughtAt", "cdnEnabled", "createdAt", "expiresAt", "id", "intendedNameservers", "name", "nameservers", "nsVerifiedAt", "serviceType", "txtVerifiedAt", "verificationRecord", "verified" ],
                  "type" : "object"
                },
                "type" : "array"
              }
            },
            "required" : [ "domains" ],
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 2
  }, {
    "id" : "db315675-25fe-4ac8-ac4d-c105046fa725",
    "name" : "Remove a webhook by id - 204",
    "request" : {
      "urlPath" : "/v1/integrations/webhooks/:id",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 204
    },
    "uuid" : "db315675-25fe-4ac8-ac4d-c105046fa725",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:52.732662Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "deleteWebhooks"
        }
      }
    },
    "insertionIndex" : 3
  }, {
    "id" : "3756669e-0b3b-4a30-8d55-4dc756948b59",
    "name" : "Create a new webhook",
    "request" : {
      "urlPath" : "/v1/integrations/webhooks",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"createdAt\" : 7117249409820883854,\n  \"name\" : \"Blanca Conn\",\n  \"configurationId\" : \"919e\",\n  \"id\" : \"9107\",\n  \"ownerId\" : \"fv7t\",\n  \"events\" : [ \"vi213ecrb5ycpfb5zgzgr1m7p2w1r68wqkf8z5k69mh5fkdm355mg6umxscmuhxso5i97hzd7rzk94ugjryzrgtzitdxcwjfkybcx0gy9p8brki1o8rd2h97p2jxv\", \"ekxa1ut6a0\" ],\n  \"url\" : \"https://web.example.mocklab.io/055354\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3756669e-0b3b-4a30-8d55-4dc756948b59",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:52.732633Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "createWebhook",
          "schema" : {
            "description" : "A webhook subscription with an URL where ZEIT will POST events.",
            "properties" : {
              "configurationId" : {
                "description" : "An id that corresponds to the configuration that generated the token that was used to create the webhook",
                "type" : "string"
              },
              "createdAt" : {
                "description" : "Timestamp that tells when was the webhook created",
                "type" : "integer"
              },
              "events" : {
                "description" : "An array with the event identifiers that the webhook can receive",
                "items" : {
                  "type" : "string"
                },
                "type" : "array"
              },
              "id" : {
                "description" : "Id of the webhook",
                "type" : "string"
              },
              "name" : {
                "description" : "A name for the webhook that serves as a canonical description",
                "type" : "string"
              },
              "ownerId" : {
                "description" : "Id of the owner which can be a user or a team",
                "type" : "string"
              },
              "url" : {
                "description" : "The URL where the POST request will be sent",
                "type" : "string"
              }
            },
            "required" : [ "id", "url", "name", "events", "onwerId", "createdAt", "configurationId" ]
          }
        }
      }
    },
    "insertionIndex" : 4
  }, {
    "id" : "0ee726e9-25b5-492e-80e8-cacc8746de72",
    "name" : "Get a list of existent webhooks",
    "request" : {
      "urlPath" : "/v1/integrations/webhooks",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "[ {\n  \"createdAt\" : 5781073155324443357,\n  \"name\" : \"Johnathon Hoeger\",\n  \"configurationId\" : \"rg5j\",\n  \"id\" : \"jn7x\",\n  \"ownerId\" : \"cpd8\",\n  \"events\" : [ \"5f9olly1qsf3lp4zig74nw0w8kzzaq7ikmj7vww87beynqk5mtahsbqg9co74i334ytllxblptas7qudo10gd4nbp0004g4rm7g55drnybn6m2lv6btvmhfkuir8grs0c8jkr54y4vx84\", \"a4xwxlzvs0okoyhgndjewxumwjwjkh2xrfhi0v0wipbwomd5rv8kfpasulcqwmprk6c\", \"syec0e1kt0botg44pfq83crmggyddrndrjlc1efzefay42fmtd85osuokl7d5d59kfwkj7fo5zi1cllic5thnyq509npa3pi7v3x\", \"0fus4yt1q\", \"kgqzttmajw3dv\", \"t8ztiwvzkd35nzva83i03nmycxpo87jkb4mlrwkdhllqjupqmh0l9t6az89lntjpeu5bvlwdv0sji8bzn3psvzru2z51voszpogcd8fl2cpvhxluxrd5mwhkj2c86s4t54oe20duujvvgpvnubi4ik\", \"z1ydg1qamsbr4lwl85admd2ts0iqtcsiibbsby8bhde3wg04k7mmy536cctvfhf3cap5t29knz3\" ],\n  \"url\" : \"https://web.example.mocklab.io/443396\"\n}, {\n  \"createdAt\" : 1765773862560107080,\n  \"name\" : \"Season Blick\",\n  \"configurationId\" : \"ly0o\",\n  \"id\" : \"g958\",\n  \"ownerId\" : \"9w6j\",\n  \"events\" : [ \"khthjtkwqwc8w148tm9djg986sz44jasg046abk35vln9yey0hmxgnnjmf0km2hfvzgji1ugrbrlk3uz3udlv5ei7w47vfdu0e822jiegzm4tub22kjf5hpt9tnv4wqaqxkqnmlq4x26iqjct0ip5zh\", \"d23hp8iym52bq8x6vhn2sklisgthruhqjheq0wl0ln8dryqzem4kqu9jzbjnwsc46uwb38ru6bndux4ru00lsm3iav00q2bzyd5dctqek7ixgyor9d5wcsws4vf5gzxghijihiy0ox6f7g1ufu8x0dzoy0tter6zmt8o87d61zn5po317otkuckoobmkk\", \"l02uhupyzaysbjq9cqp9bw2bsf8lgl1og96pwc\" ],\n  \"url\" : \"https://web.example.mocklab.io/552578\"\n}, {\n  \"createdAt\" : 7174299378547566006,\n  \"name\" : \"Eugenie MacGyver IV\",\n  \"configurationId\" : \"e778\",\n  \"id\" : \"w8y4\",\n  \"ownerId\" : \"wua1\",\n  \"events\" : [ \"y0md0awcru81h9gxonb5iclss968iu1u5zpsbcvdxs3cveelbphycffpq5x83p69u9bb44l\", \"x0sulsnxfc9p6ucackadwiuae845dlfkwf0hmloqrnnbzg0rtrhgesnlihbdw9gipu8wqkmpj27m4\", \"t4u2y2t0vtcr0027zc91qbsio9v2uihc72l65nv9nw1xsfure5gl5z0oa92at\", \"btgvxb0idyktgq5c1fx2lw4n9onikmqwafe3p3kv0\", \"kjw0t4wzgyqoh3sltxuuezgsh8t652oabv47hig1p14b77w1j9abwxw9ivklzo83dtt7s2guf8lj54ktae6jxzg7hn88fapufal4zmq\", \"4qn7yqbubrcfxll34djje1pjlhvxrwhzlx64sx6f0aa5anrhmryfi0mubkrreukeefqwsdg87euv4ahn3ykzol2pw9kfbvi87s2ik82bsi8xlinhefclr8r255482b2z5ackbcv3jq8rfj2k4h3bz5lxursbk\" ],\n  \"url\" : \"https://web.example.mocklab.io/449970\"\n} ]",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0ee726e9-25b5-492e-80e8-cacc8746de72",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:52.732193Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "getWebhooks",
          "schema" : {
            "description" : "An Array of webhooks for the given account",
            "items" : {
              "$ref" : "#/components/schemas/webhook"
            },
            "type" : "array"
          }
        }
      }
    },
    "insertionIndex" : 5
  } ]
}