{
  "mappings" : [ {
    "id" : "6297d41a-0656-415f-9eda-e9b0d894d48d",
    "name" : "Get a domain for the authenticated user by name",
    "request" : {
      "urlPath" : "/v4/domains/Virgilio+Borer",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"error\" : {\n    \"code\" : \"not_found\",\n    \"message\" : \"The domain with name zeit.rocks could not be found\",\n    \"name\" : \"zeit.rocks\"\n  }\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6297d41a-0656-415f-9eda-e9b0d894d48d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T12:20:18.955004Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "getDomain",
          "schema" : {
            "example" : {
              "error" : {
                "code" : "not_found",
                "message" : "The domain with name zeit.rocks could not be found",
                "name" : "zeit.rocks"
              }
            },
            "properties" : {
              "error" : {
                "properties" : {
                  "code" : {
                    "enum" : [ "not_found" ],
                    "type" : "string"
                  },
                  "message" : {
                    "type" : "string"
                  },
                  "name" : {
                    "type" : "string"
                  }
                },
                "required" : [ "code", "message", "name" ],
                "type" : "object"
              }
            },
            "required" : [ "error" ],
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 0
  }, {
    "id" : "2a90f3b5-9ad9-4831-833a-187d56f74200",
    "name" : "Get a domain for the authenticated user by name",
    "request" : {
      "urlPath" : "/v4/domains/Rosario+Boehm",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"domain\" : {\n    \"aliases\" : [ ],\n    \"boughtAt\" : null,\n    \"cdnEnabled\" : false,\n    \"certs\" : [ ],\n    \"createdAt\" : 1544658552174,\n    \"creator\" : {\n      \"customerId\" : \"cus_COxSxT1ysva5Xa\",\n      \"email\" : \"demo@zeit.co\",\n      \"id\" : \"ZspSRT4ljIEEmMHgoDwKWDei\",\n      \"username\" : \"zeit_user\"\n    },\n    \"expiresAt\" : null,\n    \"id\" : \"EmTbe5CEJyTk2yVAHBUWy4A3sRusca3GCwRjTC1bpeVnt1\",\n    \"intendedNameservers\" : [ \"a.zeit-world.co.uk\", \"c.zeit-world.org\", \"d.zeit-world.com\", \"f.zeit-world.net\" ],\n    \"name\" : \"my-zeit-domain.website\",\n    \"nameservers\" : [ \"ns1.nameserver.net\", \"ns2.nameserver.net\" ],\n    \"nsVerifiedAt\" : null,\n    \"serviceType\" : \"external\",\n    \"suffix\" : false,\n    \"txtVerifiedAt\" : null,\n    \"verificationRecord\" : \"YMc9dEJKbAncYtTqSH8dp1j5NXycfEzyjkzBJ3m3UGwR43\",\n    \"verified\" : false\n  }\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2a90f3b5-9ad9-4831-833a-187d56f74200",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T12:20:18.954876Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "getDomain",
          "schema" : {
            "example" : {
              "domain" : {
                "aliases" : [ ],
                "cdnEnabled" : false,
                "certs" : [ ],
                "createdAt" : 1544658552174,
                "creator" : {
                  "customerId" : "cus_COxSxT1ysva5Xa",
                  "email" : "demo@zeit.co",
                  "id" : "ZspSRT4ljIEEmMHgoDwKWDei",
                  "username" : "zeit_user"
                },
                "id" : "EmTbe5CEJyTk2yVAHBUWy4A3sRusca3GCwRjTC1bpeVnt1",
                "intendedNameservers" : [ "a.zeit-world.co.uk", "c.zeit-world.org", "d.zeit-world.com", "f.zeit-world.net" ],
                "name" : "my-zeit-domain.website",
                "nameservers" : [ "ns1.nameserver.net", "ns2.nameserver.net" ],
                "serviceType" : "external",
                "suffix" : false,
                "verificationRecord" : "YMc9dEJKbAncYtTqSH8dp1j5NXycfEzyjkzBJ3m3UGwR43",
                "verified" : false
              }
            },
            "properties" : {
              "domain" : {
                "description" : "The domain information",
                "properties" : {
                  "aliases" : {
                    "description" : "Collection of aliases where the domain is used.",
                    "items" : {
                      "properties" : {
                        "alias" : {
                          "type" : "string"
                        },
                        "created" : {
                          "type" : "integer"
                        },
                        "id" : {
                          "type" : "string"
                        }
                      },
                      "required" : [ "id", "alias", "created" ],
                      "type" : "object"
                    },
                    "type" : "array"
                  },
                  "boughtAt" : {
                    "description" : "A timestamp to tell when the domain was purchase if it was purchased with ZEIT",
                    "nullable" : true,
                    "type" : "integer"
                  },
                  "cdnEnabled" : {
                    "description" : "Wether the Cloudfare CDN is enabled for the domain or not",
                    "type" : "boolean"
                  },
                  "certs" : {
                    "description" : "Collection of certs for the domain",
                    "items" : {
                      "properties" : {
                        "cns" : {
                          "items" : {
                            "type" : "string"
                          },
                          "type" : "array"
                        },
                        "created" : {
                          "type" : "integer"
                        },
                        "id" : {
                          "type" : "string"
                        }
                      },
                      "required" : [ "id", "cns", "created" ],
                      "type" : "object"
                    },
                    "type" : "array"
                  },
                  "createdAt" : {
                    "description" : "A timestamp that shows when the domain was created",
                    "nullable" : true,
                    "type" : "integer"
                  },
                  "creator" : {
                    "description" : "Information about who added the domain",
                    "properties" : {
                      "customerId" : {
                        "type" : "string"
                      },
                      "email" : {
                        "type" : "string"
                      },
                      "id" : {
                        "type" : "string"
                      },
                      "isDomainReseller" : {
                        "type" : "boolean"
                      },
                      "username" : {
                        "type" : "string"
                      }
                    },
                    "required" : [ "id", "email", "username" ],
                    "type" : "object"
                  },
                  "expiresAt" : {
                    "description" : "The expiration date for the domain in case it's in ZEIT",
                    "nullable" : true,
                    "type" : "integer"
                  },
                  "id" : {
                    "description" : "The unique identifier of the domain.",
                    "type" : "string"
                  },
                  "intendedNameservers" : {
                    "description" : "The set of nameservers ZEIT requires the user to set to verify the domain with Nameservers",
                    "items" : {
                      "description" : "An intended nameserver for the domain",
                      "type" : "string"
                    },
                    "type" : "array"
                  },
                  "name" : {
                    "description" : "The domain name including the TLD",
                    "type" : "string"
                  },
                  "nameservers" : {
                    "description" : "The current nameservers we have detected for the domain",
                    "items" : {
                      "description" : "A nameserver the domain has set",
                      "type" : "string"
                    },
                    "type" : "array"
                  },
                  "nsVerifiedAt" : {
                    "description" : "The timestamp of the last time the domain was verified using Nameservers",
                    "nullable" : true,
                    "type" : "integer"
                  },
                  "orderedAt" : {
                    "description" : "A timestamp indicating when the domain was ordered if it was purchased with ZEIT",
                    "nullable" : true,
                    "type" : "integer"
                  },
                  "serviceType" : {
                    "description" : "Indicates the current DNS service the domain is using",
                    "enum" : [ "zeit.world", "external", "na" ],
                    "type" : "string"
                  },
                  "suffix" : {
                    "description" : "Tells if the domain is being used as a custom suffix for the user or team",
                    "type" : "boolean"
                  },
                  "transferredAt" : {
                    "description" : "If the domain was transferred to ZEIT, it indicates the timestamp for when the transfer was started",
                    "nullable" : true,
                    "type" : "integer"
                  },
                  "txtVerifiedAt" : {
                    "description" : "The timestamp of the last time the domain was verified using a TXT record",
                    "nullable" : true,
                    "type" : "integer"
                  },
                  "verificationRecord" : {
                    "description" : "Indicates the verification record that should be used to verify the domain using a TXT record",
                    "type" : "string"
                  },
                  "verified" : {
                    "description" : "Indicates if the domain ownership was already verified",
                    "type" : "boolean"
                  }
                },
                "required" : [ "boughtAt", "cdnEnabled", "createdAt", "expiresAt", "id", "intendedNameservers", "name", "nameservers", "nsVerifiedAt", "serviceType", "txtVerifiedAt", "verificationRecord", "verified", "suffix", "aliases", "certs", "creator" ],
                "type" : "object"
              }
            },
            "required" : [ "domain" ],
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 1
  }, {
    "id" : "afcaa3e4-bd1a-4d79-bac7-47b57aed4b4a",
    "name" : "Gets a list of domains registered for the authenticating user.",
    "request" : {
      "urlPath" : "/v4/domains",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"domains\" : [ {\n    \"boughtAt\" : 1549492066000,\n    \"cdnEnabled\" : false,\n    \"createdAt\" : 1549492062697,\n    \"expiresAt\" : 1581033599000,\n    \"id\" : \"Qmf2RSrNz5sqt6nznp4JpAyXgT6pY65qwJJn8gESt2iKoi\",\n    \"intendedNameservers\" : [ \"b.zeit-world.co.uk\", \"c.zeit-world.org\", \"e.zeit-world.com\", \"f.zeit-world.net\" ],\n    \"name\" : \"zeit.rocks\",\n    \"nameservers\" : [ \"f.zeit-world.net\", \"e.zeit-world.com\", \"b.zeit-world.co.uk\", \"c.zeit-world.org\" ],\n    \"nsVerifiedAt\" : 1549492417256,\n    \"orderedAt\" : 1549492057859,\n    \"serviceType\" : \"zeit.world\",\n    \"txtVerifiedAt\" : null,\n    \"verificationRecord\" : \"QmReErtvkKUkogSYEAFJCQVPboxRcrCygaFG8xUKinurD4\",\n    \"verified\" : true\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "afcaa3e4-bd1a-4d79-bac7-47b57aed4b4a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T12:20:18.95451Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "getDomains",
          "schema" : {
            "example" : {
              "domains" : [ {
                "boughtAt" : 1549492066000,
                "cdnEnabled" : false,
                "createdAt" : 1549492062697,
                "expiresAt" : 1581033599000,
                "id" : "Qmf2RSrNz5sqt6nznp4JpAyXgT6pY65qwJJn8gESt2iKoi",
                "intendedNameservers" : [ "b.zeit-world.co.uk", "c.zeit-world.org", "e.zeit-world.com", "f.zeit-world.net" ],
                "name" : "zeit.rocks",
                "nameservers" : [ "f.zeit-world.net", "e.zeit-world.com", "b.zeit-world.co.uk", "c.zeit-world.org" ],
                "nsVerifiedAt" : 1549492417256,
                "orderedAt" : 1549492057859,
                "serviceType" : "zeit.world",
                "verificationRecord" : "QmReErtvkKUkogSYEAFJCQVPboxRcrCygaFG8xUKinurD4",
                "verified" : true
              } ]
            },
            "properties" : {
              "domains" : {
                "description" : "An Array of domains for the given account",
                "items" : {
                  "properties" : {
                    "boughtAt" : {
                      "description" : "A timestamp to tell when the domain was purchase if it was purchased with ZEIT",
                      "nullable" : true,
                      "type" : "integer"
                    },
                    "cdnEnabled" : {
                      "description" : "Wether the Cloudfare CDN is enabled for the domain or not",
                      "type" : "boolean"
                    },
                    "createdAt" : {
                      "description" : "A timestamp that shows when the domain was created",
                      "nullable" : true,
                      "type" : "integer"
                    },
                    "expiresAt" : {
                      "description" : "The expiration date for the domain in case it's in ZEIT",
                      "nullable" : true,
                      "type" : "integer"
                    },
                    "id" : {
                      "description" : "The unique identifier of the domain.",
                      "type" : "string"
                    },
                    "intendedNameservers" : {
                      "description" : "The set of nameservers ZEIT requires the user to set to verify the domain with Nameservers",
                      "items" : {
                        "description" : "An intended nameserver for the domain",
                        "type" : "string"
                      },
                      "type" : "array"
                    },
                    "name" : {
                      "description" : "The domain name including the TLD",
                      "type" : "string"
                    },
                    "nameservers" : {
                      "description" : "The current nameservers we have detected for the domain",
                      "items" : {
                        "description" : "A nameserver the domain has set",
                        "type" : "string"
                      },
                      "type" : "array"
                    },
                    "nsVerifiedAt" : {
                      "description" : "The timestamp of the last time the domain was verified using Nameservers",
                      "nullable" : true,
                      "type" : "integer"
                    },
                    "orderedAt" : {
                      "description" : "A timestamp indicating when the domain was ordered if it was purchased with ZEIT",
                      "nullable" : true,
                      "type" : "integer"
                    },
                    "serviceType" : {
                      "description" : "Indicates the current DNS service the domain is using",
                      "enum" : [ "zeit.world", "external", "na" ],
                      "type" : "string"
                    },
                    "transferredAt" : {
                      "description" : "If the domain was transferred to ZEIT, it indicates the timestamp for when the transfer was started",
                      "nullable" : true,
                      "type" : "integer"
                    },
                    "txtVerifiedAt" : {
                      "description" : "The timestamp of the last time the domain was verified using a TXT record",
                      "nullable" : true,
                      "type" : "integer"
                    },
                    "verificationRecord" : {
                      "description" : "Indicates the verification record that should be used to verify the domain using a TXT record",
                      "type" : "string"
                    },
                    "verified" : {
                      "description" : "Indicates if the domain ownership was already verified",
                      "type" : "boolean"
                    }
                  },
                  "required" : [ "boughtAt", "cdnEnabled", "createdAt", "expiresAt", "id", "intendedNameservers", "name", "nameservers", "nsVerifiedAt", "serviceType", "txtVerifiedAt", "verificationRecord", "verified" ],
                  "type" : "object"
                },
                "type" : "array"
              }
            },
            "required" : [ "domains" ],
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 2
  }, {
    "id" : "4d7dcb93-26bf-4515-a2e3-e5262d88aad0",
    "name" : "Remove a webhook by id - 204",
    "request" : {
      "urlPath" : "/v1/integrations/webhooks/:id",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 204
    },
    "uuid" : "4d7dcb93-26bf-4515-a2e3-e5262d88aad0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T12:20:18.954311Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "deleteWebhooks"
        }
      }
    },
    "insertionIndex" : 3
  }, {
    "id" : "934d449a-10c7-4dbc-a8a8-bcea3e3c8563",
    "name" : "Create a new webhook",
    "request" : {
      "urlPath" : "/v1/integrations/webhooks",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"createdAt\" : 5688825883837132747,\n  \"name\" : \"Lacy Lynch\",\n  \"configurationId\" : \"m9t6\",\n  \"id\" : \"44i5\",\n  \"ownerId\" : \"827p\",\n  \"events\" : [ \"lmqhz7aehbmdt3xwf\", \"77fj4s8vm7os59midmqqpz8wdczkxvqalstr8ept87dnc8of0kl1ag6ti7y85oy8bl5ynq9i0nu69jbgr8c23o13buek6dwo31ohfs897py7i1psdejs4d6phfvu\" ],\n  \"url\" : \"https://web.example.mocklab.io/832950\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "934d449a-10c7-4dbc-a8a8-bcea3e3c8563",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T12:20:18.954265Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "createWebhook",
          "schema" : {
            "description" : "A webhook subscription with an URL where ZEIT will POST events.",
            "properties" : {
              "configurationId" : {
                "description" : "An id that corresponds to the configuration that generated the token that was used to create the webhook",
                "type" : "string"
              },
              "createdAt" : {
                "description" : "Timestamp that tells when was the webhook created",
                "type" : "integer"
              },
              "events" : {
                "description" : "An array with the event identifiers that the webhook can receive",
                "items" : {
                  "type" : "string"
                },
                "type" : "array"
              },
              "id" : {
                "description" : "Id of the webhook",
                "type" : "string"
              },
              "name" : {
                "description" : "A name for the webhook that serves as a canonical description",
                "type" : "string"
              },
              "ownerId" : {
                "description" : "Id of the owner which can be a user or a team",
                "type" : "string"
              },
              "url" : {
                "description" : "The URL where the POST request will be sent",
                "type" : "string"
              }
            },
            "required" : [ "id", "url", "name", "events", "onwerId", "createdAt", "configurationId" ]
          }
        }
      }
    },
    "insertionIndex" : 4
  }, {
    "id" : "52e8ca31-1192-4780-a12c-eecc85eed4d5",
    "name" : "Get a list of existent webhooks",
    "request" : {
      "urlPath" : "/v1/integrations/webhooks",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "[ {\n  \"createdAt\" : 7574579736103256848,\n  \"name\" : \"Bertram Gulgowski MD\",\n  \"configurationId\" : \"m5rf\",\n  \"id\" : \"5xf1\",\n  \"ownerId\" : \"s3of\",\n  \"events\" : [ \"53iiv2bdelhbatyhx1xxr9c93jscjn75v\", \"zv28z4d0ka5ukc0vzn546fehvktqamn60sizlnx5kymeuwzzvymsfnw7x65r36rsxy1cbsz9e8f9yquvzgwcyane4x0q2bh84t0kgf7cygd8jjfwyh1snqh6r0y6hxcm82ua6bd25zfzkio4de3d2dsvqbfkrfcyufw3fa9z68z5fx\", \"21isjsmf7fjww9s4jc90tgfcew6qh9lz9dfznrteg2tncc6c3w65z4de60f8sd5cy6xb7dsisrh14atc9gmhqw\", \"9zd5zy7gopug6389gznet8znd73lq41uden6fzbl5nq8ga9xm2k62k8ieat5wudrqthbfu54s8unvb1av03rej1z4ed1dwqxdvmxnv6jpbzv4j4noh3dnb2t6dowxn5uxte7bm9\", \"3e7li87hu0d3lzfcntiakbsa1slvrpuhrl8x3qoe2u1t9qiylx32dam10zglsmij4ih2fr6xmnr1n9s7hk1ixme5eo9dt5bxsda1h7v7ngp4dtq0e9mxib923y1hoyudjr7iyqf7hpoqykv8pm8p\", \"62udncku0jkmewd2rahqm72di57bgune8xz7km7q1ejyx5s1yt7asw79weefws5zs993srrfayhtv2ncla7v7i0jkdfpm0d3ngmh86i462t3m1tigtggrgicdvs82x2z8f0iy03q5f04sla\" ],\n  \"url\" : \"https://web.example.mocklab.io/029928\"\n}, {\n  \"createdAt\" : 6023975305873948908,\n  \"name\" : \"Sadye Bergnaum\",\n  \"configurationId\" : \"afp4\",\n  \"id\" : \"w76g\",\n  \"ownerId\" : \"m748\",\n  \"events\" : [ \"63tcl3g4v390orgh\", \"wkdnqgd81i8ddtv9y118g4jrt75tsab6n1cwlaqpqgvg0flklrmuz0yvsvlhye812xkrihsyhz9moer6676ocyuhjpdb3x8dul6d374a9ml\" ],\n  \"url\" : \"https://web.example.mocklab.io/420650\"\n}, {\n  \"createdAt\" : 7007947751525620656,\n  \"name\" : \"Dr. Oswaldo Aufderhar\",\n  \"configurationId\" : \"x877\",\n  \"id\" : \"t8vb\",\n  \"ownerId\" : \"4tb0\",\n  \"events\" : [ \"75nkaylpfam0etu5n7e75vmbwlsd4ro8ebzm6vyezaj78bbu94fzpeh\", \"lverke1gco7l1rneiwjf09x6iq05cprmg9bxgngt1tqfijn0gvw2ek1724ebvfofuw6b8z0wesam4gyqklxguhnulo5oxv17dahdhhmu0s0ffcj416kgci2ljoolu8rd7tighemsqp9dsrnv1czztwgp3rn1fbmk5w7zzefkybzgtv1ly\", \"p68apa0rsrv274jdxn62yf7sqkdugmtsdpwqsbggzvwu8i6crhckjbvsplowvkiobjh30udwq22izb8fl449wzqd0lziso23ivm4fjfnjmin2ysamsfp95g0f6twefj4ub8f3pbfilgewjv7ec1o6zudg8oax7w086r46o3y4p4ktzwsfyqq8533g56\" ],\n  \"url\" : \"https://web.example.mocklab.io/796724\"\n}, {\n  \"createdAt\" : 7387638386277166226,\n  \"name\" : \"Chester Brown\",\n  \"configurationId\" : \"329n\",\n  \"id\" : \"6b63\",\n  \"ownerId\" : \"2kq0\",\n  \"events\" : [ \"3dqm4jzc1sz3llza344t1y6gg413y9g35qx4jffl8u5ufl4li3sxhn93h2omi1lm6gjqyqr7k9i5bhyiupl98ltdk8oje60ymf8a90hzk6zh\", \"mnkizsc38grbx68nchh6p3xxqx7nit64sqqzn94\" ],\n  \"url\" : \"https://web.example.mocklab.io/954080\"\n}, {\n  \"createdAt\" : 3756890139278048024,\n  \"name\" : \"Evalyn Farrell\",\n  \"configurationId\" : \"2v85\",\n  \"id\" : \"54t2\",\n  \"ownerId\" : \"2om5\",\n  \"events\" : [ \"fjkrj7q4x1djtxaog7jjaeswos6mwcz8r\", \"bntjs1ww16k56w3f4zf5qqoopla1ig4tmd5roz0e4voj471hje9olerjo6pwi0ijueqeae\", \"n1030lq2wfcnpcr8aplwk6gadm1k751q0227tj7puztqjgi69k3v9qvz2ic5b91dbeqy4zbuiw2x5v8u8n2caf6g\" ],\n  \"url\" : \"https://web.example.mocklab.io/907876\"\n}, {\n  \"createdAt\" : 927458792206220509,\n  \"name\" : \"Sanford Murray\",\n  \"configurationId\" : \"2633\",\n  \"id\" : \"g6ey\",\n  \"ownerId\" : \"5007\",\n  \"events\" : [ \"t1nwo4hvvowojfbub0z5h6fsk0lqjw6kav4mz9ts1y74egy9miig0y8rpqoi08eet4p\", \"ekz86j4dxtezz6tx9hsgtdfier34kpbbu7nycdcm0pie1rx1e7ovd6khjxapsmw21xqhy9yurhpi4a\", \"beo1gpw5jp3tzwynulgwainxf6mk21xfvarhjt2iiame4q3hfely8d2qzn3wi84g3tmli78w5n\", \"t5h0myif91c7vs742kuyk32qmkrjwxks5rm37zojty6j130qd4nglys3w3ckprrod3kq25yr24e9y5qq3gu9c963piwjox01pw6x0d6ood7ojhf0u7srfzm6y5ze8gfpxqc8puy9o4mckj\", \"70ejjf01t6bhx2wicu8vlkxq57ubbr9o66x0fjv9rt2blpq82hsby78966zrrz5i3v6xdl9x0sxmbokpbib2uxx94n9apdmq1gxh8hxqzkc65aaxfcvqx8ftx7dkfgews5j6mwhy4527l7152o8ox352fljsacjvppbeg4c0zug04zn09\" ],\n  \"url\" : \"https://web.example.mocklab.io/707564\"\n}, {\n  \"createdAt\" : 8755403995766228214,\n  \"name\" : \"Jarrod O'Hara\",\n  \"configurationId\" : \"i0j3\",\n  \"id\" : \"0otc\",\n  \"ownerId\" : \"wu9b\",\n  \"events\" : [ \"fkmxqboxvw2ebotf08z3p7giytzy87r0jkbmg1r9u0lthmhpurd56oxoacvuohzi41htyy7acfezjkqio5oypu4hixf264h8vdshj539o9m\", \"9crnkif7m278v0urongn6ia1wufsl9ofhoyjgjxwqzz0ppjns1etl2uw3k6q6mgbjoobkk2il41aqzsftg6qm5mvrmwoievfvknh8uey72s1buhphyte6zqhzytuaiv49nicc0xwri4722t1q19olmwj9pp0hksx5vxg16qbbyxzikx0uxoydcq4rbc\", \"q2xzc3vhqlc94m1p9dqak5v\", \"wkauuuyv3hyhhmu7vxbwk09v3d6jaijv400qxeeqqr2yf4pgi5whlolw4njhgr0ekxdxn93xajl3gix2cglavoge462e1xkwgcsymnlg7eo4gif8j7j1a8qmzylcmhp77c1v8qgy5flhwm7rsew19ceskv2p52lu7nsn98bossyas94urtq988xu5c0bqs4nff11\" ],\n  \"url\" : \"https://web.example.mocklab.io/201947\"\n}, {\n  \"createdAt\" : 4454432676255729858,\n  \"name\" : \"Dottie Stroman II\",\n  \"configurationId\" : \"o3pi\",\n  \"id\" : \"zr6e\",\n  \"ownerId\" : \"xi23\",\n  \"events\" : [ \"i63iu4766l6jjud6r1ryzfyqsca\" ],\n  \"url\" : \"https://web.example.mocklab.io/304947\"\n} ]",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "52e8ca31-1192-4780-a12c-eecc85eed4d5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T12:20:18.953297Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "getWebhooks",
          "schema" : {
            "description" : "An Array of webhooks for the given account",
            "items" : {
              "$ref" : "#/components/schemas/webhook"
            },
            "type" : "array"
          }
        }
      }
    },
    "insertionIndex" : 5
  } ]
}