{
  "mappings" : [ {
    "id" : "d685a2f2-bde2-339e-b350-6aecdf3c38a6",
    "name" : "Get Transcript By Id (application/problem+json)",
    "request" : {
      "urlPath" : "/jobs/1u0y/transcript",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/problem+json"
        }
      }
    },
    "response" : {
      "status" : 409,
      "body" : "{\n  \"allowed_values\" : [ \"transcribed\" ],\n  \"current_value\" : \"in_progress\",\n  \"detail\" : \"Job is in progress or failed\",\n  \"status\" : 409,\n  \"title\" : \"Job is in invalid state\",\n  \"type\" : \"https://rev.ai/api/v1/errors/invalid-job-state\"\n}",
      "headers" : {
        "Content-Type" : "application/problem+json"
      }
    },
    "uuid" : "d685a2f2-bde2-339e-b350-6aecdf3c38a6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "GetTranscriptById",
          "schema" : {
            "allOf" : [ {
              "description" : "Problem details object returned on errors",
              "properties" : {
                "status" : {
                  "description" : "HTTP status code of the error",
                  "type" : "integer"
                },
                "title" : {
                  "description" : "Short, human-readable summary of the problem type",
                  "type" : "string"
                },
                "type" : {
                  "description" : "URI that identifies the problem",
                  "type" : "string"
                }
              },
              "type" : "object"
            }, {
              "properties" : {
                "allowed_values" : {
                  "description" : "Allowed values for this request",
                  "items" : {
                    "type" : "string"
                  },
                  "type" : "array"
                },
                "current_value" : {
                  "description" : "Value passed in given request",
                  "type" : "string"
                },
                "detail" : {
                  "description" : "Human-readable explanation specific to this occurrence of the problem",
                  "type" : "string"
                }
              },
              "type" : "object"
            } ]
          }
        }
      }
    },
    "insertionIndex" : 0
  }, {
    "id" : "029b763c-6fc4-3fd2-a96c-9ecbb462c2b3",
    "name" : "Get Transcript By Id (application/problem+json)",
    "request" : {
      "urlPath" : "/jobs/9ojl/transcript",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/problem+json"
        }
      }
    },
    "response" : {
      "status" : 406,
      "body" : "{\n  \"allowed_values\" : [ \"text/plain\", \"application/vnd.rev.transcript.v1.0+json\" ],\n  \"current_value\" : \"*/*\",\n  \"detail\" : \"Unsupported value */*\",\n  \"status\" : 406,\n  \"title\" : \"Output format is not supported\",\n  \"type\" : \"https://www.rev.ai/api/v1/errors/unsupported-output-format\"\n}",
      "headers" : {
        "Content-Type" : "application/problem+json"
      }
    },
    "uuid" : "029b763c-6fc4-3fd2-a96c-9ecbb462c2b3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "GetTranscriptById",
          "schema" : {
            "allOf" : [ {
              "description" : "Problem details object returned on errors",
              "properties" : {
                "status" : {
                  "description" : "HTTP status code of the error",
                  "type" : "integer"
                },
                "title" : {
                  "description" : "Short, human-readable summary of the problem type",
                  "type" : "string"
                },
                "type" : {
                  "description" : "URI that identifies the problem",
                  "type" : "string"
                }
              },
              "type" : "object"
            }, {
              "properties" : {
                "allowed_values" : {
                  "description" : "Allowed values for this request",
                  "items" : {
                    "type" : "string"
                  },
                  "type" : "array"
                },
                "current_value" : {
                  "description" : "Value passed in given request",
                  "type" : "string"
                },
                "detail" : {
                  "description" : "Human-readable explanation specific to this occurrence of the problem",
                  "type" : "string"
                }
              },
              "type" : "object"
            } ]
          }
        }
      }
    },
    "insertionIndex" : 1
  }, {
    "id" : "4a7acfcf-3e4b-3d65-b5e8-f75e5b59002f",
    "name" : "Get Transcript By Id (application/problem+json)",
    "request" : {
      "urlPath" : "/jobs/ctop/transcript",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/problem+json"
        }
      }
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"status\" : 404,\n  \"title\" : \"could not find job\",\n  \"type\" : \"https://www.rev.ai/api/v1/errors/job-not-found\"\n}",
      "headers" : {
        "Content-Type" : "application/problem+json"
      }
    },
    "uuid" : "4a7acfcf-3e4b-3d65-b5e8-f75e5b59002f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "GetTranscriptById",
          "schema" : {
            "description" : "Problem details object returned on errors",
            "properties" : {
              "status" : {
                "description" : "HTTP status code of the error",
                "type" : "integer"
              },
              "title" : {
                "description" : "Short, human-readable summary of the problem type",
                "type" : "string"
              },
              "type" : {
                "description" : "URI that identifies the problem",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 2
  }, {
    "id" : "8d1893e0-ba4b-393a-9238-4f20fa82aefd",
    "name" : "Get Transcript By Id - 401",
    "request" : {
      "urlPath" : "/jobs/vg9f/transcript",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "8d1893e0-ba4b-393a-9238-4f20fa82aefd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "GetTranscriptById"
        }
      }
    },
    "insertionIndex" : 3
  }, {
    "id" : "3acc6c1b-6918-30e9-b5e5-ff7d027b4910",
    "name" : "Get Transcript By Id (text/plain)",
    "request" : {
      "urlPath" : "/jobs/q317/transcript",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "text/plain"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "text/plain"
      }
    },
    "uuid" : "3acc6c1b-6918-30e9-b5e5-ff7d027b4910",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "GetTranscriptById",
          "schema" : {
            "description" : "Transcript in plain text format",
            "x-content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "insertionIndex" : 4
  }, {
    "id" : "7708c3a7-ac68-3a84-8840-dde87830c202",
    "name" : "Get Transcript By Id (application/vnd.rev.transcript.v1.0+json)",
    "request" : {
      "urlPath" : "/jobs/2zoz/transcript",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/vnd.rev.transcript.v1.0+json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"monologues\" : [ {\n    \"elements\" : [ {\n      \"confidence\" : 0.85,\n      \"ts_end\" : 1.25,\n      \"type\" : \"text\",\n      \"value\" : \"Hello\",\n      \"ts\" : 0.75\n    } ],\n    \"speaker\" : 1\n  }, {\n    \"elements\" : [ {\n      \"confidence\" : 0.85,\n      \"ts_end\" : 1.25,\n      \"type\" : \"text\",\n      \"value\" : \"Hello\",\n      \"ts\" : 0.75\n    }, {\n      \"confidence\" : 0.85,\n      \"ts_end\" : 1.25,\n      \"type\" : \"text\",\n      \"value\" : \"Hello\",\n      \"ts\" : 0.75\n    } ],\n    \"speaker\" : 1\n  }, {\n    \"elements\" : [ {\n      \"confidence\" : 0.85,\n      \"ts_end\" : 1.25,\n      \"type\" : \"text\",\n      \"value\" : \"Hello\",\n      \"ts\" : 0.75\n    }, {\n      \"confidence\" : 0.85,\n      \"ts_end\" : 1.25,\n      \"type\" : \"text\",\n      \"value\" : \"Hello\",\n      \"ts\" : 0.75\n    }, {\n      \"confidence\" : 0.85,\n      \"ts_end\" : 1.25,\n      \"type\" : \"text\",\n      \"value\" : \"Hello\",\n      \"ts\" : 0.75\n    }, {\n      \"confidence\" : 0.85,\n      \"ts_end\" : 1.25,\n      \"type\" : \"text\",\n      \"value\" : \"Hello\",\n      \"ts\" : 0.75\n    }, {\n      \"confidence\" : 0.85,\n      \"ts_end\" : 1.25,\n      \"type\" : \"text\",\n      \"value\" : \"Hello\",\n      \"ts\" : 0.75\n    } ],\n    \"speaker\" : 1\n  }, {\n    \"elements\" : [ {\n      \"confidence\" : 0.85,\n      \"ts_end\" : 1.25,\n      \"type\" : \"text\",\n      \"value\" : \"Hello\",\n      \"ts\" : 0.75\n    }, {\n      \"confidence\" : 0.85,\n      \"ts_end\" : 1.25,\n      \"type\" : \"text\",\n      \"value\" : \"Hello\",\n      \"ts\" : 0.75\n    }, {\n      \"confidence\" : 0.85,\n      \"ts_end\" : 1.25,\n      \"type\" : \"text\",\n      \"value\" : \"Hello\",\n      \"ts\" : 0.75\n    }, {\n      \"confidence\" : 0.85,\n      \"ts_end\" : 1.25,\n      \"type\" : \"text\",\n      \"value\" : \"Hello\",\n      \"ts\" : 0.75\n    }, {\n      \"confidence\" : 0.85,\n      \"ts_end\" : 1.25,\n      \"type\" : \"text\",\n      \"value\" : \"Hello\",\n      \"ts\" : 0.75\n    }, {\n      \"confidence\" : 0.85,\n      \"ts_end\" : 1.25,\n      \"type\" : \"text\",\n      \"value\" : \"Hello\",\n      \"ts\" : 0.75\n    }, {\n      \"confidence\" : 0.85,\n      \"ts_end\" : 1.25,\n      \"type\" : \"text\",\n      \"value\" : \"Hello\",\n      \"ts\" : 0.75\n    }, {\n      \"confidence\" : 0.85,\n      \"ts_end\" : 1.25,\n      \"type\" : \"text\",\n      \"value\" : \"Hello\",\n      \"ts\" : 0.75\n    } ],\n    \"speaker\" : 1\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/vnd.rev.transcript.v1.0+json"
      }
    },
    "uuid" : "7708c3a7-ac68-3a84-8840-dde87830c202",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "GetTranscriptById",
          "schema" : {
            "description" : "Rev.ai Transcript Model\n***\nNote: properties are not displayed in the returned object if they are null\n\nJobs with skip_diarization set to true will only show a single speaker for the entire duration of the transcript.\n",
            "properties" : {
              "monologues" : {
                "items" : {
                  "properties" : {
                    "elements" : {
                      "description" : "Array of transcript elements",
                      "items" : {
                        "properties" : {
                          "confidence" : {
                            "description" : "Confidence score of the provided value. If the element `type` is `punct` or `unknown`, confidence will be `null`",
                            "example" : 0.85,
                            "format" : "double",
                            "maximum" : 1,
                            "minimum" : 0,
                            "nullable" : true,
                            "type" : "number"
                          },
                          "ts" : {
                            "description" : "The timestamp of the beginning of the element relative to the beginning of the audio in seconds (centisecond precision)",
                            "example" : 0.75,
                            "format" : "double",
                            "nullable" : true,
                            "type" : "number"
                          },
                          "ts_end" : {
                            "description" : "The timestamp of the end of the element relative to the beginning of the audio in seconds (centisecond precision)",
                            "example" : 1.25,
                            "format" : "double",
                            "nullable" : true,
                            "type" : "number"
                          },
                          "type" : {
                            "description" : "Type of transcript element. If Rev.ai was unable to determine the spoken word, the `type` will be `unknown`.",
                            "enum" : [ "text", "punct", "unknown" ],
                            "example" : "text",
                            "type" : "string"
                          },
                          "value" : {
                            "description" : "Value of the transcript element.",
                            "example" : "Hello",
                            "type" : "string"
                          }
                        },
                        "type" : "object"
                      },
                      "type" : "array"
                    },
                    "speaker" : {
                      "description" : "Id of the speaker of the monologue",
                      "example" : 1,
                      "type" : "integer"
                    }
                  },
                  "type" : "object"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 5
  }, {
    "id" : "ef312658-32d0-33fd-bbe6-eb7332f96ea6",
    "name" : "Get Captions (application/problem+json)",
    "request" : {
      "urlPath" : "/jobs/x6d4/captions",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/problem+json"
        }
      }
    },
    "response" : {
      "status" : 409,
      "body" : "{\n  \"allowed_values\" : [ \"transcribed\" ],\n  \"current_value\" : \"in_progress\",\n  \"detail\" : \"Job is in progress or failed\",\n  \"status\" : 409,\n  \"title\" : \"Job is in invalid state\",\n  \"type\" : \"https://rev.ai/api/v1/errors/invalid-job-state\"\n}",
      "headers" : {
        "Content-Type" : "application/problem+json"
      }
    },
    "uuid" : "ef312658-32d0-33fd-bbe6-eb7332f96ea6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "GetCaptions",
          "schema" : {
            "allOf" : [ {
              "description" : "Problem details object returned on errors",
              "properties" : {
                "status" : {
                  "description" : "HTTP status code of the error",
                  "type" : "integer"
                },
                "title" : {
                  "description" : "Short, human-readable summary of the problem type",
                  "type" : "string"
                },
                "type" : {
                  "description" : "URI that identifies the problem",
                  "type" : "string"
                }
              },
              "type" : "object"
            }, {
              "properties" : {
                "allowed_values" : {
                  "description" : "Allowed values for this request",
                  "items" : {
                    "type" : "string"
                  },
                  "type" : "array"
                },
                "current_value" : {
                  "description" : "Value passed in given request",
                  "type" : "string"
                },
                "detail" : {
                  "description" : "Human-readable explanation specific to this occurrence of the problem",
                  "type" : "string"
                }
              },
              "type" : "object"
            } ]
          }
        }
      }
    },
    "insertionIndex" : 6
  }, {
    "id" : "2e357966-319a-395c-9dc2-20f6cbeb005c",
    "name" : "Get Captions (application/problem+json)",
    "request" : {
      "urlPath" : "/jobs/1ssn/captions",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/problem+json"
        }
      }
    },
    "response" : {
      "status" : 406,
      "body" : "{\n  \"allowed_values\" : [ \"application/x-subrip\", \"text/vtt\" ],\n  \"current_value\" : \"*/*\",\n  \"detail\" : \"Unsupported value */*\",\n  \"status\" : 406,\n  \"title\" : \"Output format is not supported\",\n  \"type\" : \"https://www.rev.ai/api/v1/errors/unsupported-output-format\"\n}",
      "headers" : {
        "Content-Type" : "application/problem+json"
      }
    },
    "uuid" : "2e357966-319a-395c-9dc2-20f6cbeb005c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "GetCaptions",
          "schema" : {
            "allOf" : [ {
              "description" : "Problem details object returned on errors",
              "properties" : {
                "status" : {
                  "description" : "HTTP status code of the error",
                  "type" : "integer"
                },
                "title" : {
                  "description" : "Short, human-readable summary of the problem type",
                  "type" : "string"
                },
                "type" : {
                  "description" : "URI that identifies the problem",
                  "type" : "string"
                }
              },
              "type" : "object"
            }, {
              "properties" : {
                "allowed_values" : {
                  "description" : "Allowed values for this request",
                  "items" : {
                    "type" : "string"
                  },
                  "type" : "array"
                },
                "current_value" : {
                  "description" : "Value passed in given request",
                  "type" : "string"
                },
                "detail" : {
                  "description" : "Human-readable explanation specific to this occurrence of the problem",
                  "type" : "string"
                }
              },
              "type" : "object"
            } ]
          }
        }
      }
    },
    "insertionIndex" : 7
  }, {
    "id" : "87685647-0936-3aa7-acc2-c939f8f22129",
    "name" : "Get Captions (application/problem+json)",
    "request" : {
      "urlPath" : "/jobs/jokj/captions",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/problem+json"
        }
      }
    },
    "response" : {
      "status" : 405,
      "body" : "{\n  \"detail\" : \"Job with speaker channels provided are not supported for retrieving captions\",\n  \"status\" : 405,\n  \"title\" : \"Job contains unsupported properties\",\n  \"type\" : \"https://rev.ai/api/v1/errors/invalid-job-properties\"\n}",
      "headers" : {
        "Content-Type" : "application/problem+json"
      }
    },
    "uuid" : "87685647-0936-3aa7-acc2-c939f8f22129",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "GetCaptions",
          "schema" : {
            "allOf" : [ {
              "description" : "Problem details object returned on errors",
              "properties" : {
                "status" : {
                  "description" : "HTTP status code of the error",
                  "type" : "integer"
                },
                "title" : {
                  "description" : "Short, human-readable summary of the problem type",
                  "type" : "string"
                },
                "type" : {
                  "description" : "URI that identifies the problem",
                  "type" : "string"
                }
              },
              "type" : "object"
            }, {
              "properties" : {
                "detail" : {
                  "description" : "Human-readable explanation specific to this occurrence of the problem",
                  "type" : "string"
                }
              },
              "type" : "object"
            } ]
          }
        }
      }
    },
    "insertionIndex" : 8
  }, {
    "id" : "ba53c03b-b8e0-3736-9009-d06e9c20e251",
    "name" : "Get Captions (application/problem+json)",
    "request" : {
      "urlPath" : "/jobs/3186/captions",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/problem+json"
        }
      }
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"status\" : 404,\n  \"title\" : \"could not find job\",\n  \"type\" : \"https://www.rev.ai/api/v1/errors/job-not-found\"\n}",
      "headers" : {
        "Content-Type" : "application/problem+json"
      }
    },
    "uuid" : "ba53c03b-b8e0-3736-9009-d06e9c20e251",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "GetCaptions",
          "schema" : {
            "description" : "Problem details object returned on errors",
            "properties" : {
              "status" : {
                "description" : "HTTP status code of the error",
                "type" : "integer"
              },
              "title" : {
                "description" : "Short, human-readable summary of the problem type",
                "type" : "string"
              },
              "type" : {
                "description" : "URI that identifies the problem",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 9
  }, {
    "id" : "b33bb4cc-6efa-3d79-9eba-a1dcdc4285f6",
    "name" : "Get Captions - 401",
    "request" : {
      "urlPath" : "/jobs/1ym1/captions",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "b33bb4cc-6efa-3d79-9eba-a1dcdc4285f6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "GetCaptions"
        }
      }
    },
    "insertionIndex" : 10
  }, {
    "id" : "3491c16f-876a-38f6-9b09-563084571edd",
    "name" : "Get Captions (text/vtt)",
    "request" : {
      "urlPath" : "/jobs/cgpr/captions",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "text/vtt"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "text/vtt"
      }
    },
    "uuid" : "3491c16f-876a-38f6-9b09-563084571edd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "GetCaptions",
          "schema" : {
            "description" : "Caption in Web Video Text Tracks format",
            "x-content" : {
              "text/vtt" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "insertionIndex" : 11
  }, {
    "id" : "19c447db-48e7-359d-b10e-dc200959c834",
    "name" : "Get Captions (application/x-subrip)",
    "request" : {
      "urlPath" : "/jobs/1zc0/captions",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/x-subrip"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/x-subrip"
      }
    },
    "uuid" : "19c447db-48e7-359d-b10e-dc200959c834",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "GetCaptions",
          "schema" : {
            "description" : "Caption in SubRip Text format",
            "x-content" : {
              "application/x-subrip" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "insertionIndex" : 12
  }, {
    "id" : "5380a476-58a3-3682-aaa3-477ee235f31c",
    "name" : "Get Job By Id (application/problem+json)",
    "request" : {
      "urlPath" : "/jobs/qu1i",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/problem+json"
        }
      }
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"status\" : 404,\n  \"title\" : \"could not find job\",\n  \"type\" : \"https://www.rev.ai/api/v1/errors/job-not-found\"\n}",
      "headers" : {
        "Content-Type" : "application/problem+json"
      }
    },
    "uuid" : "5380a476-58a3-3682-aaa3-477ee235f31c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "GetJobById",
          "schema" : {
            "description" : "Problem details object returned on errors",
            "properties" : {
              "status" : {
                "description" : "HTTP status code of the error",
                "type" : "integer"
              },
              "title" : {
                "description" : "Short, human-readable summary of the problem type",
                "type" : "string"
              },
              "type" : {
                "description" : "URI that identifies the problem",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 13
  }, {
    "id" : "048ea627-41bf-37c0-83b9-74bc9eed1f02",
    "name" : "Get Job By Id (application/problem+json)",
    "request" : {
      "urlPath" : "/jobs/pq80",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/problem+json"
        }
      }
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"status\" : 401,\n  \"title\" : \"Authorization has been denied for this request\"\n}",
      "headers" : {
        "Content-Type" : "application/problem+json"
      }
    },
    "uuid" : "048ea627-41bf-37c0-83b9-74bc9eed1f02",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "GetJobById",
          "schema" : {
            "properties" : {
              "status" : {
                "description" : "HTTP status code of the error",
                "type" : "integer"
              },
              "title" : {
                "description" : "Short, human-readable summary of the problem type",
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "insertionIndex" : 14
  }, {
    "id" : "265f24d0-1bfa-3fe2-b741-74e87cd4a6a3",
    "name" : "Get Job By Id (application/json)",
    "request" : {
      "urlPath" : "/jobs/de36",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"created_on\" : \"2018-05-05T23:23:22.29Z\",\n  \"delete_after_seconds\" : 50,\n  \"id\" : \"Umx5c6F7pH7r\",\n  \"status\" : \"in_progress\",\n  \"type\" : \"async\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "265f24d0-1bfa-3fe2-b741-74e87cd4a6a3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "GetJobById",
          "schema" : {
            "allOf" : [ {
              "description" : "Rev.ai Transcription Job\n***\nNote: properties are not displayed in the returned object if they are null\n",
              "properties" : {
                "callback_url" : {
                  "description" : "Callback url provided by the user."
                },
                "completed_on" : {
                  "description" : "The date and time the job was completed, whether successfully or failing, in ISO-8601 UTC form",
                  "example" : "2018-05-05T23:28:22.29Z",
                  "format" : "dateTime",
                  "nullable" : true,
                  "type" : "string"
                },
                "created_on" : {
                  "description" : "The date and time the job was created in ISO-8601 UTC form",
                  "example" : "2018-05-05T23:23:22.29Z",
                  "format" : "dateTime",
                  "type" : "string"
                },
                "custom_vocabulary_id" : {
                  "description" : "User-supplied custom vocabulary ID to be used with job for transcription."
                },
                "delete_after_seconds" : {
                  "description" : "Amount of time after job completion when job is auto-deleted. Present only when preference set in job request."
                },
                "duration_seconds" : {
                  "description" : "Duration of the file in seconds. Null if the file could not be retrieved or there was not a valid media file",
                  "example" : 324.36,
                  "format" : "double",
                  "nullable" : true,
                  "type" : "number"
                },
                "failure" : {
                  "description" : "Simple reason of why the transcription job failed. Check `failure_detail` for specific details and solutions",
                  "enum" : [ "internal_processing", "download_failure", "duration_exceeded", "duration_too_short", "invalid_media", "empty_media", "transcription", "insufficient_balance", "invoicing_limit_exceeded" ],
                  "example" : "download_failure",
                  "nullable" : true,
                  "type" : "string"
                },
                "failure_detail" : {
                  "description" : "Human-readable reason why the job failed",
                  "example" : "Failed to download media file. Please check your url and file type",
                  "nullable" : true,
                  "type" : "string"
                },
                "filter_profanity" : {
                  "description" : "User-supplied preference on whether to remove explicit words."
                },
                "id" : {
                  "description" : "Id of the job",
                  "example" : "Umx5c6F7pH7r",
                  "type" : "string"
                },
                "language" : {
                  "description" : "User-supplied language to transcribe the audio into."
                },
                "media_url" : {
                  "description" : "Media url provided by the job submission. Null if the job was provided using a local file."
                },
                "metadata" : {
                  "description" : "Optional metadata that was provided during job submission"
                },
                "name" : {
                  "description" : "Name of the file provided. Present when the file name is available",
                  "example" : "sample_audio.mp3",
                  "nullable" : true,
                  "type" : "string"
                },
                "remove_disfluencies" : {
                  "description" : "User-supplied preference on whether to remove disfluencies."
                },
                "skip_diarization" : {
                  "description" : "User-supplied preference on whether to skip diarization."
                },
                "skip_punctuation" : {
                  "description" : "User-supplied preference on whether to skip punctuation."
                },
                "speaker_channels_count" : {
                  "description" : "User-supplied number of speaker channels in the audio."
                },
                "status" : {
                  "description" : "Current status of the job",
                  "enum" : [ "in_progress", "transcribed", "failed" ],
                  "example" : "transcribed",
                  "type" : "string"
                },
                "type" : {
                  "description" : "Type of speech recognition performed. Currently the only supported values are 'async' for asynchronous jobs and `stream` for streaming jobs",
                  "enum" : [ "async" ],
                  "example" : "async",
                  "nullable" : false,
                  "type" : "string"
                }
              },
              "type" : "object"
            }, {
              "$ref" : "#/components/schemas/DescriptionlessJobOptions"
            } ],
            "example" : {
              "created_on" : "2018-05-05T23:23:22.29Z",
              "delete_after_seconds" : 50,
              "id" : "Umx5c6F7pH7r",
              "status" : "in_progress",
              "type" : "async"
            }
          }
        }
      }
    },
    "insertionIndex" : 15
  }, {
    "id" : "b29f35c2-924f-396b-a9bd-b3444c45ae43",
    "name" : "Delete Job by Id (application/problem+json)",
    "request" : {
      "urlPath" : "/jobs/g12i",
      "method" : "DELETE",
      "headers" : {
        "Accept" : {
          "contains" : "application/problem+json"
        }
      }
    },
    "response" : {
      "status" : 409,
      "body" : "{\n  \"allowed_values\" : [ \"transcribed\", \"failed\" ],\n  \"current_value\" : \"in_progress\",\n  \"detail\" : \"Job is in invalid state to be deleted\",\n  \"status\" : 409,\n  \"title\" : \"Job is in invalid state\",\n  \"type\" : \"https://rev.ai/api/v1/errors/invalid-job-state\"\n}",
      "headers" : {
        "Content-Type" : "application/problem+json"
      }
    },
    "uuid" : "b29f35c2-924f-396b-a9bd-b3444c45ae43",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "DeleteJobById",
          "schema" : {
            "allOf" : [ {
              "description" : "Problem details object returned on errors",
              "properties" : {
                "status" : {
                  "description" : "HTTP status code of the error",
                  "type" : "integer"
                },
                "title" : {
                  "description" : "Short, human-readable summary of the problem type",
                  "type" : "string"
                },
                "type" : {
                  "description" : "URI that identifies the problem",
                  "type" : "string"
                }
              },
              "type" : "object"
            }, {
              "properties" : {
                "allowed_values" : {
                  "description" : "Allowed values for this request",
                  "items" : {
                    "type" : "string"
                  },
                  "type" : "array"
                },
                "current_value" : {
                  "description" : "Value passed in given request",
                  "type" : "string"
                },
                "detail" : {
                  "description" : "Human-readable explanation specific to this occurrence of the problem",
                  "type" : "string"
                }
              },
              "type" : "object"
            } ]
          }
        }
      }
    },
    "insertionIndex" : 16
  }, {
    "id" : "188e8f1d-8cb8-38d7-bda0-8e4f2379f453",
    "name" : "Delete Job by Id (application/problem+json)",
    "request" : {
      "urlPath" : "/jobs/egnz",
      "method" : "DELETE",
      "headers" : {
        "Accept" : {
          "contains" : "application/problem+json"
        }
      }
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"status\" : 404,\n  \"title\" : \"could not find job\",\n  \"type\" : \"https://www.rev.ai/api/v1/errors/job-not-found\"\n}",
      "headers" : {
        "Content-Type" : "application/problem+json"
      }
    },
    "uuid" : "188e8f1d-8cb8-38d7-bda0-8e4f2379f453",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "DeleteJobById",
          "schema" : {
            "description" : "Problem details object returned on errors",
            "properties" : {
              "status" : {
                "description" : "HTTP status code of the error",
                "type" : "integer"
              },
              "title" : {
                "description" : "Short, human-readable summary of the problem type",
                "type" : "string"
              },
              "type" : {
                "description" : "URI that identifies the problem",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 17
  }, {
    "id" : "697f31f0-cc9c-30ac-848b-c0d3a0cc654e",
    "name" : "Delete Job by Id - 401",
    "request" : {
      "urlPath" : "/jobs/b111",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "697f31f0-cc9c-30ac-848b-c0d3a0cc654e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "DeleteJobById"
        }
      }
    },
    "insertionIndex" : 18
  }, {
    "id" : "0691a2b1-08d5-36d2-b226-9758c07f7310",
    "name" : "Delete Job by Id - 204",
    "request" : {
      "urlPath" : "/jobs/5r0s",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 204
    },
    "uuid" : "0691a2b1-08d5-36d2-b226-9758c07f7310",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "DeleteJobById"
        }
      }
    },
    "insertionIndex" : 19
  }, {
    "id" : "1327b61a-20d3-39d8-a5c6-944652204f69",
    "name" : "Submit Transcription Job (application/problem+json)",
    "request" : {
      "urlPath" : "/jobs",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/problem+json"
        }
      }
    },
    "response" : {
      "status" : 413,
      "body" : "{\n  \"detail\" : \"Submitted payload exceeds maximum allowed file size\",\n  \"status\" : 413,\n  \"title\" : \"Payload Too Large\"\n}",
      "headers" : {
        "Content-Type" : "application/problem+json"
      }
    },
    "uuid" : "1327b61a-20d3-39d8-a5c6-944652204f69",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "SubmitTranscriptionJob",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Human-readable explanation specific to this occurrence of the problem",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP status code of the error",
                "type" : "integer"
              },
              "title" : {
                "description" : "Short, human-readable summary of the problem type",
                "type" : "string"
              }
            }
          }
        }
      }
    },
    "insertionIndex" : 20
  }, {
    "id" : "072f6b9c-0680-3a6e-80c7-ef208ac6ec13",
    "name" : "Submit Transcription Job - 401",
    "request" : {
      "urlPath" : "/jobs",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "072f6b9c-0680-3a6e-80c7-ef208ac6ec13",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "SubmitTranscriptionJob"
        }
      }
    },
    "insertionIndex" : 21
  }, {
    "id" : "1bfeeb9e-b563-35f4-9123-1fcaa119e3c5",
    "name" : "Submit Transcription Job (application/problem+json)",
    "request" : {
      "urlPath" : "/jobs",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/problem+json"
        }
      }
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"parameter\" : {\n    \"media_url\" : [ \"The media_url field is required\" ]\n  },\n  \"status\" : 400,\n  \"title\" : \"Your request parameters didn't validate\",\n  \"type\" : \"https://www.rev.ai/api/v1/errors/invalid-parameters\"\n}",
      "headers" : {
        "Content-Type" : "application/problem+json"
      }
    },
    "uuid" : "1bfeeb9e-b563-35f4-9123-1fcaa119e3c5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "SubmitTranscriptionJob",
          "schema" : {
            "allOf" : [ {
              "description" : "Problem details object returned on errors",
              "properties" : {
                "status" : {
                  "description" : "HTTP status code of the error",
                  "type" : "integer"
                },
                "title" : {
                  "description" : "Short, human-readable summary of the problem type",
                  "type" : "string"
                },
                "type" : {
                  "description" : "URI that identifies the problem",
                  "type" : "string"
                }
              },
              "type" : "object"
            }, {
              "properties" : {
                "parameters" : {
                  "description" : "Invalid properties object where each property is the key, mapped to a list of reasons why the property is invalid",
                  "type" : "object"
                }
              },
              "type" : "object"
            } ]
          }
        }
      }
    },
    "insertionIndex" : 22
  }, {
    "id" : "03405dbb-bad7-30b9-899e-60a7e05b6f9a",
    "name" : "Submit Transcription Job (application/json)",
    "request" : {
      "urlPath" : "/jobs",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"created_on\" : \"2018-05-05T23:23:22.29Z\",\n  \"delete_after_seconds\" : 50,\n  \"id\" : \"Umx5c6F7pH7r\",\n  \"status\" : \"in_progress\",\n  \"type\" : \"async\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "03405dbb-bad7-30b9-899e-60a7e05b6f9a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "SubmitTranscriptionJob",
          "schema" : {
            "allOf" : [ {
              "description" : "Rev.ai Transcription Job\n***\nNote: properties are not displayed in the returned object if they are null\n",
              "properties" : {
                "callback_url" : {
                  "description" : "Callback url provided by the user."
                },
                "completed_on" : {
                  "description" : "The date and time the job was completed, whether successfully or failing, in ISO-8601 UTC form",
                  "example" : "2018-05-05T23:28:22.29Z",
                  "format" : "dateTime",
                  "nullable" : true,
                  "type" : "string"
                },
                "created_on" : {
                  "description" : "The date and time the job was created in ISO-8601 UTC form",
                  "example" : "2018-05-05T23:23:22.29Z",
                  "format" : "dateTime",
                  "type" : "string"
                },
                "custom_vocabulary_id" : {
                  "description" : "User-supplied custom vocabulary ID to be used with job for transcription."
                },
                "delete_after_seconds" : {
                  "description" : "Amount of time after job completion when job is auto-deleted. Present only when preference set in job request."
                },
                "duration_seconds" : {
                  "description" : "Duration of the file in seconds. Null if the file could not be retrieved or there was not a valid media file",
                  "example" : 324.36,
                  "format" : "double",
                  "nullable" : true,
                  "type" : "number"
                },
                "failure" : {
                  "description" : "Simple reason of why the transcription job failed. Check `failure_detail` for specific details and solutions",
                  "enum" : [ "internal_processing", "download_failure", "duration_exceeded", "duration_too_short", "invalid_media", "empty_media", "transcription", "insufficient_balance", "invoicing_limit_exceeded" ],
                  "example" : "download_failure",
                  "nullable" : true,
                  "type" : "string"
                },
                "failure_detail" : {
                  "description" : "Human-readable reason why the job failed",
                  "example" : "Failed to download media file. Please check your url and file type",
                  "nullable" : true,
                  "type" : "string"
                },
                "filter_profanity" : {
                  "description" : "User-supplied preference on whether to remove explicit words."
                },
                "id" : {
                  "description" : "Id of the job",
                  "example" : "Umx5c6F7pH7r",
                  "type" : "string"
                },
                "language" : {
                  "description" : "User-supplied language to transcribe the audio into."
                },
                "media_url" : {
                  "description" : "Media url provided by the job submission. Null if the job was provided using a local file."
                },
                "metadata" : {
                  "description" : "Optional metadata that was provided during job submission"
                },
                "name" : {
                  "description" : "Name of the file provided. Present when the file name is available",
                  "example" : "sample_audio.mp3",
                  "nullable" : true,
                  "type" : "string"
                },
                "remove_disfluencies" : {
                  "description" : "User-supplied preference on whether to remove disfluencies."
                },
                "skip_diarization" : {
                  "description" : "User-supplied preference on whether to skip diarization."
                },
                "skip_punctuation" : {
                  "description" : "User-supplied preference on whether to skip punctuation."
                },
                "speaker_channels_count" : {
                  "description" : "User-supplied number of speaker channels in the audio."
                },
                "status" : {
                  "description" : "Current status of the job",
                  "enum" : [ "in_progress", "transcribed", "failed" ],
                  "example" : "transcribed",
                  "type" : "string"
                },
                "type" : {
                  "description" : "Type of speech recognition performed. Currently the only supported values are 'async' for asynchronous jobs and `stream` for streaming jobs",
                  "enum" : [ "async" ],
                  "example" : "async",
                  "nullable" : false,
                  "type" : "string"
                }
              },
              "type" : "object"
            }, {
              "$ref" : "#/components/schemas/DescriptionlessJobOptions"
            } ],
            "example" : {
              "created_on" : "2018-05-05T23:23:22.29Z",
              "delete_after_seconds" : 50,
              "id" : "Umx5c6F7pH7r",
              "status" : "in_progress",
              "type" : "async"
            }
          }
        }
      }
    },
    "insertionIndex" : 23
  }, {
    "id" : "d16a84a0-f282-3724-a1b4-12649a60a741",
    "name" : "Get List of Jobs - 401",
    "request" : {
      "urlPath" : "/jobs",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "d16a84a0-f282-3724-a1b4-12649a60a741",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "GetListOfJobs"
        }
      }
    },
    "insertionIndex" : 24
  }, {
    "id" : "77b6b0a1-5348-3cc8-9a04-b968d825cb61",
    "name" : "Get List of Jobs (application/problem+json)",
    "request" : {
      "urlPath" : "/jobs",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/problem+json"
        }
      }
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"parameter\" : {\n    \"limit\" : [ \"The max value for limit is 1000\" ]\n  },\n  \"status\" : 400,\n  \"title\" : \"Your request parameters didn't validate\",\n  \"type\" : \"https://www.rev.ai/api/v1/errors/invalid-parameters\"\n}",
      "headers" : {
        "Content-Type" : "application/problem+json"
      }
    },
    "uuid" : "77b6b0a1-5348-3cc8-9a04-b968d825cb61",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "GetListOfJobs",
          "schema" : {
            "allOf" : [ {
              "description" : "Problem details object returned on errors",
              "properties" : {
                "status" : {
                  "description" : "HTTP status code of the error",
                  "type" : "integer"
                },
                "title" : {
                  "description" : "Short, human-readable summary of the problem type",
                  "type" : "string"
                },
                "type" : {
                  "description" : "URI that identifies the problem",
                  "type" : "string"
                }
              },
              "type" : "object"
            }, {
              "properties" : {
                "parameters" : {
                  "description" : "Invalid properties object where each property is the key, mapped to a list of reasons why the property is invalid",
                  "type" : "object"
                }
              },
              "type" : "object"
            } ]
          }
        }
      }
    },
    "insertionIndex" : 25
  }, {
    "id" : "a56ff181-a1bf-3f7a-8fbb-da83f7445d9f",
    "name" : "Get List of Jobs (application/json)",
    "request" : {
      "urlPath" : "/jobs",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "[ {\n  \"created_on\" : \"2018-05-05T23:23:22.29Z\",\n  \"delete_after_seconds\" : 50,\n  \"id\" : \"Umx5c6F7pH7r\",\n  \"status\" : \"in_progress\",\n  \"type\" : \"async\"\n}, {\n  \"created_on\" : \"2018-05-05T23:23:22.29Z\",\n  \"delete_after_seconds\" : 50,\n  \"id\" : \"Umx5c6F7pH7r\",\n  \"status\" : \"in_progress\",\n  \"type\" : \"async\"\n}, {\n  \"created_on\" : \"2018-05-05T23:23:22.29Z\",\n  \"delete_after_seconds\" : 50,\n  \"id\" : \"Umx5c6F7pH7r\",\n  \"status\" : \"in_progress\",\n  \"type\" : \"async\"\n}, {\n  \"created_on\" : \"2018-05-05T23:23:22.29Z\",\n  \"delete_after_seconds\" : 50,\n  \"id\" : \"Umx5c6F7pH7r\",\n  \"status\" : \"in_progress\",\n  \"type\" : \"async\"\n}, {\n  \"created_on\" : \"2018-05-05T23:23:22.29Z\",\n  \"delete_after_seconds\" : 50,\n  \"id\" : \"Umx5c6F7pH7r\",\n  \"status\" : \"in_progress\",\n  \"type\" : \"async\"\n}, {\n  \"created_on\" : \"2018-05-05T23:23:22.29Z\",\n  \"delete_after_seconds\" : 50,\n  \"id\" : \"Umx5c6F7pH7r\",\n  \"status\" : \"in_progress\",\n  \"type\" : \"async\"\n}, {\n  \"created_on\" : \"2018-05-05T23:23:22.29Z\",\n  \"delete_after_seconds\" : 50,\n  \"id\" : \"Umx5c6F7pH7r\",\n  \"status\" : \"in_progress\",\n  \"type\" : \"async\"\n} ]",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a56ff181-a1bf-3f7a-8fbb-da83f7445d9f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "GetListOfJobs",
          "schema" : {
            "items" : {
              "$ref" : "#/components/schemas/Job"
            },
            "type" : "array"
          }
        }
      }
    },
    "insertionIndex" : 26
  }, {
    "id" : "22f0fe6b-7f13-3b0f-9c5f-82224cd9a213",
    "name" : "Get Account - 401",
    "request" : {
      "urlPath" : "/account",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "22f0fe6b-7f13-3b0f-9c5f-82224cd9a213",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "GetAccount"
        }
      }
    },
    "insertionIndex" : 27
  }, {
    "id" : "8659c8bc-0136-3d16-940d-4a94cd2fc767",
    "name" : "Get Account (application/json)",
    "request" : {
      "urlPath" : "/account",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"balance_seconds\" : 150,\n  \"email\" : \"jay@rev.ai\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8659c8bc-0136-3d16-940d-4a94cd2fc767",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "GetAccount",
          "schema" : {
            "description" : "Rev.ai Account Model",
            "properties" : {
              "balance_seconds" : {
                "description" : "Amount of Rev.ai API credits remaining in seconds",
                "example" : 150,
                "type" : "integer"
              },
              "email" : {
                "description" : "Email of developer account",
                "example" : "jay@rev.ai",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 28
  } ]
}