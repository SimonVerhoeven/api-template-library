{
  "mappings" : [ {
    "id" : "a007a78c-3c6e-4333-a030-1122b6a6486a",
    "name" : "Lists the linked storage buckets for a project.",
    "request" : {
      "urlPath" : "/v1beta/qs2nhnccickm94zza6dfjrlmvcqzk28xac3zat0zupjsy6pwgoghhpgslrpcl0j105yt74gxv7cxl2clk873f7hudileb7q7h6xtadj93gft3wvls30/buckets",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"nextPageToken\" : \"3eccgu1w85xj4naa774xld6n3n7asmcxttyv1mylt964gzu0z33i8dl94gv5fq6903iaqad9nkem4vao2ovtgu9ahquflwolgweev6abkzzhs84x4e066pwhef6w1czl5v21zkgdyiw1dxl0x8u0lhezbp5c4rr0nu00masbitaabvowhvy5ty4brd6v9\",\n  \"buckets\" : [ {\n    \"name\" : \"Ernesto Bednar\"\n  }, {\n    \"name\" : \"Winfred Ebert\"\n  }, {\n    \"name\" : \"Maria Anderson DDS\"\n  }, {\n    \"name\" : \"Wilhelmina Langosh V\"\n  }, {\n    \"name\" : \"Jeffry Flatley\"\n  }, {\n    \"name\" : \"Alonso Torphy\"\n  }, {\n    \"name\" : \"Celestina Kemmer\"\n  }, {\n    \"name\" : \"Rona Miller\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a007a78c-3c6e-4333-a030-1122b6a6486a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:43.563523Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firebasestorage.projects.buckets.list",
          "schema" : {
            "description" : "The response returned by `ListBuckets`.",
            "properties" : {
              "buckets" : {
                "description" : "The list of linked buckets.",
                "items" : {
                  "$ref" : "#/components/schemas/Bucket"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 0
  }, {
    "id" : "1de85336-068d-4360-b46f-3300ea4c953b",
    "name" : "Gets a single linked storage bucket.",
    "request" : {
      "urlPath" : "/v1beta/Celena+Witting+III",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"name\" : \"Stanford Lynch\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1de85336-068d-4360-b46f-3300ea4c953b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:43.562955Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firebasestorage.projects.buckets.get",
          "schema" : {
            "description" : "A storage bucket and its relation to a parent Firebase project.",
            "properties" : {
              "name" : {
                "description" : "Resource name of the bucket.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 1
  }, {
    "id" : "0a94f075-9896-42a5-9838-aa9acc74d31d",
    "name" : "Unlinks a linked Google Cloud Storage bucket from a Firebase project.",
    "request" : {
      "urlPath" : "/v1beta/1616ucovigp3nxgx6lbejf9lem8p:removeFirebase",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0a94f075-9896-42a5-9838-aa9acc74d31d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:43.562793Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firebasestorage.projects.buckets.removeFirebase",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 2
  }, {
    "id" : "ee0ce072-3c2f-4350-be83-86eb00461568",
    "name" : "Links a Google Cloud Storage bucket to a Firebase project.",
    "request" : {
      "urlPath" : "/v1beta/ame96ixdpabrb0c9e23y6afczdy7m1yhbzfyo70u3gapxobg32t7jl2zl5zl1q10wkos6b44ta6rdr7ra0xv7ta0dnvzzkbhx88j4cnhdtjjf9kku7y3mh1j9:addFirebase",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"name\" : \"Jacelyn Borer\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ee0ce072-3c2f-4350-be83-86eb00461568",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:43.562684Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firebasestorage.projects.buckets.addFirebase",
          "schema" : {
            "description" : "A storage bucket and its relation to a parent Firebase project.",
            "properties" : {
              "name" : {
                "description" : "Resource name of the bucket.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 3
  } ]
}