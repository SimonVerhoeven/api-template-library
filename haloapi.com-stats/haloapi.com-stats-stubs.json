{
  "mappings" : [ {
    "id" : "ad669e06-050f-41cf-b40f-45e112d9c33e",
    "name" : "Halo Wars 2 - Player XPs - 503",
    "request" : {
      "urlPath" : "/hw2/xp",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "1ww0hp88wp666r718anunv7xdb5wb6z40e0ejuzb6ih3z4653xrcxiwjlf25jxkroogwsgg8thdi3zx75ohn9sjncnuuhtmeswoajscx1j76z1srhxdm1aeamfunoivgs59x51bv6a78"
        }
      }
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "ad669e06-050f-41cf-b40f-45e112d9c33e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.197069Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-XPs"
        }
      }
    }
  }, {
    "id" : "f3b1b08c-dd17-4efa-bb89-d11713b92186",
    "name" : "Halo Wars 2 - Player XPs - 500",
    "request" : {
      "urlPath" : "/hw2/xp",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "n988cap2cboemx4"
        }
      }
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "f3b1b08c-dd17-4efa-bb89-d11713b92186",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.197031Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-XPs"
        }
      }
    }
  }, {
    "id" : "87c952b5-0698-4b70-bbdc-aeb5fbf71f9e",
    "name" : "Halo Wars 2 - Player XPs (application/json)",
    "request" : {
      "urlPath" : "/hw2/xp",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      },
      "queryParameters" : {
        "players" : {
          "equalTo" : "c8p2jp3jvz2eq4onnw90ci25c2k2xd7wu0q8bvk9ysapuobkrtxdgwlpdzrq5ft550yokcrwuyhig5utd2qlnvmzekbaag5wwtk96hdyc7iuoawszd20d37vemomnnv6h4gk6mqwwiforcannk67n5kg7jezw5mrmk2kn7xme3bo"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // Set of results. One per player.\n  \"Results\": [\n    {\n      // The player's gamertag.\n      \"Id\": \"string\",\n\n      // The result of the query for the player. This field will contain one of the\n      // following values:\n      //   Success = 0,\n      //   NotFound = 1,\n      //   ServiceFailure = 2,\n      //   ServiceUnavailable = 3\n      // It is possible for different requests from the batch to succeed and fail\n      // independently.\n      \"ResultCode\": \"int\",\n\n      \"Result\": {\n\n        // Amount of XP that the player has earned in multiplayer play. This includes\n        // both campaign earned by gameplay and challenges.\n        \"MultiplayerXp\": \"int\",\n\n        // Amount of XP that the player has earned in campaign play. This includes XP\n        // from solo and cooperative modes.\n        \"CampaignXp\": \"int\",\n\n        // Total amount of XP that the player has earned from all sources.\n        \"TotalXp\": \"int\",\n\n        // Date and Time when the player's XP was last updated. This is expressed as an\n        // ISO 8601 combined Date and Time.\n        \"LastUpdatedDateUtc\": {\n\n          \"ISO8601Date\": \"string\"\n        },\n\n        // Current rank of the player.\n        \"SpartanRankId\": \"guid\"\n      }\n    }\n  ],\n\n  // Internal use.\n  \"Links\": { }\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "87c952b5-0698-4b70-bbdc-aeb5fbf71f9e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.196989Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-XPs"
        }
      }
    }
  }, {
    "id" : "98203cab-8463-4856-af91-e7e2bbe09659",
    "name" : "Halo Wars 2 - Player Playlist Ratings - 503",
    "request" : {
      "urlPath" : "/hw2/playlist/yak6/rating",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "injvx6od0ybyjld0puqx5pdhaxae0y1n9mw4vuyen9n7yp4apt78ebko7zjnvqhyrmjakrmlu7t2ve69i7bfxc"
        }
      }
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "98203cab-8463-4856-af91-e7e2bbe09659",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.196936Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Playlist-Ratings"
        }
      }
    }
  }, {
    "id" : "f0b3d7e1-2fdb-41f2-913d-10a1fc54d975",
    "name" : "Halo Wars 2 - Player Playlist Ratings - 500",
    "request" : {
      "urlPath" : "/hw2/playlist/h4pa/rating",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "gagff053"
        }
      }
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "f0b3d7e1-2fdb-41f2-913d-10a1fc54d975",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.196842Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Playlist-Ratings"
        }
      }
    }
  }, {
    "id" : "a5f88bf8-6c58-4fc3-96df-174dc7ffdf07",
    "name" : "Halo Wars 2 - Player Playlist Ratings (application/json)",
    "request" : {
      "urlPath" : "/hw2/playlist/i3s6/rating",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      },
      "queryParameters" : {
        "players" : {
          "equalTo" : "p8fa4lkw5mipimi2zej248c1sispaj1whjxpvo95j9g6bvwoxfe8m4waeyzbbwm9kndvdz10lbkbpd59sg70x634szych88r48yxyxhth7b5dn1pnvwh42nqnzxg56jqyrg2dckl0msfy3k0mrpzogec8k1qf4yauoj3bmorz6oyiol6xlgoh88zxmh3i0e"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // Set of results. One per player.\n  \"Results\": [\n    {\n      // The player's gamertag.\n      \"Id\": \"string\",\n\n      // The result of the query for the player. This field will contain one of the\n      // following values:\n      //   Success = 0,\n      //   NotFound = 1,\n      //   ServiceFailure = 2,\n      //   ServiceUnavailable = 3\n      // It is possible for different requests from the batch to succeed and fail\n      // independently.\n      \"ResultCode\": \"int\",\n\n      \"Result\": {\n\n        // Internal use.\n        \"Mmr\": {\n\n          \"Rating\": \"double\",\n\n          \"Variance\": \"double\",\n\n          // Unused.\n          \"LastModifiedDate\": {\n\n            \"ISO8601Date\": \"\"\n          }\n        },\n\n        // Competitive Skill Ranking (CSR) of the player. If this is not a ranked\n        // playlist, this will be null.\n        \"Csr\": {\n\n          // CSR Tier. CSR Tiers are designation-specific. If the player is still in\n          // measurement matches, this field will be null. CSR Tiers are referenced by\n          // CSR Designations, which are available via the Metadata API.\n          \"Tier\": \"int\",\n\n          // CSR Designation. If the player is still in measurement matches, this field\n          // will be null. CSR Designations are available via the Metadata API.\n          \"Designation\": \"int\",\n\n          // Raw CSR value. If the player is still in measurement matches, this field\n          // will be null. If the player is not in a high enough designation, this will\n          // be zero.\n          \"Raw\": \"int\",\n\n          // Percentage of progress towards the next CSR tier. If the player is still in\n          // measurement matches, this field will be null.\n          \"PercentToNextTier\": \"int\",\n\n          // Number of measurement matches remaining until the player earns a CSR. If\n          // this field is greater than zero, the player does not have a CSR yet and the\n          // other components of the CSR will be null.\n          \"MeasurementMatchesRemaining\": \"int\",\n\n          // Player's ranking on the CSR leaderboard. If the player is still in\n          // measurement matches, this field will be null. If the player is not in a high\n          // enough designation, this will be zero.\n          \"Rank\": \"int\"\n        }\n      }\n    }\n  ],\n\n  // Internal use.\n  \"Links\": { }\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a5f88bf8-6c58-4fc3-96df-174dc7ffdf07",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.19674Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Playlist-Ratings"
        }
      }
    }
  }, {
    "id" : "a1b95d2f-86f9-40ee-a509-44a3e6ab2a15",
    "name" : "Halo Wars 2 - Player Season Stats Summary - 503",
    "request" : {
      "urlPath" : "/hw2/players/txadtxvsea/stats/seasons/22oa",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "a1b95d2f-86f9-40ee-a509-44a3e6ab2a15",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.196627Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Season-Stats-Summary"
        }
      }
    }
  }, {
    "id" : "68157d13-3f92-4f02-968e-f9bcc9b7f5c0",
    "name" : "Halo Wars 2 - Player Season Stats Summary - 500",
    "request" : {
      "urlPath" : "/hw2/players/x4ebz41zqda5nr7lctdt66ycdpk5fzi7y6g0ko49r5ntjmc63c791hr15umgwaotwvohc7yhnqgyljsaldy8708m15m16j00fw3me480xgk4vwl6ubec9oejaf7pwwv/stats/seasons/37e4",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "68157d13-3f92-4f02-968e-f9bcc9b7f5c0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.196541Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Season-Stats-Summary"
        }
      }
    }
  }, {
    "id" : "0baa70a1-0d86-4d2c-8c3a-2cf4e2b0fa3c",
    "name" : "Halo Wars 2 - Player Season Stats Summary - 404",
    "request" : {
      "urlPath" : "/hw2/players/tyze0n30ea5r7/stats/seasons/934u",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "0baa70a1-0d86-4d2c-8c3a-2cf4e2b0fa3c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.196456Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Season-Stats-Summary"
        }
      }
    }
  }, {
    "id" : "10882a29-796a-4efa-b1a7-c5c47622bf68",
    "name" : "Halo Wars 2 - Player Season Stats Summary (application/json)",
    "request" : {
      "urlPath" : "/hw2/players/so7hprt3gztua3qc43ncu290frs835agxi9bqins6u43uzf8gpc7os2wzehbatc4ggr49d4odx741k29cx34lt7lx44z5w7zj27dupysnmnh2ilaq6nmu8n5ds62lyvs0oct4x6k6kr7ya795mc13ig27wmgips8p7nxgpk71a0pw784hbbifb8tk7crv6tj/stats/seasons/1s1j",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // ID of the Season that this summary information is for. Seasons are available via the\n  // Metadata API.\n  \"SeasonId\": \"guid\",\n\n  // Summary of activity across all playlists that were part of the season (and therefore\n  // ranked). Stats from gameplay in social playlists during the timeframe of the season\n  // are not provided. Playlists that the player has never played in are omitted from\n  // this collection.\n  \"RankedPlaylistStats\": [\n    {\n      // Playlist ID that this entry summarizes. If this entry summarizes Custom matches,\n      // this will be null. Playlists are available via the Metadata API.\n      \"PlaylistId\": \"guid\",\n\n      // When summarizing a set of matches that took place in a common playlist, this\n      // field provides the current classification. This field will contain one of the\n      // following values:\n      //   General Stats = 0,\n      //   Blitz Stats = 1,\n      //   Firefight Stats = 2\n      // If this entry summarizes Custom matches, this will be null.\n      \"PlaylistClassification\": \"int\",\n\n      // Highest Competitive Skill Ranking (CSR) achieved by the player in the playlist.\n      // If the player has never finished the measurement matches on this playlist, this\n      // field will be null. If this entry does not summarize ranked matches, this will\n      // be null.\n      \"HighestCsr\": {\n\n        // CSR Tier. CSR Tiers are designation-specific. If the player is still in\n        // measurement matches, this field will be null. CSR Tiers are referenced by CSR\n        // Designations, which are available via the Metadata API.\n        \"Tier\": \"int\",\n\n        // CSR Designation. If the player is still in measurement matches, this field\n        // will be null. CSR Designations are available via the Metadata API.\n        \"Designation\": \"int\",\n\n        // Raw CSR value. If the player is still in measurement matches, this field will\n        // be null. If the player is not in a high enough designation, this will be zero.\n        \"Raw\": \"int\",\n\n        // Percentage of progress towards the next CSR tier. If the player is still in\n        // measurement matches, this field will be null.\n        \"PercentToNextTier\": \"int\",\n\n        // Number of measurement matches remaining until the player earns a CSR. If this\n        // field is greater than zero, the player does not have a CSR yet and the other\n        // components of the CSR will be null.\n        \"MeasurementMatchesRemaining\": \"int\",\n\n        // Player's ranking on the CSR leaderboard. If the player is still in measurement\n        // matches, this field will be null. If the player is not in a high enough\n        // designation, this will be zero.\n        \"Rank\": \"int\"\n      },\n\n      // Total amount of time the player spent in matches. This includes time spent\n      // observing the match after being eliminated. This is expressed as an ISO 8601\n      // Duration.\n      \"TotalTimePlayed\": \"string\",\n\n      // Total number of matches that the player participated in.\n      \"TotalMatchesStarted\": \"int\",\n\n      // Total number of matches where the player was present until the match ended.\n      \"TotalMatchesCompleted\": \"int\",\n\n      // Total number of matches that the player won.\n      \"TotalMatchesWon\": \"int\",\n\n      // Total number of matches that the player lost.\n      \"TotalMatchesLost\": \"int\",\n\n      // Total number of times the player has captured a point.\n      \"TotalPointCaptures\": \"int\",\n\n      // Total number of units trained by the player.\n      \"TotalUnitsBuilt\": \"int\",\n\n      // Total number of units trained by the player that were later destroyed.\n      \"TotalUnitsLost\": \"int\",\n\n      // Total number of units that the player participated in destroying.\n      \"TotalUnitsDestroyed\": \"int\",\n\n      // Total number of times the player played a card, if applicable; otherwise, 0.\n      \"TotalCardPlays\": \"int\",\n\n      // Highest wave completed while the player was still present in a match, if\n      // applicable; otherwise, 0.\n      \"HighestWaveCompleted\": \"int\",\n\n      // Summary for all leaders used by the player.\n      \"LeaderStats\": {\n\n        // Leader ID. Leaders are available via the Metadata API.\n        \"string\": {\n\n          // Total amount of time the player spent in matches with this leader. This\n          // includes time spent observing the match after being eliminated. This is\n          // expressed as an ISO 8601 Duration.\n          \"TotalTimePlayed\": \"string\",\n\n          // Total number of matches that the player participated in with this leader.\n          \"TotalMatchesStarted\": \"int\",\n\n          // Total number of matches where the player was present until the match ended\n          // with this leader.\n          \"TotalMatchesCompleted\": \"int\",\n\n          // Total number of matches that the player won with this leader.\n          \"TotalMatchesWon\": \"int\",\n\n          // Total number of matches that the player lost with this leader.\n          \"TotalMatchesLost\": \"int\",\n\n          // Total number of times the player used this leader's active leader power.\n          \"TotalLeaderPowersCast\": \"int\"\n        }\n      },\n\n      // Game Mode that this entry summarizes. If this entry is not summarizing a game\n      // mode pivot, this field will be null. Otherwise, this field will contain one of\n      // the following values:\n      //   Unknown = 0,\n      //   CampaignSolo = 1,\n      //   CampaignCooperative = 2,\n      //   Deathmatch = 3,\n      //   Domination = 4,\n      //   Strongholds = 5,\n      //   Blitz = 6,\n      //   Firefight = 7,\n      //   NormalTutorial = 8,\n      //   BlitzTutorial = 9,\n      //   TerminusFirefight = 10\n      \"GameMode\": \"int\",\n\n      // Highest objective score that the player has ever achieved in matches summarized\n      // by this entry. This field is a mapping from the team size to the highest\n      // objective score achieved.\n      \"HighestObjectiveScoreByTeamSize\": {\n\n        \"int\": \"int\",\n\n      }\n    }\n  ]\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "10882a29-796a-4efa-b1a7-c5c47622bf68",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.196366Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Season-Stats-Summary"
        }
      }
    }
  }, {
    "id" : "89cb3621-7b48-469f-bace-f763dc97a085",
    "name" : "Halo Wars 2 - Player Stats Summary - 503",
    "request" : {
      "urlPath" : "/hw2/players/cpvz6hvolkjpn7ucosag3ezm4hz9i9vgpayswj2csrgp1iiqz8tphhq1mxd58ys1ux2jzm7sa91ihm1f08ssqa64fygrbkarkvkmj7umovfm3xb3zdu0y3xi82zb1x/stats",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "89cb3621-7b48-469f-bace-f763dc97a085",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.196254Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Stats-Summary"
        }
      }
    }
  }, {
    "id" : "ae92f33a-ac20-446c-a751-17a5017d5e31",
    "name" : "Halo Wars 2 - Player Stats Summary - 500",
    "request" : {
      "urlPath" : "/hw2/players/jhvcqo7lqfsqxp4uamlcnr9zf6tzxwmipvao5htf1akck8of6tktmz71tclcyfla9v1jjjgajkstj8n23krfrdbukfyzwyzybue0f25y8dretqsrfnr8ftcls3xz30n9bmf3hpjbgtna6mo6nmxu4heclc2krmxxcly1xas4u9ra3fqnbx3pdnbeiyerxcmgbm4h/stats",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "ae92f33a-ac20-446c-a751-17a5017d5e31",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.196228Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Stats-Summary"
        }
      }
    }
  }, {
    "id" : "e30c1d0f-2310-45b2-b40a-df6875b8f9e6",
    "name" : "Halo Wars 2 - Player Stats Summary - 404",
    "request" : {
      "urlPath" : "/hw2/players/jke4n1pxzbyofl9ntb56tb78qhnav9e66bb18q3unek7qkbd1smwucxc78uxrawm9w196cfb0vte3ab10m3fyocskxd5eswb8z18t35amdgwppv3hlgigrr7d8dbt2ccchvht76bt/stats",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "e30c1d0f-2310-45b2-b40a-df6875b8f9e6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.196183Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Stats-Summary"
        }
      }
    }
  }, {
    "id" : "ab880db9-daae-4d7c-ab2e-cd95bd80b3eb",
    "name" : "Halo Wars 2 - Player Stats Summary (application/json)",
    "request" : {
      "urlPath" : "/hw2/players/98mcyp4rrj4mq1vwdv468ier568revd0gci1exfo/stats",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "//\n// Main Response\n//\n{\n  // Summary of activity across all Custom matches that the player has participated in.\n  \"CustomSummary\": {\n\n    // Summary of activity across all Skirmish matches (player(s) vs. AI(s)) that the\n    // player has participated in.\n    \"SkirmishStats\": {\n\n      // Summary of activity across all Skirmish matches that contained only the player.\n      // This will contain a single Summary. The Summary contract is documented in detail\n      // below the documentation for the Main Response.\n      \"SinglePlayerStats\": \"Summary\",\n\n      // Summary of activity across all Skirmish matches that contained two or more human\n      // players that the player has participated in. This will contain a single Summary.\n      // The Summary contract is documented in detail below the documentation for the\n      // Main Response.\n      \"MultiplayerStats\": \"Summary\",\n\n      // Summary of activity across all Skirmish matches that contained only the player,\n      // separated by game mode. This will contain multiple Summary entries, one for each\n      // game mode. The Summary contract is documented in detail below the documentation\n      // for the Main Response.\n      \"SinglePlayerModeStats\": [ \"Summary\" ],\n\n      // Summary of activity across all Skirmish matches that contained two or more human\n      // players that the player has participated in. This will contain multiple Summary\n      // entries, one for each game mode. The Summary contract is documented in detail\n      // below the documentation for the Main Response.\n      \"MultiplayerModeStats\": [ \"Summary\" ],\n\n    },\n\n    // Summary of activity across all non-Skirmish matches that the player has\n    // participated in. This will contain a single Summary. The Summary contract is\n    // documented in detail below the documentation for the Main Response.\n    \"CustomStats\": \"Summary\",\n\n    // Summary of activity across all non-Skirmish matches that the player has\n    // participated in, separated by game mode. This will contain multiple Summary\n    // entries, one for each game mode. The Summary contract is documented in detail\n    // below the documentation for the Main Response.\n    \"CustomModeStats\": [ \"Summary\" ]\n  },\n\n  // Summary across all matchmade matches that the player has participated in. This\n  // includes both social and ranked matches, matches from all seasons, and matches from\n  // all game modes.\n  \"MatchmakingSummary\": {\n\n    // Summary across all matches in social (unranked) playlists. This may include\n    // summary information from playlists that are no longer playable. Playlists that the\n    // player has never played in are omitted from this collection. Note that is possible\n    // for a playlist to go between social and ranked. Consumers of this endpoint should\n    // be careful about the possibility that a playlist appears in both collections. This\n    // will contain a Summary entry for each playlist. The Summary contract is documented\n    // in detail below the documentation for the Main Response.\n    \"SocialPlaylistStats\": [ \"Summary\" ],\n\n    // Summary across all matches in ranked playlists. This may include summary\n    // information from playlists that are no longer playable. Playlists that the player\n    // has never played in are omitted from this collection. Note that is possible for a\n    // playlist to go between social and ranked. Consumers of this endpoint should be\n    // careful about the possibility that a playlist appears in both collections. The\n    // Summary contract is documented in detail below the documentation for the Main\n    // Response.\n    \"RankedPlaylistStats\": [ \"Summary\" ],\n\n    // Summary across all matches in social (unranked) playlists, separated by game mode.\n    // This may include summary information from playlists that are no longer playable.\n    // Playlists that the player has never played in are omitted from this collection.\n    // Note that is possible for a playlist to go between social and ranked. Consumers of\n    // this endpoint should be careful about the possibility that a playlist appears in\n    // both collections. This will contain multiple Summary entries, one for each\n    // playlist and game mode combination. The Summary contract is documented in detail\n    // below the documentation for the Main Response.\n    \"SocialModeStats\": [ \"Summary\" ],\n\n    // Summary across all matches in ranked playlists, separated by game mode. This may\n    // include summary information from playlists that are no longer playable. Playlists\n    // that the player has never played in are omitted from this collection. Note that is\n    // possible for a playlist to go between social and ranked. Consumers of this\n    // endpoint should be careful about the possibility that a playlist appears in both\n    // collections. This will contain multiple Summary entries, one for each playlist and\n    // game mode combination. The Summary contract is documented in detail below the\n    // documentation for the Main Response.\n    \"RankedModeStats\": [ \"Summary\" ],\n\n  }\n}\n\n//\n// Summary\n//\n{\n  // Playlist ID that this entry summarizes. If this entry summarizes Custom matches,\n  // this will be null. Playlists are available via the Metadata API.\n  \"PlaylistId\": \"guid\",\n\n  // When summarizing a set of matches that took place in a common playlist, this field\n  // provides the current classification. This field will contain one of the following\n  // values:\n  //   General Stats = 0,\n  //   Blitz Stats = 1,\n  //   Firefight Stats = 2\n  // If this entry summarizes Custom matches, this will be null.\n  \"PlaylistClassification\": \"int\",\n\n  // Highest Competitive Skill Ranking (CSR) achieved by the player in the playlist. If\n  // the player has never finished the measurement matches on this playlist, this field\n  // will be null. If this entry does not summarize ranked matches, this will be null.\n  \"HighestCsr\": {\n\n    // CSR Tier. CSR Tiers are designation-specific. If the player is still in\n    // measurement matches, this field will be null. CSR Tiers are referenced by CSR\n    // Designations, which are available via the Metadata API.\n    \"Tier\": \"int\",\n\n    // CSR Designation. If the player is still in measurement matches, this field will be\n    // null. CSR Designations are available via the Metadata API.\n    \"Designation\": \"int\",\n\n    // Raw CSR value. If the player is still in measurement matches, this field will be\n    // null. If the player is not in a high enough designation, this will be zero.\n    \"Raw\": \"int\",\n\n    // Percentage of progress towards the next CSR tier. If the player is still in\n    // measurement matches, this field will be null.\n    \"PercentToNextTier\": \"int\",\n\n    // Number of measurement matches remaining until the player earns a CSR. If this\n    // field is greater than zero, the player does not have a CSR yet and the other\n    // components of the CSR will be null.\n    \"MeasurementMatchesRemaining\": \"int\",\n\n    // Player's ranking on the CSR leaderboard. If the player is still in measurement\n    // matches, this field will be null. If the player is not in a high enough\n    // designation, this will be zero.\n    \"Rank\": \"int\"\n  },\n\n  // Total amount of time the player spent in matches. This includes time spent observing\n  // the match after being eliminated. This is expressed as an ISO 8601 Duration.\n  \"TotalTimePlayed\": \"string\",\n\n  // Total number of matches that the player participated in.\n  \"TotalMatchesStarted\": \"int\",\n\n  // Total number of matches where the player was present until the match ended.\n  \"TotalMatchesCompleted\": \"int\",\n\n  // Total number of matches that the player won.\n  \"TotalMatchesWon\": \"int\",\n\n  // Total number of matches that the player lost.\n  \"TotalMatchesLost\": \"int\",\n\n  // Total number of times the player has captured a point.\n  \"TotalPointCaptures\": \"int\",\n\n  // Total number of units trained by the player.\n  \"TotalUnitsBuilt\": \"int\",\n\n  // Total number of units trained by the player that were later destroyed.\n  \"TotalUnitsLost\": \"int\",\n\n  // Total number of units that the player participated in destroying.\n  \"TotalUnitsDestroyed\": \"int\",\n\n  // Total number of times the player played a card, if applicable; otherwise, 0.\n  \"TotalCardPlays\": \"int\",\n\n  // Highest wave completed while the player was still present in a match, if applicable;\n  // otherwise, 0.\n  \"HighestWaveCompleted\": \"int\",\n\n  // Summary for all leaders used by the player.\n  \"LeaderStats\": {\n\n    // Leader ID. Leaders are available via the Metadata API.\n    \"string\": {\n\n      // Total amount of time the player spent in matches with this leader. This includes\n      // time spent observing the match after being eliminated. This is expressed as an\n      // ISO 8601 Duration.\n      \"TotalTimePlayed\": \"string\",\n\n      // Total number of matches that the player participated in with this leader.\n      \"TotalMatchesStarted\": \"int\",\n\n      // Total number of matches where the player was present until the match ended with\n      // this leader.\n      \"TotalMatchesCompleted\": \"int\",\n\n      // Total number of matches that the player won with this leader.\n      \"TotalMatchesWon\": \"int\",\n\n      // Total number of matches that the player lost with this leader.\n      \"TotalMatchesLost\": \"int\",\n\n      // Total number of times the player used this leader's active leader power.\n      \"TotalLeaderPowersCast\": \"int\"\n    }\n  },\n\n  // Game mode that this entry summarizes. If this entry is not summarizing a game mode\n  // pivot, this field will be null. Otherwise, this field will contain one of the\n  // following values:\n  //   Unknown = 0,\n  //   CampaignSolo = 1,\n  //   CampaignCooperative = 2,\n  //   Deathmatch = 3,\n  //   Domination = 4,\n  //   Strongholds = 5,\n  //   Blitz = 6,\n  //   Firefight = 7,\n  //   NormalTutorial = 8,\n  //   BlitzTutorial = 9,\n  //   TerminusFirefight = 10\n  \"GameMode\": \"int\",\n\n  // Highest objective score that the player has ever achieved in matches summarized by\n  // this entry. This field is a mapping from the team size to the highest objective\n  // score achieved.\n  \"HighestObjectiveScoreByTeamSize\": {\n\n    \"int\": \"int\",\n\n  }\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ab880db9-daae-4d7c-ab2e-cd95bd80b3eb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.196148Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Stats-Summary"
        }
      }
    }
  }, {
    "id" : "4007e1d4-1369-4b62-b046-897bee6f206f",
    "name" : "Halo Wars 2 - Player Match History - 503",
    "request" : {
      "urlPath" : "/hw2/players/qppfqjywm0b7elmnqo9bcgypgrdoz0vbf6vlwau6npnx82yt6zxhkqlrgxnovjmr4hqc6/matches",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "4007e1d4-1369-4b62-b046-897bee6f206f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.196109Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Match-History"
        }
      }
    }
  }, {
    "id" : "a2a4593f-b950-498e-862c-d9e39dc10e46",
    "name" : "Halo Wars 2 - Player Match History - 500",
    "request" : {
      "urlPath" : "/hw2/players/jc6i5lcv46sebunwg7v9wxjezrsyfsrx1zransc65323rs4xdeklugzvsqviowlrqatej8tb3lmhjcup7aoeqnm4m3k3s9u2l47t3yqdv3yzjqvla3p0zpjlbnpjt6i2/matches",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "a2a4593f-b950-498e-862c-d9e39dc10e46",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.196082Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Match-History"
        }
      }
    }
  }, {
    "id" : "9fd377dd-7c05-41fd-ae65-74b4191a2476",
    "name" : "Halo Wars 2 - Player Match History - 404",
    "request" : {
      "urlPath" : "/hw2/players/xyal67jm0pgec7nxxn0i8irxyl61tirflksfkswgedeszdglzfhz3od2mln8amu9yydj/matches",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "9fd377dd-7c05-41fd-ae65-74b4191a2476",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.196054Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Match-History"
        }
      }
    }
  }, {
    "id" : "b7f8492d-78d2-48d0-a944-6d37fed63591",
    "name" : "Halo Wars 2 - Player Match History (application/json)",
    "request" : {
      "urlPath" : "/hw2/players/63u86kzcwutlkq0lhsjfdyl0kp9otoppn50y4dky3k8g0mhoqxknmmg37r6e5b3g66pec5aeuau6jd8811h/matches",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // Starting point that was used. When the \"start\" query string parameter is specified,\n  // this value is identical. When \"start\" is omitted, the default value is returned.\n  \"Start\": \"int\",  \n\n  // Number of results that the service attempted to retrieve to satisfy this request.\n  // Normally this value is equal to the \"count\" parameter. If the client specified a\n  // count parameter greater than the maximum allowed, this value contains the maximum\n  // allowed amount.\n  \"Count\": \"int\",\n\n  // Number of results that are actually being returned in this response. This field is\n  // named \"ResultCount\" to avoid confusion with \"Count\".\n  \"ResultCount\": \"int\",\n\n  // A list of recent matches. Matches are listed in reverse chronological order with the\n  // most recently started match first.\n  \"Results\": [\n    {\n      // ID for this match. More match details are available via the \"Halo Wars 2 - Match\n      // Result\" Endpoint.\n      \"MatchId\": \"guid\",\n\n      // Match type for this match. This field will contain one of the following values:\n      //   Unknown = 0,\n      //   Campaign = 1,\n      //   Custom = 2,\n      //   Matchmaking = 3\n      \"MatchType\": \"int\",\n\n      // Game mode for this match. This field will contain one of the following values:\n      //   Unknown = 0,\n      //   CampaignSolo = 1,\n      //   CampaignCooperative = 2,\n      //   Deathmatch = 3,\n      //   Domination = 4,\n      //   Strongholds = 5,\n      //   Blitz = 6,\n      //   Firefight = 7,\n      //   NormalTutorial = 8,\n      //   BlitzTutorial = 9,\n      //   TerminusFirefight = 10\n      \"GameMode\": \"int\",\n\n      // Season ID for the match if the match occurred in a ranked playlist; otherwise,\n      // null. Seasons are available via the Metadata API.\n      \"SeasonId\": \"guid\",\n\n      // Playlist the match occurred in if the match occurred in a playlist; otherwise,\n      // null or empty Guid. Playlists are available via the Metadata API.\n      \"PlaylistId\": \"guid\",\n\n      // Information regarding the teams in the match. Neutral teams are not included in\n      // this collection.\n      \"Teams\": {\n\n        // Team ID.\n        \"int\": {\n\n          // Number of players on the team.\n          \"TeamSize\": \"int\"\n        },\n\n      },\n\n      // ID of the map the match was played on. Maps are available via the Metadata API.\n      \"MapId\": \"string\",\n\n      // Date and time the match started. This is expressed as an ISO 8601 combined Date\n      // and Time.\n      \"MatchStartDate\": {\n\n        \"ISO8601Date\": \"string\"\n      },\n\n      // Duration of time the player participated in the match. If the player finished\n      // the match, this will be equivalent to the match duration. If the player did not\n      // finish the match, this will be how long the player participated in the match\n      // until they left (with the assumption that the match potentially continued on\n      // without the player and the actual match duration was longer). This is expressed\n      // as an ISO 8601 Duration.\n      \"PlayerMatchDuration\": \"string\",\n\n      // Index of the player in the match.\n      \"PlayerIndex\": \"int\",\n\n      // ID of the team the player was a member of.\n      \"TeamId\": \"int\",\n\n      // Index of the player on their team. This is derived by sorting all the players on\n      // a team by their PlayerIndex and selecting the resulting position.\n      \"TeamPlayerIndex\": \"int\",\n\n      // Leader the player used. Leaders are available via the Metadata API.\n      \"LeaderId\": \"int\",\n\n      // Whether the player finished the match.\n      \"PlayerCompletedMatch\": \"bool\",\n\n      // Outcome of the match for the player. If the player did not finish the match,\n      // this will indicate a loss. This field will contain one of the following values:\n      //   Unknown = 0,\n      //   Win = 1,\n      //   Loss = 2,\n      //   Tie = 3\n      \"PlayerMatchOutcome\": \"int\",\n\n      // XP progress the player earned as a result of their participation in the match.\n      \"XPProgress\": {\n\n        // Total amount of XP the player had when they entered the match.\n        \"PreviousTotalXP\": \"int\",\n\n        // XP the player earned as a result of actions taken in the match. This does not\n        // include XP the player earned as a result of challenges completed in the match,\n        // which is reported separately.\n        \"GameplayXP\": \"int\",\n\n        // XP the player earned as a result of completing challenges in the match. This\n        // does not include XP the player earned as a result of actions taken in the\n        // match, which is reported separately.\n        \"ChallengesXP\": \"int\",\n\n        // Total amount of XP the player had after the match.\n        \"UpdatedTotalXP\": \"int\",\n\n        // Spartan Ranks the player completed as a result of the XP earned in the match.\n        // If this collection is empty, the player did not earn enough XP in this match\n        // to complete a rank. There is no significance to the ordering of this\n        // collection.\n        \"CompletedSpartanRanks\": [\n          {\n            // Spartan Rank the player completed. Spartan Ranks are available via the\n            // Metadata API.\n            \"Id\": \"guid\",\n\n            // Packs the player was awarded as a result of completing the rank. There is\n            // no significance to the ordering of this collection. Packs are available\n            // via the Metadata API.\n            \"PacksAwarded\": [ \"guid\" ]\n          }\n        ]\n      },\n\n      // Rating progress the player earned as a result of their participation in the\n      // match.\n      \"RatingProgress\": {\n\n        // Competitive Skill Ranking (CSR) of the player before the match started. If the\n        // match did not occur in a ranked playlist, this will be null.\n        \"PreviousCsr\": {\n\n          // CSR Tier. CSR Tiers are designation-specific. If the player is still in\n          // measurement matches, this field will be null. CSR Tiers are referenced by\n          // CSR Designations, which are available via the Metadata API.\n          \"Tier\": \"int\",\n\n          // CSR Designation. If the player is still in measurement matches, this field\n          // will be null. CSR Designations are available via the Metadata API.\n          \"Designation\": \"int\",\n\n          // Raw CSR value. If the player is still in measurement matches, this field\n          // will be null. If the player is not in a high enough designation, this will\n          // be zero.\n          \"Raw\": \"int\",\n\n          // Percentage of progress towards the next CSR tier. If the player is still in\n          // measurement matches, this field will be null.\n          \"PercentToNextTier\": \"int\",\n\n          // Number of measurement matches remaining until the player earns a CSR. If\n          // this field is greater than zero, the player does not have a CSR yet and the\n          // other components of the CSR will be null.\n          \"MeasurementMatchesRemaining\": \"int\",\n\n          // Player's ranking on the CSR leaderboard. If the player is still in\n          // measurement matches, this field will be null. If the player is not in a high\n          // enough designation, this will be zero.\n          \"Rank\": \"int\"\n        },\n\n        // Competitive Skill Ranking (CSR) of the player after the match ended. If the\n        // match did not occur in a ranked playlist, this will be null.\n        \"UpdatedCsr\": {\n\n          // CSR Tier. CSR Tiers are designation-specific. If the player is still in\n          // measurement matches, this field will be null. CSR Tiers are referenced by\n          // CSR Designations, which are available via the Metadata API.\n          \"Tier\": \"int\",\n\n          // CSR Designation. If the player is still in measurement matches, this field\n          // will be null. CSR Designations are available via the Metadata API.\n          \"Designation\": \"int\",\n\n          // Raw CSR value. If the player is still in measurement matches, this field\n          // will be null. If the player is not in a high enough designation, this will\n          // be zero.\n          \"Raw\": \"int\",\n\n          // Percentage of progress towards the next CSR tier. If the player is still in\n          // measurement matches, this field will be null.\n          \"PercentToNextTier\": \"int\",\n\n          // Number of measurement matches remaining until the player earns a CSR. If\n          // this field is greater than zero, the player does not have a CSR yet and the\n          // other components of the CSR will be null.\n          \"MeasurementMatchesRemaining\": \"int\",\n\n          // Player's ranking on the CSR leaderboard. If the player is still in\n          // measurement matches, this field will be null. If the player is not in a high\n          // enough designation, this will be zero.\n          \"Rank\": \"int\"\n        },\n\n        // Internal use.\n        \"PreviousMmr\": {\n\n          \"Rating\": \"double\",\n\n          \"Variance\": \"double\",\n\n          // Unused.\n          \"LastModifiedDate\": {\n\n            \"ISO8601Date\": \"string\"\n          }\n        },\n\n        // Internal use.\n        \"UpdatedMmr\": {\n\n          \"Rating\": \"double\",\n\n          \"Variance\": \"double\",\n\n          // Unused.\n          \"LastModifiedDate\": {\n\n            \"ISO8601Date\": \"string\"\n          }\n        },\n\n      }\n    }\n  ],\n\n  // Unused.\n  \"Links\": {}\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b7f8492d-78d2-48d0-a944-6d37fed63591",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.196021Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Match-History"
        }
      }
    }
  }, {
    "id" : "f1d9b1f1-f3f3-4162-80f3-e1db1e9f706d",
    "name" : "Halo Wars 2 - Player Campaign Progress - 503",
    "request" : {
      "urlPath" : "/hw2/players/wcwvxukbcydpvapfjbc9cg8l5xwh45ve3b4br6z7ttvc7r8th6pvd764merg4xthtk7n7f1avft1za2zw66zjqd48ykvak07y04g3se0chynkrops3si63o55eemefinuyr6jyttdhunhp2bgktf3k5og4i417dld2w06qkmieicnuo6ilbbir/campaign-progress",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "f1d9b1f1-f3f3-4162-80f3-e1db1e9f706d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.195976Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Campaign-Progress"
        }
      }
    }
  }, {
    "id" : "1a778ac9-a5ac-4a9b-9fdd-350825ae94ec",
    "name" : "Halo Wars 2 - Player Campaign Progress - 500",
    "request" : {
      "urlPath" : "/hw2/players/eee2tioblnp8onxgpgqopbs2dmmrcw7gppk7hrrrzbgcxsc7h/campaign-progress",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "1a778ac9-a5ac-4a9b-9fdd-350825ae94ec",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.195947Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Campaign-Progress"
        }
      }
    }
  }, {
    "id" : "d474ca5d-79f9-4883-8729-f89537f4aa71",
    "name" : "Halo Wars 2 - Player Campaign Progress - 404",
    "request" : {
      "urlPath" : "/hw2/players/90mcy0ipdt4t92uz0dr0pfmaepgdh36ez/campaign-progress",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "d474ca5d-79f9-4883-8729-f89537f4aa71",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.19592Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Campaign-Progress"
        }
      }
    }
  }, {
    "id" : "83f56e71-da6b-4acf-aeb4-24011387f660",
    "name" : "Halo Wars 2 - Player Campaign Progress (application/json)",
    "request" : {
      "urlPath" : "/hw2/players/ymsng7rquaboh6l69l5yb85b4zycpjwskfanr9858m7jlx7b167sx19vp30avhk3zt5iobxb7jsi60m5kok4sd7czamu7q6hj/campaign-progress",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // Total amount of XP the player has earned from the campaign.\n  \"CampaignXP\": \"int\",\n\n  // Per-level progress information. If an entry is missing from this collection, the\n  // player has not made any progress towards the level. Campaign Levels are available\n  // via the Metadata API.\n  \"Levels\": {\n\n    // Level ID.\n    \"int\": {\n\n      // Skulls from this level that the player has unlocked. Campaign Skulls are\n      // available via the Metadata API.\n      \"SkullsUnlocked\": [ \"int\" ],\n\n      // Total amount of time the player has spent playing this level in solo mode. This\n      // is expressed as an ISO 8601 Duration.\n      \"TotalSoloPlayTime\": \"string\",\n\n      // Total amount of time the player has spent playing this level in cooperative\n      // mode. This is expressed as an ISO 8601 Duration.\n      \"TotalCooperativePlayTime\": \"string\",\n\n      // Per-difficulty progress information for solo mode. If this level has not been\n      // completed in solo mode, this collection will be empty. Difficulties are\n      // available via the Metadata API.\n      \"SoloCompletion\": {\n\n        // Difficulty ID.\n        \"int\": {\n\n          // The fastest time that the player has ever achieved on this level on this\n          // mode on this difficulty. This may or may not have occurred at the same time\n          // the player earned their best score. This is expressed as an ISO 8601\n          // Duration.\n          \"BestCompletionTime\": \"string\",\n\n          // The highest score that the player has ever achieved on this level on this\n          // mode on this difficulty. This indicates the individual score, not the team\n          // score. This may or may not have occurred at the same time the player earned\n          // their best completion time.\n          \"BestScore\": \"int\",\n\n          // The critical objectives that the player has completed on this level on this\n          // mode on this difficulty. These may or may not have occurred in the same\n          // playthrough. Critical Objectives are referenced by Campaign Levels, which\n          // are available via the Metadata API.\n          \"CriticalObjectivesCompleted\": [ \"int\" ],\n\n          // The bonus objectives that the player has completed on this level on this\n          // mode on this difficulty. These may or may not have occurred in the same\n          // playthrough. Bonus Objectives are referenced by Campaign Levels, which are\n          // available via the Metadata API.\n          \"BonusObjectivesCompleted\": [ \"int\" ],\n\n          // The optional objectives that the player has completed on this level on this\n          // mode on this difficulty. These may or may not have occurred in the same\n          // playthrough. Optional Objectives are referenced by Campaign Levels, which\n          // are available via the Metadata API.\n          \"OptionalObjectivesCompleted\": [ \"int\" ]\n        }\n      },\n\n      // Per-difficulty progress information for cooperative mode. If this level has not\n      // been completed in cooperative mode, this collection will be empty. Difficulties\n      // are available via the Metadata API.\n      \"SoloCompletion\": {\n\n        // Difficulty ID.\n        \"int\": {\n\n          // The fastest time that the player has ever achieved on this level on this\n          // mode on this difficulty. This may or may not have occurred at the same time\n          // the player earned their best score. This is expressed as an ISO 8601\n          // Duration.\n          \"BestCompletionTime\": \"string\",\n\n          // The highest score that the player has ever achieved on this level on this\n          // mode on this difficulty. This indicates the individual score, not the team\n          // score. This may or may not have occurred at the same time the player earned\n          // their best completion time.\n          \"BestScore\": \"int\",\n\n          // The critical objectives that the player has completed on this level on this\n          // mode on this difficulty. These may or may not have occurred in the same\n          // playthrough. Critical Objectives are referenced by Campaign Levels, which\n          // are available via the Metadata API.\n          \"CriticalObjectivesCompleted\": [ \"int\" ],\n\n          // The bonus objectives that the player has completed on this level on this\n          // mode on this difficulty. These may or may not have occurred in the same\n          // playthrough. Bonus Objectives are referenced by Campaign Levels, which are\n          // available via the Metadata API.\n          \"BonusObjectivesCompleted\": [ \"int\" ],\n\n          // The optional objectives that the player has completed on this level on this\n          // mode on this difficulty. These may or may not have occurred in the same\n          // playthrough. Optional Objectives are referenced by Campaign Levels, which\n          // are available via the Metadata API.\n          \"OptionalObjectivesCompleted\": [ \"int\" ]\n        }\n      },\n\n      // Date when the player first completed the level in either solo or cooperative\n      // mode on any difficulty. If this level has not been completed, this will be null.\n      // This is expressed as an ISO 8601 combined Date and Time.\n      \"FirstCompletionDate\": {\n\n        \"ISO8601Date\": \"string\"\n      }\n    }\n  },\n\n  // Logs that the player has unlocked. Campaign Logs are available via the Metadata API.\n  \"LogsUnlocked\": [ \"int\" ]\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "83f56e71-da6b-4acf-aeb4-24011387f660",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.195886Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Campaign-Progress"
        }
      }
    }
  }, {
    "id" : "d88fd2b5-2bb8-49b6-8bbe-85bc6f01dec7",
    "name" : "Halo Wars 2 - Leaderboard - Player CSR - 503",
    "request" : {
      "urlPath" : "/hw2/player-leaderboards/csr/2096/203h",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "d88fd2b5-2bb8-49b6-8bbe-85bc6f01dec7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.19582Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Leaderboard-Player-CSR"
        }
      }
    }
  }, {
    "id" : "65e8224c-7fc9-4799-96cf-9a1088cf3f9f",
    "name" : "Halo Wars 2 - Leaderboard - Player CSR - 500",
    "request" : {
      "urlPath" : "/hw2/player-leaderboards/csr/89v0/d2k9",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "65e8224c-7fc9-4799-96cf-9a1088cf3f9f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.195685Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Leaderboard-Player-CSR"
        }
      }
    }
  }, {
    "id" : "cc1a2e14-9fdd-4760-8027-f4c7daeae108",
    "name" : "Halo Wars 2 - Leaderboard - Player CSR - 404",
    "request" : {
      "urlPath" : "/hw2/player-leaderboards/csr/22w0/1qp2",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "cc1a2e14-9fdd-4760-8027-f4c7daeae108",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.195552Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Leaderboard-Player-CSR"
        }
      }
    }
  }, {
    "id" : "762e8039-c8f7-458b-a807-2bda22e2c1d4",
    "name" : "Halo Wars 2 - Leaderboard - Player CSR (application/json)",
    "request" : {
      "urlPath" : "/hw2/player-leaderboards/csr/49j9/mvk2",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // The starting point that was used. Will always be 0.\n  \"Start\": \"int\",\n\n  // The number of results that the service attempted to retrieve to satisfy this\n  // request. Normally this value is equal to the \"count\" parameter. If the client\n  // specified a count parameter greater than the maximum allowed, this value contains\n  // the maximum allowed amount.\n  \"Count\": \"int\",\n\n  // The number of results that are actually being returned in this response. This field\n  // is named \"ResultCount\" to avoid confusion with \"Count\".\n  \"ResultCount\": \"int\",\n\n  // Internal use only. A set of related resource links.\n  \"Links\": \"links\",\n\n  // A list of players in the leaderboard. Players are listed in chronological order with\n  // the player with the highest CSR first.\n  \"Results\": [\n    {\n      // Information about the player for whom this data was returned.\n      \"Player\": {\n\n        // The gamertag of the player queried.\n        \"Gamertag\": \"string\",\n\n        // Internal use only. This will always be null.\n        \"Xuid\": null\n      },\n\n      // The player's rank in the leaderboard.\n      \"Rank\": \"int\",\n\n      \"Score\": {\n\n        // The CSR tier. CSR Tiers are designation-specific and are available via the\n        // Metadata API.\n        \"Tier\": \"int\",\n\n        // The Designation of the CSR. CSR Designations are available via the Metadata\n        // API.\n        \"DesignationId\": \"int\",\n\n        // The CSR value. Zero for normal (Diamond and below) designations.\n        \"Csr\": \"int\",\n\n        // The percentage of progress towards the next CSR tier.\n        \"PercentToNextTier\": \"int\",\n\n        // If the CSR is Onyx or Champion, the player's leaderboard ranking. Null\n        // otherwise.\n        \"Rank\": \"int\"\n      }\n    }\n  ]\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "762e8039-c8f7-458b-a807-2bda22e2c1d4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.195412Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Leaderboard-Player-CSR"
        }
      }
    }
  }, {
    "id" : "30192465-4e49-4bd4-9aac-4208e793f1dd",
    "name" : "Halo Wars 2 - Match Events - 503",
    "request" : {
      "urlPath" : "/hw2/matches/t7m5/events",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "30192465-4e49-4bd4-9aac-4208e793f1dd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.195253Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Match-Events"
        }
      }
    }
  }, {
    "id" : "984c2e7a-7ca2-4df1-80cc-383cf5f6168f",
    "name" : "Halo Wars 2 - Match Events - 500",
    "request" : {
      "urlPath" : "/hw2/matches/2y8b/events",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "984c2e7a-7ca2-4df1-80cc-383cf5f6168f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.195176Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Match-Events"
        }
      }
    }
  }, {
    "id" : "c38a8163-5449-41ec-8280-203d506cf9f7",
    "name" : "Halo Wars 2 - Match Events - 404",
    "request" : {
      "urlPath" : "/hw2/matches/7po4/events",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "c38a8163-5449-41ec-8280-203d506cf9f7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.195094Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Match-Events"
        }
      }
    }
  }, {
    "id" : "18b3b8e1-b074-43ea-940d-19eb4ebb2563",
    "name" : "Halo Wars 2 - Match Events (application/json)",
    "request" : {
      "urlPath" : "/hw2/matches/4zo5/events",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "//\n// Main Response\n//\n{\n  // Events that describe a match from start to completion. Events are reported in\n  // chronological order.\n  // Events can come in a variety of types indicated by the \"EventName\" field. Each event\n  // is documented in detail below the documentation for this return contract.\n  // Additional event types may be added in the future.\n  // When deserializing events, it is suggested to use a union of all of the fields\n  // across all of the different event types.\n  \"GameEvents\": [ \"GameEvent\" ],\n\n  // Whether this set of events accounts for the complete set of events from the match.\n  \"IsCompleteSetOfEvents\": \"bool\"\n}\n\n//\n// BuildingConstructionQueued Event\n//\n// This event is fired for the following reasons:\n//   - A player queues a building for construction.\n//   - A building is provided by the scenario (for instance, the buildings a player\n//     starts with at the beginning of the scenario). In this case, a subsequent\n//     BuildingConstructionCompleted event will not be fired.\n//   - A building is produced by a leader power.\n//   - A building is built in an \"upgraded\" state. In this case, a\n//     BuildingConstructionQueued event is fired for the the \"upgraded\" building rather\n//     than firing a BuildingConstructionQueued event for the \"non-upgraded\" building\n//     followed by a subsequent BuildingUpgraded event.\n//\n{\n  // Index of the player that will control building that was queued for construction.\n  \"PlayerIndex\": \"int\",\n\n  // ID that indicates the type of the building. Buildings are available via the Metadata\n  // API as Game Objects.\n  \"BuildingId\": \"string\",\n\n  // Instance ID that identifies the building. The building will be referred to by this\n  // ID in subsequent events.\n  \"InstanceId\": \"int\",\n\n  // Location that the building will be created at.\n  \"Location\": {\n\n    \"x\": \"double\",\n\n    \"y\": \"double\",\n\n    \"z\": \"double\"\n  },\n\n  // Supply cost paid to construct the building.\n  \"SupplyCost\": \"int\",\n\n  // Energy cost paid to construct the building.\n  \"EnergyCost\": \"int\",\n\n  // Length of the construction queue after enqueuing the building.\n  \"QueueLength\": \"int\",\n\n  // Whether the building was queued by the player or the scenario.\n  \"ProvidedByScenario\": \"bool\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"EventName\"  \n}\n\n//\n// BuildingConstructionCompleted Event\n//\n// This event is fired when a building is successfully constructed.\n//\n{\n  // Index of the player that controls the building that was constructed.\n  \"PlayerIndex\": \"int\",\n\n  // Instance of the building that was constructed.\n  \"InstanceId\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"BuildingConstructionCompleted\"  \n}\n\n//\n// BuildingRecycled Event\n//\n// This event is fired when a building is recycled.\n//\n{\n  // Index of the player that controls the building that was recycled.\n  \"PlayerIndex\": \"int\",\n\n  // Instance of the building that was recycled.\n  \"InstanceId\": \"int\",\n\n  // Supply earned from recycling the building.\n  \"SupplyEarned\": \"int\",\n\n  // Energy earned from recycling the building.\n  \"EnergyEarned\": \"int\",\n\n  // Whether the building was recycled by the player or the scenario.\n  \"ProvidedByScenario\": \"bool\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"BuildingRecycled\"  \n}\n\n//\n// BuildingUpgraded Event\n//\n// This event is fired when a building is upgraded.\n//\n{\n  // Index of the player that controls the building that was upgraded.\n  \"PlayerIndex\": \"int\",\n\n  // ID that indicates the new type of the building. Buildings are available via the\n  // Metadata API as Game Objects.\n  \"NewBuildingId\": \"string\",\n\n  // Instance ID of the building that was upgraded.\n  \"InstanceId\": \"int\",\n\n  // Supply cost paid to upgrade the building.\n  \"SupplyCost\": \"int\",\n\n  // Energy cost paid to upgrade the building.\n  \"EnergyCost\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"BuildingUpgraded\"  \n}\n\n//\n// CardCycled Event\n//\n// This event is fired when a card is cycled.\n//\n{\n  // Index of the player that cycled a card.\n  \"PlayerIndex\": \"int\",\n\n  // Mana cost paid to cycle the card.\n  \"ManaCost\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"CardCycled\"  \n}\n\n//\n// CardPlayed Event\n//\n// This event is fired when a card is played.\n//\n{\n  // Index of the player that played a card.\n  \"PlayerIndex\": \"int\",\n\n  // ID that indicates the type of the card. Cards are available via the Metadata API.\n  \"CardId\": \"guid\",\n\n  // Instance ID that identifies this cast of the card. This instance will be referred to\n  // by this ID in subsequent events.\n  \"InstanceId\": \"int\",\n\n  // Mana cost paid to play the card.\n  \"ManaCost\": \"int\",\n\n  // Location where the card was played.\n  \"TargetLocation\": {\n\n    \"x\": \"double\",\n\n    \"y\": \"double\",\n\n    \"z\": \"double\"\n  },\n\n  // Whether the card was played in the base.\n  \"SpawnAtBase\": \"bool\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"CardPlayed\"  \n}\n\n//\n// Death Event\n//\n// This event is fired when a building or unit is destroyed.\n//\n{\n  // Index of the player that controlled the building or unit that was destroyed.\n  \"VictimPlayerIndex\": \"int\",\n\n  // ID that indicates the type of the building or unit that was destroyed. Game Objects\n  // are available via the Metadata API.\n  \"VictimObjectTypeId\": \"string\",\n\n  // Instance ID of the building or unit that was destroyed.\n  \"VictimInstanceId\": \"int\",\n\n  // Whether the death was considered a suicide.\n  \"IsSuicide\": \"bool\",\n\n  // Participants that contributed to the destruction of the building or unit.\n  // Participants are grouped by player, then object, then combat stats.\n  \"Participants\": {\n\n    // Index of the player that participated in the destruction.\n    \"int\": {\n\n      // Objects that participated in the destruction that were owned by the given\n      // player. Object participants are grouped by object then combat stats.\n      \"ObjectParticipants\": {\n\n        // ID that indicates the type of the building or unit that participated in the\n        // destruction. Game Objects are available via the Metadata API.\n        \"string\": {\n\n          // Number of objects of the given type owned by the given player that\n          // participated in the destruction.\n          \"Count\": \"int\",\n\n          // Information about the combat stats across all the objects of the given type\n          // owned by the given player that participated in the destruction. Combat stats\n          // are grouped by damage type.\n          \"CombatStats\": {\n\n            // Damage type dealt by the object of the given type. This field will contain\n            // one of the following values:\n            //   Basic = 0,\n            //   LeaderPower = 1,\n            //   LeaderPowerNonFlying = 2,\n            //   AntiInfantry = 3,\n            //   Fire = 4,\n            //   AntiBuildingFire = 5,\n            //   SmallArms = 6,\n            //   AASmallArms = 7,\n            //   SmallArmsScouts = 8,\n            //   MediumArms = 9,\n            //   ChainGun = 10,\n            //   ArmorPiercing = 11,\n            //   AntiVehicle = 12,\n            //   FuelRod = 13,\n            //   BansheeFuelRod = 14,\n            //   AntiAir = 15,\n            //   Explosive = 16,\n            //   TankExplosive = 17,\n            //   Artillery = 18,\n            //   Missile = 19,\n            //   Grenade = 20,\n            //   Demolition = 21,\n            //   Beam = 22,\n            //   WarthogRam = 23,\n            //   GaussCannon = 24,\n            //   BruteShot = 25,\n            //   Melee = 26,\n            //   SuicideGrunt = 27,\n            //   SuicideGruntAV = 28,\n            //   SuperSentinel = 29,\n            //   Hero = 30,\n            //   CampaignHero = 31,\n            //   ScarabBeam = 32,\n            //   Unknown = 255\n            // Additional damage types may be added in the future.\n            \"int\": {\n\n              // Number of attacks of the given damage type that were successfully landed\n              // on the victim building or unit.\n              \"AttacksLanded\": \"int\"\n            }\n          }\n        }\n      }\n    }\n  },\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"Death\"  \n}\n\n//\n// FirefightWaveCompleted Event\n//\n// This event is fired when a team successfully clears a Firefight wave.\n//\n{\n  // Wave number that was completed.\n  \"WaveNumber\": \"int\",\n\n  // Elapsed time, measured in milliseconds, that the team took to clear the wave.\n  \"WaveDurationMilliseconds\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"FirefightWaveCompleted\"  \n}\n\n//\n// FirefightWaveSpawned Event\n//\n// This event is fired when a Firefight wave has been spawned.\n//\n{\n  // Wave number that was spawned.\n  \"WaveNumber\": \"int\",\n\n  // Instance IDs of the buildings and units that make up the wave.\n  \"InstancesSpawned\": [ \"int\" ],\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"FirefightWaveSpawned\"  \n}\n\n//\n// FirefightWaveStarted Event\n//\n// This event is fired when a Firefight wave has started.\n//\n{\n  // Wave number that was started.\n  \"WaveNumber\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"FirefightWaveStarted\"  \n}\n\n//\n// LeaderPowerCast Event\n//\n// This event is fired when a leader power is cast.\n//\n{\n  // Index of the player that cast the leader power.\n  \"PlayerIndex\": \"int\",\n\n  // ID that indicates the type of the leader power. Leader Powers are available via the\n  // Metadata API.\n  \"PowerId\": \"string\",\n\n  // Instance ID that identifies this cast of the leader power. This instance will be\n  // referred to by this ID in subsequent events.\n  \"InstanceId\": \"int\",\n\n  // Location where the leader power was cast.\n  \"TargetLocation\": {\n\n    \"x\": \"double\",\n\n    \"y\": \"double\",\n\n    \"z\": \"double\"\n  },\n\n  // Supply cost paid to cast the leader power.\n  \"SupplyCost\": \"int\",\n\n  // Energy cost paid to cast the leader power.\n  \"EnergyCost\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"LeaderPowerCast\"  \n}\n\n//\n// LeaderPowerUnlocked Event\n//\n// This event is fired when a leader power is unlocked.\n//\n{\n  // Index of the player that unlocked the leader power.\n  \"PlayerIndex\": \"int\",\n\n  // ID that indicates the type of the leader power. Leader Powers are available via the\n  // Metadata API.\n  \"PowerId\": \"string\",\n\n  // Command point cost paid to unlock the leader power.\n  \"CommandPointCost\": \"int\",\n\n  // Whether the leader power was unlocked by the scenario.\n  \"ProvidedByScenario\": \"bool\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"LeaderPowerUnlocked\"  \n}\n\n//\n// ManaOrbCollected Event\n//\n// This event is fired when a mana orb is collected.\n//\n{\n  // Index of the player that collected the mana orb.\n  \"PlayerIndex\": \"int\",\n\n  // Instance ID of the unit that collected the mana orb.\n  \"CollectorInstanceId\": \"int\",\n\n  // Increase to the player's mana generation rate.\n  \"ManaRateIncrease\": \"int\",\n\n  // Location of the mana orb that was collected.\n  \"Location\": {\n\n    \"x\": \"double\",\n\n    \"y\": \"double\",\n\n    \"z\": \"double\"\n  },\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"ManaOrbCollected\"  \n}\n\n//\n// MatchEnd Event\n//\n// This event is fired when the match ends.\n//\n{\n  // Reason the match ended. This field will contain one of the following values:\n  //   Unknown = 0,\n  //   Completed = 1,\n  //   StartedNewMission = 2,\n  //   EveryoneDisconnected = 3,\n  //   InviteAccepted = 4\n  \"MatchEndReason\": \"int\",\n\n  // Reason the winning team achieved victory. This field will contain one of the\n  // following values:\n  //   EndedPrematurely = 0,\n  //   ObjectiveCompleted = 1,\n  //   OpponentsEliminated = 2,\n  //   Unknown = 255\n  \"VictoryCondition\": \"int\",\n\n  // Elapsed time, measured in milliseconds, spent playing the match.\n  \"ActivePlaytimeMilliseconds\": \"int\",\n\n  // Ending states for the teams in the match.\n  \"TeamState\": {\n\n    // Team ID.\n    \"int\": {\n\n      // Score for the team.\n      \"ObjectiveScore\": \"int\",\n\n      // Outcome for the team. This field will contain one of the following values:\n      //   Unknown = 0,\n      //   Win = 1,\n      //   Loss = 2,\n      //   Tie = 3\n      \"MatchOutcome\": \"int\"\n    }\n  },\n\n  // Ending states for the players in the match.\n  \"PlayerState\": {\n\n    // Player Index.\n    \"int\": {\n\n      // Score for the player.\n      \"PersonalScore\": \"int\"\n    }\n  },\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"MatchEnd\"  \n}\n\n//\n// MatchStart Event\n//\n// This event is fired when the match starts.\n//\n{\n  // ID of the match.\n  \"MatchId\": \"guid\",\n\n  // Game mode. This field will contain one of the following values:\n  //   Unknown = 0,\n  //   CampaignSolo = 1,\n  //   CampaignCooperative = 2,\n  //   Deathmatch = 3,\n  //   Domination = 4,\n  //   Strongholds = 5,\n  //   Blitz = 6,\n  //   Firefight = 7,\n  //   NormalTutorial = 8,\n  //   BlitzTutorial = 9,\n  //   TerminusFirefight = 10\n  \"GameMode\": \"int\",\n\n  // Match type. This field will contain one of the following values:\n  //   Unknown = 0,\n  //   Campaign = 1,\n  //   Custom = 2,\n  //   Matchmaking = 3\n  \"MatchType\": \"int\",\n\n  // ID of the map. Maps are available via the Metadata API.\n  \"MapId\": \"string\",\n\n  // Playlist the match occurred in if the match occurred in a playlist; otherwise, empty\n  // Guid.\n  \"PlaylistId\": \"guid\",\n\n  // Max team size for the match.\n  \"TeamSize\": \"int\",\n\n  // whether the match is using the default rule set.\n  \"IsDefaultRuleSet\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"MatchStart\"  \n}\n\n//\n// PlayerEliminated Event\n//\n// This event is fired when a player is eliminated from the match.\n//\n{\n  // Index of the player that was eliminated.\n  \"PlayerIndex\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"PlayerEliminated\"  \n}\n\n//\n// PlayerJoinedMatch Event\n//\n// This event is fired at the start of the match for each player in the match. This event\n// is fired for the neutral players in addition to the Human and Computer players.\n//\n{\n  // Index of the player that joined the match. The player will be referred to by this\n  // index in subsequent events.\n  \"PlayerIndex\": \"int\",\n\n  // Type of the player that joined the match. This field will contain one of the\n  // following values:\n  //   Unknown = 0,\n  //   Human = 1,\n  //   Computer = 2,\n  //   NPC = 3\n  \"PlayerType\": \"int\",\n\n  // Identify of the player if this is a human player; otherwise, null.\n  \"HumanPlayerId\": {\n\n    // Gamertag of the player.\n    \"Gamertag\": \"string\",\n\n    // Internal use. This will always be null.\n    \"Xuid\": null\n  },\n\n  // ID of the computer player if this is a computer player; otherwise, null.\n  \"ComputerPlayerId\": \"int\",\n\n  // Difficulty of the computer player if this is a computer player; otherwise, null.\n  // Difficulties are available via the Metadata API.\n  \"ComputerDifficulty\": \"int\",\n\n  // Team the player is a member of.\n  \"TeamId\": \"int\",\n\n  // Leader the player is using. Leaders are available via the Metadata API.\n  \"LeaderId\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"PlayerJoinedMatch\"  \n}\n\n//\n// PlayerLeftMatch Event\n//\n// This event is fired when a player leaves the match early for any reason. This is not\n// to be confused with the PlayerEliminated event. If a player is eliminated, the\n// PlayerEliminated event will be fired. The player may continue to spectate the match\n// after being eliminated. If the player stops spectating the match, then this event will\n// be fired.\n//\n{\n  // Index of the player that left the match.\n  \"PlayerIndex\": \"int\",\n\n  // Elapsed time, measured in milliseconds, the player spent playing the match.\n  \"TimeInMatchMilliseconds\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"PlayerLeftMatch\"  \n}\n\n//\n// PointCaptured Event\n//\n// This event is fired when an objective is captured in all game modes besides Blitz.\n//\n{\n  // Index of the player that captured the objective.\n  \"PlayerIndex\": \"int\",\n\n  // Instance ID of the objective that was captured.\n  \"InstanceId\": \"int\",\n\n  // Instance ID of the unit that captured the objective.\n  \"CapturerInstanceId\": \"int\",\n\n  // Location of the unit that captured the objective.\n  \"CapturerLocation\": {\n\n    \"x\": \"double\",\n\n    \"y\": \"double\",\n\n    \"z\": \"double\"\n  },\n\n  // ID of the team that now owns the objective. If the objective is not owned by a team,\n  // this will be 0.\n  \"NewOwningTeamId\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"PointCaptured\"  \n}\n\n//\n// PointCreated Event\n//\n// This event is fired at the start of the match for each objective that can be captured\n// on the map.\n//\n{\n  // ID that indicates the type of the objective.\n  \"PointId\": \"string\",\n\n  // Instance ID that identifies the objective. The objective will be referred to by this\n  // ID in subsequent events.\n  \"InstanceId\": \"int\",\n\n  // Location of the objective.\n  \"Location\": {\n\n    \"x\": \"double\",\n\n    \"y\": \"double\",\n\n    \"z\": \"double\"\n  },\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"PointCreated\"  \n}\n\n//\n// PointStatusChange Event\n//\n// This event is fired when an objective is captured in the Blitz game mode.\n//\n{\n  // Instance ID of the objective that was captured.\n  \"InstanceId\": \"int\",\n\n  // Updated status of the objective. This field will contain one of the following values:\n  //   Neutral = 0,\n  //   Contested = 1,\n  //   Captured = 2\n  \"Status\": \"int\",\n\n  // ID of the team that now owns the objective. If the objective is not owned by a team,\n  // this will be 255.\n  \"OwningTeamId\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"PointStatusChange\"  \n}\n\n//\n// ResourceHeartbeat Event\n//\n// This event is fired at the start of a match and then at regular 5 seconds thereafter.\n//\n{\n  // Current resources for each team.\n  \"TeamResources\": {\n\n    // Team ID.\n    \"int\": {\n\n      // Current objective score for the team.\n      \"ObjectiveScore\": \"int\"\n    }\n  },\n\n  // Current resources for each player.\n  \"PlayerResources\": {\n\n    // Player Index.\n    \"int\": {\n\n      // Current supply balance for the player.\n      \"Supply\": \"int\",\n\n      // Total supply generated by the player throughout the match.\n      \"TotalSupply\": \"int\",\n\n      // Current energy balance for the player.\n      \"Energy\": \"int\",\n\n      // Total energy generated by the player throughout the match.\n      \"TotalEnergy\": \"int\",\n\n      // Current population count for the player.\n      \"Population\": \"int\",\n\n      // Current maximum population for the player.\n      \"PopulationCap\": \"int\",\n\n      // Current tech level for the player.\n      \"TechLevel\": \"int\",\n\n      // Current command point balance for the player.\n      \"CommandPoints\": \"int\",\n\n      // Total command points generated by the player throughout the match.\n      \"TotalCommandPoints\": \"int\",\n\n      // Current mana balance for the player.\n      \"Mana\": \"int\",\n\n      // Total mana generated by the player throughout the match.\n      \"TotalMana\": \"int\",\n\n      // Unused.\n      \"ManaRate\": \"int\",\n\n      // Current command XP for the player.\n      \"CommandXP\": \"int\"\n    }\n  },\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"EventName\"  \n}\n\n//\n// ResourceTransferred Event\n//\n// This event is fired when a player transfers resources to another player.\n//\n{\n  // Index of the player that sent the resources.\n  \"SendingPlayerIndex\": \"int\",\n\n  // Index of the player that received the resources.\n  \"ReceivingPlayerIndex\": \"int\",\n\n  // Supply cost paid by the sending player to send the resource.\n  \"SupplyCost\": \"int\",\n\n  // Energy cost paid by the sending player to send the resource.\n  \"EnergyCost\": \"int\",\n\n  // Supply earned by the receiving player.\n  \"SupplyEarned\": \"int\",\n\n  // Energy earned by the receiving player.\n  \"EnergyEarned\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"ResourceTransferred\"  \n}\n\n//\n// TechResearched Event\n//\n// This event is fired when a tech is researched.\n//\n{\n  // Index of the player that received the researched tech.\n  \"PlayerIndex\": \"int\",\n\n  // ID that indicates the type of the tech that was researched. Techs are available via\n  // the Metadata API.\n  \"TechId\": \"string\",\n\n  // ID of the instance that researched the tech.\n  \"ResearcherInstanceId\": \"int\",\n\n  // Supply cost paid to research the tech.\n  \"SupplyCost\": \"int\",\n\n  // Energy cost paid to research the tech.\n  \"EnergyCost\": \"int\",\n\n  // Whether the tech was researched by the player or the scenario.\n  \"ProvidedByScenario\": \"bool\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"TechResearched\"  \n}\n\n//\n// UnitControlTransferred Event\n//\n// This event is fired when control of a unit is transferred from a player to another\n// player.\n//\n{\n  // Index of the player that lost control of the unit.\n  \"OldPlayerIndex\": \"int\",\n\n  // Index of the player that gained control of the unit.\n  \"NewPlayerIndex\": \"int\",\n\n  // ID that indicates the type of the unit that was transferred. Units are available via\n  // the Metadata API as Game Objects.\n  \"SquadId\": \"string\",\n\n  // ID of the instance that was transferred.\n  \"InstanceId\": \"int\",\n\n  // ID of the instance that caused the transfer of the unit, if appropriate; otherwise,\n  // 0.\n  \"CapturerInstanceId\": \"int\",\n\n  // Location of the unit when control was transferred.\n  \"Location\": {\n\n    \"x\": \"double\",\n\n    \"y\": \"double\",\n\n    \"z\": \"double\"\n  },\n\n  // Population consumed by the transferred unit.\n  \"PopulationCost\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"UnitControlTransferred\"  \n}\n\n//\n// UnitPromoted Event\n//\n// This event is fired when a unit is promoted.\n//\n{\n  // Index of the player that controls the unit that was promoted.\n  \"PlayerIndex\": \"int\",\n\n  // ID that indicates the type of the unit that was promoted. Units are available via\n  // the Metadata API as Game Objects.\n  \"SquadId\": \"string\",\n\n  // ID of the instance that was promoted.\n  \"InstanceId\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"UnitPromoted\"  \n}\n\n//\n// UnitTrained Event\n//\n// This event is fired for the following reasons:\n//   - A player trains a unit from a building.\n//   - A unit is produced by a leader power or card.\n//   - A unit is provided by the scenario (for instance, the units a player starts with\n//     at the beginning of the scenario).\n//\n{\n  // Index of the player that controls the unit that was trained.\n  \"PlayerIndex\": \"int\",\n\n  // ID that indicates the type of the unit that was trained. Units are available via the\n  // Metadata API as Game Objects.\n  \"SquadId\": \"string\",\n\n  // Instance ID that identifies the unit. The unit will be referred to by this ID in\n  // subsequent events.\n  \"InstanceId\": \"int\",\n\n  // ID of the instance that trained the unit, if appropriate; otherwise, 0.\n  \"CreatorInstanceId\": \"int\",\n\n  // Location of the unit when it spawned.\n  \"SpawnLocation\": {\n\n    \"x\": \"double\",\n\n    \"y\": \"double\",\n\n    \"z\": \"double\"\n  },\n\n  // Supply cost paid to train the unit.\n  \"SupplyCost\": \"int\",\n\n  // Energy cost paid to train the unit.\n  \"EnergyCost\": \"int\",\n\n  // Population cost paid to train the unit.\n  \"PopulationCost\": \"int\",\n\n  // Whether the unit that was trained was cloned by a leader power.\n  \"IsClone\": \"bool\",\n\n  // Whether the unit was trained by the player or the scenario.\n  \"ProvidedByScenario\": \"bool\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"UnitTrained\"  \n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "18b3b8e1-b074-43ea-940d-19eb4ebb2563",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.19501Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Match-Events"
        }
      }
    }
  }, {
    "id" : "a9e0dbee-0120-472d-9662-456a4ba0a7e6",
    "name" : "Halo Wars 2 - Match Result - 503",
    "request" : {
      "urlPath" : "/hw2/matches/3kmt",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "a9e0dbee-0120-472d-9662-456a4ba0a7e6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.194906Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Match-Result"
        }
      }
    }
  }, {
    "id" : "59037599-1ae3-4819-a005-c2e62a0be96d",
    "name" : "Halo Wars 2 - Match Result - 500",
    "request" : {
      "urlPath" : "/hw2/matches/xc7h",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "59037599-1ae3-4819-a005-c2e62a0be96d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.194832Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Match-Result"
        }
      }
    }
  }, {
    "id" : "86358067-685a-4c1d-8510-3efcd10fac42",
    "name" : "Halo Wars 2 - Match Result - 404",
    "request" : {
      "urlPath" : "/hw2/matches/rmz2",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "86358067-685a-4c1d-8510-3efcd10fac42",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.194756Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Match-Result"
        }
      }
    }
  }, {
    "id" : "70e036c9-e996-4a0a-a597-6e98ce0ef80f",
    "name" : "Halo Wars 2 - Match Result (application/json)",
    "request" : {
      "urlPath" : "/hw2/matches/cdvn",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // ID for this match.\n  \"MatchId\": \"guid\",\n\n  // Match type for this match. This field will contain one of the following values:\n  //   Unknown = 0,\n  //   Campaign = 1,\n  //   Custom = 2,\n  //   Matchmaking = 3\n  \"MatchType\": \"int\",\n\n  // Game mode for this match. This field will contain one of the following values:\n  //   Unknown = 0,\n  //   CampaignSolo = 1,\n  //   CampaignCooperative = 2,\n  //   Deathmatch = 3,\n  //   Domination = 4,\n  //   Strongholds = 5,\n  //   Blitz = 6,\n  //   Firefight = 7,\n  //   NormalTutorial = 8,\n  //   BlitzTutorial = 9,\n  //   TerminusFirefight = 10\n  \"GameMode\": \"int\",\n\n  // Season ID for the match if the match occurred in a ranked playlist; otherwise, null.\n  // Seasons are available via the Metadata API.\n  \"SeasonId\": \"guid\",\n\n  // Playlist the match occurred in if the match occurred in a playlist; otherwise, null\n  // or empty Guid. Playlists are available via the Metadata API.\n  \"PlaylistId\": \"guid\",\n\n  // ID of the map the match was played on. Maps are available via the Metadata API.\n  \"MapId\": \"string\",\n\n  // Whether the match is in-progress or completed. If the match is not complete, many\n  // fields will not be set.\n  \"IsMatchComplete\": \"bool\",\n\n  // Reason the match ended. If the match is not complete, this will be null. This field\n  // will contain one of the following values:\n  //   Unknown = 0,\n  //   Completed = 1,\n  //   StartedNewMission = 2,\n  //   EveryoneDisconnected = 3,\n  //   InviteAccepted = 4\n  \"MatchEndReason\": \"int\",\n\n  // Reason the winning team achieved victory. If the match is not complete, this will be\n  // null. This field will contain one of the following values:\n  //   EndedPrematurely = 0,\n  //   ObjectiveCompleted = 1,\n  //   OpponentsEliminated = 2,\n  //   Unknown = 255\n  \"VictoryCondition\": \"int\",\n\n  // Date and time the match started. This is expressed as an ISO 8601 combined Date and\n  // Time.\n  \"MatchStartDate\": {\n\n    \"ISO8601Date\": \"string\"\n  },\n\n  // Duration of the match. This is expressed as an ISO 8601 Duration.\n  \"MatchDuration\": \"string\",\n\n  // Information regarding the teams in the match. Neutral teams are not included in this\n  // collection.\n  \"Teams\": {\n\n    // Team ID.\n    \"int\": {\n\n      // Number of players on the team.\n      \"TeamSize\": \"int\",\n\n      // Outcome for the team in the match. If the match is not complete, this will be\n      // null. This field will contain one of the following values:\n      //   Unknown = 0,\n      //   Win = 1,\n      //   Loss = 2,\n      //   Tie = 3\n      \"MatchOutcome\": \"int\",\n\n      // Score for the team at the end of the match. If the match is not complete, this\n      // will be null.\n      \"ObjectiveScore\": \"int\"\n    }\n  },\n\n  // Information regarding the players in the match. Netural players are not included in\n  // this collection.\n  \"Players\": {\n\n    // Player Index.\n    \"int\": {\n\n      // Whether this represents a human player or a computer player.\n      \"IsHuman\": \"bool\",\n\n      // Identify of the player if this is a human player; otherwise, null.\n      \"HumanPlayerId\": {\n\n        // Gamertag of the player.\n        \"Gamertag\": \"string\",\n\n        // Internal use. This will always be null.\n        \"Xuid\": null\n      },\n\n      // ID of the computer player if this is a computer player; otherwise, null.\n      \"ComputerPlayerId\": \"int\",\n\n      // Difficulty of the computer player if this is a computer player; otherwise, null.\n      // Difficulties are available via the Metadata API.\n      \"ComputerDifficulty\": \"int\",\n\n      // ID of the team the player was a member of.\n      \"TeamId\": \"int\",\n\n      // Index of the player on their team. This is derived by sorting all the players on\n      // a team by their PlayerIndex and selecting the resulting position.\n      \"TeamPlayerIndex\": \"int\",\n\n      // Leader the player used. Leaders are available via the Metadata API.\n      \"LeaderId\": \"int\",\n\n      // Whether the player finished the match. This will be null until either the player\n      // leaves the match or the match is complete.\n      \"PlayerCompletedMatch\": \"bool\",\n\n      // Duration of time the player participated in the match. This will be null until\n      // either the player leaves the match or the match is complete.\n      \"TimeInMatch\": \"string\",\n\n      // Outcome of the match for the player. This will be null until either the player\n      // leaves the match or the match is complete. If the player leaves the match early,\n      // the player might have a different match outcome than their team. This field will\n      // contain one of the following values:\n      //   Unknown = 0,\n      //   Win = 1,\n      //   Loss = 2,\n      //   Tie = 3\n      \"PlayerMatchOutcome\": \"int\",\n\n      // Information about the capture points the player interacted with in the match. If\n      // the match is not complete, this will be null.\n      \"PointStats\": {\n\n        // ID of the capture point.\n        \"string\": {\n\n          // Number of times the player captured the point. \n          \"TimesCaptured\": \"int\"\n        }\n      },\n\n      // Information about the units the player interacted with in the match. If the\n      // match is not complete, this will be null.\n      \"UnitStats\": {\n\n        // ID of the unit. Units are available via the Metadata API as Game Objects.\n        \"string\": {\n\n          // Number of times the player trained a unit of this type.\n          \"TotalBuilt\": \"int\",\n\n          // Number of times the player lost a unit of this type.\n          \"TotalLost\": \"int\",\n\n          // Number of times the player assisted in killing a unit of this type.\n          \"TotalDestroyed\": \"int\"\n        }\n      },\n\n      // Information about the cards the player used in the match. If the match is not\n      // complete, this will be null.\n      \"CardStats\": {\n\n        // ID of the card. Cards are available via the Metadata API.\n        \"guid\": {\n\n          // Number of times the player played a card of this type.\n          \"TotalPlays\": \"int\"\n        }\n      },\n\n      // Information about the waves the player participated in. If the match is not\n      // complete, this will be null.\n      \"WaveStats\": {\n\n        // Wave number.\n        \"int\": {\n\n          // Duration of how long the team the player was on took to complete the wave.\n          // This is expressed as an ISO 8601 Duration.\n          \"WaveDuration\": \"string\"\n        }\n      },\n\n      // Information about the leader powers the player used in the match. If the match\n      // is not complete, this will be null.\n      \"LeaderPowerStats\": {\n\n        // ID of the leader power. Leader Powers are available via the Metadata API.\n        \"string\": {\n\n          // Number of times the player used a leader power of this type.\n          \"TimesCast\": \"int\"\n        }\n      },\n\n      // XP progress the player earned as a result of their participation in the match. \n      \"XPProgress\": {\n\n        // Total amount of XP the player had when they entered the match.\n        \"PreviousTotalXP\": \"int\",\n\n        // XP the player earned as a result of actions taken in the match. This does not\n        // include XP the player earned as a result of challenges completed in the match,\n        // which is reported separately. If the match is not complete, this will be 0.\n        \"GameplayXP\": \"int\",\n\n        // XP the player earned as a result of completing challenges in the match. This\n        // does not include XP the player earned as a result of actions taken in the\n        // match, which is reported separately. If the match is not complete, this will\n        // be 0.\n        \"ChallengesXP\": \"int\",\n\n        // Total amount of XP the player had after the match. If the match is not\n        // complete, this will be 0.\n        \"UpdatedTotalXP\": \"int\",\n\n        // Spartan Ranks the player completed as a result of the XP earned in the match.\n        // If this collection is empty, the player did not earn enough XP in this match\n        // to complete a rank. There is no significance to the ordering of this\n        // collection.\n        \"CompletedSpartanRanks\": [\n          {\n            // Spartan Rank the player completed. Spartan Ranks are available via the\n            // Metadata API.\n            \"Id\": \"guid\",\n\n            // Packs the player was awarded as a result of completing the rank. There is\n            // no significance to the ordering of this collection. Packs are available\n            // via the Metadata API.\n            \"PacksAwarded\": [ \"guid\" ]\n          }\n        ]\n      },\n\n      // Rating progress the player earned as a result of their participation in the\n      // match.\n      \"RatingProgress\": {\n\n        // Competitive Skill Ranking (CSR) of the player before the match started. If the\n        // match did not occur in a ranked playlist, this will be null.\n        \"PreviousCsr\": {\n\n          // CSR Tier. CSR Tiers are designation-specific. If the player is still in\n          // measurement matches, this field will be null. CSR Tiers are referenced by\n          // CSR Designations, which are available via the Metadata API.\n          \"Tier\": \"int\",\n\n          // CSR Designation. If the player is still in measurement matches, this field\n          // will be null. CSR Designations are available via the Metadata API.\n          \"Designation\": \"int\",\n\n          // Raw CSR value. If the player is still in measurement matches, this field\n          // will be null. If the player is not in a high enough designation, this will\n          // be zero.\n          \"Raw\": \"int\",\n\n          // Percentage of progress towards the next CSR tier. If the player is still in\n          // measurement matches, this field will be null.\n          \"PercentToNextTier\": \"int\",\n\n          // Number of measurement matches remaining until the player earns a CSR. If\n          // this field is greater than zero, the player does not have a CSR yet and the\n          // other components of the CSR will be null.\n          \"MeasurementMatchesRemaining\": \"int\",\n\n          // Player's ranking on the CSR leaderboard. If the player is still in\n          // measurement matches, this field will be null. If the player is not in a high\n          // enough designation, this will be zero.\n          \"Rank\": \"int\"\n        },\n\n        // Competitive Skill Ranking (CSR) of the player after the match ended. If the\n        // match did not occur in a ranked playlist, this will be null. If the match is\n        // not complete, this will be null.\n        \"UpdatedCsr\": {\n\n          // CSR Tier. CSR Tiers are designation-specific. If the player is still in\n          // measurement matches, this field will be null. CSR Tiers are referenced by\n          // CSR Designations, which are available via the Metadata API.\n          \"Tier\": \"int\",\n\n          // CSR Designation. If the player is still in measurement matches, this field\n          // will be null. CSR Designations are available via the Metadata API.\n          \"Designation\": \"int\",\n\n          // Raw CSR value. If the player is still in measurement matches, this field\n          // will be null. If the player is not in a high enough designation, this will\n          // be zero.\n          \"Raw\": \"int\",\n\n          // Percentage of progress towards the next CSR tier. If the player is still in\n          // measurement matches, this field will be null.\n          \"PercentToNextTier\": \"int\",\n\n          // Number of measurement matches remaining until the player earns a CSR. If\n          // this field is greater than zero, the player does not have a CSR yet and the\n          // other components of the CSR will be null.\n          \"MeasurementMatchesRemaining\": \"int\",\n\n          // Player's ranking on the CSR leaderboard. If the player is still in\n          // measurement matches, this field will be null. If the player is not in a high\n          // enough designation, this will be zero.\n          \"Rank\": \"int\"\n        },\n\n        // Internal use.\n        \"PreviousMmr\": {\n\n          \"Rating\": \"double\",\n\n          \"Variance\": \"double\",\n\n          // Unused.\n          \"LastModifiedDate\": {\n\n            \"ISO8601Date\": \"string\"\n          }\n        },\n\n        // Internal use.\n        \"UpdatedMmr\": {\n\n          \"Rating\": \"double\",\n\n          \"Variance\": \"double\",\n\n          // Unused.\n          \"LastModifiedDate\": {\n\n            \"ISO8601Date\": \"string\"\n          }\n        }\n      }\n    }\n  }\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "70e036c9-e996-4a0a-a597-6e98ce0ef80f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.194676Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-Wars-2-Match-Result"
        }
      }
    }
  }, {
    "id" : "74e86b15-e033-4b9d-8c0b-95ac7e3e1fdf",
    "name" : "Halo 5 PC - Player Service Records - Custom - 503",
    "request" : {
      "urlPath" : "/h5pc/servicerecords/custom",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "52bzqz9fwcc45dgz2zistuhcctsf1pxiqtzvj1pl6h2n66udlc7ac26la8wy8qcior7sp1vic3ik9tjj0rf3v39bccdyp0bscbcqueyvwgo88bxeua2fayk4vrtrrjux66q9hx6selotifieg"
        }
      }
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "74e86b15-e033-4b9d-8c0b-95ac7e3e1fdf",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.194585Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-PC-Player-Service-Records-Custom"
        }
      }
    }
  }, {
    "id" : "8d2cfdd6-3e7e-411d-8544-c9159c4c983d",
    "name" : "Halo 5 PC - Player Service Records - Custom - 500",
    "request" : {
      "urlPath" : "/h5pc/servicerecords/custom",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "2il0qtz4hc21nosdmeo8p63aubjl01b3bj94othg99rfi9qnfktc2hnnnebsofdlffkoktsu1jbbc712wbaqy3yn"
        }
      }
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "8d2cfdd6-3e7e-411d-8544-c9159c4c983d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.194548Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-PC-Player-Service-Records-Custom"
        }
      }
    }
  }, {
    "id" : "3f5af12f-9054-49f5-a4fc-1333a1fb0cdf",
    "name" : "Halo 5 PC - Player Service Records - Custom - 404",
    "request" : {
      "urlPath" : "/h5pc/servicerecords/custom",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "w51ssslqo4mosmveprlnvkzsoso6akgk9w7n0ji96vzttbuqjmbo5p8f5l8un38owl1rgx7yvmj5qnlgw5888qiz27czimjt8casbqot9gxj9rxcgxdz4vj6va88cr1y"
        }
      }
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "3f5af12f-9054-49f5-a4fc-1333a1fb0cdf",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.19451Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-PC-Player-Service-Records-Custom"
        }
      }
    }
  }, {
    "id" : "43fea817-61b5-4f91-b50e-80d1d468120b",
    "name" : "Halo 5 PC - Player Service Records - Custom (application/json)",
    "request" : {
      "urlPath" : "/h5pc/servicerecords/custom",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      },
      "queryParameters" : {
        "players" : {
          "equalTo" : "qj3fvnbn3oskde"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // Set of responses. One per user queried.\n  \"Results\": [\n    {\n      // The player's gamertag.\n      \"Id\": \"string\",\n\n      // The result of the query for the player. One of the following:\n      //   Success = 0,\n      //   NotFound = 1,\n      //   ServiceFailure = 2,\n      //   ServiceUnavailable = 3\n      // It is possible for different requests from the batch to succeed and fail\n      // independently.\n      \"ResultCode\": \"int\",\n\n      // The Service Record result for the player. Only set if ResultCode is Success.\n      \"Result\": {\n\n        // Custom stats data.\n        \"CustomStats\": {\n\n          // List of custom stats by CustomGameBaseVariant.\n          \"CustomGameBaseVariantStats\": [\n            {\n              // The game base variant specific stats. Flexible stats are available via\n              // the Metadata API.\n              \"FlexibleStats\": {\n\n                // The set of flexible stats that are derived from medal events.\n                \"MedalStatCounts\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The number of times this flexible stat was earned.\n                    \"Count\": \"int\"\n                  }\n                ],\n\n                // The set of flexible stats that are derived from impulse events.\n                \"ImpulseStatCounts\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The number of times this flexible stat was earned.\n                    \"Count\": \"int\"\n                  }\n                ],\n\n                // The set of flexible stats that are derived from medal time lapses.\n                \"MedalTimelapses\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The amount of time the flexible stat was earned for. This is\n                    // expressed as an ISO 8601 Duration.\n                    \"Timelapse\": \"string\"\n                  }\n                ],    \n\n                // The set of flexible stats that are derived from impulse time lapses.\n                \"ImpulseTimelapses\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The amount of time the flexible stat was earned for. This is\n                    // expressed as an ISO 8601 Duration.\n                    \"Timelapse\": \"string\"\n                  }\n                ]\n              },\n\n              // The ID of the game base variant. Game base variants are available via\n              // the Metadata API.\n              \"GameBaseVariantId\": \"guid\",\n\n              // Total number of kills done by the player. This includes melee kills,\n              // shoulder bash kills and Spartan charge kills, all power weapons, AI\n              // kills and vehicle destructions. \n              \"TotalKills\": \"int\",\n\n              // Total number of headshots done by the player.\n              \"TotalHeadshots\": \"int\",\n\n              // Total weapon damage dealt by the player.\n              \"TotalWeaponDamage\": \"double\",\n\n              // Total number of shots fired by the player.\n              \"TotalShotsFired\": \"int\",\n\n              // Total number of shots landed by the player.\n              \"TotalShotsLanded\": \"int\",\n\n              // The weapon the player used to get the most kills.\n              \"WeaponWithMostKills\": {\n\n                \"WeaponId\": {\n\n                  // The ID of the weapon. Weapons are available via the Metadata API.\n                  \"StockId\": \"int\",\n\n                  // Any attachments the weapon had.\n                  \"Attachments\": [\n                    \"int\"\n                  ]\n                },\n\n                // The number of shots fired for this weapon.\n                \"TotalShotsFired\": \"int\",\n\n                // The number of shots landed for this weapon.\n                \"TotalShotsLanded\": \"int\",\n\n                // The number of headshots for this weapon.\n                \"TotalHeadshots\": \"int\",\n\n                // The number of kills for this weapon.\n                \"TotalKills\": \"int\",\n\n                // The total damage dealt for this weapon.\n                \"TotalDamageDealt\": \"double\",\n\n                // The total possession time for this weapon. This is expressed as an ISO\n                // 8601 Duration.\n                \"TotalPossessionTime\": \"string\"\n              },\n\n              // Total number of melee kills by the player.\n              \"TotalMeleeKills\": \"int\",\n\n              // Total melee damage dealt by the player.\n              \"TotalMeleeDamage\": \"double\",\n\n              // Total number of assassinations by the player.\n              \"TotalAssassinations\": \"int\",\n\n              // Total number of ground pound kills by the player.\n              \"TotalGroundPoundKills\": \"int\",\n\n              // Total ground pound damage dealt by the player.\n              \"TotalGroundPoundDamage\": \"double\",\n\n              // Total number of shoulder bash kills by the player.\n              \"TotalShoulderBashKills\": \"int\",\n\n              // Total shoulder bash damage dealt by the player.\n              \"TotalShoulderBashDamage\": \"double\",\n\n              // Total grenade damage dealt by the player.\n              \"TotalGrenadeDamage\": \"double\",\n\n              // Total number of power weapon kills by the player.\n              \"TotalPowerWeaponKills\": \"int\",\n\n              // Total power weapon damage dealt by the player.\n              \"TotalPowerWeaponDamage\": \"double\",\n\n              // Total number of power weapon grabs by the player.\n              \"TotalPowerWeaponGrabs\": \"int\",\n\n              // Total power weapon possession by the player. This is expressed as an ISO\n              // 8601 Duration.\n              \"TotalPowerWeaponPossessionTime\": \"string\",\n\n              // Total number of deaths by the player.\n              \"TotalDeaths\": \"int\",\n\n              // Total number of assists by the player.\n              \"TotalAssists\": \"int\",\n\n              // Total number of games the player has completed.\n              \"TotalGamesCompleted\": \"int\",\n\n              // Total number of games won by the player.\n              \"TotalGamesWon\": \"int\",\n\n              // Total number of games lost by the player.\n              \"TotalGamesLost\": \"int\",\n\n              // Total number of games tied by the player.\n              \"TotalGamesTied\": \"int\",\n\n              // Total timed played by the player.\n              \"TotalTimePlayed\": \"string\",\n\n              // Total number of grenade kills by the player.\n              \"TotalGrenadeKills\": \"int\",\n\n              // The set of Medals earned by the player.\n              \"MedalAwards\": [\n                {\n                  // The ID of the Medal. Medals are available via the Metadata API.\n                  \"MedalId\": \"int\",\n\n                  // The number of times the Medal was earned.\n                  \"Count\": \"int\"\n                }\n              ], \n\n              // List of enemy vehicles destroyed. Vehicles are available via the\n              // Metadata API. Note: this stat measures enemy vehicles, not any vehicle\n              // destruction.\n              \"DestroyedEnemyVehicles\": [\n                {\n                  // The enemy this entry references\n                  \"Enemy\": {\n\n                    // The Base ID for the enemy.\n                    \"BaseId\": \"int\",\n\n                    // The attachments (variants) for the enemy.\n                    \"Attachments\": [\n                      \"int\"\n                    ]\n                  },\n\n                  // Total number of kills on the enemy by the player\n                  \"TotalKills\": \"int\"\n                }\n              ],\n\n              // List of enemies killed, per enemy type. Enemies are available via the\n              // Metadata API.\n              \"EnemyKills\": [\n                {\n                  // The enemy this entry references\n                  \"Enemy\": {\n\n                    // The Base ID for the enemy.\n                    \"BaseId\": \"int\",\n\n                    // The attachments (variants) for the enemy.\n                    \"Attachments\": [\n                      \"int\"\n                    ]\n                  },\n\n                  // Total number of kills on the enemy by the player\n                  \"TotalKills\": \"int\"\n                }\n              ],\n\n              // The set of weapons (weapons and vehicles included) used by the player.\n              \"WeaponStats\": [\n                {\n                  \"WeaponId\": {\n\n                    // The ID of the weapon. Weapons are available via the Metadata API.\n                    \"StockId\": \"int\",\n\n                    // Any attachments the weapon had.\n                    \"Attachments\": [ \n                      \"int\" \n                    ]\n                  },\n\n                  // The number of shots fired for this weapon.\n                  \"TotalShotsFired\": \"int\",\n\n                  // The number of shots landed for this weapon.\n                  \"TotalShotsLanded\": \"int\",\n\n                  // The number of headshots for this weapon.\n                  \"TotalHeadshots\": \"int\",\n\n                  // The number of kills for this weapon.\n                  \"TotalKills\": \"int\",\n\n                  // The total damage dealt for this weapon.\n                  \"TotalDamageDealt\": \"double\",\n\n                  // The total possession time for this weapon. This is expressed as an\n                  // ISO 8601 Duration.\n                  \"TotalPossessionTime\": \"string\"\n                }\n              ],\n\n              // The set of Impulses (invisible Medals) earned by the player.\n              \"Impulses\": [\n                {\n                  // The ID of the Impulse. Impulses are available via the Metadata API.\n                  \"Id\": \"int\",\n\n                  // The number of times the Impulse was earned.\n                  \"Count\": \"int\"\n                }\n              ],\n\n              // Total number of Spartan kills by the player.\n              \"TotalSpartanKills\": \"int\"\n            }\n          ],\n\n          // A list of up to 3 top game base variants played by the user Top means\n          // Wins/Completed matches. If there is a tie, the one with more completions is\n          // higher. If there's still a tie, the GUIDs are sorted and selected\n          \"TopGameBaseVariants\": [\n            {\n              // Rank between 1-3\n              \"GameBaseVariantRank\": \"int\",\n\n              // Number of games played in game base variant\n              \"NumberOfMatchesCompleted\": \"int\",\n\n              // Id of the game base variant\n              \"GameBaseVariantId\": \"guid\",\n\n              // Number of matches won on game base variant\n              \"NumberOfMatchesWon\": \"int\"\n            }\n          ],\n\n          // Total number of kills done by the player. This includes melee kills,\n          // shoulder bash kills and Spartan charge kills, all power weapons, AI kills\n          // and vehicle destructions. \n          \"TotalKills\": \"int\",\n\n          // Total number of headshots done by the player.\n          \"TotalHeadshots\": \"int\",\n\n          // Total weapon damage dealt by the player.\n          \"TotalWeaponDamage\": \"double\",\n\n          // Total number of shots fired by the player.\n          \"TotalShotsFired\": \"int\",\n\n          // Total number of shots landed by the player.\n          \"TotalShotsLanded\": \"int\",\n\n          // The weapon the player used to get the most kills.\n          \"WeaponWithMostKills\": {\n\n            \"WeaponId\": {\n\n              // The ID of the weapon. Weapons are available via the Metadata API.\n              \"StockId\": \"int\",\n\n              // Any attachments the weapon had.\n              \"Attachments\": [\n                \"int\"\n              ]\n            },\n\n            // The number of shots fired for this weapon.\n            \"TotalShotsFired\": \"int\",\n\n            // The number of shots landed for this weapon.\n            \"TotalShotsLanded\": \"int\",\n\n            // The number of headshots for this weapon.\n            \"TotalHeadshots\": \"int\",\n\n            // The number of kills for this weapon.\n            \"TotalKills\": \"int\",\n\n            // The total damage dealt for this weapon.\n            \"TotalDamageDealt\": \"double\",\n\n            // The total possession time for this weapon. This is expressed as an ISO\n            // 8601 Duration.\n            \"TotalPossessionTime\": \"string\"\n          },\n\n          // Total number of melee kills by the player.\n          \"TotalMeleeKills\": \"int\",\n\n          // Total melee damage dealt by the player.\n          \"TotalMeleeDamage\": \"double\",\n\n          // Total number of assassinations by the player.\n          \"TotalAssassinations\": \"int\",\n\n          // Total number of ground pound kills by the player.\n          \"TotalGroundPoundKills\": \"int\",\n\n          // Total ground pound damage dealt by the player.\n          \"TotalGroundPoundDamage\": \"double\",\n\n          // Total number of shoulder bash kills by the player.\n          \"TotalShoulderBashKills\": \"int\",\n\n          // Total shoulder bash damage dealt by the player.\n          \"TotalShoulderBashDamage\": \"double\",\n\n          // Total grenade damage dealt by the player.\n          \"TotalGrenadeDamage\": \"double\",\n\n          // Total number of power weapon kills by the player.\n          \"TotalPowerWeaponKills\": \"int\",\n\n          // Total power weapon damage dealt by the player.\n          \"TotalPowerWeaponDamage\": \"double\",\n\n          // Total number of power weapon grabs by the player.\n          \"TotalPowerWeaponGrabs\": \"int\",\n\n          // Total power weapon possession by the player. This is expressed as an ISO\n          // 8601 Duration.\n          \"TotalPowerWeaponPossessionTime\": \"string\",\n\n          // Total number of deaths by the player.\n          \"TotalDeaths\": \"int\",\n\n          // Total number of assists by the player.\n          \"TotalAssists\": \"int\",\n\n          // Not used.\n          \"TotalGamesCompleted\": \"int\",\n\n          // Not used.\n          \"TotalGamesWon\": \"int\",\n\n          // Not used.\n          \"TotalGamesLost\": \"int\",\n\n          // Not used.\n          \"TotalGamesTied\": \"int\",\n\n          // Total timed played by the player.\n          \"TotalTimePlayed\": \"string\",\n\n          // Total number of grenade kills by the player.\n          \"TotalGrenadeKills\": \"int\",\n\n          // The set of Medals earned by the player.\n          \"MedalAwards\": [\n            {\n              // The ID of the Medal. Medals are available via the Metadata API.\n              \"MedalId\": \"int\",\n\n              // The number of times the Medal was earned.\n              \"Count\": \"int\"\n            }\n          ], \n\n          // List of enemy vehicles destroyed. Vehicles are available via the Metadata\n          // API. Note: this stat measures enemy vehicles, not any vehicle destruction.\n          \"DestroyedEnemyVehicles\": [\n            {\n              // The enemy this entry references\n              \"Enemy\": {\n\n                // The Base ID for the enemy.\n                \"BaseId\": \"int\",\n\n                // The attachments (variants) for the enemy.\n                \"Attachments\": [\n                  \"int\"\n                ]\n              },\n\n              // Total number of kills on the enemy by the player\n              \"TotalKills\": \"int\"\n            }\n          ],\n\n          // List of enemies killed, per enemy type. Enemies are available via the\n          // Metadata API.\n          \"EnemyKills\": [\n            {\n              // The enemy this entry references\n              \"Enemy\": {\n\n                // The Base ID for the enemy.\n                \"BaseId\": \"int\",\n\n                // The attachments (variants) for the enemy.\n                \"Attachments\": [\n                  \"int\"\n                ]\n              },\n\n              // Total number of kills on the enemy by the player\n              \"TotalKills\": \"int\"\n            }\n          ],\n\n          // The set of weapons (weapons and vehicles included) used by the player.\n          \"WeaponStats\": [\n            {\n              \"WeaponId\": {\n\n                // The ID of the weapon. Weapons are available via the Metadata API.\n                \"StockId\": \"int\",\n\n                // Any attachments the weapon had.\n                \"Attachments\": [ \n                  \"int\" \n                ]\n              },\n\n              // The number of shots fired for this weapon.\n              \"TotalShotsFired\": \"int\",\n\n              // The number of shots landed for this weapon.\n              \"TotalShotsLanded\": \"int\",\n\n              // The number of headshots for this weapon.\n              \"TotalHeadshots\": \"int\",\n\n              // The number of kills for this weapon.\n              \"TotalKills\": \"int\",\n\n              // The total damage dealt for this weapon.\n              \"TotalDamageDealt\": \"double\",\n\n              // The total possession time for this weapon. This is expressed as an ISO\n              // 8601 Duration.\n              \"TotalPossessionTime\": \"string\"\n            }\n          ],\n\n          // The set of Impulses (invisible Medals) earned by the player.\n          \"Impulses\": [\n            {\n              // The ID of the Impulse. Impulses are available via the Metadata API.\n              \"Id\": \"int\",\n\n              // The number of times the Impulse was earned.\n              \"Count\": \"int\"\n            }\n          ],\n\n          // Total number of Spartan kills by the player.\n          \"TotalSpartanKills\": \"int\"\n        },\n\n        // Information about the player for whom this data was returned.\n        \"PlayerId\": {\n\n          // The gamertag of the player queried.\n          \"GamerTag\": \"string\",\n\n          // Internal use only. This will always be null.\n          \"Xuid\": null\n        },\n\n        // The player's Spartan Rank. Zero for custom.\n        \"SpartanRank\": \"int\",\n\n        // The player's XP. Zero for custom.\n        \"Xp\": \"int\"\n      }\n    }\n  ],\n\n  // Internal use only. A set of related resource links.\n  \"Links\": null\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "43fea817-61b5-4f91-b50e-80d1d468120b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.194464Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-PC-Player-Service-Records-Custom"
        }
      }
    }
  }, {
    "id" : "e5539628-6452-4b31-a0fe-44fc99553c48",
    "name" : "Halo 5 PC - Player Match History - 503",
    "request" : {
      "urlPath" : "/h5pc/players/mg2oey8kc6ha2i0qzlobj3qesy2q037vw6f5ebgys501c5g6r43rmu8lxvyj8890nz1lih5yykqu4xzib8vz4n583i3y4w2bezemryj2gr4v1lb5cd2f912o5u6u0yrkuemmxqu7xj9voi2p1f6kkp9t1lavbusr/matches",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "e5539628-6452-4b31-a0fe-44fc99553c48",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.194413Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-PC-Player-Match-History"
        }
      }
    }
  }, {
    "id" : "045f643a-5413-4c1f-b19e-11016dfab2e5",
    "name" : "Halo 5 PC - Player Match History - 500",
    "request" : {
      "urlPath" : "/h5pc/players/4hfv3acn6x466tpfyx9pw5wn9juegq3vfrjxj9l507zqi458ruo181lymsi83fl6qchc9n2ra8uo941vw0lw5fschg72yr5ek4w8p54iw2uj/matches",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "045f643a-5413-4c1f-b19e-11016dfab2e5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.194384Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-PC-Player-Match-History"
        }
      }
    }
  }, {
    "id" : "878ddd40-2ded-4277-b845-e90239b2297d",
    "name" : "Halo 5 PC - Player Match History - 404",
    "request" : {
      "urlPath" : "/h5pc/players/rppb6rhkx4ghez69ften1b14qz9gve4i54q4ert04x8pqerunrp6iuh84qflal3wc1j6v9u/matches",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "878ddd40-2ded-4277-b845-e90239b2297d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.194357Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-PC-Player-Match-History"
        }
      }
    }
  }, {
    "id" : "46579e87-b5a8-47a9-9590-89fb281c7906",
    "name" : "Halo 5 PC - Player Match History - 400",
    "request" : {
      "urlPath" : "/h5pc/players/pelknvrbdvg13b134my88mopi5aijw9rex8crsq27qbw9tl9nbm8xgo67bur2rn6gw63pivb60sriioyhxvxdjokfwv3e/matches",
      "method" : "GET"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "46579e87-b5a8-47a9-9590-89fb281c7906",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.194329Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-PC-Player-Match-History"
        }
      }
    }
  }, {
    "id" : "3b7bc472-66ec-44be-8701-dd7a1ff2064a",
    "name" : "Halo 5 PC - Player Match History (application/json)",
    "request" : {
      "urlPath" : "/h5pc/players/kz0e7a5ygdvihfucqywn3ky4bjgk8lfzrawz3zrbed9r5huxl3nfip1v8wcwhzrr8l4yjivxn/matches",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // The starting point that was used. When the \"start\" query string parameter is\n  // specified, this value is identical. When \"start\" is omitted, the default value is\n  // returned.\n  \"Start\": \"int\",  \n\n  // The number of results that the service attempted to retrieve to satisfy this\n  // request. Normally this value is equal to the \"count\" parameter. If the client\n  // specified a count parameter greater than the maximum allowed, this value contains\n  // the maximum allowed amount.\n  \"Count\": \"int\",\n\n  // The number of results that are actually being returned in this response. This field\n  // is named \"ResultCount\" to avoid confusion with \"Count\".\n  \"ResultCount\": \"int\",\n\n  // A list of recent matches. Matches are listed in reverse chronological order with the\n  // most recently started match first.\n  \"Results\": [\n    {\n      // Internal use only. A set of related resource links.\n      \"Links\": \"links\",\n\n      \"Id\": {\n\n        // The ID for this match. More match details are available via the applicable\n        // Match Result Endpoint.\n        \"MatchId\": \"guid\",\n\n        // The game mode applicable to this match. Options are: \n        //   Error = 0, \n        //   Arena = 1, \n        //   Campaign = 2, \n        //   Custom = 3, \n        //   Warzone = 4,\n        //   CustomLocal = 6.\n        \"GameMode\": \"int\",\n\n      },\n\n      // The ID of the playlist (aka \"Hopper\") for the match. \n      // Hoppers are used in Arena and Warzone. In Arena, they function just as you would\n      // expect, similar to previous Halo titles. Warzone uses hoppers as well. There\n      // will be multiple Warzone hoppers which contain a rotating playlist of scenarios\n      // to play. \n      // Null for campaign & custom games. \n      // Playlists are available via the Metadata API.\n      \"HopperId\": \"guid\",\n\n      // The ID of the base map for this match. Maps are available via the Metadata API.\n      \"MapId\": \"guid\",\n\n      // The variant of the map for this match. There are two sources of map variants:\n      // official map variants available via the Metadata API and user-generated map\n      // variants which are not available via the APIs currently. This will be null for\n      // campaign games.\n      \"MapVariant\": {\n\n        // The resource type. 3 indicates map variant.\n        \"ResourceType\": 3,\n\n        // The ID of the map variant. Official map variants are available via the\n        // Metadata API.\n        \"ResourceId\": \"guid\",\n\n        // The source of the map variant. Options are:\n        //   Unknown = 0,\n        //   User-generated = 1,\n        //   Official = 3.\n        \"OwnerType\": \"int\",\n\n        // The gamertag of the user that created the map variant if this is a\n        // user-generated map variant, or null otherwise. \n        \"Owner\": \"string\"\n      },\n\n      // The ID of the game base variant for this match. Game base variants are available\n      // via the Metadata API.\n      \"GameBaseVariantId\": \"guid\",\n\n      // The variant of the game for this match. There are two sources of game variants:\n      // official game variants available via the Metadata API and user-generated game\n      // variants which are not available via the APIs currently. This will be null for\n      // campaign games.\n      \"GameVariant\": {\n\n        // The resource type. 2 indicates game variant.\n        \"ResourceType\": 2,\n\n        // The ID of the game variant. Official game variants are available via the\n        // Metadata API.\n        \"ResourceId\": \"guid\",        \n\n        // The source of the game variant. Options are:\n        //   Unknown = 0,\n        //   User-generated = 1,\n        //   Official = 3.\n        \"OwnerType\": \"int\",\n\n        // The gamertag of the user that created the game variant if this is a\n        // user-generated game variant, or null otherwise. \n        \"Owner\": \"string\"\n      },\n\n      // The length of the match. This is expressed as an ISO 8601 Duration.\n      \"MatchDuration\": \"string\",\n\n      // The date and time when the match ended. Note that this is different than the\n      // processing date, once matches end they typically take a small amount of time to\n      // process. The processing date is not available through this API. The time\n      // component of this date is set to \"00:00:00\" unless the \"{include-times}\" request\n      // parameter is set to \"true\". This is expressed as an ISO 8601 combined Date and\n      // Time.\n      \"MatchCompletedDate\": {\n\n        \"ISO8601Date\": \"string\"\n      },\n\n      // Provides team data. This list contains all team that Won or Tied. Losing teams\n      // are not included. This list is empty for campaign games. \n      \"Teams\": [\n        {\n          // The ID for the team. The team's ID dictates the team's color. Team colors\n          // are available via the Metadata API.\n          \"Id\": \"int\",\n\n          // The team's score at the end of the match. The way the score is determined is\n          // based off the game base variant being played: \n          //   Breakout = number of rounds won,\n          //   CTF = number of flag captures,\n          //   Slayer = number of kills,\n          //   Strongholds = number of points,\n          //   Warzone = number of points.\n          // Score can be a negative value. Unfortunately, this value is returned as an\n          // unsigned 32-bit integer. This means that if the score is -1, the score\n          // reported is 4,294,967,295.\n          \"Score\": \"uint32\",\n\n          // The team's rank at the end of the match.\n          \"Rank\": \"int\"\n        }\n      ],\n\n      // This field contains the player's data. This will only contain data for the\n      // player specified in the request.\n      \"Players\": [\n        {          \n          \"Player\": {\n\n            // The player's gamertag.\n            \"Gamertag\": \"string\",\n\n            // Internal use only. This will always be null.\n            \"Xuid\": null\n          },\n\n          // The ID of the team that the player was on when the match ended. Zero for\n          // campaign games.\n          \"TeamId\": \"int\",\n\n          // The player's team-agnostic ranking in this match.\n          \"Rank\": \"int\",\n\n          // Indicates what result the player received at the conclusion of the match.\n          // Options are:\n          //   Did Not Finish = 0, \n          //   Lost = 1, \n          //   Tied = 2, \n          //   Won = 3. \n          // Did Not Finish: The player was not present when the match ended.\n          // Lost: The player was on a team that was assigned a loss, typically this is\n          // when a team does not have rank = 1. \n          // Won: The player was on the team that was assigned the win, typically this is\n          // the team that has rank = 1. \n          // Tied: The player was on the team that was awarded a tie. Typically this is\n          // when the player is on the team with rank = 1, and there is at least one\n          // other team with rank = 1. Ties are only for rank = 1 teams. Consider the\n          // scenario when exactly one team is rank = 1, and two teams are rank = 2.\n          // Players on the rank=1 team will have \"Won\", players on the rank = 2 teams\n          // will have \"Lost\". For ties, this documentation states 'typically' because\n          // the game may have unique rules for multi-team and FFA scenarios, in which\n          // multiple teams are awarded a win.\n          \"Result\": \"int\",\n\n          // The number of enemy kills the player had during this match. This includes\n          // other Spartans and Enemy AI.\n          \"TotalKills\": \"int\",\n\n          // The number of times this player died during the match.\n          \"TotalDeaths\": \"int\",\n\n          // The number of assists credited to the player during the match. This includes\n          // other Spartans and Enemy AI.\n          \"TotalAssists\": \"int\",\n\n          // Internal use only. This will always be null.\n          \"PreMatchRatings\": null,\n\n          // Internal use only. This will always be null.\n          \"PostMatchRatings\": null\n        }\n      ],\n\n      // Whether this was a team-based game or not (e.g. free-for-all).\n      \"IsTeamGame\": \"boolean\",\n\n      // The ID of the season for this match if it was played in a seasonal playlist.\n      // Null if the match was played in a non-seasonal playlist. This will only be set\n      // for Arena matches and will be null for all other game modes.\n      \"SeasonId\": null,\n\n      // Internal use only. Do not use.\n      \"MatchCompletedDateFidelity\": \"int\"\n    }\n  ]\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3b7bc472-66ec-44be-8701-dd7a1ff2064a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.194293Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-PC-Player-Match-History"
        }
      }
    }
  }, {
    "id" : "2ab28002-1716-46e6-a567-a3c93d598447",
    "name" : "Halo 5 PC - Match Result - Custom - 503",
    "request" : {
      "urlPath" : "/h5pc/custom/matches/1894",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "2ab28002-1716-46e6-a567-a3c93d598447",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.194246Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-PC-Match-Result-Custom"
        }
      }
    }
  }, {
    "id" : "d7cc6a5e-a507-4213-b3ef-39d4fcf50516",
    "name" : "Halo 5 PC - Match Result - Custom - 500",
    "request" : {
      "urlPath" : "/h5pc/custom/matches/18zu",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "d7cc6a5e-a507-4213-b3ef-39d4fcf50516",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.194169Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-PC-Match-Result-Custom"
        }
      }
    }
  }, {
    "id" : "7e1d40d2-15c4-4a4e-87f7-43e4f6ccc585",
    "name" : "Halo 5 PC - Match Result - Custom - 404",
    "request" : {
      "urlPath" : "/h5pc/custom/matches/u060",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "7e1d40d2-15c4-4a4e-87f7-43e4f6ccc585",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.194091Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-PC-Match-Result-Custom"
        }
      }
    }
  }, {
    "id" : "042b2c52-675d-46f2-b0df-38c6cf6678c7",
    "name" : "Halo 5 PC - Match Result - Custom (application/json)",
    "request" : {
      "urlPath" : "/h5pc/custom/matches/q51y",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // A list of stats for each player who was present in the match.\n  \"PlayerStats\": [\n    {\n      // The number of times the player killed each opponent. If the player did not kill\n      // an opponent, there will be no entry for that opponent.\n      \"KilledOpponentDetails\": [\n        {\n          // The gamertag of the opponent that was killed.\n          \"GamerTag\": \"string\",\n\n          // The number of times that opponent was killed.\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The number of times the player was killed by each opponent. If the player was\n      // not killed by an opponent, there will be no entry for that opponent.\n      \"KilledByOpponentDetails\": [\n        {\n          // The gamertag of the opponent that killed the player.\n          \"GamerTag\": \"string\",\n\n          // The number of times the opponent killed the player.\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The game base variant specific stats for this match. Flexible stats are\n      // available via the Metadata API.\n      \"FlexibleStats\": {\n\n        // The set of flexible stats that are derived from medal events.\n        \"MedalStatCounts\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The number of times this flexible stat was earned.\n            \"Count\": \"int\"\n          }\n        ],\n\n        // The set of flexible stats that are derived from impulse events.\n        \"ImpulseStatCounts\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The number of times this flexible stat was earned.\n            \"Count\": \"int\"\n          }\n        ],\n\n        // The set of flexible stats that are derived from medal time lapses.\n        \"MedalTimelapses\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The amount of time the flexible stat was earned for. This is expressed as\n            // an ISO 8601 Duration.\n            \"Timelapse\": \"string\"\n          }\n        ],        \n\n        // The set of flexible stats that are derived from impulse time lapses.\n        \"ImpulseTimelapses\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The amount of time the flexible stat was earned for. This is expressed as\n            // an ISO 8601 Duration.\n            \"Timelapse\": \"string\"\n          }\n        ]\n      },\n\n      // Internal use only.\n      \"PresentInMatch\": \"boolean\",\n\n      \"Player\": {\n\n         // The player's gamertag.\n        \"Gamertag\": \"string\",\n\n        // Internal use only. This will always be null.\n        \"Xuid\": null\n      },\n\n      // The ID of the team that the player was on when the match ended. \n      \"TeamId\": \"int\",\n\n      // The player's team-agnostic ranking.\n      \"Rank\": \"int\",\n\n      // Indicates whether the player was present in the match when it ended.\n      \"DNF\": \"boolean\",\n\n      // The player's average lifetime.\n      \"AvgLifeTimeOfPlayer\": \"string\",\n\n      // Internal use only. This will always be null.\n      \"PreMatchRatings\": null,\n\n      // Internal use only. This will always be null.\n      \"PostMatchRatings\": null,\n\n      // The Player's Score. This is not used by all Game Variants and may contain null\n      // or invalid data.\n      \"PlayerScore\": \"int\",\n\n      // Total number of kills done by the player. This includes melee kills, shoulder\n      // bash kills and Spartan charge kills, all power weapons, AI kills and vehicle\n      // destructions. \n      \"TotalKills\": \"int\",\n\n      // Total number of headshots done by the player.\n      \"TotalHeadshots\": \"int\",\n\n      // Total weapon damage dealt by the player.\n      \"TotalWeaponDamage\": \"double\",\n\n      // Total number of shots fired by the player.\n      \"TotalShotsFired\": \"int\",\n\n      // Total number of shots landed by the player.\n      \"TotalShotsLanded\": \"int\",\n\n      // The weapon the player used to get the most kills this match.\n      \"WeaponWithMostKills\": {\n\n        \"WeaponId\": {\n\n          // The ID of the weapon. Weapons are available via the Metadata API.\n          \"StockId\": \"int\",\n\n          // Any attachments the weapon had.\n          \"Attachments\": [ \"int\" ]\n        },\n\n        // The number of shots fired for this weapon.\n        \"TotalShotsFired\": \"int\",\n\n        // The number of shots landed for this weapon.\n        \"TotalShotsLanded\": \"int\",\n\n        // The number of headshots for this weapon.\n        \"TotalHeadshots\": \"int\",\n\n        // The number of kills for this weapon.\n        \"TotalKills\": \"int\",\n\n        // The total damage dealt for this weapon.\n        \"TotalDamageDealt\": \"double\",\n\n        // The total possession time for this weapon. This is expressed as an ISO 8601\n        // Duration.\n        \"TotalPossessionTime\": \"string\"\n      },\n\n      // Total number of melee kills by the player.\n      \"TotalMeleeKills\": \"int\",\n\n      // Total melee damage dealt by the player.\n      \"TotalMeleeDamage\": \"double\",\n\n      // Total number of assassinations by the player.\n      \"TotalAssassinations\": \"int\",\n\n      // Total number of ground pound kills by the player.\n      \"TotalGroundPoundKills\": \"int\",\n\n      // Total ground pound damage dealt by the player.\n      \"TotalGroundPoundDamage\": \"double\",\n\n      // Total number of shoulder bash kills by the player.\n      \"TotalShoulderBashKills\": \"int\",\n\n      // Total shoulder bash damage dealt by the player.\n      \"TotalShoulderBashDamage\": \"double\",\n\n      // Total grenade damage dealt by the player.\n      \"TotalGrenadeDamage\": \"double\",\n\n      // Total number of power weapon kills by the player.\n      \"TotalPowerWeaponKills\": \"int\",\n\n      // Total power weapon damage dealt by the player.\n      \"TotalPowerWeaponDamage\": \"double\",\n\n      // Total number of power weapon grabs by the player.\n      \"TotalPowerWeaponGrabs\": \"int\",\n\n      // Total power weapon possession by the player. This is expressed as an ISO 8601\n      // Duration.\n      \"TotalPowerWeaponPossessionTime\": \"string\",\n\n      // Total number of deaths by the player.\n      \"TotalDeaths\": \"int\",\n\n      // Total number of assists by the player.\n      \"TotalAssists\": \"int\",\n\n      // Not used.\n      \"TotalGamesCompleted\": \"int\",\n\n      // Not used.\n      \"TotalGamesWon\": \"int\",\n\n      // Not used.\n      \"TotalGamesLost\": \"int\",\n\n      // Not used.\n      \"TotalGamesTied\": \"int\",\n\n      // Total timed played in this match by the player.\n      \"TotalTimePlayed\": \"string\",\n\n      // Total number of grenade kills by the player.\n      \"TotalGrenadeKills\": \"int\",\n\n      // The set of Medals earned by the player.\n      \"MedalAwards\": [\n        {\n          // The ID of the Medal. Medals are available via the Metadata API.\n          \"MedalId\": \"int\",\n\n          // The number of times the Medal was earned.\n          \"Count\": \"int\"\n        }\n      ], \n\n      // List of enemy vehicles destroyed. Vehicles are available via the Metadata API.\n      // Note: this stat measures enemy vehicles, not any vehicle destruction.\n      \"DestroyedEnemyVehicles\": [\n        {\n          // The enemy this entry references\n          \"Enemy\": {\n\n            // The Base ID for the enemy.\n            \"BaseId\": \"int\",\n\n            // The attachments (variants) for the enemy.\n            \"Attachments\": [\n              \"int\"\n            ]\n          },\n\n          // Total number of kills on the enemy by the player\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // List of enemies killed, per enemy type. Enemies are available via the Metadata\n      // API.\n      \"EnemyKills\": [\n        {\n          // The enemy this entry references\n          \"Enemy\": {\n\n            // The Base ID for the enemy.\n            \"BaseId\": \"int\",\n\n            // The attachments (variants) for the enemy.\n            \"Attachments\": [\n              \"int\"\n            ]\n          },\n\n          // Total number of kills on the enemy by the player\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The set of weapons (weapons and vehicles included) used by the player.\n      \"WeaponStats\": [\n        {\n          \"WeaponId\": {\n\n              // The ID of the weapon. Weapons are available via the Metadata API.\n            \"StockId\": \"int\",\n\n              // Any attachments the weapon had.\n            \"Attachments\": [ \n              \"int\" \n            ]\n          },\n\n            // The number of shots fired for this weapon.\n          \"TotalShotsFired\": \"int\",\n\n            // The number of shots landed for this weapon.\n          \"TotalShotsLanded\": \"int\",\n\n            // The number of headshots for this weapon.\n          \"TotalHeadshots\": \"int\",\n\n            // The number of kills for this weapon.\n          \"TotalKills\": \"int\",\n\n            // The total damage dealt for this weapon.\n          \"TotalDamageDealt\": \"double\",\n\n            // The total possession time for this weapon. This is expressed as an ISO\n            // 8601 Duration.\n          \"TotalPossessionTime\": \"string\"\n        }\n      ],\n\n      // The set of Impulses (invisible Medals) earned by the player.\n      \"Impulses\": [\n        {\n          // The ID of the Impulse. Impulses are available via the Metadata API.\n          \"Id\": \"int\",\n\n          // The number of times the Impulse was earned.\n          \"Count\": \"int\"\n        }\n      ],\n\n      // Total number of Spartan kills by the player.\n      \"TotalSpartanKills\": \"int\"\n    },\n\n  ],\n\n  // A list of stats for each team who in the match. Note that in Free For All modes,\n  // there is an entry for every player.\n  \"TeamStats\": [\n    {\n      // The ID for the team.\n      \"TeamId\": \"int\",\n\n      // The team's score at the end of the match. The way the score is determined is\n      // based off the game base variant being played: \n      //   Breakout = number of rounds won,\n      //   CTF = number of flag captures,\n      //   Slayer = number of kills,\n      //   Strongholds = number of points,\n      //   Warzone = number of points.\n      // Score can be a negative value. Unfortunately, this value is returned as an\n      // unsigned 32-bit integer. This means that if the score is -1, the score reported\n      // is 4,294,967,295.\n      \"Score\": \"uint32\",\n\n      // The team's rank at the end of the match.\n      \"Rank\": \"int\",\n\n      // The set of round stats for the team.\n      \"RoundStats\": [\n        {\n          // The round number this entry pertains to.\n          \"RoundNumber\": \"int\",\n\n          // The end rank for the team this round.\n          \"Rank\": \"int\",\n\n          // The end score for the team this round.\n          // Score can be a negative value. Unfortunately, this value is returned as an\n          // unsigned 32-bit integer. This means that if the score is -1, the score\n          // reported is 4,294,967,295.\n          \"Score\": \"uint32\",\n\n        }\n      ]\n    }\n  ],\n\n  // Indicates if the match is completed or not. Some match details are available while\n  // the match is in-progress, but the behavior for incomplete matches in undefined.\n  \"IsMatchOver\": \"boolean\",\n\n  // The length of the match. This is expressed as an ISO 8601 Duration.\n  \"TotalDuration\": \"string\",\n\n  // The variant of the map for this match. Map variants are available via the Metadata\n  // API. More information is available in MapVariantResourceId.\n  \"MapVariantId\": \"guid\",\n\n  // The variant of the game for this match. Game variants are available via the Metadata\n  // API. More information is available in GameVariantResourceId.\n  \"GameVariantId\": \"guid\",\n\n  // The playlist ID of the match. Playlists are available via the Metadata API.\n  \"PlaylistId\": \"guid\",\n\n  // The ID of the base map for this match. Maps are available via the Metadata API.\n  \"MapId\": \"guid\",\n\n  // The ID of the game base variant for this match. Game base variants are available via\n  // the Metadata API.\n  \"GameBaseVariantId\": \"guid\",\n\n  // Whether this was a team-based game or not.\n  \"IsTeamGame\": \"boolean\",\n\n  // Unused for Custom matches. This will always be null.\n  \"SeasonId\": null,\n\n  // The variant of the game for this match. There are two sources of game variants:\n  // official game variants available via the Metadata API and user-generated game\n  // variants are available via the UGC API.\n  \"GameVariantResourceId\": {\n\n    // The resource type. 2 indicates game variant.\n    \"ResourceType\": 2,\n\n    // The ID of the game variant. Official game variants are available via the Metadata\n    // API.\n    \"ResourceId\": \"guid\",        \n\n    // The source of the game variant. Options are:\n    //   Unknown = 0,\n    //   User-generated = 1,\n    //   Official = 3.\n    \"OwnerType\": \"int\",\n\n    // The gamertag of the user that created the game variant if this is a user-generated\n    // game variant, or null otherwise. \n    \"Owner\": \"string\"\n  },\n\n  // The variant of the map for this match. There are two sources of map variants:\n  // official map variants available via the Metadata API and user-generated map variants\n  // available vai the UGC API.\n  \"MapVariantResourceId\": {\n\n    // The resource type. 3 indicates map variant.\n    \"ResourceType\": 3,\n\n    // The ID of the map variant. Official map variants are available via the Metadata\n    // API.\n    \"ResourceId\": \"guid\",\n\n    // The source of the map variant. Options are:\n    //   Unknown = 0,\n    //   User-generated = 1,\n    //   Official = 3.\n    \"OwnerType\": \"int\",\n\n    // The gamertag of the user that created the map variant if this is a user-generated\n    // map variant, or null otherwise. \n    \"Owner\": \"string\"\n  }\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "042b2c52-675d-46f2-b0df-38c6cf6678c7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.193999Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-PC-Match-Result-Custom"
        }
      }
    }
  }, {
    "id" : "6a82e4f1-6bdc-45f7-b208-222e9583cfc0",
    "name" : "Halo 5 - Match Result - Warzone - 503",
    "request" : {
      "urlPath" : "/h5/warzone/matches/a00p",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "6a82e4f1-6bdc-45f7-b208-222e9583cfc0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.193904Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Warzone"
        }
      }
    }
  }, {
    "id" : "ffa8c933-087b-4fee-a98d-56d239ab9613",
    "name" : "Halo 5 - Match Result - Warzone - 500",
    "request" : {
      "urlPath" : "/h5/warzone/matches/6a4x",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "ffa8c933-087b-4fee-a98d-56d239ab9613",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.193828Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Warzone"
        }
      }
    }
  }, {
    "id" : "97ab8778-86e6-4643-8620-32beb19e6e8d",
    "name" : "Halo 5 - Match Result - Warzone - 404",
    "request" : {
      "urlPath" : "/h5/warzone/matches/r949",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "97ab8778-86e6-4643-8620-32beb19e6e8d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.193748Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Warzone"
        }
      }
    }
  }, {
    "id" : "940e93f5-2482-4788-a12a-8a15015843ac",
    "name" : "Halo 5 - Match Result - Warzone (application/json)",
    "request" : {
      "urlPath" : "/h5/warzone/matches/qv32",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // A list of stats for each player who was present in the match.\n  \"PlayerStats\": [\n    {\n      // The experience information for the player in this match.\n      \"XpInfo\": {\n\n        // The player's Spartan Rank before the match started.\n        \"PrevSpartanRank\": \"int\",\n\n        // The player's Spartan Rank after the match ended.\n        \"SpartanRank\": \"int\",\n\n        // The player's XP before the match started.\n        \"PrevTotalXP\": \"int\",\n\n        // The player's XP after the match ended.\n        \"TotalXP\": \"int\",\n\n        // The multiplier on the XP earned this match based on their Spartan Rank when\n        // the match ended.\n        \"SpartanRankMatchXPScalar\": \"double\",\n\n        // The portion of the XP the player earned this match that was based on how much\n        // time was spent in-match.\n        \"PlayerTimePerformanceXPAward\": \"int\",\n\n        // The XP awarded to the player based on how their team ranked when the match\n        // concluded.\n        \"PerformanceXP\": \"int\",\n\n        // The XP awarded to the player for their team-agnostic rank.\n        \"PlayerRankXPAward\": \"int\",\n\n        // The amount of XP the player earned if they played a boost card for this match,\n        // and the boost card criteria was met. This is a fixed amount of XP, not a\n        // multiplier.\n        \"BoostAmount\": \"int\",\n\n        // The amount of XP the player earned for finishing the match quickly.\n        \"MatchSpeedWinAmount\": \"int\",\n\n        // The amount of XP the player earned for completing objectives.\n        \"ObjectivesCompletedAmount\": \"int\"\n      },\n\n      // The number of times the player killed each opponent. If the player did not kill\n      // an opponent, there will be no entry for that opponent.\n      \"KilledOpponentDetails\": [\n        {\n          // The gamertag of the opponent that was killed.\n          \"GamerTag\": \"string\",\n\n          // The number of times that opponent was killed.\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The number of times the player was killed by each opponent. If the player was\n      // not killed by an opponent, there will be no entry for that opponent.\n      \"KilledByOpponentDetails\": [\n        {\n          // The gamertag of the opponent that killed the player.\n          \"GamerTag\": \"string\",\n\n          // The number of times the opponent killed the player.\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The maximum level the player achieved in the match.\n      \"WarzoneLevel\": \"int\",\n\n      // The total number of \"pies\" (in-game currency) the player earned in the match.\n      \"TotalPiesEarned\": \"int\",\n\n      // The game base variant specific stats for this match. Flexible stats are\n      // available via the Metadata API.\n      \"FlexibleStats\": {\n\n        // The set of flexible stats that are derived from medal events.\n        \"MedalStatCounts\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The number of times this flexible stat was earned.\n            \"Count\": \"int\"\n          }\n        ],\n\n        // The set of flexible stats that are derived from impulse events.\n        \"ImpulseStatCounts\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The number of times this flexible stat was earned.\n            \"Count\": \"int\"\n          }\n        ],\n\n        // The set of flexible stats that are derived from medal time lapses.\n        \"MedalTimelapses\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The amount of time the flexible stat was earned for. This is expressed as\n            // an ISO 8601 Duration.\n            \"Timelapse\": \"string\"\n          }\n        ],        \n\n        // The set of flexible stats that are derived from impulse time lapses.\n        \"ImpulseTimelapses\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The amount of time the flexible stat was earned for. This is expressed as\n            // an ISO 8601 Duration.\n            \"Timelapse\": \"string\"\n          }\n        ]\n      },\n\n      // The set of rewards that the player got in this match. Rewards are available via\n      // the Metadata API.\n      \"RewardSets\": [\n        {\n          // The ID of the reward.\n          \"RewardSet\": \"guid\",\n\n          // The source of the reward. Options are:\n          //   None = 0,\n          //   Meta Commendation = 1,\n          //   Progress Commendation = 2,\n          //   Spartan Rank = 3\n          \"RewardSourceType\": \"int\",\n\n          // If the Reward Source is Spartan Rank, this value is set to the Spartan Rank\n          // the player acquired that led to this reward being granted. Note: Unlike the\n          // commendations fields in this structure, this is not the GUID to a Spartan\n          // Rank content item. That's because the Spartan Rank content item itself does\n          // not detail what specific Spartan Rank it pertains to - this information is\n          // derived from the list of Spartan Ranks as a whole. \n          \"SpartanRankSource\": \"int\",\n\n          // If the Reward Source is a Commendation, this is the ID of the level of the\n          // commendation that earned the reward.\n          \"CommendationLevelId\": \"guid\",\n\n          // If the Reward Source is a Meta Commendation or Progress Commendation, this\n          // is the ID of the Meta Commendation or Progress Commendation, respectively,\n          // that earned the reward.\n          \"CommendationSource\": \"guid\"\n        },\n\n      ],\n\n      // Details on any credits the player may have earned from playing this match.\n      \"CreditsEarned\": {\n\n        // Indicates how the credits result was arrived at. Options are:\n        //   Credits Disabled In Playlist = 0,\n        //   Player Did Not Finish = 1,\n        //   Credits Earned = 2\n        // Credits Disabled In Playlist: TotalCreditsEarned is zero because this playlist\n        // has credits disabled.\n        // Player Did Not Finish: Credits are enabled in this playlist, but\n        // TotalCreditsEarned is zero because the player did not finish the match.\n        // Credits Earned: Credits are enabled in this playlist and the player completed\n        // the match, so the credits formula was successfully evaluated. The fields below\n        // provide the client with the values used in the formula. Note: That if we used\n        // one or more default values, we still return \"NormalResult\". The fields below\n        // will confirm the actual values used.\n        \"Result\": \"int\",\n\n        // The total number of credits the player earned from playing this match.\n        \"TotalCreditsEarned\": \"int\",\n\n        // The scalar applied to the credits earned based on the player's Spartan Rank.\n        \"SpartanRankModifier\": \"double\",\n\n        // The portion of credits earned due to the player's team-agnostic rank in the\n        // match.\n        \"PlayerRankAmount\": \"int\",\n\n        // The portion of credits earned due to the time the player played in the match.\n        \"TimePlayedAmount\": \"double\",\n\n        // The portion of credits earned due to the boost card the user applied\n        \"BoostAmount\": \"int\"\n      },\n\n      // The player's progress towards meta commendations. Commendations that had no\n      // progress earned this match will not be returned. \n      \"MetaCommendationDeltas\": [\n        {\n          // The commendation ID. Commendations are available via the Metadata API.\n          \"Id\": \"guid\",\n\n          // The progress the player had made towards the commendation level before the\n          // match. In C#, this can be reassembled into a Guid in the following manner:\n          // new Guid((int)Data1, (short)Data2, (short)Data3,\n          // BitConverter.GetBytes((long)Data4)).\n          \"PreviousMetRequirements\": [\n            {\n              \"Data1\": \"int\",\n\n              \"Data2\": \"int\",\n\n              \"Data3\": \"int\",\n\n              \"Data4\": \"int\"\n            }\n          ],\n\n          // The progress the player had made towards the commendation level after the\n          // match. In C#, this can be reassembled into a Guid in the following manner:\n          // new Guid((int)Data1, (short)Data2, (short)Data3,\n          // BitConverter.GetBytes((long)Data4)).\n          \"MetRequirements\": [\n            {\n              \"Data1\": \"int\",\n\n              \"Data2\": \"int\",\n\n              \"Data3\": \"int\",\n\n              \"Data4\": \"int\"\n            }\n          ]\n        }\n      ],\n\n      // The player's progress towards progressive commendations. Commendations that had\n      // no progress earned this match will not be returned.\n      \"ProgressiveCommendationDeltas\": [\n        {\n          // The commendation ID. Commendations are available via the Metadata API.\n          \"Id\": \"guid\",\n\n          // The progress the player had made towards the commendation level before the\n          // match.\n          \"PreviousProgress\": \"int\",\n\n          // The progress the player had made towards the commendation level after the\n          // match.\n          \"Progress\": \"int\"\n        }\n      ],\n\n      // Details on the boost card the user used in this match. If the user did not use a\n      // boost card this field will be null.\n      \"BoostData\": {\n\n        // The identifier of the boost card that was used. Boost cards are available via\n        // the Requisitions Metadata API.\n        \"DefinitionId\": \"guid\",\n\n        // Whether the card was consumed because its conditions were met. If not consumed\n        // the card is returned to the user's inventory.\n        \"CardConsumed\": \"bool\"\n      },\n\n      \"Player\": {\n\n         // The player's gamertag.\n        \"Gamertag\": \"string\",\n\n        // Internal use only. This will always be null.\n        \"Xuid\": null\n      },\n\n      // The ID of the team that the player was on when the match ended. \n      \"TeamId\": \"int\",\n\n      // The player's team-agnostic ranking.\n      \"Rank\": \"int\",\n\n      // Indicates whether the player was present in the match when it ended.\n      \"DNF\": \"boolean\",\n\n      // The player's average lifetime.\n      \"AvgLifeTimeOfPlayer\": \"string\",\n\n      // Internal use only. This will always be null.\n      \"PreMatchRatings\": null,\n\n      // Internal use only. This will always be null.\n      \"PostMatchRatings\": null,\n\n      // The score for the player if this was a Warzone Firefight match. Otherwise, this\n      // is unused and will usually be null or contain invalid data.\n      \"PlayerScore\": null,\n\n      // Total number of kills done by the player. This includes melee kills, shoulder\n      // bash kills and Spartan charge kills, all power weapons, AI kills and vehicle\n      // destructions. \n      \"TotalKills\": \"int\",\n\n      // Total number of headshots done by the player.\n      \"TotalHeadshots\": \"int\",\n\n      // Total weapon damage dealt by the player.\n      \"TotalWeaponDamage\": \"double\",\n\n      // Total number of shots fired by the player.\n      \"TotalShotsFired\": \"int\",\n\n      // Total number of shots landed by the player.\n      \"TotalShotsLanded\": \"int\",\n\n      // The weapon the player used to get the most kills this match.\n      \"WeaponWithMostKills\": {\n\n        \"WeaponId\": {\n\n          // The ID of the weapon. Weapons are available via the Metadata API.\n          \"StockId\": \"int\",\n\n          // Any attachments the weapon had.\n          \"Attachments\": [ \"int\" ]\n        },\n\n        // The number of shots fired for this weapon.\n        \"TotalShotsFired\": \"int\",\n\n        // The number of shots landed for this weapon.\n        \"TotalShotsLanded\": \"int\",\n\n        // The number of headshots for this weapon.\n        \"TotalHeadshots\": \"int\",\n\n        // The number of kills for this weapon.\n        \"TotalKills\": \"int\",\n\n        // The total damage dealt for this weapon.\n        \"TotalDamageDealt\": \"double\",\n\n        // The total possession time for this weapon. This is expressed as an ISO 8601\n        // Duration.\n        \"TotalPossessionTime\": \"string\"\n      },\n\n      // Total number of melee kills by the player.\n      \"TotalMeleeKills\": \"int\",\n\n      // Total melee damage dealt by the player.\n      \"TotalMeleeDamage\": \"double\",\n\n      // Total number of assassinations by the player.\n      \"TotalAssassinations\": \"int\",\n\n      // Total number of ground pound kills by the player.\n      \"TotalGroundPoundKills\": \"int\",\n\n      // Total ground pound damage dealt by the player.\n      \"TotalGroundPoundDamage\": \"double\",\n\n      // Total number of shoulder bash kills by the player.\n      \"TotalShoulderBashKills\": \"int\",\n\n      // Total shoulder bash damage dealt by the player.\n      \"TotalShoulderBashDamage\": \"double\",\n\n      // Total grenade damage dealt by the player.\n      \"TotalGrenadeDamage\": \"double\",\n\n      // Total number of power weapon kills by the player.\n      \"TotalPowerWeaponKills\": \"int\",\n\n      // Total power weapon damage dealt by the player.\n      \"TotalPowerWeaponDamage\": \"double\",\n\n      // Total number of power weapon grabs by the player.\n      \"TotalPowerWeaponGrabs\": \"int\",\n\n      // Total power weapon possession by the player. This is expressed as an ISO 8601\n      // Duration.\n      \"TotalPowerWeaponPossessionTime\": \"string\",\n\n      // Total number of deaths by the player.\n      \"TotalDeaths\": \"int\",\n\n      // Total number of assists by the player.\n      \"TotalAssists\": \"int\",\n\n      // Not used.\n      \"TotalGamesCompleted\": \"int\",\n\n      // Not used.\n      \"TotalGamesWon\": \"int\",\n\n      // Not used.\n      \"TotalGamesLost\": \"int\",\n\n      // Not used.\n      \"TotalGamesTied\": \"int\",\n\n      // Total timed played in this match by the player.\n      \"TotalTimePlayed\": \"string\",\n\n      // Total number of grenade kills by the player.\n      \"TotalGrenadeKills\": \"int\",\n\n      // The set of Medals earned by the player.\n      \"MedalAwards\": [\n        {\n          // The ID of the Medal. Medals are available via the Metadata API.\n          \"MedalId\": \"int\",\n\n          // The number of times the Medal was earned.\n          \"Count\": \"int\"\n        }\n      ], \n\n      // List of enemy vehicles destroyed. Vehicles are available via the Metadata API.\n      // Note: this stat measures enemy vehicles, not any vehicle destruction.\n      \"DestroyedEnemyVehicles\": [\n        {\n          // The enemy this entry references\n          \"Enemy\": {\n\n            // The Base ID for the enemy.\n            \"BaseId\": \"int\",\n\n            // The attachments (variants) for the enemy.\n            \"Attachments\": [\n              \"int\"\n            ]\n          },\n\n          // Total number of kills on the enemy by the player\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // List of enemies killed, per enemy type. Enemies are available via the Metadata\n      // API.\n      \"EnemyKills\": [\n        {\n          // The enemy this entry references\n          \"Enemy\": {\n\n            // The Base ID for the enemy.\n            \"BaseId\": \"int\",\n\n            // The attachments (variants) for the enemy.\n            \"Attachments\": [\n              \"int\"\n            ]\n          },\n\n          // Total number of kills on the enemy by the player\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The set of weapons (weapons and vehicles included) used by the player.\n      \"WeaponStats\": [\n        {\n          \"WeaponId\": {\n\n              // The ID of the weapon. Weapons are available via the Metadata API.\n            \"StockId\": \"int\",\n\n              // Any attachments the weapon had.\n            \"Attachments\": [ \n              \"int\" \n            ]\n          },\n\n            // The number of shots fired for this weapon.\n          \"TotalShotsFired\": \"int\",\n\n            // The number of shots landed for this weapon.\n          \"TotalShotsLanded\": \"int\",\n\n            // The number of headshots for this weapon.\n          \"TotalHeadshots\": \"int\",\n\n            // The number of kills for this weapon.\n          \"TotalKills\": \"int\",\n\n            // The total damage dealt for this weapon.\n          \"TotalDamageDealt\": \"double\",\n\n            // The total possession time for this weapon. This is expressed as an ISO\n            // 8601 Duration.\n          \"TotalPossessionTime\": \"string\"\n        }\n      ],\n\n      // The set of Impulses (invisible Medals) earned by the player.\n      \"Impulses\": [\n        {\n          // The ID of the Impulse. Impulses are available via the Metadata API.\n          \"Id\": \"int\",\n\n          // The number of times the Impulse was earned.\n          \"Count\": \"int\"\n        }\n      ],\n\n      // Total number of Spartan kills by the player.\n      \"TotalSpartanKills\": \"int\"\n    }\n  ],\n\n  // A list of stats for each team who in the match. Note that in Free For All modes,\n  // there is an entry for every player.\n  \"TeamStats\": [\n    {\n      // The ID for the team.\n      \"TeamId\": \"int\",\n\n      // The team's score at the end of the match. The way the score is determined is\n      // based off the game base variant being played: \n      //   Breakout = number of rounds won,\n      //   CTF = number of flag captures,\n      //   Slayer = number of kills,\n      //   Strongholds = number of points,\n      //   Warzone = number of points.\n      // Score can be a negative value. Unfortunately, this value is returned as an\n      // unsigned 32-bit integer. This means that if the score is -1, the score reported\n      // is 4,294,967,295.\n      \"Score\": \"uint32\",\n\n      // The team's rank at the end of the match.\n      \"Rank\": \"int\",\n\n      // The set of round stats for the team.\n      \"RoundStats\": [\n        {\n          // The round number this entry pertains to.\n          \"RoundNumber\": \"int\",\n\n          // The end rank for the team this round.\n          \"Rank\": \"int\",\n\n          // The end score for the team this round.\n          // Score can be a negative value. Unfortunately, this value is returned as an\n          // unsigned 32-bit integer. This means that if the score is -1, the score\n          // reported is 4,294,967,295.\n          \"Score\": \"uint32\",\n\n        }\n      ]\n    }\n  ],\n\n  // The number of objective rounds successfully completed if the game base variant is\n  // Firefight, null otherwise.\n  \"ObjectivesCompleted\": \"int\",\n\n  // Indicates if the match is completed or not. Some match details are available while\n  // the match is in-progress, but the behavior for incomplete matches in undefined.\n  \"IsMatchOver\": \"boolean\",\n\n  // The length of the match. This is expressed as an ISO 8601 Duration.\n  \"TotalDuration\": \"string\",\n\n  // The variant of the map for this match. Map variants are available via the Metadata\n  // API. More information is available in MapVariantResourceId.\n  \"MapVariantId\": \"guid\",\n\n  // The variant of the game for this match. Game variants are available via the Metadata\n  // API. More information is available in GameVariantResourceId.\n  \"GameVariantId\": \"guid\",\n\n  // The playlist ID of the match. Playlists are available via the Metadata API.\n  \"PlaylistId\": \"guid\",\n\n  // The ID of the base map for this match. Maps are available via the Metadata API.\n  \"MapId\": \"guid\",\n\n  // The ID of the game base variant for this match. Game base variants are available via\n  // the Metadata API.\n  \"GameBaseVariantId\": \"guid\",\n\n  // Whether this was a team-based game or not.\n  \"IsTeamGame\": \"boolean\",\n\n  // Unused for Warzone matches. This will always be null.\n  \"SeasonId\": null,\n\n  // The variant of the game for this match. There are two sources of game variants:\n  // official game variants available via the Metadata API and user-generated game\n  // variants available via the UGC API.\n  \"GameVariantResourceId\": {\n\n    // The resource type. 2 indicates game variant.\n    \"ResourceType\": 2,\n\n    // The ID of the game variant. Official game variants are available via the Metadata\n    // API.\n    \"ResourceId\": \"guid\",        \n\n    // The source of the game variant. Options are:\n    //   Unknown = 0,\n    //   User-generated = 1,\n    //   Official = 3.\n    \"OwnerType\": \"int\",\n\n    // The gamertag of the user that created the game variant if this is a user-generated\n    // game variant, or null otherwise. \n    \"Owner\": \"string\"\n  },\n\n  // The variant of the map for this match. There are two sources of map variants:\n  // official map variants available via the Metadata API and user-generated map variants\n  // available via the UGC API.\n  \"MapVariantResourceId\": {\n\n    // The resource type. 3 indicates map variant.\n    \"ResourceType\": 3,\n\n    // The ID of the map variant. Official map variants are available via the Metadata\n    // API.\n    \"ResourceId\": \"guid\",\n\n    // The source of the map variant. Options are:\n    //   Unknown = 0,\n    //   User-generated = 1,\n    //   Official = 3.\n    \"OwnerType\": \"int\",\n\n    // The gamertag of the user that created the map variant if this is a user-generated\n    // map variant, or null otherwise. \n    \"Owner\": \"string\"\n  }\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "940e93f5-2482-4788-a12a-8a15015843ac",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.193662Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Warzone"
        }
      }
    }
  }, {
    "id" : "066d6589-80d3-4d48-afb3-d25dfc281ff7",
    "name" : "Halo 5 - Player Service Records - Warzone - 500",
    "request" : {
      "urlPath" : "/h5/servicerecords/warzone",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "xaviku1"
        }
      }
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "066d6589-80d3-4d48-afb3-d25dfc281ff7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.193558Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Warzone"
        }
      }
    }
  }, {
    "id" : "99db49dd-0294-427d-a779-61354498e061",
    "name" : "Halo 5 - Player Service Records - Warzone - 404",
    "request" : {
      "urlPath" : "/h5/servicerecords/warzone",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "1nj6q7yfccm"
        }
      }
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "99db49dd-0294-427d-a779-61354498e061",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.193523Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Warzone"
        }
      }
    }
  }, {
    "id" : "f6e284dd-a30a-4a69-90d7-ba05670882dd",
    "name" : "Halo 5 - Player Service Records - Warzone (application/json)",
    "request" : {
      "urlPath" : "/h5/servicerecords/warzone",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      },
      "queryParameters" : {
        "players" : {
          "equalTo" : "cac7ime4cr0ys8nupmh6vkgieo13hvx1ui2ns4hrw7kvk7bqp614lnd1veuz"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // Set of responses. One per user queried.\n  \"Results\": [\n    {\n      // The player's gamertag.\n      \"Id\": \"string\",\n\n      // The result of the query for the player. One of the following:\n      //   Success = 0,\n      //   NotFound = 1,\n      //   ServiceFailure = 2,\n      //   ServiceUnavailable = 3\n      // It is possible for different requests from the batch to succeed and fail\n      // independently.\n      \"ResultCode\": \"int\",\n\n      // The Service Record result for the player. Only set if ResultCode is Success.\n      \"Result\": {\n\n        // Warzone stats data.\n        \"WarzoneStat\": {\n\n          // The total number of \"pies\" (in-game currency) the player has earned.\n          \"TotalPiesEarned\": \"int\",\n\n          // List of scenario stats by map and game base variant id.\n          \"ScenarioStats\": [\n            {\n              // The total number of \"pies\" (in-game currency) the player has earned in\n              // the scenario.\n              \"TotalPiesEarned\": \"int\",\n\n              // The game base variant specific stats. Flexible stats are available via\n              // the Metadata API.\n              \"FlexibleStats\": {\n\n                // The set of flexible stats that are derived from medal events.\n                \"MedalStatCounts\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The number of times this flexible stat was earned.\n                    \"Count\": \"int\"\n                  }\n                ],\n\n                // The set of flexible stats that are derived from impulse events.\n                \"ImpulseStatCounts\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The number of times this flexible stat was earned.\n                    \"Count\": \"int\"\n                  }\n                ],\n\n                // The set of flexible stats that are derived from medal time lapses.\n                \"MedalTimelapses\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The amount of time the flexible stat was earned for. This is\n                    // expressed as an ISO 8601 Duration.\n                    \"Timelapse\": \"string\"\n                  }\n                ],    \n\n                // The set of flexible stats that are derived from impulse time lapses.\n                \"ImpulseTimelapses\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The amount of time the flexible stat was earned for. This is\n                    // expressed as an ISO 8601 Duration.\n                    \"Timelapse\": \"string\"\n                  }\n                ]\n              },\n\n              // The map global ID that this warzone scenario pertains to. Found in\n              // metadata\n              \"MapId\": \"guid\",\n\n              // The ID of the game base variant. Game base variants are available via\n              // the Metadata API.\n              \"GameBaseVariantId\": \"guid\",\n\n              // Total number of kills done by the player. This includes melee kills,\n              // shoulder bash kills and Spartan charge kills, all power weapons, AI\n              // kills and vehicle destructions. \n              \"TotalKills\": \"int\",\n\n              // Total number of headshots done by the player.\n              \"TotalHeadshots\": \"int\",\n\n              // Total weapon damage dealt by the player.\n              \"TotalWeaponDamage\": \"double\",\n\n              // Total number of shots fired by the player.\n              \"TotalShotsFired\": \"int\",\n\n              // Total number of shots landed by the player.\n              \"TotalShotsLanded\": \"int\",\n\n              // The weapon the player used to get the most kills.\n              \"WeaponWithMostKills\": {\n\n                \"WeaponId\": {\n\n                  // The ID of the weapon. Weapons are available via the Metadata API.\n                  \"StockId\": \"int\",\n\n                  // Any attachments the weapon had.\n                  \"Attachments\": [\n                    \"int\"\n                  ]\n                },\n\n                // The number of shots fired for this weapon.\n                \"TotalShotsFired\": \"int\",\n\n                // The number of shots landed for this weapon.\n                \"TotalShotsLanded\": \"int\",\n\n                // The number of headshots for this weapon.\n                \"TotalHeadshots\": \"int\",\n\n                // The number of kills for this weapon.\n                \"TotalKills\": \"int\",\n\n                // The total damage dealt for this weapon.\n                \"TotalDamageDealt\": \"double\",\n\n                // The total possession time for this weapon. This is expressed as an ISO\n                // 8601 Duration.\n                \"TotalPossessionTime\": \"string\"\n              },\n\n              // Total number of melee kills by the player.\n              \"TotalMeleeKills\": \"int\",\n\n              // Total melee damage dealt by the player.\n              \"TotalMeleeDamage\": \"double\",\n\n              // Total number of assassinations by the player.\n              \"TotalAssassinations\": \"int\",\n\n              // Total number of ground pound kills by the player.\n              \"TotalGroundPoundKills\": \"int\",\n\n              // Total ground pound damage dealt by the player.\n              \"TotalGroundPoundDamage\": \"double\",\n\n              // Total number of shoulder bash kills by the player.\n              \"TotalShoulderBashKills\": \"int\",\n\n              // Total shoulder bash damage dealt by the player.\n              \"TotalShoulderBashDamage\": \"double\",\n\n              // Total grenade damage dealt by the player.\n              \"TotalGrenadeDamage\": \"double\",\n\n              // Total number of power weapon kills by the player.\n              \"TotalPowerWeaponKills\": \"int\",\n\n              // Total power weapon damage dealt by the player.\n              \"TotalPowerWeaponDamage\": \"double\",\n\n              // Total number of power weapon grabs by the player.\n              \"TotalPowerWeaponGrabs\": \"int\",\n\n              // Total power weapon possession by the player. This is expressed as an ISO\n              // 8601 Duration.\n              \"TotalPowerWeaponPossessionTime\": \"string\",\n\n              // Total number of deaths by the player.\n              \"TotalDeaths\": \"int\",\n\n              // Total number of assists by the player.\n              \"TotalAssists\": \"int\",\n\n              // Total number of games the player has completed.\n              \"TotalGamesCompleted\": \"int\",\n\n              // Total number of games won by the player.\n              \"TotalGamesWon\": \"int\",\n\n              // Total number of games lost by the player.\n              \"TotalGamesLost\": \"int\",\n\n              // Total number of games tied by the player.\n              \"TotalGamesTied\": \"int\",\n\n              // Total timed played by the player.\n              \"TotalTimePlayed\": \"string\",\n\n              // Total number of grenade kills by the player.\n              \"TotalGrenadeKills\": \"int\",\n\n              // The set of Medals earned by the player.\n              \"MedalAwards\": [\n                {\n                  // The ID of the Medal. Medals are available via the Metadata API.\n                  \"MedalId\": \"int\",\n\n                  // The number of times the Medal was earned.\n                  \"Count\": \"int\"\n                }\n              ], \n\n              // List of enemy vehicles destroyed. Vehicles are available via the\n              // Metadata API. Note: this stat measures enemy vehicles, not any vehicle\n              // destruction.\n              \"DestroyedEnemyVehicles\": [\n                {\n                  // The enemy this entry references\n                  \"Enemy\": {\n\n                    // The Base ID for the enemy.\n                    \"BaseId\": \"int\",\n\n                    // The attachments (variants) for the enemy.\n                    \"Attachments\": [\n                      \"int\"\n                    ]\n                  },\n\n                  // Total number of kills on the enemy by the player\n                  \"TotalKills\": \"int\"\n                }\n              ],\n\n              // List of enemies killed, per enemy type. Enemies are available via the\n              // Metadata API.\n              \"EnemyKills\": [\n                {\n                  // The enemy this entry references\n                  \"Enemy\": {\n\n                    // The Base ID for the enemy.\n                    \"BaseId\": \"int\",\n\n                    // The attachments (variants) for the enemy.\n                    \"Attachments\": [\n                      \"int\"\n                    ]\n                  },\n\n                  // Total number of kills on the enemy by the player\n                  \"TotalKills\": \"int\"\n                }\n              ],\n\n              // The set of weapons (weapons and vehicles included) used by the player.\n              \"WeaponStats\": [\n                {\n                  \"WeaponId\": {\n\n                    // The ID of the weapon. Weapons are available via the Metadata API.\n                    \"StockId\": \"int\",\n\n                    // Any attachments the weapon had.\n                    \"Attachments\": [ \n                      \"int\" \n                    ]\n                  },\n\n                  // The number of shots fired for this weapon.\n                  \"TotalShotsFired\": \"int\",\n\n                  // The number of shots landed for this weapon.\n                  \"TotalShotsLanded\": \"int\",\n\n                  // The number of headshots for this weapon.\n                  \"TotalHeadshots\": \"int\",\n\n                  // The number of kills for this weapon.\n                  \"TotalKills\": \"int\",\n\n                  // The total damage dealt for this weapon.\n                  \"TotalDamageDealt\": \"double\",\n\n                  // The total possession time for this weapon. This is expressed as an\n                  // ISO 8601 Duration.\n                  \"TotalPossessionTime\": \"string\"\n                }\n              ],\n\n              // The set of Impulses (invisible Medals) earned by the player.\n              \"Impulses\": [\n                {\n                  // The ID of the Impulse. Impulses are available via the Metadata API.\n                  \"Id\": \"int\",\n\n                  // The number of times the Impulse was earned.\n                  \"Count\": \"int\"\n                }\n              ],\n\n              // Total number of Spartan kills by the player.\n              \"TotalSpartanKills\": \"int\"\n            }\n          ],\n\n          // Total number of kills done by the player. This includes melee kills,\n          // shoulder bash kills and Spartan charge kills, all power weapons, AI kills\n          // and vehicle destructions. \n          \"TotalKills\": \"int\",\n\n          // Total number of headshots done by the player.\n          \"TotalHeadshots\": \"int\",\n\n          // Total weapon damage dealt by the player.\n          \"TotalWeaponDamage\": \"double\",\n\n          // Total number of shots fired by the player.\n          \"TotalShotsFired\": \"int\",\n\n          // Total number of shots landed by the player.\n          \"TotalShotsLanded\": \"int\",\n\n          // The weapon the player used to get the most kills.\n          \"WeaponWithMostKills\": {\n\n            \"WeaponId\": {\n\n              // The ID of the weapon. Weapons are available via the Metadata API.\n              \"StockId\": \"int\",\n\n              // Any attachments the weapon had.\n              \"Attachments\": [\n                \"int\"\n              ]\n            },\n\n            // The number of shots fired for this weapon.\n            \"TotalShotsFired\": \"int\",\n\n            // The number of shots landed for this weapon.\n            \"TotalShotsLanded\": \"int\",\n\n            // The number of headshots for this weapon.\n            \"TotalHeadshots\": \"int\",\n\n            // The number of kills for this weapon.\n            \"TotalKills\": \"int\",\n\n            // The total damage dealt for this weapon.\n            \"TotalDamageDealt\": \"double\",\n\n            // The total possession time for this weapon. This is expressed as an ISO\n            // 8601 Duration.\n            \"TotalPossessionTime\": \"string\"\n          },\n\n          // Total number of melee kills by the player.\n          \"TotalMeleeKills\": \"int\",\n\n          // Total melee damage dealt by the player.\n          \"TotalMeleeDamage\": \"double\",\n\n          // Total number of assassinations by the player.\n          \"TotalAssassinations\": \"int\",\n\n          // Total number of ground pound kills by the player.\n          \"TotalGroundPoundKills\": \"int\",\n\n          // Total ground pound damage dealt by the player.\n          \"TotalGroundPoundDamage\": \"double\",\n\n          // Total number of shoulder bash kills by the player.\n          \"TotalShoulderBashKills\": \"int\",\n\n          // Total shoulder bash damage dealt by the player.\n          \"TotalShoulderBashDamage\": \"double\",\n\n          // Total grenade damage dealt by the player.\n          \"TotalGrenadeDamage\": \"double\",\n\n          // Total number of power weapon kills by the player.\n          \"TotalPowerWeaponKills\": \"int\",\n\n          // Total power weapon damage dealt by the player.\n          \"TotalPowerWeaponDamage\": \"double\",\n\n          // Total number of power weapon grabs by the player.\n          \"TotalPowerWeaponGrabs\": \"int\",\n\n          // Total power weapon possession by the player. This is expressed as an ISO\n          // 8601 Duration.\n          \"TotalPowerWeaponPossessionTime\": \"string\",\n\n          // Total number of deaths by the player.\n          \"TotalDeaths\": \"int\",\n\n          // Total number of assists by the player.\n          \"TotalAssists\": \"int\",\n\n          // Total number of games the player has completed.\n          \"TotalGamesCompleted\": \"int\",\n\n          // Total number of games won by the player.\n          \"TotalGamesWon\": \"int\",\n\n          // Total number of games lost by the player.\n          \"TotalGamesLost\": \"int\",\n\n          // Total number of games tied by the player.\n          \"TotalGamesTied\": \"int\",\n\n          // Total timed played by the player.\n          \"TotalTimePlayed\": \"string\",\n\n          // Total number of grenade kills by the player.\n          \"TotalGrenadeKills\": \"int\",\n\n          // The set of Medals earned by the player.\n          \"MedalAwards\": [\n            {\n              // The ID of the Medal. Medals are available via the Metadata API.\n              \"MedalId\": \"int\",\n\n              // The number of times the Medal was earned.\n              \"Count\": \"int\"\n            }\n          ], \n\n          // List of enemy vehicles destroyed. Vehicles are available via the Metadata\n          // API. Note: this stat measures enemy vehicles, not any vehicle destruction.\n          \"DestroyedEnemyVehicles\": [\n            {\n              // The enemy this entry references\n              \"Enemy\": {\n\n                // The Base ID for the enemy.\n                \"BaseId\": \"int\",\n\n                // The attachments (variants) for the enemy.\n                \"Attachments\": [\n                  \"int\"\n                ]\n              },\n\n              // Total number of kills on the enemy by the player\n              \"TotalKills\": \"int\"\n            }\n          ],\n\n          // List of enemies killed, per enemy type. Enemies are available via the\n          // Metadata API.\n          \"EnemyKills\": [\n            {\n              // The enemy this entry references\n              \"Enemy\": {\n\n                // The Base ID for the enemy.\n                \"BaseId\": \"int\",\n\n                // The attachments (variants) for the enemy.\n                \"Attachments\": [\n                  \"int\"\n                ]\n              },\n\n              // Total number of kills on the enemy by the player\n              \"TotalKills\": \"int\"\n            }\n          ],\n\n          // The set of weapons (weapons and vehicles included) used by the player.\n          \"WeaponStats\": [\n            {\n              \"WeaponId\": {\n\n                // The ID of the weapon. Weapons are available via the Metadata API.\n                \"StockId\": \"int\",\n\n                // Any attachments the weapon had.\n                \"Attachments\": [ \n                  \"int\" \n                ]\n              },\n\n              // The number of shots fired for this weapon.\n              \"TotalShotsFired\": \"int\",\n\n              // The number of shots landed for this weapon.\n              \"TotalShotsLanded\": \"int\",\n\n              // The number of headshots for this weapon.\n              \"TotalHeadshots\": \"int\",\n\n              // The number of kills for this weapon.\n              \"TotalKills\": \"int\",\n\n              // The total damage dealt for this weapon.\n              \"TotalDamageDealt\": \"double\",\n\n              // The total possession time for this weapon. This is expressed as an ISO\n              // 8601 Duration.\n              \"TotalPossessionTime\": \"string\"\n            }\n          ],\n\n          // The set of Impulses (invisible Medals) earned by the player.\n          \"Impulses\": [\n            {\n              // The ID of the Impulse. Impulses are available via the Metadata API.\n              \"Id\": \"int\",\n\n              // The number of times the Impulse was earned.\n              \"Count\": \"int\"\n            }\n          ],\n\n          // Total number of Spartan kills by the player.\n          \"TotalSpartanKills\": \"int\"\n        },\n\n        // Information about the player for whom this data was returned.\n        \"PlayerId\": {\n\n          // The gamertag of the player queried.\n          \"GamerTag\": \"string\",\n\n          // Internal use only. This will always be null.\n          \"Xuid\": null\n        },\n\n        // The player's Spartan Rank.\n        \"SpartanRank\": \"int\",\n\n        // The player's XP.\n        \"Xp\": \"int\"\n      }\n    }\n  ],\n\n  // Internal use only. A set of related resource links.\n  \"Links\": null\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f6e284dd-a30a-4a69-90d7-ba05670882dd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.19348Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Warzone"
        }
      }
    }
  }, {
    "id" : "978bd30c-92f9-4591-9917-732567ae406b",
    "name" : "Halo 5 - Player Service Records - Custom Local - 503",
    "request" : {
      "urlPath" : "/h5/servicerecords/customlocal",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "wyph1c6ruec2pojiqy3d8wfbd10oyra8mkypu8bi3vkchwagmvcpjws01dgzf62xb55n0ka7k4zxkn6u1iiq0ak3335sf4vw6amjqk8sk86xfk8gpt4fp9v6ijb170418hqlijc"
        }
      }
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "978bd30c-92f9-4591-9917-732567ae406b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.193428Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Custom-Local"
        }
      }
    }
  }, {
    "id" : "10715959-9db7-4972-a9fd-8eab5545e84f",
    "name" : "Halo 5 - Player Service Records - Custom Local - 500",
    "request" : {
      "urlPath" : "/h5/servicerecords/customlocal",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "7yu2le9eii71h5o9lxh36ywu7lc3blc425nk59nonz300plem59oey89g3d1xrqyfvjgr3deafqrom127a1p9k6an3whm8samv9j1xka9v59vgzv58y2f3vvz1saufmkbf5szqsh"
        }
      }
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "10715959-9db7-4972-a9fd-8eab5545e84f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.19339Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Custom-Local"
        }
      }
    }
  }, {
    "id" : "850f603e-b677-48bb-a866-e5639f002ca0",
    "name" : "Halo 5 - Player Service Records - Custom Local - 404",
    "request" : {
      "urlPath" : "/h5/servicerecords/customlocal",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "pfwecvl9op77t7qlecrwogj8kb2o6rxu2g484yxcp269o7yvbkfdd81hehr43p2gdfy8pvlk5ih7hxby83luky4597hpyvnqlg4v1wxt3so43c8rpfs36v5roja3712jgzdknhkusa313theqv48"
        }
      }
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "850f603e-b677-48bb-a866-e5639f002ca0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.193353Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Custom-Local"
        }
      }
    }
  }, {
    "id" : "9ac4560f-4c6b-4161-a374-dc8cc2bb2d06",
    "name" : "Halo 5 - Player Service Records - Custom Local (application/json)",
    "request" : {
      "urlPath" : "/h5/servicerecords/customlocal",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      },
      "queryParameters" : {
        "players" : {
          "equalTo" : "mz0awkfiun0qtpd78c0akp5t90ifol2qy1tuw8s3wd8fbcaipm6rtw5k8ou7xsb3b5ue3qa4w35uxrpemmmbncgpjlkhgl5s1x2qd1z6e51uzzbsa6j8vp6lx80rqwo80vgevelp2zimdub7kw9ojgt3chagv6ngv"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // Set of responses. One per user queried.\n  \"Results\": [\n    {\n      // The player's gamertag.\n      \"Id\": \"string\",\n\n      // The result of the query for the player. One of the following:\n      //   Success = 0,\n      //   NotFound = 1,\n      //   ServiceFailure = 2,\n      //   ServiceUnavailable = 3\n      // It is possible for different requests from the batch to succeed and fail\n      // independently.\n      \"ResultCode\": \"int\",\n\n      // The Service Record result for the player. Only set if ResultCode is Success.\n      \"Result\": {\n\n        // Custom stats data.\n        \"CustomStats\": {\n\n          // List of custom stats by CustomGameBaseVariant.\n          \"CustomGameBaseVariantStats\": [\n            {\n              // The game base variant specific stats. Flexible stats are available via\n              // the Metadata API.\n              \"FlexibleStats\": {\n\n                // The set of flexible stats that are derived from medal events.\n                \"MedalStatCounts\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The number of times this flexible stat was earned.\n                    \"Count\": \"int\"\n                  }\n                ],\n\n                // The set of flexible stats that are derived from impulse events.\n                \"ImpulseStatCounts\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The number of times this flexible stat was earned.\n                    \"Count\": \"int\"\n                  }\n                ],\n\n                // The set of flexible stats that are derived from medal time lapses.\n                \"MedalTimelapses\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The amount of time the flexible stat was earned for. This is\n                    // expressed as an ISO 8601 Duration.\n                    \"Timelapse\": \"string\"\n                  }\n                ],    \n\n                // The set of flexible stats that are derived from impulse time lapses.\n                \"ImpulseTimelapses\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The amount of time the flexible stat was earned for. This is\n                    // expressed as an ISO 8601 Duration.\n                    \"Timelapse\": \"string\"\n                  }\n                ]\n              },\n\n              // The ID of the game base variant. Game base variants are available via\n              // the Metadata API.\n              \"GameBaseVariantId\": \"guid\",\n\n              // Total number of kills done by the player. This includes melee kills,\n              // shoulder bash kills and Spartan charge kills, all power weapons, AI\n              // kills and vehicle destructions. \n              \"TotalKills\": \"int\",\n\n              // Total number of headshots done by the player.\n              \"TotalHeadshots\": \"int\",\n\n              // Total weapon damage dealt by the player.\n              \"TotalWeaponDamage\": \"double\",\n\n              // Total number of shots fired by the player.\n              \"TotalShotsFired\": \"int\",\n\n              // Total number of shots landed by the player.\n              \"TotalShotsLanded\": \"int\",\n\n              // The weapon the player used to get the most kills.\n              \"WeaponWithMostKills\": {\n\n                \"WeaponId\": {\n\n                  // The ID of the weapon. Weapons are available via the Metadata API.\n                  \"StockId\": \"int\",\n\n                  // Any attachments the weapon had.\n                  \"Attachments\": [\n                    \"int\"\n                  ]\n                },\n\n                // The number of shots fired for this weapon.\n                \"TotalShotsFired\": \"int\",\n\n                // The number of shots landed for this weapon.\n                \"TotalShotsLanded\": \"int\",\n\n                // The number of headshots for this weapon.\n                \"TotalHeadshots\": \"int\",\n\n                // The number of kills for this weapon.\n                \"TotalKills\": \"int\",\n\n                // The total damage dealt for this weapon.\n                \"TotalDamageDealt\": \"double\",\n\n                // The total possession time for this weapon. This is expressed as an ISO\n                // 8601 Duration.\n                \"TotalPossessionTime\": \"string\"\n              },\n\n              // Total number of melee kills by the player.\n              \"TotalMeleeKills\": \"int\",\n\n              // Total melee damage dealt by the player.\n              \"TotalMeleeDamage\": \"double\",\n\n              // Total number of assassinations by the player.\n              \"TotalAssassinations\": \"int\",\n\n              // Total number of ground pound kills by the player.\n              \"TotalGroundPoundKills\": \"int\",\n\n              // Total ground pound damage dealt by the player.\n              \"TotalGroundPoundDamage\": \"double\",\n\n              // Total number of shoulder bash kills by the player.\n              \"TotalShoulderBashKills\": \"int\",\n\n              // Total shoulder bash damage dealt by the player.\n              \"TotalShoulderBashDamage\": \"double\",\n\n              // Total grenade damage dealt by the player.\n              \"TotalGrenadeDamage\": \"double\",\n\n              // Total number of power weapon kills by the player.\n              \"TotalPowerWeaponKills\": \"int\",\n\n              // Total power weapon damage dealt by the player.\n              \"TotalPowerWeaponDamage\": \"double\",\n\n              // Total number of power weapon grabs by the player.\n              \"TotalPowerWeaponGrabs\": \"int\",\n\n              // Total power weapon possession by the player. This is expressed as an ISO\n              // 8601 Duration.\n              \"TotalPowerWeaponPossessionTime\": \"string\",\n\n              // Total number of deaths by the player.\n              \"TotalDeaths\": \"int\",\n\n              // Total number of assists by the player.\n              \"TotalAssists\": \"int\",\n\n              // Total number of games the player has completed.\n              \"TotalGamesCompleted\": \"int\",\n\n              // Total number of games won by the player.\n              \"TotalGamesWon\": \"int\",\n\n              // Total number of games lost by the player.\n              \"TotalGamesLost\": \"int\",\n\n              // Total number of games tied by the player.\n              \"TotalGamesTied\": \"int\",\n\n              // Total timed played by the player.\n              \"TotalTimePlayed\": \"string\",\n\n              // Total number of grenade kills by the player.\n              \"TotalGrenadeKills\": \"int\",\n\n              // The set of Medals earned by the player.\n              \"MedalAwards\": [\n                {\n                  // The ID of the Medal. Medals are available via the Metadata API.\n                  \"MedalId\": \"int\",\n\n                  // The number of times the Medal was earned.\n                  \"Count\": \"int\"\n                }\n              ], \n\n              // List of enemy vehicles destroyed. Vehicles are available via the\n              // Metadata API. Note: this stat measures enemy vehicles, not any vehicle\n              // destruction.\n              \"DestroyedEnemyVehicles\": [\n                {\n                  // The enemy this entry references\n                  \"Enemy\": {\n\n                    // The Base ID for the enemy.\n                    \"BaseId\": \"int\",\n\n                    // The attachments (variants) for the enemy.\n                    \"Attachments\": [\n                      \"int\"\n                    ]\n                  },\n\n                  // Total number of kills on the enemy by the player\n                  \"TotalKills\": \"int\"\n                }\n              ],\n\n              // List of enemies killed, per enemy type. Enemies are available via the\n              // Metadata API.\n              \"EnemyKills\": [\n                {\n                  // The enemy this entry references\n                  \"Enemy\": {\n\n                    // The Base ID for the enemy.\n                    \"BaseId\": \"int\",\n\n                    // The attachments (variants) for the enemy.\n                    \"Attachments\": [\n                      \"int\"\n                    ]\n                  },\n\n                  // Total number of kills on the enemy by the player\n                  \"TotalKills\": \"int\"\n                }\n              ],\n\n              // The set of weapons (weapons and vehicles included) used by the player.\n              \"WeaponStats\": [\n                {\n                  \"WeaponId\": {\n\n                    // The ID of the weapon. Weapons are available via the Metadata API.\n                    \"StockId\": \"int\",\n\n                    // Any attachments the weapon had.\n                    \"Attachments\": [ \n                      \"int\" \n                    ]\n                  },\n\n                  // The number of shots fired for this weapon.\n                  \"TotalShotsFired\": \"int\",\n\n                  // The number of shots landed for this weapon.\n                  \"TotalShotsLanded\": \"int\",\n\n                  // The number of headshots for this weapon.\n                  \"TotalHeadshots\": \"int\",\n\n                  // The number of kills for this weapon.\n                  \"TotalKills\": \"int\",\n\n                  // The total damage dealt for this weapon.\n                  \"TotalDamageDealt\": \"double\",\n\n                  // The total possession time for this weapon. This is expressed as an\n                  // ISO 8601 Duration.\n                  \"TotalPossessionTime\": \"string\"\n                }\n              ],\n\n              // The set of Impulses (invisible Medals) earned by the player.\n              \"Impulses\": [\n                {\n                  // The ID of the Impulse. Impulses are available via the Metadata API.\n                  \"Id\": \"int\",\n\n                  // The number of times the Impulse was earned.\n                  \"Count\": \"int\"\n                }\n              ],\n\n              // Total number of Spartan kills by the player.\n              \"TotalSpartanKills\": \"int\"\n            }\n          ],\n\n          // A list of up to 3 top game base variants played by the user Top means\n          // Wins/Completed matches. If there is a tie, the one with more completions is\n          // higher. If there's still a tie, the GUIDs are sorted and selected\n          \"TopGameBaseVariants\": [\n            {\n              // Rank between 1-3\n              \"GameBaseVariantRank\": \"int\",\n\n              // Number of games played in game base variant\n              \"NumberOfMatchesCompleted\": \"int\",\n\n              // Id of the game base variant\n              \"GameBaseVariantId\": \"guid\",\n\n              // Number of matches won on game base variant\n              \"NumberOfMatchesWon\": \"int\"\n            }\n          ],\n\n          // Total number of kills done by the player. This includes melee kills,\n          // shoulder bash kills and Spartan charge kills, all power weapons, AI kills\n          // and vehicle destructions. \n          \"TotalKills\": \"int\",\n\n          // Total number of headshots done by the player.\n          \"TotalHeadshots\": \"int\",\n\n          // Total weapon damage dealt by the player.\n          \"TotalWeaponDamage\": \"double\",\n\n          // Total number of shots fired by the player.\n          \"TotalShotsFired\": \"int\",\n\n          // Total number of shots landed by the player.\n          \"TotalShotsLanded\": \"int\",\n\n          // The weapon the player used to get the most kills.\n          \"WeaponWithMostKills\": {\n\n            \"WeaponId\": {\n\n              // The ID of the weapon. Weapons are available via the Metadata API.\n              \"StockId\": \"int\",\n\n              // Any attachments the weapon had.\n              \"Attachments\": [\n                \"int\"\n              ]\n            },\n\n            // The number of shots fired for this weapon.\n            \"TotalShotsFired\": \"int\",\n\n            // The number of shots landed for this weapon.\n            \"TotalShotsLanded\": \"int\",\n\n            // The number of headshots for this weapon.\n            \"TotalHeadshots\": \"int\",\n\n            // The number of kills for this weapon.\n            \"TotalKills\": \"int\",\n\n            // The total damage dealt for this weapon.\n            \"TotalDamageDealt\": \"double\",\n\n            // The total possession time for this weapon. This is expressed as an ISO\n            // 8601 Duration.\n            \"TotalPossessionTime\": \"string\"\n          },\n\n          // Total number of melee kills by the player.\n          \"TotalMeleeKills\": \"int\",\n\n          // Total melee damage dealt by the player.\n          \"TotalMeleeDamage\": \"double\",\n\n          // Total number of assassinations by the player.\n          \"TotalAssassinations\": \"int\",\n\n          // Total number of ground pound kills by the player.\n          \"TotalGroundPoundKills\": \"int\",\n\n          // Total ground pound damage dealt by the player.\n          \"TotalGroundPoundDamage\": \"double\",\n\n          // Total number of shoulder bash kills by the player.\n          \"TotalShoulderBashKills\": \"int\",\n\n          // Total shoulder bash damage dealt by the player.\n          \"TotalShoulderBashDamage\": \"double\",\n\n          // Total grenade damage dealt by the player.\n          \"TotalGrenadeDamage\": \"double\",\n\n          // Total number of power weapon kills by the player.\n          \"TotalPowerWeaponKills\": \"int\",\n\n          // Total power weapon damage dealt by the player.\n          \"TotalPowerWeaponDamage\": \"double\",\n\n          // Total number of power weapon grabs by the player.\n          \"TotalPowerWeaponGrabs\": \"int\",\n\n          // Total power weapon possession by the player. This is expressed as an ISO\n          // 8601 Duration.\n          \"TotalPowerWeaponPossessionTime\": \"string\",\n\n          // Total number of deaths by the player.\n          \"TotalDeaths\": \"int\",\n\n          // Total number of assists by the player.\n          \"TotalAssists\": \"int\",\n\n          // Not used.\n          \"TotalGamesCompleted\": \"int\",\n\n          // Not used.\n          \"TotalGamesWon\": \"int\",\n\n          // Not used.\n          \"TotalGamesLost\": \"int\",\n\n          // Not used.\n          \"TotalGamesTied\": \"int\",\n\n          // Total timed played by the player.\n          \"TotalTimePlayed\": \"string\",\n\n          // Total number of grenade kills by the player.\n          \"TotalGrenadeKills\": \"int\",\n\n          // The set of Medals earned by the player.\n          \"MedalAwards\": [\n            {\n              // The ID of the Medal. Medals are available via the Metadata API.\n              \"MedalId\": \"int\",\n\n              // The number of times the Medal was earned.\n              \"Count\": \"int\"\n            }\n          ], \n\n          // List of enemy vehicles destroyed. Vehicles are available via the Metadata\n          // API. Note: this stat measures enemy vehicles, not any vehicle destruction.\n          \"DestroyedEnemyVehicles\": [\n            {\n              // The enemy this entry references\n              \"Enemy\": {\n\n                // The Base ID for the enemy.\n                \"BaseId\": \"int\",\n\n                // The attachments (variants) for the enemy.\n                \"Attachments\": [\n                  \"int\"\n                ]\n              },\n\n              // Total number of kills on the enemy by the player\n              \"TotalKills\": \"int\"\n            }\n          ],\n\n          // List of enemies killed, per enemy type. Enemies are available via the\n          // Metadata API.\n          \"EnemyKills\": [\n            {\n              // The enemy this entry references\n              \"Enemy\": {\n\n                // The Base ID for the enemy.\n                \"BaseId\": \"int\",\n\n                // The attachments (variants) for the enemy.\n                \"Attachments\": [\n                  \"int\"\n                ]\n              },\n\n              // Total number of kills on the enemy by the player\n              \"TotalKills\": \"int\"\n            }\n          ],\n\n          // The set of weapons (weapons and vehicles included) used by the player.\n          \"WeaponStats\": [\n            {\n              \"WeaponId\": {\n\n                // The ID of the weapon. Weapons are available via the Metadata API.\n                \"StockId\": \"int\",\n\n                // Any attachments the weapon had.\n                \"Attachments\": [ \n                  \"int\" \n                ]\n              },\n\n              // The number of shots fired for this weapon.\n              \"TotalShotsFired\": \"int\",\n\n              // The number of shots landed for this weapon.\n              \"TotalShotsLanded\": \"int\",\n\n              // The number of headshots for this weapon.\n              \"TotalHeadshots\": \"int\",\n\n              // The number of kills for this weapon.\n              \"TotalKills\": \"int\",\n\n              // The total damage dealt for this weapon.\n              \"TotalDamageDealt\": \"double\",\n\n              // The total possession time for this weapon. This is expressed as an ISO\n              // 8601 Duration.\n              \"TotalPossessionTime\": \"string\"\n            }\n          ],\n\n          // The set of Impulses (invisible Medals) earned by the player.\n          \"Impulses\": [\n            {\n              // The ID of the Impulse. Impulses are available via the Metadata API.\n              \"Id\": \"int\",\n\n              // The number of times the Impulse was earned.\n              \"Count\": \"int\"\n            }\n          ],\n\n          // Total number of Spartan kills by the player.\n          \"TotalSpartanKills\": \"int\"\n        },\n\n        // Information about the player for whom this data was returned.\n        \"PlayerId\": {\n\n          // The gamertag of the player queried.\n          \"GamerTag\": \"string\",\n\n          // Internal use only. This will always be null.\n          \"Xuid\": null\n        },\n\n        // The player's Spartan Rank. Zero for custom.\n        \"SpartanRank\": \"int\",\n\n        // The player's XP. Zero for custom.\n        \"Xp\": \"int\"\n      }\n    }\n  ],\n\n  // Internal use only. A set of related resource links.\n  \"Links\": null\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9ac4560f-4c6b-4161-a374-dc8cc2bb2d06",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.193306Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Custom-Local"
        }
      }
    }
  }, {
    "id" : "c47101fb-89c9-4388-8be1-67a24cadc017",
    "name" : "Halo 5 - Player Service Records - Custom - 503",
    "request" : {
      "urlPath" : "/h5/servicerecords/custom",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "o90xdk6kdfnl9fvswqofxvad30anouxilfeiwb6910z7ztrnfdkcme1qklych6l2hpjzdm9q4esvl7di9of7l66giuw8tvs0nk4ld91ne25lidzxgsvd0od4deds6v2dwr4pgekugoqcnret3ski4ir1iypkokfpyovpemg910p6s12diyfrghi"
        }
      }
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "c47101fb-89c9-4388-8be1-67a24cadc017",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.193252Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Custom"
        }
      }
    }
  }, {
    "id" : "0c2f685e-8e68-4010-9797-82ed207319cb",
    "name" : "Halo 5 - Player Service Records - Custom - 500",
    "request" : {
      "urlPath" : "/h5/servicerecords/custom",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "ecyiygz4sekm2ds7zo3gyknkpl73csd2amou3fp0k1y988mqsb8hly6b3t11ycvm9su3ehk4s2xfar4e9qz4day064a3hf3umjndkb37o81mbqkubzn2qutuia5t5gvrhrfshzi1mc"
        }
      }
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "0c2f685e-8e68-4010-9797-82ed207319cb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.193213Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Custom"
        }
      }
    }
  }, {
    "id" : "4fb51749-6424-4748-98c9-eead6dc6676c",
    "name" : "Halo 5 - Player Service Records - Custom - 404",
    "request" : {
      "urlPath" : "/h5/servicerecords/custom",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "ibwmljq6m8yf7ke3d5crzmatftr35a2d9577cyoyu4axoje4dhrbztupb3qcdzpmj8of943mgt5awazt3uv83hp2zylzqc5pe2j2h72q3me4bbqf3aeefiat5i6893w309807djti5z5i52msdmt4ee5vqkrxgjkmib1otvzuksftplhg1"
        }
      }
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "4fb51749-6424-4748-98c9-eead6dc6676c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.193176Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Custom"
        }
      }
    }
  }, {
    "id" : "312e13c7-b68a-4bcb-9884-27a165a9d1e8",
    "name" : "Halo 5 - Player Service Records - Custom (application/json)",
    "request" : {
      "urlPath" : "/h5/servicerecords/custom",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      },
      "queryParameters" : {
        "players" : {
          "equalTo" : "iv10ll6yv0j5hrocfg0z5k2e7e9sbbg9mmhgc25l5xa3kua2wv8j6euxxuc01fr5wyq2cefkpp4ffywprxsrmp6lsv1doshcikq1y2szbmcajvq9x7kfamfna3ujjp3icer205au2msbmgn2hooutpps43ttuso7kancoo88opzuirnvpv4wnl32aox"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // Set of responses. One per user queried.\n  \"Results\": [\n    {\n      // The player's gamertag.\n      \"Id\": \"string\",\n\n      // The result of the query for the player. One of the following:\n      //   Success = 0,\n      //   NotFound = 1,\n      //   ServiceFailure = 2,\n      //   ServiceUnavailable = 3\n      // It is possible for different requests from the batch to succeed and fail\n      // independently.\n      \"ResultCode\": \"int\",\n\n      // The Service Record result for the player. Only set if ResultCode is Success.\n      \"Result\": {\n\n        // Custom stats data.\n        \"CustomStats\": {\n\n          // List of custom stats by CustomGameBaseVariant.\n          \"CustomGameBaseVariantStats\": [\n            {\n              // The game base variant specific stats. Flexible stats are available via\n              // the Metadata API.\n              \"FlexibleStats\": {\n\n                // The set of flexible stats that are derived from medal events.\n                \"MedalStatCounts\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The number of times this flexible stat was earned.\n                    \"Count\": \"int\"\n                  }\n                ],\n\n                // The set of flexible stats that are derived from impulse events.\n                \"ImpulseStatCounts\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The number of times this flexible stat was earned.\n                    \"Count\": \"int\"\n                  }\n                ],\n\n                // The set of flexible stats that are derived from medal time lapses.\n                \"MedalTimelapses\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The amount of time the flexible stat was earned for. This is\n                    // expressed as an ISO 8601 Duration.\n                    \"Timelapse\": \"string\"\n                  }\n                ],    \n\n                // The set of flexible stats that are derived from impulse time lapses.\n                \"ImpulseTimelapses\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The amount of time the flexible stat was earned for. This is\n                    // expressed as an ISO 8601 Duration.\n                    \"Timelapse\": \"string\"\n                  }\n                ]\n              },\n\n              // The ID of the game base variant. Game base variants are available via\n              // the Metadata API.\n              \"GameBaseVariantId\": \"guid\",\n\n              // Total number of kills done by the player. This includes melee kills,\n              // shoulder bash kills and Spartan charge kills, all power weapons, AI\n              // kills and vehicle destructions. \n              \"TotalKills\": \"int\",\n\n              // Total number of headshots done by the player.\n              \"TotalHeadshots\": \"int\",\n\n              // Total weapon damage dealt by the player.\n              \"TotalWeaponDamage\": \"double\",\n\n              // Total number of shots fired by the player.\n              \"TotalShotsFired\": \"int\",\n\n              // Total number of shots landed by the player.\n              \"TotalShotsLanded\": \"int\",\n\n              // The weapon the player used to get the most kills.\n              \"WeaponWithMostKills\": {\n\n                \"WeaponId\": {\n\n                  // The ID of the weapon. Weapons are available via the Metadata API.\n                  \"StockId\": \"int\",\n\n                  // Any attachments the weapon had.\n                  \"Attachments\": [\n                    \"int\"\n                  ]\n                },\n\n                // The number of shots fired for this weapon.\n                \"TotalShotsFired\": \"int\",\n\n                // The number of shots landed for this weapon.\n                \"TotalShotsLanded\": \"int\",\n\n                // The number of headshots for this weapon.\n                \"TotalHeadshots\": \"int\",\n\n                // The number of kills for this weapon.\n                \"TotalKills\": \"int\",\n\n                // The total damage dealt for this weapon.\n                \"TotalDamageDealt\": \"double\",\n\n                // The total possession time for this weapon. This is expressed as an ISO\n                // 8601 Duration.\n                \"TotalPossessionTime\": \"string\"\n              },\n\n              // Total number of melee kills by the player.\n              \"TotalMeleeKills\": \"int\",\n\n              // Total melee damage dealt by the player.\n              \"TotalMeleeDamage\": \"double\",\n\n              // Total number of assassinations by the player.\n              \"TotalAssassinations\": \"int\",\n\n              // Total number of ground pound kills by the player.\n              \"TotalGroundPoundKills\": \"int\",\n\n              // Total ground pound damage dealt by the player.\n              \"TotalGroundPoundDamage\": \"double\",\n\n              // Total number of shoulder bash kills by the player.\n              \"TotalShoulderBashKills\": \"int\",\n\n              // Total shoulder bash damage dealt by the player.\n              \"TotalShoulderBashDamage\": \"double\",\n\n              // Total grenade damage dealt by the player.\n              \"TotalGrenadeDamage\": \"double\",\n\n              // Total number of power weapon kills by the player.\n              \"TotalPowerWeaponKills\": \"int\",\n\n              // Total power weapon damage dealt by the player.\n              \"TotalPowerWeaponDamage\": \"double\",\n\n              // Total number of power weapon grabs by the player.\n              \"TotalPowerWeaponGrabs\": \"int\",\n\n              // Total power weapon possession by the player. This is expressed as an ISO\n              // 8601 Duration.\n              \"TotalPowerWeaponPossessionTime\": \"string\",\n\n              // Total number of deaths by the player.\n              \"TotalDeaths\": \"int\",\n\n              // Total number of assists by the player.\n              \"TotalAssists\": \"int\",\n\n              // Total number of games the player has completed.\n              \"TotalGamesCompleted\": \"int\",\n\n              // Total number of games won by the player.\n              \"TotalGamesWon\": \"int\",\n\n              // Total number of games lost by the player.\n              \"TotalGamesLost\": \"int\",\n\n              // Total number of games tied by the player.\n              \"TotalGamesTied\": \"int\",\n\n              // Total timed played by the player.\n              \"TotalTimePlayed\": \"string\",\n\n              // Total number of grenade kills by the player.\n              \"TotalGrenadeKills\": \"int\",\n\n              // The set of Medals earned by the player.\n              \"MedalAwards\": [\n                {\n                  // The ID of the Medal. Medals are available via the Metadata API.\n                  \"MedalId\": \"int\",\n\n                  // The number of times the Medal was earned.\n                  \"Count\": \"int\"\n                }\n              ], \n\n              // List of enemy vehicles destroyed. Vehicles are available via the\n              // Metadata API. Note: this stat measures enemy vehicles, not any vehicle\n              // destruction.\n              \"DestroyedEnemyVehicles\": [\n                {\n                  // The enemy this entry references\n                  \"Enemy\": {\n\n                    // The Base ID for the enemy.\n                    \"BaseId\": \"int\",\n\n                    // The attachments (variants) for the enemy.\n                    \"Attachments\": [\n                      \"int\"\n                    ]\n                  },\n\n                  // Total number of kills on the enemy by the player\n                  \"TotalKills\": \"int\"\n                }\n              ],\n\n              // List of enemies killed, per enemy type. Enemies are available via the\n              // Metadata API.\n              \"EnemyKills\": [\n                {\n                  // The enemy this entry references\n                  \"Enemy\": {\n\n                    // The Base ID for the enemy.\n                    \"BaseId\": \"int\",\n\n                    // The attachments (variants) for the enemy.\n                    \"Attachments\": [\n                      \"int\"\n                    ]\n                  },\n\n                  // Total number of kills on the enemy by the player\n                  \"TotalKills\": \"int\"\n                }\n              ],\n\n              // The set of weapons (weapons and vehicles included) used by the player.\n              \"WeaponStats\": [\n                {\n                  \"WeaponId\": {\n\n                    // The ID of the weapon. Weapons are available via the Metadata API.\n                    \"StockId\": \"int\",\n\n                    // Any attachments the weapon had.\n                    \"Attachments\": [ \n                      \"int\" \n                    ]\n                  },\n\n                  // The number of shots fired for this weapon.\n                  \"TotalShotsFired\": \"int\",\n\n                  // The number of shots landed for this weapon.\n                  \"TotalShotsLanded\": \"int\",\n\n                  // The number of headshots for this weapon.\n                  \"TotalHeadshots\": \"int\",\n\n                  // The number of kills for this weapon.\n                  \"TotalKills\": \"int\",\n\n                  // The total damage dealt for this weapon.\n                  \"TotalDamageDealt\": \"double\",\n\n                  // The total possession time for this weapon. This is expressed as an\n                  // ISO 8601 Duration.\n                  \"TotalPossessionTime\": \"string\"\n                }\n              ],\n\n              // The set of Impulses (invisible Medals) earned by the player.\n              \"Impulses\": [\n                {\n                  // The ID of the Impulse. Impulses are available via the Metadata API.\n                  \"Id\": \"int\",\n\n                  // The number of times the Impulse was earned.\n                  \"Count\": \"int\"\n                }\n              ],\n\n              // Total number of Spartan kills by the player.\n              \"TotalSpartanKills\": \"int\"\n            }\n          ],\n\n          // A list of up to 3 top game base variants played by the user Top means\n          // Wins/Completed matches. If there is a tie, the one with more completions is\n          // higher. If there's still a tie, the GUIDs are sorted and selected\n          \"TopGameBaseVariants\": [\n            {\n              // Rank between 1-3\n              \"GameBaseVariantRank\": \"int\",\n\n              // Number of games played in game base variant\n              \"NumberOfMatchesCompleted\": \"int\",\n\n              // Id of the game base variant\n              \"GameBaseVariantId\": \"guid\",\n\n              // Number of matches won on game base variant\n              \"NumberOfMatchesWon\": \"int\"\n            }\n          ],\n\n          // Total number of kills done by the player. This includes melee kills,\n          // shoulder bash kills and Spartan charge kills, all power weapons, AI kills\n          // and vehicle destructions. \n          \"TotalKills\": \"int\",\n\n          // Total number of headshots done by the player.\n          \"TotalHeadshots\": \"int\",\n\n          // Total weapon damage dealt by the player.\n          \"TotalWeaponDamage\": \"double\",\n\n          // Total number of shots fired by the player.\n          \"TotalShotsFired\": \"int\",\n\n          // Total number of shots landed by the player.\n          \"TotalShotsLanded\": \"int\",\n\n          // The weapon the player used to get the most kills.\n          \"WeaponWithMostKills\": {\n\n            \"WeaponId\": {\n\n              // The ID of the weapon. Weapons are available via the Metadata API.\n              \"StockId\": \"int\",\n\n              // Any attachments the weapon had.\n              \"Attachments\": [\n                \"int\"\n              ]\n            },\n\n            // The number of shots fired for this weapon.\n            \"TotalShotsFired\": \"int\",\n\n            // The number of shots landed for this weapon.\n            \"TotalShotsLanded\": \"int\",\n\n            // The number of headshots for this weapon.\n            \"TotalHeadshots\": \"int\",\n\n            // The number of kills for this weapon.\n            \"TotalKills\": \"int\",\n\n            // The total damage dealt for this weapon.\n            \"TotalDamageDealt\": \"double\",\n\n            // The total possession time for this weapon. This is expressed as an ISO\n            // 8601 Duration.\n            \"TotalPossessionTime\": \"string\"\n          },\n\n          // Total number of melee kills by the player.\n          \"TotalMeleeKills\": \"int\",\n\n          // Total melee damage dealt by the player.\n          \"TotalMeleeDamage\": \"double\",\n\n          // Total number of assassinations by the player.\n          \"TotalAssassinations\": \"int\",\n\n          // Total number of ground pound kills by the player.\n          \"TotalGroundPoundKills\": \"int\",\n\n          // Total ground pound damage dealt by the player.\n          \"TotalGroundPoundDamage\": \"double\",\n\n          // Total number of shoulder bash kills by the player.\n          \"TotalShoulderBashKills\": \"int\",\n\n          // Total shoulder bash damage dealt by the player.\n          \"TotalShoulderBashDamage\": \"double\",\n\n          // Total grenade damage dealt by the player.\n          \"TotalGrenadeDamage\": \"double\",\n\n          // Total number of power weapon kills by the player.\n          \"TotalPowerWeaponKills\": \"int\",\n\n          // Total power weapon damage dealt by the player.\n          \"TotalPowerWeaponDamage\": \"double\",\n\n          // Total number of power weapon grabs by the player.\n          \"TotalPowerWeaponGrabs\": \"int\",\n\n          // Total power weapon possession by the player. This is expressed as an ISO\n          // 8601 Duration.\n          \"TotalPowerWeaponPossessionTime\": \"string\",\n\n          // Total number of deaths by the player.\n          \"TotalDeaths\": \"int\",\n\n          // Total number of assists by the player.\n          \"TotalAssists\": \"int\",\n\n          // Not used.\n          \"TotalGamesCompleted\": \"int\",\n\n          // Not used.\n          \"TotalGamesWon\": \"int\",\n\n          // Not used.\n          \"TotalGamesLost\": \"int\",\n\n          // Not used.\n          \"TotalGamesTied\": \"int\",\n\n          // Total timed played by the player.\n          \"TotalTimePlayed\": \"string\",\n\n          // Total number of grenade kills by the player.\n          \"TotalGrenadeKills\": \"int\",\n\n          // The set of Medals earned by the player.\n          \"MedalAwards\": [\n            {\n              // The ID of the Medal. Medals are available via the Metadata API.\n              \"MedalId\": \"int\",\n\n              // The number of times the Medal was earned.\n              \"Count\": \"int\"\n            }\n          ], \n\n          // List of enemy vehicles destroyed. Vehicles are available via the Metadata\n          // API. Note: this stat measures enemy vehicles, not any vehicle destruction.\n          \"DestroyedEnemyVehicles\": [\n            {\n              // The enemy this entry references\n              \"Enemy\": {\n\n                // The Base ID for the enemy.\n                \"BaseId\": \"int\",\n\n                // The attachments (variants) for the enemy.\n                \"Attachments\": [\n                  \"int\"\n                ]\n              },\n\n              // Total number of kills on the enemy by the player\n              \"TotalKills\": \"int\"\n            }\n          ],\n\n          // List of enemies killed, per enemy type. Enemies are available via the\n          // Metadata API.\n          \"EnemyKills\": [\n            {\n              // The enemy this entry references\n              \"Enemy\": {\n\n                // The Base ID for the enemy.\n                \"BaseId\": \"int\",\n\n                // The attachments (variants) for the enemy.\n                \"Attachments\": [\n                  \"int\"\n                ]\n              },\n\n              // Total number of kills on the enemy by the player\n              \"TotalKills\": \"int\"\n            }\n          ],\n\n          // The set of weapons (weapons and vehicles included) used by the player.\n          \"WeaponStats\": [\n            {\n              \"WeaponId\": {\n\n                // The ID of the weapon. Weapons are available via the Metadata API.\n                \"StockId\": \"int\",\n\n                // Any attachments the weapon had.\n                \"Attachments\": [ \n                  \"int\" \n                ]\n              },\n\n              // The number of shots fired for this weapon.\n              \"TotalShotsFired\": \"int\",\n\n              // The number of shots landed for this weapon.\n              \"TotalShotsLanded\": \"int\",\n\n              // The number of headshots for this weapon.\n              \"TotalHeadshots\": \"int\",\n\n              // The number of kills for this weapon.\n              \"TotalKills\": \"int\",\n\n              // The total damage dealt for this weapon.\n              \"TotalDamageDealt\": \"double\",\n\n              // The total possession time for this weapon. This is expressed as an ISO\n              // 8601 Duration.\n              \"TotalPossessionTime\": \"string\"\n            }\n          ],\n\n          // The set of Impulses (invisible Medals) earned by the player.\n          \"Impulses\": [\n            {\n              // The ID of the Impulse. Impulses are available via the Metadata API.\n              \"Id\": \"int\",\n\n              // The number of times the Impulse was earned.\n              \"Count\": \"int\"\n            }\n          ],\n\n          // Total number of Spartan kills by the player.\n          \"TotalSpartanKills\": \"int\"\n        },\n\n        // Information about the player for whom this data was returned.\n        \"PlayerId\": {\n\n          // The gamertag of the player queried.\n          \"GamerTag\": \"string\",\n\n          // Internal use only. This will always be null.\n          \"Xuid\": null\n        },\n\n        // The player's Spartan Rank. Zero for custom.\n        \"SpartanRank\": \"int\",\n\n        // The player's XP. Zero for custom.\n        \"Xp\": \"int\"\n      }\n    }\n  ],\n\n  // Internal use only. A set of related resource links.\n  \"Links\": null\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "312e13c7-b68a-4bcb-9884-27a165a9d1e8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.193126Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Custom"
        }
      }
    }
  }, {
    "id" : "d70bb9a6-f23a-47eb-aafb-43f7feb3533f",
    "name" : "Halo 5 - Player Service Records - Campaign - 503",
    "request" : {
      "urlPath" : "/h5/servicerecords/campaign",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "4k6xxt1mcilkzu1ysktn06ebnjkrfcfacx1a1"
        }
      }
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "d70bb9a6-f23a-47eb-aafb-43f7feb3533f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.19307Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Campaign"
        }
      }
    }
  }, {
    "id" : "91a4fdaa-866b-4689-89d2-08cfdd7496e4",
    "name" : "Halo 5 - Player Service Records - Campaign - 500",
    "request" : {
      "urlPath" : "/h5/servicerecords/campaign",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "t7919vav2nu252zzyy1ik2lrmg8lcrs4ft1z7w5xf32rgogrfk0bhb956q7vm7rz847tg5jkvkkbnmyuilvyx92y8kj3f90zd8h6i1od8zno398zu5g66c5b9udp7i37d"
        }
      }
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "91a4fdaa-866b-4689-89d2-08cfdd7496e4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.193035Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Campaign"
        }
      }
    }
  }, {
    "id" : "2da4c448-c7df-4d74-9b5b-5fbff1fb3084",
    "name" : "Halo 5 - Player Service Records - Campaign - 404",
    "request" : {
      "urlPath" : "/h5/servicerecords/campaign",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "ze4uigdrnzeyyiabl86ugft2due5qompatolgxyt4wqw801p7e79ewiung9kvadpfxz107zd88u15kb4p45i859qvr2jhao2rm49pkauka1jcgwmw"
        }
      }
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "2da4c448-c7df-4d74-9b5b-5fbff1fb3084",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.192997Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Campaign"
        }
      }
    }
  }, {
    "id" : "b0cb0bab-f34d-448e-a78a-28a8b8cb707f",
    "name" : "Halo 5 - Player Service Records - Campaign (application/json)",
    "request" : {
      "urlPath" : "/h5/servicerecords/campaign",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      },
      "queryParameters" : {
        "players" : {
          "equalTo" : "rwgb4bjdf02l287z2grmwf5iss0owfkhh90hi3xx5db5grbn11npzh12lyz45x4rqv2i6pc6r76zc1bghdf4ljnz"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // Set of responses. One per user queried.\n  \"Results\": [\n    {\n      // The player's gamertag.\n      \"Id\": \"string\",\n\n      // The result of the query for the player. One of the following:\n      //   Success = 0,\n      //   NotFound = 1,\n      //   ServiceFailure = 2,\n      //   ServiceUnavailable = 3\n      // It is possible for different requests from the batch to succeed and fail\n      // independently.\n      \"ResultCode\": \"int\",\n\n      // The Service Record result for the player. Only set if ResultCode is Success.\n      \"Result\": {\n\n        // Campaign stats data.\n        \"CampaignStat\": {\n\n          // List of campaign stats by mission ID.\n          \"CampaignMissionStats\": [\n            {\n              // Flexible stats are available via the Metadata API.\n              \"FlexibleStats\": {\n\n                // The set of flexible stats that are derived from medal events.\n                \"MedalStatCounts\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The number of times this flexible stat was earned.\n                    \"Count\": \"int\"\n                  }\n                ],\n\n                // The set of flexible stats that are derived from impulse events.\n                \"ImpulseStatCounts\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The number of times this flexible stat was earned.\n                    \"Count\": \"int\"\n                  }\n                ],\n\n                // The set of flexible stats that are derived from medal time lapses.\n                \"MedalTimelapses\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The amount of time the flexible stat was earned for. This is\n                    // expressed as an ISO 8601 Duration.\n                    \"Timelapse\": \"string\"\n                  }\n                ],    \n\n                // The set of flexible stats that are derived from impulse time lapses.\n                \"ImpulseTimelapses\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The amount of time the flexible stat was earned for. This is\n                    // expressed as an ISO 8601 Duration.\n                    \"Timelapse\": \"string\"\n                  }\n                ]\n              },\n\n              // The set of stats from missions completed while playing co-op. The key is\n              // the difficulty and the value is the playthrough stats for that\n              // difficulty. Empty if there are no finished playthroughs. \n              \"CoopStats\": {\n\n                // The difficulty the mission was played at. Options are:\n                //   Easy = 0,\n                //   Normal = 1,\n                //   Heroic = 2,\n                //   Legendary = 3\n                \"int\": {\n\n                  // The highest score achieved by the player on this difficulty.\n                  \"HighestScore\": \"int\",\n\n                  // The fastest completion time by the player on this difficulty.\n                  \"FastestCompletionTime\": \"string\",\n\n                  // The aggregate set of skulls the player managed to finish this\n                  // mission on this difficulty. Not most in a single run, but which have\n                  // been completed overall.\n                  \"Skulls\": [\n                    \"int\"\n                  ],\n\n                  // The number of times this mission was completed by the player on this\n                  // difficulty.\n                  \"TotalTimesCompleted\": \"int\",\n\n                  // True if the mission was completed with all of the skulls on in one\n                  // playthrough for this difficulty. False otherwise.This field is\n                  // provided to disambiguate the case where the Skulls set contains all\n                  // the Skulls but the player played through the mission multiple times,\n                  // each with a different Skull (as opposed to playing through the\n                  // mission with ALL the skulls enabled).\n                  \"AllSkullsOn\": \"bool\"\n                }\n              },\n\n              // The set of stats from missions completed while playing solo. The key is\n              // the difficulty and the value is the playthrough stats for that\n              // difficulty. Empty if there are no finished playthroughs. \n              \"SoloStats\": {\n\n                // The difficulty the mission was played at. Options are:\n                //   Easy = 0,\n                //   Normal = 1,\n                //   Heroic = 2,\n                //   Legendary = 3\n                \"int\": {\n\n                  // The highest score achieved by the player on this difficulty.\n                  \"HighestScore\": \"int\",\n\n                  // The fastest completion time by the player on this difficulty.\n                  \"FastestCompletionTime\": \"string\",\n\n                  // The aggregate set of skulls the player managed to finish this\n                  // mission on this difficulty. Not most in a single run, but which have\n                  // been completed overall.\n                  \"Skulls\": [\n                    \"int\"\n                  ],\n\n                  // The number of times this mission was completed by the player on this\n                  // difficulty.\n                  \"TotalTimesCompleted\": \"int\",\n\n                  // True if the mission was completed with all of the skulls on in one\n                  // playthrough for this difficulty. False otherwise. This field is\n                  // provided to disambiguate the case where the Skulls set contains all\n                  // the Skulls but the player played through the mission multiple times,\n                  // each with a different Skull (as opposed to playing through the\n                  // mission with ALL the skulls enabled).\n                  \"AllSkullsOn\": \"bool\"\n                }\n              },\n\n              // The mission ID that pertains to this mission. Can be found in metadata.\n              \"MissionId\": \"guid\",\n\n              // Total number of kills done by the player. This includes melee kills,\n              // shoulder bash kills and Spartan charge kills, all power weapons, AI\n              // kills and vehicle destructions. \n              \"TotalKills\": \"int\",\n\n              // Total number of headshots done by the player.\n              \"TotalHeadshots\": \"int\",\n\n              // Total weapon damage dealt by the player.\n              \"TotalWeaponDamage\": \"double\",\n\n              // Total number of shots fired by the player.\n              \"TotalShotsFired\": \"int\",\n\n              // Total number of shots landed by the player.\n              \"TotalShotsLanded\": \"int\",\n\n              // The weapon the player used to get the most kills.\n              \"WeaponWithMostKills\": {\n\n                \"WeaponId\": {\n\n                  // The ID of the weapon. Weapons are available via the Metadata API.\n                  \"StockId\": \"int\",\n\n                  // Any attachments the weapon had.\n                  \"Attachments\": [\n                    \"int\"\n                  ]\n                },\n\n                // The number of shots fired for this weapon.\n                \"TotalShotsFired\": \"int\",\n\n                // The number of shots landed for this weapon.\n                \"TotalShotsLanded\": \"int\",\n\n                // The number of headshots for this weapon.\n                \"TotalHeadshots\": \"int\",\n\n                // The number of kills for this weapon.\n                \"TotalKills\": \"int\",\n\n                // The total damage dealt for this weapon.\n                \"TotalDamageDealt\": \"double\",\n\n                // The total possession time for this weapon. This is expressed as an ISO\n                // 8601 Duration.\n                \"TotalPossessionTime\": \"string\"\n              },\n\n              // Total number of melee kills by the player.\n              \"TotalMeleeKills\": \"int\",\n\n              // Total melee damage dealt by the player.\n              \"TotalMeleeDamage\": \"double\",\n\n              // Total number of assassinations by the player.\n              \"TotalAssassinations\": \"int\",\n\n              // Total number of ground pound kills by the player.\n              \"TotalGroundPoundKills\": \"int\",\n\n              // Total ground pound damage dealt by the player.\n              \"TotalGroundPoundDamage\": \"double\",\n\n              // Total number of shoulder bash kills by the player.\n              \"TotalShoulderBashKills\": \"int\",\n\n              // Total shoulder bash damage dealt by the player.\n              \"TotalShoulderBashDamage\": \"double\",\n\n              // Total grenade damage dealt by the player.\n              \"TotalGrenadeDamage\": \"double\",\n\n              // Total number of power weapon kills by the player.\n              \"TotalPowerWeaponKills\": \"int\",\n\n              // Total power weapon damage dealt by the player.\n              \"TotalPowerWeaponDamage\": \"double\",\n\n              // Total number of power weapon grabs by the player.\n              \"TotalPowerWeaponGrabs\": \"int\",\n\n              // Total power weapon possession by the player. This is expressed as an ISO\n              // 8601 Duration.\n              \"TotalPowerWeaponPossessionTime\": \"string\",\n\n              // Total number of deaths by the player.\n              \"TotalDeaths\": \"int\",\n\n              // Total number of assists by the player.\n              \"TotalAssists\": \"int\",\n\n              // Total number of games the player has completed. Note that for Campaign,\n              // this does not mean that the mission was completed. Mission completion\n              // counts are tracked in SoloStats and CoopStats.\n              \"TotalGamesCompleted\": \"int\",\n\n              // Total number of games won by the player. Not used for Campaign.\n              \"TotalGamesWon\": \"int\",\n\n              // Total number of games lost by the player. Not used for Campaign.\n              \"TotalGamesLost\": \"int\",\n\n              // Total number of games tied by the player. Not used for Campaign.\n              \"TotalGamesTied\": \"int\",\n\n              // Total timed played by the player.\n              \"TotalTimePlayed\": \"string\",\n\n              // Total number of grenade kills by the player.\n              \"TotalGrenadeKills\": \"int\",\n\n              // The set of Medals earned by the player.\n              \"MedalAwards\": [\n                {\n                  // The ID of the Medal. Medals are available via the Metadata API.\n                  \"MedalId\": \"int\",\n\n                  // The number of times the Medal was earned.\n                  \"Count\": \"int\"\n                }\n              ], \n\n              // List of enemy vehicles destroyed. Vehicles are available via the\n              // Metadata API. Note: this stat measures enemy vehicles, not any vehicle\n              // destruction.\n              \"DestroyedEnemyVehicles\": [\n                {\n                  // The enemy this entry references\n                  \"Enemy\": {\n\n                    // The Base ID for the enemy.\n                    \"BaseId\": \"int\",\n\n                    // The attachments (variants) for the enemy.\n                    \"Attachments\": [\n                      \"int\"\n                    ]\n                  },\n\n                  // Total number of kills on the enemy by the player\n                  \"TotalKills\": \"int\"\n                }\n              ],\n\n              // List of enemies killed, per enemy type. Enemies are available via the\n              // Metadata API.\n              \"EnemyKills\": [\n                {\n                  // The enemy this entry references\n                  \"Enemy\": {\n\n                    // The Base ID for the enemy.\n                    \"BaseId\": \"int\",\n\n                    // The attachments (variants) for the enemy.\n                    \"Attachments\": [\n                      \"int\"\n                    ]\n                  },\n\n                  // Total number of kills on the enemy by the player\n                  \"TotalKills\": \"int\"\n                }\n              ],\n\n              // The set of weapons (weapons and vehicles included) used by the player.\n              \"WeaponStats\": [\n                {\n                  \"WeaponId\": {\n\n                    // The ID of the weapon. Weapons are available via the Metadata API.\n                    \"StockId\": \"int\",\n\n                    // Any attachments the weapon had.\n                    \"Attachments\": [ \n                      \"int\" \n                    ]\n                  },\n\n                  // The number of shots fired for this weapon.\n                  \"TotalShotsFired\": \"int\",\n\n                  // The number of shots landed for this weapon.\n                  \"TotalShotsLanded\": \"int\",\n\n                  // The number of headshots for this weapon.\n                  \"TotalHeadshots\": \"int\",\n\n                  // The number of kills for this weapon.\n                  \"TotalKills\": \"int\",\n\n                  // The total damage dealt for this weapon.\n                  \"TotalDamageDealt\": \"double\",\n\n                  // The total possession time for this weapon. This is expressed as an\n                  // ISO 8601 Duration.\n                  \"TotalPossessionTime\": \"string\"\n                }\n              ],\n\n              // The set of Impulses (invisible Medals) earned by the player.\n              \"Impulses\": [\n                {\n                  // The ID of the Impulse. Impulses are available via the Metadata API.\n                  \"Id\": \"int\",\n\n                  // The number of times the Impulse was earned.\n                  \"Count\": \"int\"\n                }\n              ],\n\n              // Total number of Spartan kills by the player.\n              \"TotalSpartanKills\": \"int\"\n            }\n          ],\n\n          // Total number of kills done by the player. This includes melee kills,\n          // shoulder bash kills and Spartan charge kills, all power weapons, AI kills\n          // and vehicle destructions. \n          \"TotalKills\": \"int\",\n\n          // Total number of headshots done by the player.\n          \"TotalHeadshots\": \"int\",\n\n          // Total weapon damage dealt by the player.\n          \"TotalWeaponDamage\": \"double\",\n\n          // Total number of shots fired by the player.\n          \"TotalShotsFired\": \"int\",\n\n          // Total number of shots landed by the player.\n          \"TotalShotsLanded\": \"int\",\n\n          // The weapon the player used to get the most kills.\n          \"WeaponWithMostKills\": {\n\n            \"WeaponId\": {\n\n              // The ID of the weapon. Weapons are available via the Metadata API.\n              \"StockId\": \"int\",\n\n              // Any attachments the weapon had.\n              \"Attachments\": [\n                \"int\"\n              ]\n            },\n\n            // The number of shots fired for this weapon.\n            \"TotalShotsFired\": \"int\",\n\n            // The number of shots landed for this weapon.\n            \"TotalShotsLanded\": \"int\",\n\n            // The number of headshots for this weapon.\n            \"TotalHeadshots\": \"int\",\n\n            // The number of kills for this weapon.\n            \"TotalKills\": \"int\",\n\n            // The total damage dealt for this weapon.\n            \"TotalDamageDealt\": \"double\",\n\n            // The total possession time for this weapon. This is expressed as an ISO\n            // 8601 Duration.\n            \"TotalPossessionTime\": \"string\"\n          },\n\n          // Total number of melee kills by the player.\n          \"TotalMeleeKills\": \"int\",\n\n          // Total melee damage dealt by the player.\n          \"TotalMeleeDamage\": \"double\",\n\n          // Total number of assassinations by the player.\n          \"TotalAssassinations\": \"int\",\n\n          // Total number of ground pound kills by the player.\n          \"TotalGroundPoundKills\": \"int\",\n\n          // Total ground pound damage dealt by the player.\n          \"TotalGroundPoundDamage\": \"double\",\n\n          // Total number of shoulder bash kills by the player.\n          \"TotalShoulderBashKills\": \"int\",\n\n          // Total shoulder bash damage dealt by the player.\n          \"TotalShoulderBashDamage\": \"double\",\n\n          // Total grenade damage dealt by the player.\n          \"TotalGrenadeDamage\": \"double\",\n\n          // Total number of power weapon kills by the player.\n          \"TotalPowerWeaponKills\": \"int\",\n\n          // Total power weapon damage dealt by the player.\n          \"TotalPowerWeaponDamage\": \"double\",\n\n          // Total number of power weapon grabs by the player.\n          \"TotalPowerWeaponGrabs\": \"int\",\n\n          // Total power weapon possession by the player. This is expressed as an ISO\n          // 8601 Duration.\n          \"TotalPowerWeaponPossessionTime\": \"string\",\n\n          // Total number of deaths by the player.\n          \"TotalDeaths\": \"int\",\n\n          // Total number of assists by the player.\n          \"TotalAssists\": \"int\",\n\n          // Total number of games the player has completed. Note that for Campaign, this\n          // does not mean that the mission was completed. Mission completion counts are\n          // tracked in SoloStats and CoopStats.\n          \"TotalGamesCompleted\": \"int\",\n\n          // Total number of games won by the player. Not used for Campaign.\n          \"TotalGamesWon\": \"int\",\n\n          // Total number of games lost by the player. Not used for Campaign.\n          \"TotalGamesLost\": \"int\",\n\n          // Total number of games tied by the player. Not used for Campaign.\n          \"TotalGamesTied\": \"int\",\n\n          \"TotalTimePlayed\": \"string\",\n\n          // Total number of grenade kills by the player.\n          \"TotalGrenadeKills\": \"int\",\n\n          // The set of Medals earned by the player.\n          \"MedalAwards\": [\n            {\n              // The ID of the Medal. Medals are available via the Metadata API.\n              \"MedalId\": \"int\",\n\n              // The number of times the Medal was earned.\n              \"Count\": \"int\"\n            }\n          ], \n\n          // List of enemy vehicles destroyed. Vehicles are available via the Metadata\n          // API. Note: this stat measures enemy vehicles, not any vehicle destruction.\n          \"DestroyedEnemyVehicles\": [\n            {\n              // The enemy this entry references\n              \"Enemy\": {\n\n                // The Base ID for the enemy.\n                \"BaseId\": \"int\",\n\n                // The attachments (variants) for the enemy.\n                \"Attachments\": [\n                  \"int\"\n                ]\n              },\n\n              // Total number of kills on the enemy by the player\n              \"TotalKills\": \"int\"\n            }\n          ],\n\n          // List of enemies killed, per enemy type. Enemies are available via the\n          // Metadata API.\n          \"EnemyKills\": [\n            {\n              // The enemy this entry references\n              \"Enemy\": {\n\n                // The Base ID for the enemy.\n                \"BaseId\": \"int\",\n\n                // The attachments (variants) for the enemy.\n                \"Attachments\": [\n                  \"int\"\n                ]\n              },\n\n              // Total number of kills on the enemy by the player\n              \"TotalKills\": \"int\"\n            }\n          ],\n\n          // The set of weapons (weapons and vehicles included) used by the player.\n          \"WeaponStats\": [\n            {\n              \"WeaponId\": {\n\n                // The ID of the weapon. Weapons are available via the Metadata API.\n                \"StockId\": \"int\",\n\n                // Any attachments the weapon had.\n                \"Attachments\": [ \n                  \"int\" \n                ]\n              },\n\n              // The number of shots fired for this weapon.\n              \"TotalShotsFired\": \"int\",\n\n              // The number of shots landed for this weapon.\n              \"TotalShotsLanded\": \"int\",\n\n              // The number of headshots for this weapon.\n              \"TotalHeadshots\": \"int\",\n\n              // The number of kills for this weapon.\n              \"TotalKills\": \"int\",\n\n              // The total damage dealt for this weapon.\n              \"TotalDamageDealt\": \"double\",\n\n              // The total possession time for this weapon. This is expressed as an ISO\n              // 8601 Duration.\n              \"TotalPossessionTime\": \"string\"\n            }\n          ],\n\n          // The set of Impulses (invisible Medals) earned by the player.\n          \"Impulses\": [\n            {\n              // The ID of the Impulse. Impulses are available via the Metadata API.\n              \"Id\": \"int\",\n\n              // The number of times the Impulse was earned.\n              \"Count\": \"int\"\n            }\n          ],\n\n          // Total number of Spartan kills by the player.\n          \"TotalSpartanKills\": \"int\"\n        },\n\n        // Information about the player for whom this data was returned.\n        \"PlayerId\": {\n\n          // The gamertag of the player queried.\n          \"GamerTag\": \"string\",\n\n          // Internal use only. This will always be null.\n          \"Xuid\": null\n        },\n\n        // The player's Spartan Rank. Zero for campaign.\n        \"SpartanRank\": \"int\",\n\n        // The player's XP. Zero for campaign.\n        \"Xp\": \"int\"\n      }\n    }\n  ],\n\n  // Internal use only. A set of related resource links.\n  \"Links\": null\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b0cb0bab-f34d-448e-a78a-28a8b8cb707f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.192953Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Campaign"
        }
      }
    }
  }, {
    "id" : "ff6cc4b0-bf3e-4811-a677-36573ab52a9a",
    "name" : "Halo 5 - Player Service Records - Arena - 503",
    "request" : {
      "urlPath" : "/h5/servicerecords/arena",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "x62ohigxlzqt5wu3i80k7emkeaw9ejf3yi4ar1ih464tumy6rqvc8dver4ngrbis7as574jvar92d5pt549m66hanbj4zvq7n3zss4mdc9m07r7hfe4kxizu93dqaz8gafr83q8pa9p1fjaknxonqtesp1clfforodex"
        }
      }
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "ff6cc4b0-bf3e-4811-a677-36573ab52a9a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.192897Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Arena"
        }
      }
    }
  }, {
    "id" : "48187600-66ff-4cb2-ba8e-367425a15928",
    "name" : "Halo 5 - Player Service Records - Arena - 500",
    "request" : {
      "urlPath" : "/h5/servicerecords/arena",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "cu71ne1iil76xttzq555c3x230c7pt9ebxn22g9olauz5jhq5bdynpvcfl9qw7ahhg36n3eukxekjl470g96uy9z26gz3skfb761tz6bro2mgma0sycqh5zo35qmu4bkva98hnz0zle8wcfx6n7kz71eu06wnwngj5im7z2t6rnm"
        }
      }
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "48187600-66ff-4cb2-ba8e-367425a15928",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.192859Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Arena"
        }
      }
    }
  }, {
    "id" : "730f0849-c494-49ac-aab6-78375fd55ebb",
    "name" : "Halo 5 - Player Service Records - Arena - 404",
    "request" : {
      "urlPath" : "/h5/servicerecords/arena",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "pbtuvyv0drigp67vtyxsuq871jy4fd8v84wlchztjg6ubpnqloi0gfl4d3yrw2f6dncygl2ybybrhxfhfjy5bigexsyngypjlyt7ch5y0db80egxjf9eg8zhddihua26vdvyb4jmncsob9xdvx3oyj9xco157scbdrest8c9zsr1dwm"
        }
      }
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "730f0849-c494-49ac-aab6-78375fd55ebb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.192821Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Arena"
        }
      }
    }
  }, {
    "id" : "15412e1f-0a37-48b7-8f91-dd1df609de98",
    "name" : "Halo 5 - Player Service Records - Arena (application/json)",
    "request" : {
      "urlPath" : "/h5/servicerecords/arena",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      },
      "queryParameters" : {
        "players" : {
          "equalTo" : "p7uzye18s2zvf3v09ggoodismly0u5tzvymqpxgpkq0p5nphpjlws3byfnfvmeanp55m7fdb03ziwuuplc2pexdhehpz49l2dscxkj8i3atn2dj9xiuvc87omh0swxcx3ruqxui9x1u2pzmcmfy0nv294k"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // Set of responses. One per user queried.\n  \"Results\": [\n    {\n      // The player's gamertag.\n      \"Id\": \"string\",\n\n      // The result of the query for the player. One of the following:\n      //   Success = 0,\n      //   NotFound = 1,\n      //   ServiceFailure = 2,\n      //   ServiceUnavailable = 3\n      // It is possible for different requests from the batch to succeed and fail\n      // independently.\n      \"ResultCode\": \"int\",\n\n      // The Service Record result for the player. Only set if ResultCode is Success.\n      \"Result\": {\n\n        // Arena stats data.\n        \"ArenaStats\": {\n\n          // List of arena stats by playlist. This is the ONLY set of stats in the\n          // response that respects the Season ID request parameter. If no Season ID was\n          // specified, these will be the stats for the current season. If an invalid\n          // Season ID was specified, this will be empty.\n          \"ArenaPlaylistStats\": [\n            {\n              // The playlist ID. Playlists are available via the Metadata API.\n              \"PlaylistId\": \"guid\",\n\n              // The player's measurement matches left. If this field is greater than\n              // zero, then the player will not have a CSR yet.\n              \"MeasurementMatchesLeft\": \"int\",\n\n              // The highest Competitive Skill Ranking (CSR) achieved by the player. This\n              // is included because a player's CSR can drop based on performance.\n              \"HighestCsr\": {\n\n                // The CSR tier. CSR Tiers are designation-specific and are available via\n                // the Metadata API.\n                \"Tier\": \"int\",\n\n                // The Designation of the CSR. CSR Designations are available via the\n                // Metadata API.\n                \"DesignationId\": \"int\",\n\n                // The CSR value. Zero for normal (Diamond and below) designations.\n                \"Csr\": \"int\",\n\n                // The percentage of progress towards the next CSR tier.\n                \"PercentToNextTier\": \"int\",\n\n                // If the CSR is Onyx or Champion, the player's leaderboard ranking. Null\n                // otherwise.\n                \"Rank\": \"int\"\n              },\n\n              // The current Competitive Skill Ranking (CSR) of the player.\n              \"Csr\": {\n\n                // The CSR tier. CSR Tiers are designation-specific and are available via\n                // the Metadata API.\n                \"Tier\": \"int\",\n\n                // The Designation of the CSR. CSR Designations are available via the\n                // Metadata API.\n                \"DesignationId\": \"int\",\n\n                // The CSR value. Zero for normal (Diamond and below) designations.\n                \"Csr\": \"int\",\n\n                // The percentage of progress towards the next CSR tier.\n                \"PercentToNextTier\": \"int\",\n\n                // If the CSR is Onyx or Champion, the player's leaderboard ranking. Null\n                // otherwise.\n                \"Rank\": \"int\"\n              },\n\n              // Number represents within what percent of the top players the user is\n              // (top 2 percent for example). Can be null if list is not ranked or if\n              // player has not completed their measurement matches. Does not work for\n              // pre-season.\n              \"CsrPercentile\": \"int\"\n              // Total number of kills done by the player. This includes melee kills,\n              // shoulder bash kills and Spartan charge kills, all power weapons, AI\n              // kills and vehicle destructions. \n              \"TotalKills\": \"int\",\n\n              // Total number of headshots done by the player.\n              \"TotalHeadshots\": \"int\",\n\n              // Total weapon damage dealt by the player.\n              \"TotalWeaponDamage\": \"double\",\n\n              // Total number of shots fired by the player.\n              \"TotalShotsFired\": \"int\",\n\n              // Total number of shots landed by the player.\n              \"TotalShotsLanded\": \"int\",\n\n              // The weapon the player used to get the most kills.\n              \"WeaponWithMostKills\": {\n\n                \"WeaponId\": {\n\n                  // The ID of the weapon. Weapons are available via the Metadata API.\n                  \"StockId\": \"int\",\n\n                  // Any attachments the weapon had.\n                  \"Attachments\": [ \n                    \"int\" \n                  ]\n                },\n\n                // The number of shots fired for this weapon.\n                \"TotalShotsFired\": \"int\",\n\n                // The number of shots landed for this weapon.\n                \"TotalShotsLanded\": \"int\",\n\n                // The number of headshots for this weapon.\n                \"TotalHeadshots\": \"int\",\n\n                // The number of kills for this weapon.\n                \"TotalKills\": \"int\",\n\n                // The total damage dealt for this weapon.\n                \"TotalDamageDealt\": \"double\",\n\n                // The total possession time for this weapon. This is expressed as an ISO\n                // 8601 Duration.\n                \"TotalPossessionTime\": \"string\"\n              },\n\n              // Total number of melee kills by the player.\n              \"TotalMeleeKills\": \"int\",\n\n              // Total melee damage dealt by the player.\n              \"TotalMeleeDamage\": \"double\",\n\n              // Total number of assassinations by the player.\n              \"TotalAssassinations\": \"int\",\n\n              // Total number of ground pound kills by the player.\n              \"TotalGroundPoundKills\": \"int\",\n\n              // Total ground pound damage dealt by the player.\n              \"TotalGroundPoundDamage\": \"double\",\n\n              // Total number of shoulder bash kills by the player.\n              \"TotalShoulderBashKills\": \"int\",\n\n              // Total shoulder bash damage dealt by the player.\n              \"TotalShoulderBashDamage\": \"double\",\n\n              // Total grenade damage dealt by the player.\n              \"TotalGrenadeDamage\": \"double\",\n\n              // Total number of power weapon kills by the player.\n              \"TotalPowerWeaponKills\": \"int\",\n\n              // Total power weapon damage dealt by the player.\n              \"TotalPowerWeaponDamage\": \"double\",\n\n              // Total number of power weapon grabs by the player.\n              \"TotalPowerWeaponGrabs\": \"int\",\n\n              // Total power weapon possession by the player. This is expressed as an ISO\n              // 8601 Duration.\n              \"TotalPowerWeaponPossessionTime\": \"string\",\n\n              // Total number of deaths by the player.\n              \"TotalDeaths\": \"int\",\n\n              // Total number of assists by the player.\n              \"TotalAssists\": \"int\",\n\n              // Total number of games the player has completed.\n              \"TotalGamesCompleted\": \"int\",\n\n              // Total number of games won by the player.\n              \"TotalGamesWon\": \"int\",\n\n              // Total number of games lost by the player.\n              \"TotalGamesLost\": \"int\",\n\n              // Total number of games tied by the player.\n              \"TotalGamesTied\": \"int\",\n\n              // Total timed played by the player.\n              \"TotalTimePlayed\": \"string\",\n\n              // Total number of grenade kills by the player.\n              \"TotalGrenadeKills\": \"int\",\n\n              // The set of Medals earned by the player.\n              \"MedalAwards\": [\n                {\n                  // The ID of the Medal. Medals are available via the Metadata API.\n                  \"MedalId\": \"int\",\n\n                  // The number of times the Medal was earned.\n                  \"Count\": \"int\"\n                }\n              ], \n\n              // List of enemy vehicles destroyed. Vehicles are available via the\n              // Metadata API. Note: this stat measures enemy vehicles, not any vehicle\n              // destruction.\n              \"DestroyedEnemyVehicles\": [\n                {\n                  // The enemy this entry references\n                  \"Enemy\": {\n\n                    // The Base ID for the enemy.\n                    \"BaseId\": \"int\",\n\n                    // The attachments (variants) for the enemy.\n                    \"Attachments\": [\n                      \"int\"\n                    ]\n                  },\n\n                  // Total number of kills on the enemy by the player\n                  \"TotalKills\": \"int\"\n                }\n              ],\n\n              // List of enemies killed, per enemy type. Enemies are available via the\n              // Metadata API.\n              \"EnemyKills\": [\n                {\n                  // The enemy this entry references\n                  \"Enemy\": {\n\n                    // The Base ID for the enemy.\n                    \"BaseId\": \"int\",\n\n                    // The attachments (variants) for the enemy.\n                    \"Attachments\": [\n                      \"int\"\n                    ]\n                  },\n\n                  // Total number of kills on the enemy by the player\n                  \"TotalKills\": \"int\"\n                }\n              ],\n\n              // The set of weapons (weapons and vehicles included) used by the player.\n              \"WeaponStats\": [\n                {\n                  \"WeaponId\": {\n\n                    // The ID of the weapon. Weapons are available via the Metadata API.\n                    \"StockId\": \"int\",\n\n                    // Any attachments the weapon had.\n                    \"Attachments\": [ \n                      \"int\" \n                    ]\n                  },\n\n                  // The number of shots fired for this weapon.\n                  \"TotalShotsFired\": \"int\",\n\n                  // The number of shots landed for this weapon.\n                  \"TotalShotsLanded\": \"int\",\n\n                  // The number of headshots for this weapon.\n                  \"TotalHeadshots\": \"int\",\n\n                  // The number of kills for this weapon.\n                  \"TotalKills\": \"int\",\n\n                  // The total damage dealt for this weapon.\n                  \"TotalDamageDealt\": \"double\",\n\n                  // The total possession time for this weapon. This is expressed as an\n                  // ISO 8601 Duration.\n                  \"TotalPossessionTime\": \"string\"\n                }\n              ],\n\n              // The set of Impulses (invisible Medals) earned by the player.\n              \"Impulses\": [\n                {\n                  // The ID of the Impulse. Impulses are available via the Metadata API.\n                  \"Id\": \"int\",\n\n                  // The number of times the Impulse was earned.\n                  \"Count\": \"int\"\n                }\n              ],\n\n              // Total number of Spartan kills by the player.\n              \"TotalSpartanKills\": \"int\"\n            }\n          ],\n\n          // The highest obtained CSR by the player in arena across all seasons. If the\n          // player hasn't finished measurement matches yet for any playlist, this value\n          // is null.\n          \"HighestCsrAttained\": {\n\n            // The CSR tier. CSR Tiers are designation-specific and are available via the\n            // Metadata API.\n            \"Tier\": \"int\",\n\n            // The Designation of the CSR. CSR Designations are available via the\n            // Metadata API.\n            \"DesignationId\": \"int\",\n\n            // The CSR value. Zero for normal (Diamond and below) designations.\n            \"Csr\": \"int\",\n\n            // The percentage of progress towards the next CSR tier.\n            \"PercentToNextTier\": \"int\",\n\n            // If the CSR is Onyx or Champion, the player's leaderboard ranking. Null\n            // otherwise.\n            \"Rank\": \"int\"\n          },\n\n          // List of arena stats by GameBaseVariant across all seasons.\n          \"ArenaGameBaseVariantStats\": [\n            {\n              // The game base variant specific stats. Flexible stats are available via\n              // the Metadata API.\n              \"FlexibleStats\": {\n\n                // The set of flexible stats that are derived from medal events.\n                \"MedalStatCounts\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The number of times this flexible stat was earned.\n                    \"Count\": \"int\"\n                  }\n                ],\n\n                // The set of flexible stats that are derived from impulse events.\n                \"ImpulseStatCounts\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The number of times this flexible stat was earned.\n                    \"Count\": \"int\"\n                  }\n                ],\n\n                // The set of flexible stats that are derived from medal time lapses.\n                \"MedalTimelapses\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The amount of time the flexible stat was earned for. This is\n                    // expressed as an ISO 8601 Duration.\n                    \"Timelapse\": \"string\"\n                  }\n                ],    \n\n                // The set of flexible stats that are derived from impulse time lapses.\n                \"ImpulseTimelapses\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The amount of time the flexible stat was earned for. This is\n                    // expressed as an ISO 8601 Duration.\n                    \"Timelapse\": \"string\"\n                  }\n                ]\n              },\n\n              // The ID of the game base variant. Game base variants are available via\n              // the Metadata API.\n              \"GameBaseVariantId\": \"guid\",\n\n              // Total number of kills done by the player. This includes melee kills,\n              // shoulder bash kills and Spartan charge kills, all power weapons, AI\n              // kills and vehicle destructions. \n              \"TotalKills\": \"int\",\n\n              // Total number of headshots done by the player.\n              \"TotalHeadshots\": \"int\",\n\n              // Total weapon damage dealt by the player.\n              \"TotalWeaponDamage\": \"double\",\n\n              // Total number of shots fired by the player.\n              \"TotalShotsFired\": \"int\",\n\n              // Total number of shots landed by the player.\n              \"TotalShotsLanded\": \"int\",\n\n              // The weapon the player used to get the most kills.\n              \"WeaponWithMostKills\": {\n\n                \"WeaponId\": {\n\n                  // The ID of the weapon. Weapons are available via the Metadata API.\n                  \"StockId\": \"int\",\n\n                  // Any attachments the weapon had.\n                  \"Attachments\": [ \n                    \"int\" \n                  ]\n                },\n\n                // The number of shots fired for this weapon.\n                \"TotalShotsFired\": \"int\",\n\n                // The number of shots landed for this weapon.\n                \"TotalShotsLanded\": \"int\",\n\n                // The number of headshots for this weapon.\n                \"TotalHeadshots\": \"int\",\n\n                // The number of kills for this weapon.\n                \"TotalKills\": \"int\",\n\n                // The total damage dealt for this weapon.\n                \"TotalDamageDealt\": \"double\",\n\n                // The total possession time for this weapon. This is expressed as an ISO\n                // 8601 Duration.\n                \"TotalPossessionTime\": \"string\"\n              },\n\n              // Total number of melee kills by the player.\n              \"TotalMeleeKills\": \"int\",\n\n              // Total melee damage dealt by the player.\n              \"TotalMeleeDamage\": \"double\",\n\n              // Total number of assassinations by the player.\n              \"TotalAssassinations\": \"int\",\n\n              // Total number of ground pound kills by the player.\n              \"TotalGroundPoundKills\": \"int\",\n\n              // Total ground pound damage dealt by the player.\n              \"TotalGroundPoundDamage\": \"double\",\n\n              // Total number of shoulder bash kills by the player.\n              \"TotalShoulderBashKills\": \"int\",\n\n              // Total shoulder bash damage dealt by the player.\n              \"TotalShoulderBashDamage\": \"double\",\n\n              // Total grenade damage dealt by the player.\n              \"TotalGrenadeDamage\": \"double\",\n\n              // Total number of power weapon kills by the player.\n              \"TotalPowerWeaponKills\": \"int\",\n\n              // Total power weapon damage dealt by the player.\n              \"TotalPowerWeaponDamage\": \"double\",\n\n              // Total number of power weapon grabs by the player.\n              \"TotalPowerWeaponGrabs\": \"int\",\n\n              // Total power weapon possession by the player. This is expressed as an ISO\n              // 8601 Duration.\n              \"TotalPowerWeaponPossessionTime\": \"string\",\n\n              // Total number of deaths by the player.\n              \"TotalDeaths\": \"int\",\n\n              // Total number of assists by the player.\n              \"TotalAssists\": \"int\",\n\n              // Total number of games the player has completed.\n              \"TotalGamesCompleted\": \"int\",\n\n              // Total number of games won by the player.\n              \"TotalGamesWon\": \"int\",\n\n              // Total number of games lost by the player.\n              \"TotalGamesLost\": \"int\",\n\n              // Total number of games tied by the player.\n              \"TotalGamesTied\": \"int\",\n\n              // Total timed played by the player.\n              \"TotalTimePlayed\": \"string\",\n\n              // Total number of grenade kills by the player.\n              \"TotalGrenadeKills\": \"int\",\n\n              // The set of Medals earned by the player.\n              \"MedalAwards\": [\n                {\n                  // The ID of the Medal. Medals are available via the Metadata API.\n                  \"MedalId\": \"int\",\n\n                  // The number of times the Medal was earned.\n                  \"Count\": \"int\"\n                }\n              ], \n\n              // List of enemy vehicles destroyed. Vehicles are available via the\n              // Metadata API. Note: this stat measures enemy vehicles, not any vehicle\n              // destruction.\n              \"DestroyedEnemyVehicles\": [\n                {\n                  // The enemy this entry references\n                  \"Enemy\": {\n\n                    // The Base ID for the enemy.\n                    \"BaseId\": \"int\",\n\n                    // The attachments (variants) for the enemy.\n                    \"Attachments\": [\n                      \"int\"\n                    ]\n                  },\n\n                  // Total number of kills on the enemy by the player\n                  \"TotalKills\": \"int\"\n                }\n              ],\n\n              // List of enemies killed, per enemy type. Enemies are available via the\n              // Metadata API.\n              \"EnemyKills\": [\n                {\n                  // The enemy this entry references\n                  \"Enemy\": {\n\n                    // The Base ID for the enemy.\n                    \"BaseId\": \"int\",\n\n                    // The attachments (variants) for the enemy.\n                    \"Attachments\": [\n                      \"int\"\n                    ]\n                  },\n\n                  // Total number of kills on the enemy by the player\n                  \"TotalKills\": \"int\"\n                }\n              ],\n\n              // The set of weapons (weapons and vehicles included) used by the player.\n              \"WeaponStats\": [\n                {\n                  \"WeaponId\": {\n\n                    // The ID of the weapon. Weapons are available via the Metadata API.\n                    \"StockId\": \"int\",\n\n                    // Any attachments the weapon had.\n                    \"Attachments\": [ \n                      \"int\" \n                    ]\n                  },\n\n                  // The number of shots fired for this weapon.\n                  \"TotalShotsFired\": \"int\",\n\n                  // The number of shots landed for this weapon.\n                  \"TotalShotsLanded\": \"int\",\n\n                  // The number of headshots for this weapon.\n                  \"TotalHeadshots\": \"int\",\n\n                  // The number of kills for this weapon.\n                  \"TotalKills\": \"int\",\n\n                  // The total damage dealt for this weapon.\n                  \"TotalDamageDealt\": \"double\",\n\n                  // The total possession time for this weapon. This is expressed as an\n                  // ISO 8601 Duration.\n                  \"TotalPossessionTime\": \"string\"\n                }\n              ],\n\n              // The set of Impulses (invisible Medals) earned by the player.\n              \"Impulses\": [\n                {\n                  // The ID of the Impulse. Impulses are available via the Metadata API.\n                  \"Id\": \"int\",\n\n                  // The number of times the Impulse was earned.\n                  \"Count\": \"int\"\n                }\n              ],\n\n              // Total number of Spartan kills by the player.\n              \"TotalSpartanKills\": \"int\"\n            }\n          ],\n\n          // A list of up to three game base variants with the highest win rate across\n          // all seasons by the user. If there is a tie, the game base variant with more\n          // completed games is higher. If there's still a tie, the game base variant IDs\n          // are sorted and selected.\n          \"TopGameBaseVariants\": [\n            {\n              // Rank between 1-3\n              \"GameBaseVariantRank\": \"int\",\n\n              // Number of games played in game base variant\n              \"NumberOfMatchesCompleted\": \"int\",\n\n              // Id of the game base variant\n              \"GameBaseVariantId\": \"guid\",\n\n              // Number of matches won on game base variant\n              \"NumberOfMatchesWon\": \"int\"\n            }\n          ],\n\n          // The ID for the playlist that pertains to the highest obtained CSR field\n          // across all seasons. If the CSR is null, so is this field. \n          \"HighestCsrPlaylistId\": \"guid\",\n\n          // The ID for the season that pertains to the highest obtained CSR field across\n          // all seasons. If the CSR is null, so is this field.\n          \"HighestCsrSeasonId\": \"guid\",\n\n          // The ID for the Season of the stats in ArenaPlaylistStats. If no Season ID\n          // was specified on the request, then this is the ID of the current season.\n          \"ArenaPlaylistStatsSeasonId\": \"guid\",\n\n          // Total number of kills done by the player. This includes melee kills,\n          // shoulder bash kills and Spartan charge kills, all power weapons, AI kills\n          // and vehicle destructions. \n          \"TotalKills\": \"int\",\n\n          // Total number of headshots done by the player.\n          \"TotalHeadshots\": \"int\",\n\n          // Total weapon damage dealt by the player.\n          \"TotalWeaponDamage\": \"double\",\n\n          // Total number of shots fired by the player.\n          \"TotalShotsFired\": \"int\",\n\n          // Total number of shots landed by the player.\n          \"TotalShotsLanded\": \"int\",\n\n          // The weapon the player used to get the most kills.\n          \"WeaponWithMostKills\": {\n\n            \"WeaponId\": {\n\n              // The ID of the weapon. Weapons are available via the Metadata API.\n              \"StockId\": \"int\",\n\n              // Any attachments the weapon had.\n              \"Attachments\": [ \n                \"int\" \n              ]\n            },\n\n            // The number of shots fired for this weapon.\n            \"TotalShotsFired\": \"int\",\n\n            // The number of shots landed for this weapon.\n            \"TotalShotsLanded\": \"int\",\n\n            // The number of headshots for this weapon.\n            \"TotalHeadshots\": \"int\",\n\n            // The number of kills for this weapon.\n            \"TotalKills\": \"int\",\n\n            // The total damage dealt for this weapon.\n            \"TotalDamageDealt\": \"double\",\n\n            // The total possession time for this weapon. This is expressed as an ISO\n            // 8601 Duration.\n            \"TotalPossessionTime\": \"string\"\n          },\n\n          // Total number of melee kills by the player.\n          \"TotalMeleeKills\": \"int\",\n\n          // Total melee damage dealt by the player.\n          \"TotalMeleeDamage\": \"double\",\n\n          // Total number of assassinations by the player.\n          \"TotalAssassinations\": \"int\",\n\n          // Total number of ground pound kills by the player.\n          \"TotalGroundPoundKills\": \"int\",\n\n          // Total ground pound damage dealt by the player.\n          \"TotalGroundPoundDamage\": \"double\",\n\n          // Total number of shoulder bash kills by the player.\n          \"TotalShoulderBashKills\": \"int\",\n\n          // Total shoulder bash damage dealt by the player.\n          \"TotalShoulderBashDamage\": \"double\",\n\n          // Total grenade damage dealt by the player.\n          \"TotalGrenadeDamage\": \"double\",\n\n          // Total number of power weapon kills by the player.\n          \"TotalPowerWeaponKills\": \"int\",\n\n          // Total power weapon damage dealt by the player.\n          \"TotalPowerWeaponDamage\": \"double\",\n\n          // Total number of power weapon grabs by the player.\n          \"TotalPowerWeaponGrabs\": \"int\",\n\n          // Total power weapon possession by the player. This is expressed as an ISO\n          // 8601 Duration.\n          \"TotalPowerWeaponPossessionTime\": \"string\",\n\n          // Total number of deaths by the player.\n          \"TotalDeaths\": \"int\",\n\n          // Total number of assists by the player.\n          \"TotalAssists\": \"int\",\n\n          // Total number of games the player has completed.\n          \"TotalGamesCompleted\": \"int\",\n\n          // Total number of games won by the player.\n          \"TotalGamesWon\": \"int\",\n\n          // Total number of games lost by the player.\n          \"TotalGamesLost\": \"int\",\n\n          // Total number of games tied by the player.\n          \"TotalGamesTied\": \"int\",\n\n          // Total timed played by the player.\n          \"TotalTimePlayed\": \"string\",\n\n          // Total number of grenade kills by the player.\n          \"TotalGrenadeKills\": \"int\",\n\n          // The set of Medals earned by the player.\n          \"MedalAwards\": [\n            {\n              // The ID of the Medal. Medals are available via the Metadata API.\n              \"MedalId\": \"int\",\n\n              // The number of times the Medal was earned.\n              \"Count\": \"int\"\n            }\n          ], \n\n          // List of enemy vehicles destroyed. Vehicles are available via the Metadata\n          // API. Note: this stat measures enemy vehicles, not any vehicle destruction.\n          \"DestroyedEnemyVehicles\": [\n            {\n              // The enemy this entry references\n              \"Enemy\": {\n\n                // The Base ID for the enemy.\n                \"BaseId\": \"int\",\n\n                // The attachments (variants) for the enemy.\n                \"Attachments\": [\n                  \"int\"\n                ]\n              },\n\n              // Total number of kills on the enemy by the player\n              \"TotalKills\": \"int\"\n            }\n          ],\n\n          // List of enemies killed, per enemy type. Enemies are available via the\n          // Metadata API.\n          \"EnemyKills\": [\n            {\n              // The enemy this entry references\n              \"Enemy\": {\n\n                // The Base ID for the enemy.\n                \"BaseId\": \"int\",\n\n                // The attachments (variants) for the enemy.\n                \"Attachments\": [\n                  \"int\"\n                ]\n              },\n\n              // Total number of kills on the enemy by the player\n              \"TotalKills\": \"int\"\n            }\n          ],\n\n          // The set of weapons (weapons and vehicles included) used by the player.\n          \"WeaponStats\": [\n            {\n              \"WeaponId\": {\n\n                // The ID of the weapon. Weapons are available via the Metadata API.\n                \"StockId\": \"int\",\n\n                // Any attachments the weapon had.\n                \"Attachments\": [ \n                  \"int\" \n                ]\n              },\n\n              // The number of shots fired for this weapon.\n              \"TotalShotsFired\": \"int\",\n\n              // The number of shots landed for this weapon.\n              \"TotalShotsLanded\": \"int\",\n\n              // The number of headshots for this weapon.\n              \"TotalHeadshots\": \"int\",\n\n              // The number of kills for this weapon.\n              \"TotalKills\": \"int\",\n\n              // The total damage dealt for this weapon.\n              \"TotalDamageDealt\": \"double\",\n\n              // The total possession time for this weapon. This is expressed as an ISO\n              // 8601 Duration.\n              \"TotalPossessionTime\": \"string\"\n            }\n          ],\n\n          // The set of Impulses (invisible Medals) earned by the player.\n          \"Impulses\": [\n            {\n              // The ID of the Impulse. Impulses are available via the Metadata API.\n              \"Id\": \"int\",\n\n              // The number of times the Impulse was earned.\n              \"Count\": \"int\"\n            }\n          ],\n\n          // Total number of Spartan kills by the player.\n          \"TotalSpartanKills\": \"int\"\n        },\n\n        // Information about the player for whom this data was returned.\n        \"PlayerId\": {\n\n          // The gamertag of the player queried.\n          \"GamerTag\": \"string\",\n\n          // Internal use only. This will always be null.\n          \"Xuid\": null\n        },\n\n        // The player's Spartan Rank.\n        \"SpartanRank\": \"int\",\n\n        // The player's XP.\n        \"Xp\": \"int\"\n      }\n    }\n  ],\n\n  // Internal use only. A set of related resource links.\n  \"Links\": null\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "15412e1f-0a37-48b7-8f91-dd1df609de98",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.192774Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Arena"
        }
      }
    }
  }, {
    "id" : "a9b5504c-7110-4942-9854-131f5538bfe7",
    "name" : "Halo 5 - Player Match History - 503",
    "request" : {
      "urlPath" : "/h5/players/ndb4ag3o2d9qixxg95kykr1fdxuf7ycyup05vymrh38rosz52nc7s8/matches",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "a9b5504c-7110-4942-9854-131f5538bfe7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.192716Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Player-Match-History"
        }
      }
    }
  }, {
    "id" : "49dadd99-7dcc-4b78-a7d2-827a7d3855b8",
    "name" : "Halo 5 - Player Match History - 500",
    "request" : {
      "urlPath" : "/h5/players/jkibmw4su8tn5lfl1s79pw2vma4tk74f9gwkcdlvomz4solhrpf1ssppsg5spnio7ag8ysvxz8v2o970aq3ybjwmpjmhy6l2dfg36gkb3uygmp4x5nm84xvjxo4466svw6/matches",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "49dadd99-7dcc-4b78-a7d2-827a7d3855b8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.19269Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Player-Match-History"
        }
      }
    }
  }, {
    "id" : "8bf8a18a-99e0-4626-8c30-d4eb7798ba94",
    "name" : "Halo 5 - Player Match History - 404",
    "request" : {
      "urlPath" : "/h5/players/8xy11dvrvxihf6uiha037hjeixaipmwi7l3wfkea0gu9zb8zwlpjhu3bjwbym40gcnfraoe06d83uanbzr7am12a3d6iccvjtr47qv6giadt7yzb7u6jqassrjgsp8u9e5o6z3xevu01671778cmtabojtsin40rk94ih0acyksy7mfmc3z4vc10m9sbo7pcj3n/matches",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "8bf8a18a-99e0-4626-8c30-d4eb7798ba94",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.192663Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Player-Match-History"
        }
      }
    }
  }, {
    "id" : "be7a7a4d-5d56-4b64-8ae1-a3cf6a5bbbb1",
    "name" : "Halo 5 - Player Match History - 400",
    "request" : {
      "urlPath" : "/h5/players/3l9zca1m0xxv8c1ihdp61l1orfmq3q64190lqz22ww/matches",
      "method" : "GET"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "be7a7a4d-5d56-4b64-8ae1-a3cf6a5bbbb1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.192634Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Player-Match-History"
        }
      }
    }
  }, {
    "id" : "91997143-2a2b-453b-bcc3-bdc1c67fe24f",
    "name" : "Halo 5 - Player Match History (application/json)",
    "request" : {
      "urlPath" : "/h5/players/r475p1fk5n3e91ft5jx3k1nh9ysg5m3s6ydijv9ejiz6symvo3fym4m67ewolcwfiynoitvvq4ngt25wpgrnv6cb0uagomfwao5p6nl6vwlvcrulxose3uz9qskfk7vrik33nakc5z7vxdpe30zsa920e2k5b3lbflplhlmxt6ucgsc7chcrlqy0y9vqbrat51qnpd/matches",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // The starting point that was used. When the \"start\" query string parameter is\n  // specified, this value is identical. When \"start\" is omitted, the default value is\n  // returned.\n  \"Start\": \"int\",  \n\n  // The number of results that the service attempted to retrieve to satisfy this\n  // request. Normally this value is equal to the \"count\" parameter. If the client\n  // specified a count parameter greater than the maximum allowed, this value contains\n  // the maximum allowed amount.\n  \"Count\": \"int\",\n\n  // The number of results that are actually being returned in this response. This field\n  // is named \"ResultCount\" to avoid confusion with \"Count\".\n  \"ResultCount\": \"int\",\n\n  // A list of recent matches. Matches are listed in reverse chronological order with the\n  // most recently started match first.\n  \"Results\": [\n    {\n      // Internal use only. A set of related resource links.\n      \"Links\": \"links\",\n\n      \"Id\": {\n\n        // The ID for this match. More match details are available via the applicable\n        // Match Result Endpoint.\n        \"MatchId\": \"guid\",\n\n        // The game mode applicable to this match. Options are: \n        //   Error = 0, \n        //   Arena = 1, \n        //   Campaign = 2, \n        //   Custom = 3, \n        //   Warzone = 4,\n        //   CustomLocal = 6.\n        \"GameMode\": \"int\",\n\n      },\n\n      // The ID of the playlist (aka \"Hopper\") for the match. \n      // Hoppers are used in Arena and Warzone. In Arena, they function just as you would\n      // expect, similar to previous Halo titles. Warzone uses hoppers as well. There\n      // will be multiple Warzone hoppers which contain a rotating playlist of scenarios\n      // to play. \n      // Null for campaign & custom games. \n      // Playlists are available via the Metadata API.\n      \"HopperId\": \"guid\",\n\n      // The ID of the base map for this match. Maps are available via the Metadata API.\n      \"MapId\": \"guid\",\n\n      // The variant of the map for this match. There are two sources of map variants:\n      // official map variants available via the Metadata API and user-generated map\n      // variants which are not available via the APIs currently. This will be null for\n      // campaign games.\n      \"MapVariant\": {\n\n        // The resource type. 3 indicates map variant.\n        \"ResourceType\": 3,\n\n        // The ID of the map variant. Official map variants are available via the\n        // Metadata API.\n        \"ResourceId\": \"guid\",\n\n        // The source of the map variant. Options are:\n        //   Unknown = 0,\n        //   User-generated = 1,\n        //   Official = 3.\n        \"OwnerType\": \"int\",\n\n        // The gamertag of the user that created the map variant if this is a\n        // user-generated map variant, or null otherwise. \n        \"Owner\": \"string\"\n      },\n\n      // The ID of the game base variant for this match. Game base variants are available\n      // via the Metadata API.\n      \"GameBaseVariantId\": \"guid\",\n\n      // The variant of the game for this match. There are two sources of game variants:\n      // official game variants available via the Metadata API and user-generated game\n      // variants which are not available via the APIs currently. This will be null for\n      // campaign games.\n      \"GameVariant\": {\n\n        // The resource type. 2 indicates game variant.\n        \"ResourceType\": 2,\n\n        // The ID of the game variant. Official game variants are available via the\n        // Metadata API.\n        \"ResourceId\": \"guid\",        \n\n        // The source of the game variant. Options are:\n        //   Unknown = 0,\n        //   User-generated = 1,\n        //   Official = 3.\n        \"OwnerType\": \"int\",\n\n        // The gamertag of the user that created the game variant if this is a\n        // user-generated game variant, or null otherwise. \n        \"Owner\": \"string\"\n      },\n\n      // The length of the match. This is expressed as an ISO 8601 Duration.\n      \"MatchDuration\": \"string\",\n\n      // The date and time when the match ended. Note that this is different than the\n      // processing date, once matches end they typically take a small amount of time to\n      // process. The processing date is not available through this API. The time\n      // component of this date is set to \"00:00:00\" unless the \"{include-times}\" request\n      // parameter is set to \"true\". This is expressed as an ISO 8601 combined Date and\n      // Time.\n      \"MatchCompletedDate\": {\n\n        \"ISO8601Date\": \"string\"\n      },\n\n      // Provides team data. This list contains all team that Won or Tied. Losing teams\n      // are not included. This list is empty for campaign games. \n      \"Teams\": [\n        {\n          // The ID for the team. The team's ID dictates the team's color. Team colors\n          // are available via the Metadata API.\n          \"Id\": \"int\",\n\n          // The team's score at the end of the match. The way the score is determined is\n          // based off the game base variant being played: \n          //   Breakout = number of rounds won,\n          //   CTF = number of flag captures,\n          //   Slayer = number of kills,\n          //   Strongholds = number of points,\n          //   Warzone = number of points.\n          // Score can be a negative value. Unfortunately, this value is returned as an\n          // unsigned 32-bit integer. This means that if the score is -1, the score\n          // reported is 4,294,967,295.\n          \"Score\": \"uint32\",\n\n          // The team's rank at the end of the match.\n          \"Rank\": \"int\"\n        }\n      ],\n\n      // This field contains the player's data. This will only contain data for the\n      // player specified in the request.\n      \"Players\": [\n        {          \n          \"Player\": {\n\n            // The player's gamertag.\n            \"Gamertag\": \"string\",\n\n            // Internal use only. This will always be null.\n            \"Xuid\": null\n          },\n\n          // The ID of the team that the player was on when the match ended. Zero for\n          // campaign games.\n          \"TeamId\": \"int\",\n\n          // The player's team-agnostic ranking in this match.\n          \"Rank\": \"int\",\n\n          // Indicates what result the player received at the conclusion of the match.\n          // Options are:\n          //   Did Not Finish = 0, \n          //   Lost = 1, \n          //   Tied = 2, \n          //   Won = 3. \n          // Did Not Finish: The player was not present when the match ended.\n          // Lost: The player was on a team that was assigned a loss, typically this is\n          // when a team does not have rank = 1. \n          // Won: The player was on the team that was assigned the win, typically this is\n          // the team that has rank = 1. \n          // Tied: The player was on the team that was awarded a tie. Typically this is\n          // when the player is on the team with rank = 1, and there is at least one\n          // other team with rank = 1. Ties are only for rank = 1 teams. Consider the\n          // scenario when exactly one team is rank = 1, and two teams are rank = 2.\n          // Players on the rank=1 team will have \"Won\", players on the rank = 2 teams\n          // will have \"Lost\". For ties, this documentation states 'typically' because\n          // the game may have unique rules for multi-team and FFA scenarios, in which\n          // multiple teams are awarded a win.\n          \"Result\": \"int\",\n\n          // The number of enemy kills the player had during this match. This includes\n          // other Spartans and Enemy AI.\n          \"TotalKills\": \"int\",\n\n          // The number of times this player died during the match.\n          \"TotalDeaths\": \"int\",\n\n          // The number of assists credited to the player during the match. This includes\n          // other Spartans and Enemy AI.\n          \"TotalAssists\": \"int\",\n\n          // Internal use only. This will always be null.\n          \"PreMatchRatings\": null,\n\n          // Internal use only. This will always be null.\n          \"PostMatchRatings\": null\n        }\n      ],\n\n      // Whether this was a team-based game or not (e.g. free-for-all).\n      \"IsTeamGame\": \"boolean\",\n\n      // The ID of the season for this match if it was played in a seasonal playlist.\n      // Null if the match was played in a non-seasonal playlist. This will only be set\n      // for Arena matches and will be null for all other game modes.\n      \"SeasonId\": null,\n\n      // Internal use only. Do not use.\n      \"MatchCompletedDateFidelity\": \"int\"\n    }\n  ]\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "91997143-2a2b-453b-bcc3-bdc1c67fe24f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.192599Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Player-Match-History"
        }
      }
    }
  }, {
    "id" : "2f056951-e6ac-457e-a06c-96639d78aa2b",
    "name" : "Halo 5 - Player Commendations - 503",
    "request" : {
      "urlPath" : "/h5/players/azfe/commendations",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "2f056951-e6ac-457e-a06c-96639d78aa2b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.19255Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Player-Commendations"
        }
      }
    }
  }, {
    "id" : "ef9b439b-ec2a-4291-b50b-9068250610c6",
    "name" : "Halo 5 - Player Commendations - 500",
    "request" : {
      "urlPath" : "/h5/players/lidtqpgldkokxrac4t5etd7ig18kukyawuwnvqzqcheki6e4tyq1rwqz2teqxrmdfh13qdy0elpa3f3zxfs7p3eshamag6koxupt84l0jczxydovdofv3ss78xl0phhvthcy8crkubyiqxyatu8qyznd5hxa8clq2q3xudp1hd5zcbkewnp6l6ca2hzfv6bl9pkv3ue2/commendations",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "ef9b439b-ec2a-4291-b50b-9068250610c6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.192524Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Player-Commendations"
        }
      }
    }
  }, {
    "id" : "0336ca0f-9fc7-45d4-8c49-8d2b40a2e4f9",
    "name" : "Halo 5 - Player Commendations - 404",
    "request" : {
      "urlPath" : "/h5/players/b9tkht60f8z3fdqc7iiywd12ldvbywdsak1x55umvr4qcbcjs03csxx08ql9cshq6yj5tqrusx00bbulfbbrqrdelo45qp5ctmi/commendations",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "0336ca0f-9fc7-45d4-8c49-8d2b40a2e4f9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.192494Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Player-Commendations"
        }
      }
    }
  }, {
    "id" : "99bf75db-eaf1-4cc6-ac5e-8a9e0d7d1198",
    "name" : "Halo 5 - Player Commendations (application/json)",
    "request" : {
      "urlPath" : "/h5/players/zstvu0ntcbr18ezz18e8429so6xx87msnc5sjb1846gcsq8dj5mnxq31cbaxpzbh3ahefmw7vnymqorrm1cijp0k7hbxoq8me16usxw7z3ua4esj6hd8369tx8rbq5quteoo8p933yf2iibg4kk3kx4/commendations",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // Internal use only. A set of related resource links.\n  \"Links\": null,\n\n  // The progress towards each Progressive Commendation. Progressive commendations have a\n  // series of increasingly difficult thresholds (levels) that must crossed to receive\n  // increasingly greater rewards. If no progress has been made for a progressive\n  // commendation, it is omitted from this list.\n  \"ProgressiveCommendations\": [\n    {\n      // The commendation ID. Commendations are available via the Metadata API.\n      \"Id\": \"guid\",\n\n      // The progress that has been made towards the commendation.\n      \"Progress\": \"int\",\n\n      // The levels that have been completed for the commendation.\n      \"CompletedLevels\": [\n        {\n          // The commendation level ID. Commendation Levels area available via the\n          // Metadata API.\n          \"Id\": \"guid\",\n\n          // The date the commendation level was completed. The time component of this\n          // date is always set to \"00:00:00\". This is expressed as an ISO 8601 combined\n          // Date and Time.\n          \"CompletedDateUtc\": {\n\n            \"ISO8601Date\": \"string\"\n          }\n        }\n      ]\n    }\n  ],\n\n  // The progress towards each Meta Commendation. Meta commendations are unlocked when\n  // one or more other commendation levels have been completed. If no progress has been\n  // made for a meta commendation, it is omitted from this list.\n  \"MetaCommendations\": [\n    {\n      // The commendation ID. Commendations are available via the Metadata API.\n      \"Id\": \"guid\",\n\n      // The required commendation IDs that have been completed that are associated with\n      // this meta commendation. In C#, this can be reassembled into a Guid in the\n      // following manner: new Guid((int)Data1, (short)Data2, (short)Data3,\n      // BitConverter.GetBytes((long)Data4)).\n      \"MetRequirements\": [\n        {\n          \"Data1\": \"int\",\n\n          \"Data2\": \"int\",\n\n          \"Data3\": \"int\",\n\n          \"Data4\": \"int\"\n        }\n      ]\n    }\n  ],\n\n  // The date when the commendations progress was last updated. The time component of\n  // this date is always set to \"00:00:00\". This is expressed as an ISO 8601 combined\n  // Date and Time.\n  \"LastUpdatedDateUtc\": {\n\n    \"ISO8601Date\": \"string\"\n  }\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "99bf75db-eaf1-4cc6-ac5e-8a9e0d7d1198",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.19246Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Player-Commendations"
        }
      }
    }
  }, {
    "id" : "3b0b7b79-e615-401d-9d87-42c41244af2b",
    "name" : "Halo 5 - Leaderboard - Player CSR - 503",
    "request" : {
      "urlPath" : "/h5/player-leaderboards/csr/l4br/1r83",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "3b0b7b79-e615-401d-9d87-42c41244af2b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.192411Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Leaderboard-Player-CSR"
        }
      }
    }
  }, {
    "id" : "b27c1074-1481-4144-9a62-1dfa83ba39ed",
    "name" : "Halo 5 - Leaderboard - Player CSR - 500",
    "request" : {
      "urlPath" : "/h5/player-leaderboards/csr/28y0/j43r",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "b27c1074-1481-4144-9a62-1dfa83ba39ed",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.192265Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Leaderboard-Player-CSR"
        }
      }
    }
  }, {
    "id" : "3db14b3a-7c38-4e55-bd21-2c7293861744",
    "name" : "Halo 5 - Leaderboard - Player CSR - 404",
    "request" : {
      "urlPath" : "/h5/player-leaderboards/csr/q9y6/26w9",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "3db14b3a-7c38-4e55-bd21-2c7293861744",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.192129Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Leaderboard-Player-CSR"
        }
      }
    }
  }, {
    "id" : "dff8ece5-c110-46b7-9599-5664640fd17d",
    "name" : "Halo 5 - Leaderboard - Player CSR (application/json)",
    "request" : {
      "urlPath" : "/h5/player-leaderboards/csr/2cf1/hqdq",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // The starting point that was used. Will always be 0.\n  \"Start\": \"int\",\n\n  // The number of results that the service attempted to retrieve to satisfy this\n  // request. Normally this value is equal to the \"count\" parameter. If the client\n  // specified a count parameter greater than the maximum allowed, this value contains\n  // the maximum allowed amount.\n  \"Count\": \"int\",\n\n  // The number of results that are actually being returned in this response. This field\n  // is named \"ResultCount\" to avoid confusion with \"Count\".\n  \"ResultCount\": \"int\",\n\n  // Internal use only. A set of related resource links.\n  \"Links\": \"links\",\n\n  // A list of players in the leaderboard. Players are listed in chronological order with\n  // the player with the highest CSR first.\n  \"Results\": [\n    {\n      // Information about the player for whom this data was returned.\n      \"Player\": {\n\n        // The gamertag of the player queried.\n        \"Gamertag\": \"string\",\n\n        // Internal use only. This will always be null.\n        \"Xuid\": null\n      },\n\n      // The player's rank in the leaderboard.\n      \"Rank\": \"int\",\n\n      \"Score\": {\n\n        // The CSR tier. CSR Tiers are designation-specific and are available via the\n        // Metadata API.\n        \"Tier\": \"int\",\n\n        // The Designation of the CSR. CSR Designations are available via the Metadata\n        // API.\n        \"DesignationId\": \"int\",\n\n        // The CSR value. Zero for normal (Diamond and below) designations.\n        \"Csr\": \"int\",\n\n        // The percentage of progress towards the next CSR tier.\n        \"PercentToNextTier\": \"int\",\n\n        // If the CSR is Onyx or Champion, the player's leaderboard ranking. Null\n        // otherwise.\n        \"Rank\": \"int\"\n      }\n    }\n  ]\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "dff8ece5-c110-46b7-9599-5664640fd17d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.19199Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Leaderboard-Player-CSR"
        }
      }
    }
  }, {
    "id" : "2c57f871-c60e-48cf-9c60-085f3550e655",
    "name" : "Halo 5 - Match Events - 503",
    "request" : {
      "urlPath" : "/h5/matches/69d1/events",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "2c57f871-c60e-48cf-9c60-085f3550e655",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.191831Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Match-Events"
        }
      }
    }
  }, {
    "id" : "d931d2ac-e621-44c5-b376-1817f8318330",
    "name" : "Halo 5 - Match Events - 500",
    "request" : {
      "urlPath" : "/h5/matches/99zf/events",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "d931d2ac-e621-44c5-b376-1817f8318330",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.191754Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Match-Events"
        }
      }
    }
  }, {
    "id" : "e40f059b-ab51-4df1-a246-caea41c9b8fc",
    "name" : "Halo 5 - Match Events - 404",
    "request" : {
      "urlPath" : "/h5/matches/15ia/events",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "e40f059b-ab51-4df1-a246-caea41c9b8fc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.191676Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Match-Events"
        }
      }
    }
  }, {
    "id" : "6ed1dea4-a6f9-46c0-a02c-990e5ff65e3d",
    "name" : "Halo 5 - Match Events (application/json)",
    "request" : {
      "urlPath" : "/h5/matches/lgky/events",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // Events that describe a match from start to completion. Events are reported in\n  // chronological order.\n  // Events can come in a variety of types indicated by the \"EventName\" field. Each event\n  // is documented in detail below the documentation for this return contract.\n  // Additional event types may be added in the future.\n  // When deserializing events, it is suggested to use a union of all of the fields\n  // across all of the different event types, shown below.\n  \"GameEvents\": [\n    {\n      \"Assistants\": [\n        {\n          \"Gamertag\": \"string\",\n\n          \"Xuid\": null\n        }\n      ],\n\n      \"DeathDisposition\": \"int\",\n\n      \"ImpulseId\": \"int\",\n\n      \"IsAssassination\": \"boolean\",\n\n      \"IsGroundPound\": \"boolean\",\n\n      \"IsHeadshot\": \"boolean\",\n\n      \"IsMelee\": \"boolean\",\n\n      \"IsShoulderBash\": \"boolean\",\n\n      \"IsWeapon\": \"boolean\",\n\n      \"Killer\": {\n\n        \"Gamertag\": \"string\",\n\n        \"Xuid\": null\n      },\n\n      \"KillerAgent\": \"int\",\n\n      \"KillerWeaponAttachmentIds\": [ \"int\" ],\n\n      \"KillerWeaponStockId\": \"int\",\n\n      \"KillerWorldLocation\": {\n\n        \"x\": \"double\",\n\n        \"y\": \"double\",\n\n        \"z\": \"double\"\n      },\n\n      \"MedalId\": \"int\",\n\n      \"Player\": {\n\n        \"Gamertag\": \"string\",\n\n        \"Xuid\": null\n      },\n\n      \"RoundIndex\": \"int\",\n\n      \"ShotsFired\": \"int\",\n\n      \"ShotsLanded\": \"int\",\n\n      \"TimeWeaponActiveAsPrimary\": \"string\",\n\n      \"Victim\": {\n\n        \"Gamertag\": \"string\",\n\n        \"Xuid\": null\n      },\n\n      \"VictimAgent\": \"int\",\n\n      \"VictimAttachmentIds\": [ \"int\" ],\n\n      \"VictimStockId\": \"int\",\n\n      \"VictimWorldLocation\": {\n\n        \"x\": \"double\",\n\n        \"y\": \"double\",\n\n        \"z\": \"double\"\n      },\n\n      \"WeaponAttachmentIds\": [ \"int\" ],\n\n      \"WeaponStockId\": \"int\",\n\n      // Descriptor to determine what fields will be filled in for the event. This list\n      // will grow over time as more events are exposed. Can be one of the following:\n      //   \"Death\" - An event that is created when a death occurs in the match.\n      //   \"Impulse\" - An event that is created when an impulse (invisible medal) is\n      // triggered in the match.\n      //   \"Medal\" - An event that is created when a medal is awarded in the match.\n      //   \"PlayerSpawn\" - An event that is created when a player spawns in the match.\n      //   \"RoundStart\" - An event that is created when a round starts. In regular\n      // matches, there is typically one round. However, some modes have multiple rounds..\n      //   \"RoundEnd\" - An event that is created when a round ends. In regular matches,\n      // there is typically one round. However, some modes have multiple rounds..\n      //   \"WeaponDrop\" - An event that is created when a player drops a weapon for a new\n      // weapon. This occurs when a player picks up a new weapon and drops their current\n      // one, when a player dies and drops their weapon(s), or at the end of the match\n      // for each player.\n      //   \"WeaponPickup\" - An event that is created when a player picks up a weapon.\n      // This can be when a player spawns, or when a player picks up a new weapon.\n      //   \"WeaponPickupPad\" - An event that is created when a player picks up a weapon\n      // off a pad. This will not be triggered if the weapon was picked up off the ground\n      // after another player who had picked it off a pad.\n      \"EventName\": \"string\",\n\n      // Time passed since the start of the match when the event occurred. This is\n      // expressed as an ISO 8601 Duration.\n      \"TimeSinceStart\": \"string\"\n    }\n  ],\n\n  // As this is an experimental API it has no guarantees around its accuracy. However we\n  // do try our best to ensure all events are valid and accounted for. If they do not\n  // match up to our expectations this field will return as false indicating this may not\n  // be the full set of events that occurred in game.\n  \"IsCompleteSetOfEvents\": \"boolean\",\n\n  // Internal use only. A set of related resource links.\n  \"Links\": null\n}\n\n// Death Event\n{\n  // The gamertags of players who contributed to a kill.\n  \"Assistants\": [\n  {\n    // The player's gamertag.\n    \"Gamertag\": \"string\",\n\n    // Internal use only. This will always be null.\n    \"Xuid\": null\n  }],\n\n  // The disposition of the death. Can be one of the following:\n  //   Friendly = 0,\n  //   Hostile = 1,\n  //   Neutral = 2\n  \"DeathDisposition\": \"int\",\n\n  // Describes if the death was committed by the killer from behind (Assassination or\n  // melee to back).\n  \"IsAssassination\": \"boolean\",\n\n  // Describes if the kill was committed by the killer with a ground pound.\n  \"IsGroundPound\": \"boolean\",\n\n  // Describes if the kill was committed by the killer with a head shot.\n  \"IsHeadshot\": \"boolean\",\n\n  // Describes if the kill was committed by the killer using melee.\n  \"IsMelee\": \"boolean\",\n\n  // Describes if the kill was committed by the killer with a shoulder bash.\n  \"IsShoulderBash\": \"boolean\",\n\n  // Describes if the kill was committed by the killer with a weapon.\n  \"IsWeapon\": \"boolean\",\n\n  // Describes the killer's information. Can be null if killer is not a player in the\n  // game.\n  \"Killer\": {\n\n    // The player's gamertag.\n    \"Gamertag\": \"string\",\n\n    // Internal use only. This will always be null.\n    \"Xuid\": null\n  },\n\n  // The type of killer that caused the death. Can be one of the following:\n  //   None = 0,\n  //   Player = 1,\n  //   AI = 2\n  \"KillerAgent\": \"int\",\n\n  // The IDs of any attachments that were associated with the weapon that was used to\n  // kill the victim.\n  \"KillerWeaponAttachmentIds\": [\"int\"],\n\n  // The ID of the weapon that was used to kill the victim. Depending on the type of the\n  // kill, this could be the ID of an Enemy, Vehicle, or Weapon, all of which are\n  // available via the Metadata APIs. Note that most vehicles are duplicated between both\n  // the Vehicle and Weapon Metadata APIs. If this was a standard kill with an actual\n  // weapon, then this will be the ID of the weapon that killed the victim. If this was a\n  // kill with a vehicle, then this will the ID of the vehicle that killed the victim. If\n  // this was a melee kill, then this will be the ID of the type of the object that\n  // killed the player (which will be either Spartan or the type of the type of the AI\n  // enemy that killed the player). Note that if the victim was killed by a weapon held\n  // by an AI enemy, the type of the AI enemy is unknown.\n  \"KillerWeaponStockId\": \"int\",\n\n  // Object describing the position of the killer on the map when they made the kill.\n  \"KillerWorldLocation\": {\n\n    \"x\": \"double\",\n\n    \"y\": \"double\",\n\n    \"z\": \"double\"\n  },\n\n  // Describes the victim's information. Can be null if victim is not a player in the\n  // game.\n  \"Victim\": {\n\n    // The player's gamertag.\n    \"Gamertag\": \"string\",\n\n    // Internal use only. This will always be null.\n    \"Xuid\": null\n  },\n\n  // The type of victim who was killed. Can be one of the following:\n  //   None = 0,\n  //   Player = 1,\n  //   AI = 2\n  \"VictimAgent\": \"int\",\n\n  // Any variants of the AI enemy, empty otherwise.\n  \"VictimAttachmentIds\": [\"int\"],\n\n  // The ID of the AI Enemy killed, zero otherwise. Enemy IDs are available via the\n  // Metadata API.\n  \"VictimStockId\": \"int\",\n\n  // Object describing the position of the victim on the map when they were killed.\n  \"VictimWorldLocation\": {\n\n    \"x\": \"double\",\n\n    \"y\": \"double\",\n\n    \"z\": \"double\"\n  },\n\n  // Descriptor to determine what fields will be filled in for the event.\n  \"EventName\": \"string\",\n\n  // Time passed since the start of the match when the event occurred. This is expressed\n  // as an ISO 8601 Duration.\n  \"TimeSinceStart\": \"string\"\n}\n\n// Impulse Event\n{\n  // The ID that uniquely identifies this impulse. Impulses are available via the\n  // Metadata API.\n  \"ImpulseId\" : \"int\",\n\n  // The player who received the impulse.\n  \"Player\": {\n\n    // The player's gamertag.\n    \"Gamertag\": \"string\",\n\n    // Internal use only. This will always be null.\n    \"Xuid\": null\n  }\n  // Descriptor to determine what fields will be filled in for the event.\n  \"EventName\": \"Impulse\",\n\n  // Time passed since the start of the match when the event occurred. This is expressed\n  // as an ISO 8601 Duration.\n  \"TimeSinceStart\": \"string\"\n}\n\n// Medal Event\n{\n  // The ID that uniquely identifies this medal. Medals are available via the Metadata\n  // API.\n  \"MedalId\" : \"int\",\n\n  // The player who received the medal.\n  \"Player\": {\n\n    // The player's gamertag.\n    \"Gamertag\": \"string\",\n\n    // Internal use only. This will always be null.\n    \"Xuid\": null\n  },\n\n  // Descriptor to determine what fields will be filled in for the event.\n  \"EventName\": \"Medal\",\n\n  // Time passed since the start of the match when the event occurred. This is expressed\n  // as an ISO 8601 Duration.\n  \"TimeSinceStart\": \"string\"\n}\n\n// PlayerSpawn Event\n{\n  // The player who spawned.\n  \"Player\": {\n\n    // The player's gamertag.\n    \"Gamertag\": \"string\",\n\n    // Internal use only. This will always be null.\n    \"Xuid\": null\n  },\n\n  // Descriptor to determine what fields will be filled in for the event.\n  \"EventName\": \"PlayerSpawn\",\n\n  // Time passed since the start of the match when the event occurred. This is expressed\n  // as an ISO 8601 Duration.\n  \"TimeSinceStart\": \"string\"\n}\n\n// RoundStart Event\n{\n  // The index of the round that started.\n  \"RoundIndex\" : \"int\",\n\n  // Descriptor to determine what fields will be filled in for the event.\n  \"EventName\": \"RoundStart\",\n\n  // Time passed since the start of the match when the event occurred. This is expressed\n  // as an ISO 8601 Duration.\n  \"TimeSinceStart\": \"string\"\n}\n\n// RoundEnd Event\n{\n  // The index of the round that ended.\n  \"RoundIndex\" : \"int\",\n\n  // Descriptor to determine what fields will be filled in for the event.\n  \"EventName\": \"RoundEnd\",\n\n  // Time passed since the start of the match when the event occurred. This is expressed\n  // as an ISO 8601 Duration.\n  \"TimeSinceStart\": \"string\"\n}\n\n// WeaponDrop Event\n{\n  // The player who dropped the weapon.\n  \"Player\": {\n\n    // The player's gamertag.\n    \"Gamertag\": \"string\",\n\n    // Internal use only. This will always be null.\n    \"Xuid\": null\n  },\n\n  // The number of shots fired with the weapon by the player.\n  \"ShotsFired\" : \"int\",\n\n  // The number of shots that hit the target with the weapon by the player.\n  \"ShotsLanded\" : \"int\",\n\n  // The amount of time the weapon was in the active slot of the player. This is\n  // expressed as an ISO 8601 Duration.\n  \"TimeWeaponActiveAsPrimary\": \"string\",\n\n  // The IDs of any attachments that were associated with the weapon that was dropped.\n  \"WeaponAttachmentIds\": [\"int\"],\n\n  // The ID of the weapon that was dropped. Weapons are available via the Metadata API.\n  \"WeaponStockId\": \"int\",\n\n  // Descriptor to determine what fields will be filled in for the event.\n  \"EventName\": \"WeaponDrop\",\n\n  // Time passed since the start of the match when the event occurred. This is expressed\n  // as an ISO 8601 Duration.\n  \"TimeSinceStart\": \"string\"\n}\n\n// WeaponPickup Event\n{\n  // The player who picked up the weapon.\n  \"Player\": {\n\n    // The player's gamertag.\n    \"Gamertag\": \"string\",\n\n    // Internal use only. This will always be null.\n    \"Xuid\": null\n  },\n\n  // The IDs of any attachments that were associated with the weapon that was picked up.\n  \"WeaponAttachmentIds\": [\"int\"],\n\n  // The ID of the weapon that was picked up. Weapons are available via the Metadata API.\n  \"WeaponStockId\": \"int\",\n\n  // Descriptor to determine what fields will be filled in for the event.\n  \"EventName\": \"WeaponPickup\",\n\n  // Time passed since the start of the match when the event occurred. This is expressed\n  // as an ISO 8601 Duration.\n  \"TimeSinceStart\": \"string\"\n}\n\n// WeaponPickupPad Event\n{\n  // The player who picked up the weapon.\n  \"Player\": {\n\n    // The player's gamertag.\n    \"Gamertag\": \"string\",\n\n    // Internal use only. This will always be null.\n    \"Xuid\": null\n  },\n\n  // The IDs of any attachments that were associated with the weapon that was picked up.\n  \"WeaponAttachmentIds\": [\"int\"],\n\n  // The ID of the weapon that was picked up. Weapons are available via the Metadata API.\n  \"WeaponStockId\": \"int\",\n\n  // Descriptor to determine what fields will be filled in for the event.\n  \"EventName\": \"WeaponPickupPad\",\n\n  // Time passed since the start of the match when the event occurred. This is expressed\n  // as an ISO 8601 Duration.\n  \"TimeSinceStart\": \"string\"\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6ed1dea4-a6f9-46c0-a02c-990e5ff65e3d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.191591Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Match-Events"
        }
      }
    }
  }, {
    "id" : "ea458238-aaba-429d-b972-462e91e6cd9d",
    "name" : "Halo 5 - Match Result - Custom Local - 503",
    "request" : {
      "urlPath" : "/h5/customlocal/matches/ls01",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "ea458238-aaba-429d-b972-462e91e6cd9d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.191497Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Custom-Local"
        }
      }
    }
  }, {
    "id" : "add02934-d529-4218-b6c9-5a8e243bb783",
    "name" : "Halo 5 - Match Result - Custom Local - 500",
    "request" : {
      "urlPath" : "/h5/customlocal/matches/hc30",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "add02934-d529-4218-b6c9-5a8e243bb783",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.19142Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Custom-Local"
        }
      }
    }
  }, {
    "id" : "7e3eca93-5801-4112-8701-53fb04447d0d",
    "name" : "Halo 5 - Match Result - Custom Local - 404",
    "request" : {
      "urlPath" : "/h5/customlocal/matches/3ah1",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "7e3eca93-5801-4112-8701-53fb04447d0d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.191341Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Custom-Local"
        }
      }
    }
  }, {
    "id" : "be1bcf6e-53aa-49b3-8a98-1d612da04e1a",
    "name" : "Halo 5 - Match Result - Custom Local (application/json)",
    "request" : {
      "urlPath" : "/h5/customlocal/matches/2xqg",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // A list of stats for each player who was present in the match.\n  \"PlayerStats\": [\n    {\n      // The number of times the player killed each opponent. If the player did not kill\n      // an opponent, there will be no entry for that opponent.\n      \"KilledOpponentDetails\": [\n        {\n          // The gamertag of the opponent that was killed.\n          \"GamerTag\": \"string\",\n\n          // The number of times that opponent was killed.\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The number of times the player was killed by each opponent. If the player was\n      // not killed by an opponent, there will be no entry for that opponent.\n      \"KilledByOpponentDetails\": [\n        {\n          // The gamertag of the opponent that killed the player.\n          \"GamerTag\": \"string\",\n\n          // The number of times the opponent killed the player.\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The game base variant specific stats for this match. Flexible stats are\n      // available via the Metadata API.\n      \"FlexibleStats\": {\n\n        // The set of flexible stats that are derived from medal events.\n        \"MedalStatCounts\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The number of times this flexible stat was earned.\n            \"Count\": \"int\"\n          }\n        ],\n\n        // The set of flexible stats that are derived from impulse events.\n        \"ImpulseStatCounts\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The number of times this flexible stat was earned.\n            \"Count\": \"int\"\n          }\n        ],\n\n        // The set of flexible stats that are derived from medal time lapses.\n        \"MedalTimelapses\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The amount of time the flexible stat was earned for. This is expressed as\n            // an ISO 8601 Duration.\n            \"Timelapse\": \"string\"\n          }\n        ],        \n\n        // The set of flexible stats that are derived from impulse time lapses.\n        \"ImpulseTimelapses\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The amount of time the flexible stat was earned for. This is expressed as\n            // an ISO 8601 Duration.\n            \"Timelapse\": \"string\"\n          }\n        ]\n      },\n\n      // Internal use only.\n      \"PresentInMatch\": \"boolean\",\n\n      \"Player\": {\n\n         // The player's gamertag.\n        \"Gamertag\": \"string\",\n\n        // Internal use only. This will always be null.\n        \"Xuid\": null\n      },\n\n      // The ID of the team that the player was on when the match ended. \n      \"TeamId\": \"int\",\n\n      // The player's team-agnostic ranking.\n      \"Rank\": \"int\",\n\n      // Indicates whether the player was present in the match when it ended.\n      \"DNF\": \"boolean\",\n\n      // The player's average lifetime.\n      \"AvgLifeTimeOfPlayer\": \"string\",\n\n      // Internal use only. This will always be null.\n      \"PreMatchRatings\": null,\n\n      // Internal use only. This will always be null.\n      \"PostMatchRatings\": null,\n\n      // The Player's Score. This is not used by all Game Variants and may contain null\n      // or invalid data.\n      \"PlayerScore\": \"int\",\n\n      // Total number of kills done by the player. This includes melee kills, shoulder\n      // bash kills and Spartan charge kills, all power weapons, AI kills and vehicle\n      // destructions. \n      \"TotalKills\": \"int\",\n\n      // Total number of headshots done by the player.\n      \"TotalHeadshots\": \"int\",\n\n      // Total weapon damage dealt by the player.\n      \"TotalWeaponDamage\": \"double\",\n\n      // Total number of shots fired by the player.\n      \"TotalShotsFired\": \"int\",\n\n      // Total number of shots landed by the player.\n      \"TotalShotsLanded\": \"int\",\n\n      // The weapon the player used to get the most kills this match.\n      \"WeaponWithMostKills\": {\n\n        \"WeaponId\": {\n\n          // The ID of the weapon. Weapons are available via the Metadata API.\n          \"StockId\": \"int\",\n\n          // Any attachments the weapon had.\n          \"Attachments\": [ \"int\" ]\n        },\n\n        // The number of shots fired for this weapon.\n        \"TotalShotsFired\": \"int\",\n\n        // The number of shots landed for this weapon.\n        \"TotalShotsLanded\": \"int\",\n\n        // The number of headshots for this weapon.\n        \"TotalHeadshots\": \"int\",\n\n        // The number of kills for this weapon.\n        \"TotalKills\": \"int\",\n\n        // The total damage dealt for this weapon.\n        \"TotalDamageDealt\": \"double\",\n\n        // The total possession time for this weapon. This is expressed as an ISO 8601\n        // Duration.\n        \"TotalPossessionTime\": \"string\"\n      },\n\n      // Total number of melee kills by the player.\n      \"TotalMeleeKills\": \"int\",\n\n      // Total melee damage dealt by the player.\n      \"TotalMeleeDamage\": \"double\",\n\n      // Total number of assassinations by the player.\n      \"TotalAssassinations\": \"int\",\n\n      // Total number of ground pound kills by the player.\n      \"TotalGroundPoundKills\": \"int\",\n\n      // Total ground pound damage dealt by the player.\n      \"TotalGroundPoundDamage\": \"double\",\n\n      // Total number of shoulder bash kills by the player.\n      \"TotalShoulderBashKills\": \"int\",\n\n      // Total shoulder bash damage dealt by the player.\n      \"TotalShoulderBashDamage\": \"double\",\n\n      // Total grenade damage dealt by the player.\n      \"TotalGrenadeDamage\": \"double\",\n\n      // Total number of power weapon kills by the player.\n      \"TotalPowerWeaponKills\": \"int\",\n\n      // Total power weapon damage dealt by the player.\n      \"TotalPowerWeaponDamage\": \"double\",\n\n      // Total number of power weapon grabs by the player.\n      \"TotalPowerWeaponGrabs\": \"int\",\n\n      // Total power weapon possession by the player. This is expressed as an ISO 8601\n      // Duration.\n      \"TotalPowerWeaponPossessionTime\": \"string\",\n\n      // Total number of deaths by the player.\n      \"TotalDeaths\": \"int\",\n\n      // Total number of assists by the player.\n      \"TotalAssists\": \"int\",\n\n      // Not used.\n      \"TotalGamesCompleted\": \"int\",\n\n      // Not used.\n      \"TotalGamesWon\": \"int\",\n\n      // Not used.\n      \"TotalGamesLost\": \"int\",\n\n      // Not used.\n      \"TotalGamesTied\": \"int\",\n\n      // Total timed played in this match by the player.\n      \"TotalTimePlayed\": \"string\",\n\n      // Total number of grenade kills by the player.\n      \"TotalGrenadeKills\": \"int\",\n\n      // The set of Medals earned by the player.\n      \"MedalAwards\": [\n        {\n          // The ID of the Medal. Medals are available via the Metadata API.\n          \"MedalId\": \"int\",\n\n          // The number of times the Medal was earned.\n          \"Count\": \"int\"\n        }\n      ], \n\n      // List of enemy vehicles destroyed. Vehicles are available via the Metadata API.\n      // Note: this stat measures enemy vehicles, not any vehicle destruction.\n      \"DestroyedEnemyVehicles\": [\n        {\n          // The enemy this entry references\n          \"Enemy\": {\n\n            // The Base ID for the enemy.\n            \"BaseId\": \"int\",\n\n            // The attachments (variants) for the enemy.\n            \"Attachments\": [\n              \"int\"\n            ]\n          },\n\n          // Total number of kills on the enemy by the player\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // List of enemies killed, per enemy type. Enemies are available via the Metadata\n      // API.\n      \"EnemyKills\": [\n        {\n          // The enemy this entry references\n          \"Enemy\": {\n\n            // The Base ID for the enemy.\n            \"BaseId\": \"int\",\n\n            // The attachments (variants) for the enemy.\n            \"Attachments\": [\n              \"int\"\n            ]\n          },\n\n          // Total number of kills on the enemy by the player\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The set of weapons (weapons and vehicles included) used by the player.\n      \"WeaponStats\": [\n        {\n          \"WeaponId\": {\n\n              // The ID of the weapon. Weapons are available via the Metadata API.\n            \"StockId\": \"int\",\n\n              // Any attachments the weapon had.\n            \"Attachments\": [ \n              \"int\" \n            ]\n          },\n\n            // The number of shots fired for this weapon.\n          \"TotalShotsFired\": \"int\",\n\n            // The number of shots landed for this weapon.\n          \"TotalShotsLanded\": \"int\",\n\n            // The number of headshots for this weapon.\n          \"TotalHeadshots\": \"int\",\n\n            // The number of kills for this weapon.\n          \"TotalKills\": \"int\",\n\n            // The total damage dealt for this weapon.\n          \"TotalDamageDealt\": \"double\",\n\n            // The total possession time for this weapon. This is expressed as an ISO\n            // 8601 Duration.\n          \"TotalPossessionTime\": \"string\"\n        }\n      ],\n\n      // The set of Impulses (invisible Medals) earned by the player.\n      \"Impulses\": [\n        {\n          // The ID of the Impulse. Impulses are available via the Metadata API.\n          \"Id\": \"int\",\n\n          // The number of times the Impulse was earned.\n          \"Count\": \"int\"\n        }\n      ],\n\n      // Total number of Spartan kills by the player.\n      \"TotalSpartanKills\": \"int\"\n    },\n\n  ],\n\n  // A list of stats for each team who in the match. Note that in Free For All modes,\n  // there is an entry for every player.\n  \"TeamStats\": [\n    {\n      // The ID for the team.\n      \"TeamId\": \"int\",\n\n      // The team's score at the end of the match. The way the score is determined is\n      // based off the game base variant being played: \n      //   Breakout = number of rounds won,\n      //   CTF = number of flag captures,\n      //   Slayer = number of kills,\n      //   Strongholds = number of points,\n      //   Warzone = number of points.\n      // Score can be a negative value. Unfortunately, this value is returned as an\n      // unsigned 32-bit integer. This means that if the score is -1, the score reported\n      // is 4,294,967,295.\n      \"Score\": \"uint32\",\n\n      // The team's rank at the end of the match.\n      \"Rank\": \"int\",\n\n      // The set of round stats for the team.\n      \"RoundStats\": [\n        {\n          // The round number this entry pertains to.\n          \"RoundNumber\": \"int\",\n\n          // The end rank for the team this round.\n          \"Rank\": \"int\",\n\n          // The end score for the team this round.\n          // Score can be a negative value. Unfortunately, this value is returned as an\n          // unsigned 32-bit integer. This means that if the score is -1, the score\n          // reported is 4,294,967,295.\n          \"Score\": \"uint32\",\n\n        }\n      ]\n    }\n  ],\n\n  // Indicates if the match is completed or not. Some match details are available while\n  // the match is in-progress, but the behavior for incomplete matches in undefined.\n  \"IsMatchOver\": \"boolean\",\n\n  // The length of the match. This is expressed as an ISO 8601 Duration.\n  \"TotalDuration\": \"string\",\n\n  // The variant of the map for this match. Map variants are available via the Metadata\n  // API. More information is available in MapVariantResourceId.\n  \"MapVariantId\": \"guid\",\n\n  // The variant of the game for this match. Game variants are available via the Metadata\n  // API. More information is available in GameVariantResourceId.\n  \"GameVariantId\": \"guid\",\n\n  // The playlist ID of the match. Playlists are available via the Metadata API.\n  \"PlaylistId\": \"guid\",\n\n  // The ID of the base map for this match. Maps are available via the Metadata API.\n  \"MapId\": \"guid\",\n\n  // The ID of the game base variant for this match. Game base variants are available via\n  // the Metadata API.\n  \"GameBaseVariantId\": \"guid\",\n\n  // Whether this was a team-based game or not.\n  \"IsTeamGame\": \"boolean\",\n\n  // Unused for Custom matches. This will always be null.\n  \"SeasonId\": null,\n\n  // The variant of the game for this match. There are two sources of game variants:\n  // official game variants available via the Metadata API and user-generated game\n  // variants are available via the UGC API.\n  \"GameVariantResourceId\": {\n\n    // The resource type. 2 indicates game variant.\n    \"ResourceType\": 2,\n\n    // The ID of the game variant. Official game variants are available via the Metadata\n    // API.\n    \"ResourceId\": \"guid\",        \n\n    // The source of the game variant. Options are:\n    //   Unknown = 0,\n    //   User-generated = 1,\n    //   Official = 3.\n    \"OwnerType\": \"int\",\n\n    // The gamertag of the user that created the game variant if this is a user-generated\n    // game variant, or null otherwise. \n    \"Owner\": \"string\"\n  },\n\n  // The variant of the map for this match. There are two sources of map variants:\n  // official map variants available via the Metadata API and user-generated map variants\n  // available vai the UGC API.\n  \"MapVariantResourceId\": {\n\n    // The resource type. 3 indicates map variant.\n    \"ResourceType\": 3,\n\n    // The ID of the map variant. Official map variants are available via the Metadata\n    // API.\n    \"ResourceId\": \"guid\",\n\n    // The source of the map variant. Options are:\n    //   Unknown = 0,\n    //   User-generated = 1,\n    //   Official = 3.\n    \"OwnerType\": \"int\",\n\n    // The gamertag of the user that created the map variant if this is a user-generated\n    // map variant, or null otherwise. \n    \"Owner\": \"string\"\n  }\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "be1bcf6e-53aa-49b3-8a98-1d612da04e1a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.191254Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Custom-Local"
        }
      }
    }
  }, {
    "id" : "44baecb8-2b4b-4e92-9df1-b3f96cbaa91a",
    "name" : "Halo 5 - Match Result - Custom - 503",
    "request" : {
      "urlPath" : "/h5/custom/matches/5ip7",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "44baecb8-2b4b-4e92-9df1-b3f96cbaa91a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.191159Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Custom"
        }
      }
    }
  }, {
    "id" : "08408494-28fb-4211-9875-4e1e02aa2923",
    "name" : "Halo 5 - Match Result - Custom - 500",
    "request" : {
      "urlPath" : "/h5/custom/matches/29j3",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "08408494-28fb-4211-9875-4e1e02aa2923",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.191083Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Custom"
        }
      }
    }
  }, {
    "id" : "2bbc5cca-88b0-4ed2-9592-422e66170181",
    "name" : "Halo 5 - Match Result - Custom - 404",
    "request" : {
      "urlPath" : "/h5/custom/matches/raxt",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "2bbc5cca-88b0-4ed2-9592-422e66170181",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.191006Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Custom"
        }
      }
    }
  }, {
    "id" : "2472679c-7312-48b8-8c2b-4f26233020b9",
    "name" : "Halo 5 - Match Result - Custom (application/json)",
    "request" : {
      "urlPath" : "/h5/custom/matches/mg2m",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // A list of stats for each player who was present in the match.\n  \"PlayerStats\": [\n    {\n      // The number of times the player killed each opponent. If the player did not kill\n      // an opponent, there will be no entry for that opponent.\n      \"KilledOpponentDetails\": [\n        {\n          // The gamertag of the opponent that was killed.\n          \"GamerTag\": \"string\",\n\n          // The number of times that opponent was killed.\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The number of times the player was killed by each opponent. If the player was\n      // not killed by an opponent, there will be no entry for that opponent.\n      \"KilledByOpponentDetails\": [\n        {\n          // The gamertag of the opponent that killed the player.\n          \"GamerTag\": \"string\",\n\n          // The number of times the opponent killed the player.\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The game base variant specific stats for this match. Flexible stats are\n      // available via the Metadata API.\n      \"FlexibleStats\": {\n\n        // The set of flexible stats that are derived from medal events.\n        \"MedalStatCounts\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The number of times this flexible stat was earned.\n            \"Count\": \"int\"\n          }\n        ],\n\n        // The set of flexible stats that are derived from impulse events.\n        \"ImpulseStatCounts\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The number of times this flexible stat was earned.\n            \"Count\": \"int\"\n          }\n        ],\n\n        // The set of flexible stats that are derived from medal time lapses.\n        \"MedalTimelapses\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The amount of time the flexible stat was earned for. This is expressed as\n            // an ISO 8601 Duration.\n            \"Timelapse\": \"string\"\n          }\n        ],        \n\n        // The set of flexible stats that are derived from impulse time lapses.\n        \"ImpulseTimelapses\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The amount of time the flexible stat was earned for. This is expressed as\n            // an ISO 8601 Duration.\n            \"Timelapse\": \"string\"\n          }\n        ]\n      },\n\n      // Internal use only.\n      \"PresentInMatch\": \"boolean\",\n\n      \"Player\": {\n\n         // The player's gamertag.\n        \"Gamertag\": \"string\",\n\n        // Internal use only. This will always be null.\n        \"Xuid\": null\n      },\n\n      // The ID of the team that the player was on when the match ended. \n      \"TeamId\": \"int\",\n\n      // The player's team-agnostic ranking.\n      \"Rank\": \"int\",\n\n      // Indicates whether the player was present in the match when it ended.\n      \"DNF\": \"boolean\",\n\n      // The player's average lifetime.\n      \"AvgLifeTimeOfPlayer\": \"string\",\n\n      // Internal use only. This will always be null.\n      \"PreMatchRatings\": null,\n\n      // Internal use only. This will always be null.\n      \"PostMatchRatings\": null,\n\n      // The Player's Score. This is not used by all Game Variants and may contain null\n      // or invalid data.\n      \"PlayerScore\": \"int\",\n\n      // Total number of kills done by the player. This includes melee kills, shoulder\n      // bash kills and Spartan charge kills, all power weapons, AI kills and vehicle\n      // destructions. \n      \"TotalKills\": \"int\",\n\n      // Total number of headshots done by the player.\n      \"TotalHeadshots\": \"int\",\n\n      // Total weapon damage dealt by the player.\n      \"TotalWeaponDamage\": \"double\",\n\n      // Total number of shots fired by the player.\n      \"TotalShotsFired\": \"int\",\n\n      // Total number of shots landed by the player.\n      \"TotalShotsLanded\": \"int\",\n\n      // The weapon the player used to get the most kills this match.\n      \"WeaponWithMostKills\": {\n\n        \"WeaponId\": {\n\n          // The ID of the weapon. Weapons are available via the Metadata API.\n          \"StockId\": \"int\",\n\n          // Any attachments the weapon had.\n          \"Attachments\": [ \"int\" ]\n        },\n\n        // The number of shots fired for this weapon.\n        \"TotalShotsFired\": \"int\",\n\n        // The number of shots landed for this weapon.\n        \"TotalShotsLanded\": \"int\",\n\n        // The number of headshots for this weapon.\n        \"TotalHeadshots\": \"int\",\n\n        // The number of kills for this weapon.\n        \"TotalKills\": \"int\",\n\n        // The total damage dealt for this weapon.\n        \"TotalDamageDealt\": \"double\",\n\n        // The total possession time for this weapon. This is expressed as an ISO 8601\n        // Duration.\n        \"TotalPossessionTime\": \"string\"\n      },\n\n      // Total number of melee kills by the player.\n      \"TotalMeleeKills\": \"int\",\n\n      // Total melee damage dealt by the player.\n      \"TotalMeleeDamage\": \"double\",\n\n      // Total number of assassinations by the player.\n      \"TotalAssassinations\": \"int\",\n\n      // Total number of ground pound kills by the player.\n      \"TotalGroundPoundKills\": \"int\",\n\n      // Total ground pound damage dealt by the player.\n      \"TotalGroundPoundDamage\": \"double\",\n\n      // Total number of shoulder bash kills by the player.\n      \"TotalShoulderBashKills\": \"int\",\n\n      // Total shoulder bash damage dealt by the player.\n      \"TotalShoulderBashDamage\": \"double\",\n\n      // Total grenade damage dealt by the player.\n      \"TotalGrenadeDamage\": \"double\",\n\n      // Total number of power weapon kills by the player.\n      \"TotalPowerWeaponKills\": \"int\",\n\n      // Total power weapon damage dealt by the player.\n      \"TotalPowerWeaponDamage\": \"double\",\n\n      // Total number of power weapon grabs by the player.\n      \"TotalPowerWeaponGrabs\": \"int\",\n\n      // Total power weapon possession by the player. This is expressed as an ISO 8601\n      // Duration.\n      \"TotalPowerWeaponPossessionTime\": \"string\",\n\n      // Total number of deaths by the player.\n      \"TotalDeaths\": \"int\",\n\n      // Total number of assists by the player.\n      \"TotalAssists\": \"int\",\n\n      // Not used.\n      \"TotalGamesCompleted\": \"int\",\n\n      // Not used.\n      \"TotalGamesWon\": \"int\",\n\n      // Not used.\n      \"TotalGamesLost\": \"int\",\n\n      // Not used.\n      \"TotalGamesTied\": \"int\",\n\n      // Total timed played in this match by the player.\n      \"TotalTimePlayed\": \"string\",\n\n      // Total number of grenade kills by the player.\n      \"TotalGrenadeKills\": \"int\",\n\n      // The set of Medals earned by the player.\n      \"MedalAwards\": [\n        {\n          // The ID of the Medal. Medals are available via the Metadata API.\n          \"MedalId\": \"int\",\n\n          // The number of times the Medal was earned.\n          \"Count\": \"int\"\n        }\n      ], \n\n      // List of enemy vehicles destroyed. Vehicles are available via the Metadata API.\n      // Note: this stat measures enemy vehicles, not any vehicle destruction.\n      \"DestroyedEnemyVehicles\": [\n        {\n          // The enemy this entry references\n          \"Enemy\": {\n\n            // The Base ID for the enemy.\n            \"BaseId\": \"int\",\n\n            // The attachments (variants) for the enemy.\n            \"Attachments\": [\n              \"int\"\n            ]\n          },\n\n          // Total number of kills on the enemy by the player\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // List of enemies killed, per enemy type. Enemies are available via the Metadata\n      // API.\n      \"EnemyKills\": [\n        {\n          // The enemy this entry references\n          \"Enemy\": {\n\n            // The Base ID for the enemy.\n            \"BaseId\": \"int\",\n\n            // The attachments (variants) for the enemy.\n            \"Attachments\": [\n              \"int\"\n            ]\n          },\n\n          // Total number of kills on the enemy by the player\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The set of weapons (weapons and vehicles included) used by the player.\n      \"WeaponStats\": [\n        {\n          \"WeaponId\": {\n\n              // The ID of the weapon. Weapons are available via the Metadata API.\n            \"StockId\": \"int\",\n\n              // Any attachments the weapon had.\n            \"Attachments\": [ \n              \"int\" \n            ]\n          },\n\n            // The number of shots fired for this weapon.\n          \"TotalShotsFired\": \"int\",\n\n            // The number of shots landed for this weapon.\n          \"TotalShotsLanded\": \"int\",\n\n            // The number of headshots for this weapon.\n          \"TotalHeadshots\": \"int\",\n\n            // The number of kills for this weapon.\n          \"TotalKills\": \"int\",\n\n            // The total damage dealt for this weapon.\n          \"TotalDamageDealt\": \"double\",\n\n            // The total possession time for this weapon. This is expressed as an ISO\n            // 8601 Duration.\n          \"TotalPossessionTime\": \"string\"\n        }\n      ],\n\n      // The set of Impulses (invisible Medals) earned by the player.\n      \"Impulses\": [\n        {\n          // The ID of the Impulse. Impulses are available via the Metadata API.\n          \"Id\": \"int\",\n\n          // The number of times the Impulse was earned.\n          \"Count\": \"int\"\n        }\n      ],\n\n      // Total number of Spartan kills by the player.\n      \"TotalSpartanKills\": \"int\"\n    },\n\n  ],\n\n  // A list of stats for each team who in the match. Note that in Free For All modes,\n  // there is an entry for every player.\n  \"TeamStats\": [\n    {\n      // The ID for the team.\n      \"TeamId\": \"int\",\n\n      // The team's score at the end of the match. The way the score is determined is\n      // based off the game base variant being played: \n      //   Breakout = number of rounds won,\n      //   CTF = number of flag captures,\n      //   Slayer = number of kills,\n      //   Strongholds = number of points,\n      //   Warzone = number of points.\n      // Score can be a negative value. Unfortunately, this value is returned as an\n      // unsigned 32-bit integer. This means that if the score is -1, the score reported\n      // is 4,294,967,295.\n      \"Score\": \"uint32\",\n\n      // The team's rank at the end of the match.\n      \"Rank\": \"int\",\n\n      // The set of round stats for the team.\n      \"RoundStats\": [\n        {\n          // The round number this entry pertains to.\n          \"RoundNumber\": \"int\",\n\n          // The end rank for the team this round.\n          \"Rank\": \"int\",\n\n          // The end score for the team this round.\n          // Score can be a negative value. Unfortunately, this value is returned as an\n          // unsigned 32-bit integer. This means that if the score is -1, the score\n          // reported is 4,294,967,295.\n          \"Score\": \"uint32\",\n\n        }\n      ]\n    }\n  ],\n\n  // Indicates if the match is completed or not. Some match details are available while\n  // the match is in-progress, but the behavior for incomplete matches in undefined.\n  \"IsMatchOver\": \"boolean\",\n\n  // The length of the match. This is expressed as an ISO 8601 Duration.\n  \"TotalDuration\": \"string\",\n\n  // The variant of the map for this match. Map variants are available via the Metadata\n  // API. More information is available in MapVariantResourceId.\n  \"MapVariantId\": \"guid\",\n\n  // The variant of the game for this match. Game variants are available via the Metadata\n  // API. More information is available in GameVariantResourceId.\n  \"GameVariantId\": \"guid\",\n\n  // The playlist ID of the match. Playlists are available via the Metadata API.\n  \"PlaylistId\": \"guid\",\n\n  // The ID of the base map for this match. Maps are available via the Metadata API.\n  \"MapId\": \"guid\",\n\n  // The ID of the game base variant for this match. Game base variants are available via\n  // the Metadata API.\n  \"GameBaseVariantId\": \"guid\",\n\n  // Whether this was a team-based game or not.\n  \"IsTeamGame\": \"boolean\",\n\n  // Unused for Custom matches. This will always be null.\n  \"SeasonId\": null,\n\n  // The variant of the game for this match. There are two sources of game variants:\n  // official game variants available via the Metadata API and user-generated game\n  // variants are available via the UGC API.\n  \"GameVariantResourceId\": {\n\n    // The resource type. 2 indicates game variant.\n    \"ResourceType\": 2,\n\n    // The ID of the game variant. Official game variants are available via the Metadata\n    // API.\n    \"ResourceId\": \"guid\",        \n\n    // The source of the game variant. Options are:\n    //   Unknown = 0,\n    //   User-generated = 1,\n    //   Official = 3.\n    \"OwnerType\": \"int\",\n\n    // The gamertag of the user that created the game variant if this is a user-generated\n    // game variant, or null otherwise. \n    \"Owner\": \"string\"\n  },\n\n  // The variant of the map for this match. There are two sources of map variants:\n  // official map variants available via the Metadata API and user-generated map variants\n  // available vai the UGC API.\n  \"MapVariantResourceId\": {\n\n    // The resource type. 3 indicates map variant.\n    \"ResourceType\": 3,\n\n    // The ID of the map variant. Official map variants are available via the Metadata\n    // API.\n    \"ResourceId\": \"guid\",\n\n    // The source of the map variant. Options are:\n    //   Unknown = 0,\n    //   User-generated = 1,\n    //   Official = 3.\n    \"OwnerType\": \"int\",\n\n    // The gamertag of the user that created the map variant if this is a user-generated\n    // map variant, or null otherwise. \n    \"Owner\": \"string\"\n  }\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2472679c-7312-48b8-8c2b-4f26233020b9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.190915Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Custom"
        }
      }
    }
  }, {
    "id" : "4ae5231c-8e75-47bd-9057-27990a5c93e5",
    "name" : "Halo 5 - Company Commendations - 503",
    "request" : {
      "urlPath" : "/h5/companies/z560/commendations",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "4ae5231c-8e75-47bd-9057-27990a5c93e5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.190823Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Company-Commendations"
        }
      }
    }
  }, {
    "id" : "fbee17c8-22c6-41a7-a302-ca8679876eb8",
    "name" : "Halo 5 - Company Commendations - 500",
    "request" : {
      "urlPath" : "/h5/companies/6ib2/commendations",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "fbee17c8-22c6-41a7-a302-ca8679876eb8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.190748Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Company-Commendations"
        }
      }
    }
  }, {
    "id" : "4ef8c40f-9026-476c-9ab4-4e2b2d7bdf34",
    "name" : "Halo 5 - Company Commendations - 404",
    "request" : {
      "urlPath" : "/h5/companies/qr11/commendations",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "4ef8c40f-9026-476c-9ab4-4e2b2d7bdf34",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.19066Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Company-Commendations"
        }
      }
    }
  }, {
    "id" : "f0d6e7f1-0efa-4a25-b730-e0a0b84356da",
    "name" : "Halo 5 - Company Commendations (application/json)",
    "request" : {
      "urlPath" : "/h5/companies/17t1/commendations",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // Internal use only. A set of related resource links.\n  \"Links\": null,\n\n  // The progress towards each Progressive Commendation. Progressive commendations have a\n  // series of increasingly difficult thresholds (levels) that must crossed to receive\n  // increasingly greater rewards. If no progress has been made for a progressive\n  // commendation, it is omitted from this list.\n  \"ProgressiveCommendations\": [\n    {\n      // The commendation ID. Commendations are available via the Metadata API.\n      \"Id\": \"guid\",\n\n      // The progress that has been made towards the commendation.\n      \"Progress\": \"int\",\n\n      // The levels that have been completed for the commendation.\n      \"CompletedLevels\": [\n        {\n          // The commendation level ID. Commendation Levels area available via the\n          // Metadata API.\n          \"Id\": \"guid\",\n\n          // The date the commendation level was completed. The time component of this\n          // date is always set to \"00:00:00\". This is expressed as an ISO 8601 combined\n          // Date and Time.\n          \"CompletedDateUtc\": {\n\n            \"ISO8601Date\": \"string\"\n          }\n        }\n      ]\n    }\n  ],\n\n  // The progress towards each Meta Commendation. Meta commendations are unlocked when\n  // one or more other commendation levels have been completed. If no progress has been\n  // made for a meta commendation, it is omitted from this list.\n  \"MetaCommendations\": [\n    {\n      // The commendation ID. Commendations are available via the Metadata API.\n      \"Id\": \"guid\",\n\n      // The required commendation IDs that have been completed that are associated with\n      // this meta commendation. In C#, this can be reassembled into a Guid in the\n      // following manner: new Guid((int)Data1, (short)Data2, (short)Data3,\n      // BitConverter.GetBytes((long)Data4)).\n      \"MetRequirements\": [\n        {\n          \"Data1\": \"int\",\n\n          \"Data2\": \"int\",\n\n          \"Data3\": \"int\",\n\n          \"Data4\": \"int\"\n        }\n      ]\n    }\n  ],\n\n  // The date when the commendations progress was last updated. The time component of\n  // this date is always set to \"00:00:00\". This is expressed as an ISO 8601 combined\n  // Date and Time.\n  \"LastUpdatedDateUtc\": {\n\n    \"ISO8601Date\": \"string\"\n  }\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f0d6e7f1-0efa-4a25-b730-e0a0b84356da",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.190578Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Company-Commendations"
        }
      }
    }
  }, {
    "id" : "82a7ac90-3505-475c-8638-d45e0efb38b8",
    "name" : "Halo 5 - Company - 503",
    "request" : {
      "urlPath" : "/h5/companies/d759",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "82a7ac90-3505-475c-8638-d45e0efb38b8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.190482Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Company"
        }
      }
    }
  }, {
    "id" : "0170d6c5-2b04-41fb-a9d6-d1f9fd0d7bdb",
    "name" : "Halo 5 - Company - 500",
    "request" : {
      "urlPath" : "/h5/companies/5h4d",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "0170d6c5-2b04-41fb-a9d6-d1f9fd0d7bdb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.190401Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Company"
        }
      }
    }
  }, {
    "id" : "448a8f4e-6b61-4a8d-aec9-c18e16361dae",
    "name" : "Halo 5 - Company - 404",
    "request" : {
      "urlPath" : "/h5/companies/y89t",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "448a8f4e-6b61-4a8d-aec9-c18e16361dae",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.19032Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Company"
        }
      }
    }
  }, {
    "id" : "9222876d-7efe-4b50-b5d7-a12c43c413ce",
    "name" : "Halo 5 - Company (application/json)",
    "request" : {
      "urlPath" : "/h5/companies/05v8",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // The ID of the company.\n  \"Id\": \"guid\",\n\n  // The name of the company.\n  \"Name\": \"string\",\n\n  // Information about the creator of the company. The creator might not necessarily be a\n  // member of the company.\n  \"Creator\": {\n\n    // The company creator's gamertag.\n    \"Gamertag\": \"string\",\n\n    // Internal use only. This will always be null.\n    \"Xuid\": null\n  },\n\n  // The highest number of users that were (or are) in this company.\n  \"PeakMembershipCount\": \"int\",\n\n  // Indicates the date that the company is suspended until. This is expressed as an ISO\n  // 8601 combined Date and Time.\n  \"SuspendedUntilDate\": {\n\n    \"ISO8601Date\": \"string\"\n  },\n\n  // The current members of the company. If the company does not have any members, this\n  // list will be empty. \n  \"Members\": [\n    {\n       // Information about the member. \n      \"Player\": {\n\n        // The member's gamertag.\n        \"Gamertag\": \"string\",\n\n        // Internal use only. This will always be null.\n        \"Xuid\": null\n      },\n\n      // The role of the member in the company. This field will contain one of the\n      // following values:\n      //   Member = 0,\n      //   Lieutenant = 1,\n      //   Leader = 2\n      \"Role\": \"int\",\n\n      // The date when the member was added to the company. The time component of this\n      // date is always set to \"00:00:00\". This is expressed as an ISO 8601 combined Date\n      // and Time.\n      \"JoinedDate\": {\n\n        \"ISO8601Date\": \"string\"\n      },\n\n      // The date when the member's role was last modified. The time component of this\n      // date is always set to \"00:00:00\". This is expressed as an ISO 8601 combined Date\n      // and Time.\n      \"LastModifiedDate\": {\n\n        \"ISO8601Date\": \"string\"\n    }\n  ],\n\n  // The date when the company was created. The time component of this date is always set\n  // to \"00:00:00\". This is expressed as an ISO 8601 combined Date and Time.\n  \"CreatedDate\": {\n\n    \"ISO8601Date\": \"string\"\n  },\n\n  // The date when the company was last modified. The time component of this date is\n  // always set to \"00:00:00\". This is expressed as an ISO 8601 combined Date and Time.\n  \"LastModifiedDate\": {\n\n    \"ISO8601Date\": \"string\"\n  }\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9222876d-7efe-4b50-b5d7-a12c43c413ce",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.190236Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Company"
        }
      }
    }
  }, {
    "id" : "fb95ad73-cfa7-4574-baa6-5585a31a907e",
    "name" : "Halo 5 - Match Result - Campaign - 503",
    "request" : {
      "urlPath" : "/h5/campaign/matches/40il",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "fb95ad73-cfa7-4574-baa6-5585a31a907e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.190142Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Campaign"
        }
      }
    }
  }, {
    "id" : "6f8d1384-99a2-40f8-9c15-29f1b8e2f9f3",
    "name" : "Halo 5 - Match Result - Campaign - 500",
    "request" : {
      "urlPath" : "/h5/campaign/matches/fl90",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "6f8d1384-99a2-40f8-9c15-29f1b8e2f9f3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.190063Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Campaign"
        }
      }
    }
  }, {
    "id" : "0a5492a2-28b8-4de2-8a5f-e9d96812648a",
    "name" : "Halo 5 - Match Result - Campaign - 404",
    "request" : {
      "urlPath" : "/h5/campaign/matches/unsw",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "0a5492a2-28b8-4de2-8a5f-e9d96812648a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.189986Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Campaign"
        }
      }
    }
  }, {
    "id" : "997d0239-f217-4b77-a595-8fbbfa56b62a",
    "name" : "Halo 5 - Match Result - Campaign (application/json)",
    "request" : {
      "urlPath" : "/h5/campaign/matches/44e6",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // A list of stats for each player who was present in the match.\n  \"PlayerStats\": [\n    {\n      // The player's biggest score due to a kill.\n      \"BiggestKillScore\": \"int\",\n\n      // The game base variant specific stats for this match. Flexible stats are\n      // available via the Metadata API.\n      \"FlexibleStats\": {\n\n        // The set of flexible stats that are derived from medal events.\n        \"MedalStatCounts\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The number of times this flexible stat was earned.\n            \"Count\": \"int\"\n          }\n        ],\n\n        // The set of flexible stats that are derived from impulse events.\n        \"ImpulseStatCounts\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The number of times this flexible stat was earned.\n            \"Count\": \"int\"\n          }\n        ],\n\n        // The set of flexible stats that are derived from medal time lapses.\n        \"MedalTimelapses\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The amount of time the flexible stat was earned for. This is expressed as\n            // an ISO 8601 Duration.\n            \"Timelapse\": \"string\"\n          }\n        ],        \n\n        // The set of flexible stats that are derived from impulse time lapses.\n        \"ImpulseTimelapses\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The amount of time the flexible stat was earned for. This is expressed as\n            // an ISO 8601 Duration.\n            \"Timelapse\": \"string\"\n          }\n        ]\n      },\n\n      // The player's score.\n      // Score can be a negative value. Unfortunately, this value is returned as an\n      // unsigned 32-bit integer. This means that if the score is -1, the score reported\n      // is 4,294,967,295.\n      \"Score\": \"uint32\",\n\n      // Unused.\n      \"CharacterIndex\": null,\n\n      \"Player\": {\n\n         // The player's gamertag.\n        \"Gamertag\": \"string\",\n\n        // Internal use only. This will always be null.\n        \"Xuid\": null\n      },\n\n      // The ID of the team that the player was on when the match ended. This value has\n      // no meaning in Campaign.\n      \"TeamId\": \"int\",\n\n      // The player's team-agnostic ranking.\n      \"Rank\": \"int\",\n\n      // Indicates whether the player was present in the match when it ended. \n      \"DNF\": \"boolean\",\n\n      // The player's average lifetime.\n      \"AvgLifeTimeOfPlayer\": \"string\",\n\n      // Internal use only. This will always be null.\n      \"PreMatchRatings\": null,\n\n      // Internal use only. This will always be null.\n      \"PostMatchRatings\": null,\n\n      // Unused for Campaign matches. This will usually be null or contain invalid data.\n      \"PlayerScore\": null,\n\n      // Total number of kills done by the player. This includes melee kills, shoulder\n      // bash kills and Spartan charge kills, all power weapons, AI kills and vehicle\n      // destructions. \n      \"TotalKills\": \"int\",\n\n      // Total number of headshots done by the player.\n      \"TotalHeadshots\": \"int\",\n\n      // Total weapon damage dealt by the player.\n      \"TotalWeaponDamage\": \"double\",\n\n      // Total number of shots fired by the player.\n      \"TotalShotsFired\": \"int\",\n\n      // Total number of shots landed by the player.\n      \"TotalShotsLanded\": \"int\",\n\n      // The weapon the player used to get the most kills this match.\n      \"WeaponWithMostKills\": {\n\n        \"WeaponId\": {\n\n          // The ID of the weapon. Weapons are available via the Metadata API.\n          \"StockId\": \"int\",\n\n          // Any attachments the weapon had.\n          \"Attachments\": [ \"int\" ]\n        },\n\n        // The number of shots fired for this weapon.\n        \"TotalShotsFired\": \"int\",\n\n        // The number of shots landed for this weapon.\n        \"TotalShotsLanded\": \"int\",\n\n        // The number of headshots for this weapon.\n        \"TotalHeadshots\": \"int\",\n\n        // The number of kills for this weapon.\n        \"TotalKills\": \"int\",\n\n        // The total damage dealt for this weapon.\n        \"TotalDamageDealt\": \"double\",\n\n        // The total possession time for this weapon. This is expressed as an ISO 8601\n        // Duration.\n        \"TotalPossessionTime\": \"string\"\n      },\n\n      // Total number of melee kills by the player.\n      \"TotalMeleeKills\": \"int\",\n\n      // Total melee damage dealt by the player.\n      \"TotalMeleeDamage\": \"double\",\n\n      // Total number of assassinations by the player.\n      \"TotalAssassinations\": \"int\",\n\n      // Total number of ground pound kills by the player.\n      \"TotalGroundPoundKills\": \"int\",\n\n      // Total ground pound damage dealt by the player.\n      \"TotalGroundPoundDamage\": \"double\",\n\n      // Total number of shoulder bash kills by the player.\n      \"TotalShoulderBashKills\": \"int\",\n\n      // Total shoulder bash damage dealt by the player.\n      \"TotalShoulderBashDamage\": \"double\",\n\n      // Total grenade damage dealt by the player.\n      \"TotalGrenadeDamage\": \"double\",\n\n      // Total number of power weapon kills by the player.\n      \"TotalPowerWeaponKills\": \"int\",\n\n      // Total power weapon damage dealt by the player.\n      \"TotalPowerWeaponDamage\": \"double\",\n\n      // Total number of power weapon grabs by the player.\n      \"TotalPowerWeaponGrabs\": \"int\",\n\n      // Total power weapon possession by the player. This is expressed as an ISO 8601\n      // Duration.\n      \"TotalPowerWeaponPossessionTime\": \"string\",\n\n      // Total number of deaths by the player.\n      \"TotalDeaths\": \"int\",\n\n      // Total number of assists by the player.\n      \"TotalAssists\": \"int\",\n\n      // Not used.\n      \"TotalGamesCompleted\": \"int\",\n\n      // Not used.\n      \"TotalGamesWon\": \"int\",\n\n      // Not used.\n      \"TotalGamesLost\": \"int\",\n\n      // Not used.\n      \"TotalGamesTied\": \"int\",\n\n      // Total timed played in this match by the player.\n      \"TotalTimePlayed\": \"string\",\n\n      // Total number of grenade kills by the player.\n      \"TotalGrenadeKills\": \"int\",\n\n      // The set of Medals earned by the player.\n      \"MedalAwards\": [\n        {\n          // The ID of the Medal. Medals are available via the Metadata API.\n          \"MedalId\": \"int\",\n\n          // The number of times the Medal was earned.\n          \"Count\": \"int\"\n        }\n      ], \n\n      // List of enemy vehicles destroyed. Vehicles are available via the Metadata API.\n      // Note: this stat measures enemy vehicles, not any vehicle destruction.\n      \"DestroyedEnemyVehicles\": [\n        {\n          // The enemy this entry references\n          \"Enemy\": {\n\n            // The Base ID for the enemy.\n            \"BaseId\": \"int\",\n\n            // The attachments (variants) for the enemy.\n            \"Attachments\": [\n              \"int\"\n            ]\n          },\n\n          // Total number of kills on the enemy by the player\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // List of enemies killed, per enemy type. Enemies are available via the Metadata\n      // API.\n      \"EnemyKills\": [\n        {\n          // The enemy this entry references\n          \"Enemy\": {\n\n            // The Base ID for the enemy.\n            \"BaseId\": \"int\",\n\n            // The attachments (variants) for the enemy.\n            \"Attachments\": [\n              \"int\"\n            ]\n          },\n\n          // Total number of kills on the enemy by the player\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The set of weapons (weapons and vehicles included) used by the player.\n      \"WeaponStats\": [\n        {\n          \"WeaponId\": {\n\n              // The ID of the weapon. Weapons are available via the Metadata API.\n            \"StockId\": \"int\",\n\n              // Any attachments the weapon had.\n            \"Attachments\": [ \n              \"int\" \n            ]\n          },\n\n            // The number of shots fired for this weapon.\n          \"TotalShotsFired\": \"int\",\n\n            // The number of shots landed for this weapon.\n          \"TotalShotsLanded\": \"int\",\n\n            // The number of headshots for this weapon.\n          \"TotalHeadshots\": \"int\",\n\n            // The number of kills for this weapon.\n          \"TotalKills\": \"int\",\n\n            // The total damage dealt for this weapon.\n          \"TotalDamageDealt\": \"double\",\n\n            // The total possession time for this weapon. This is expressed as an ISO\n            // 8601 Duration.\n          \"TotalPossessionTime\": \"string\"\n        }\n      ],\n\n      // The set of Impulses (invisible Medals) earned by the player.\n      \"Impulses\": [\n        {\n          // The ID of the Impulse. Impulses are available via the Metadata API.\n          \"Id\": \"int\",\n\n          // The number of times the Impulse was earned.\n          \"Count\": \"int\"\n        }\n      ],\n\n      // Total number of Spartan kills by the player.\n      \"TotalSpartanKills\": \"int\"\n    }\n  ],\n\n  // The total playthrough time of the mission as calculated by the game. This value is\n  // persisted in save files.\n  \"TotalMissionPlaythroughTime\": \"string\",\n\n  // The difficulty the mission was played at. Options are:\n  //   Easy = 0,\n  //   Normal = 1,\n  //   Heroic = 2,\n  //   Legendary = 3\n  \"Difficulty\": \"int\",\n\n  // The list of skulls used for the mission. Skulls are available via the Metadata API.\n  \"Skulls\": [\n    \"int\"\n  ],\n\n  // Indicates whether the mission was completed when the match ended.\n  \"MissionCompleted\": \"boolean\",\n\n  // Indicates if the match is completed or not. Some match details are available while\n  // the match is in-progress, but the behavior for incomplete matches in undefined.\n  \"IsMatchOver\": \"boolean\",\n\n  // The length of the match. This is expressed as an ISO 8601 Duration.\n  \"TotalDuration\": \"string\",\n\n  // Unused for Campaign matches. This will always be an empty guid.\n  \"MapVariantId\": \"guid\",\n\n  // Unused for Campaign matches. This will always be empty guid.\n  \"GameVariantId\": \"guid\",\n\n  // The playlist ID of the match. Playlists are available via the Metadata API.\n  \"PlaylistId\": \"guid\",\n\n  // The ID of the Campaign Mission. In Campaign, Map ID is overriden to be the Mission\n  // ID. Missions are available via the Metadata API.\n  \"MapId\": \"guid\",\n\n  // The ID of the game base variant for this match. Game base variants are available via\n  // the Metadata API.\n  \"GameBaseVariantId\": \"guid\",\n\n  // Whether this was a team-based game or not.\n  \"IsTeamGame\": \"boolean\",\n\n  // Unused for Campaign matches. This will always be null.\n  \"SeasonId\": null,\n\n  // Unused for Campaign matches. All fields within this structure will have their\n  // default value.\n  \"GameVariantResourceId\": {\n\n    \"ResourceType\": \"int\",\n\n    \"ResourceId\": \"guid\",\n\n    \"OwnerType\": \"int\",\n\n    \"Owner\": \"string\"\n  },\n\n  // Unused for Campaign matches. All fields within this structure will have their\n  // default value.\n  \"MapVariantResourceId\": {\n\n    \"ResourceType\": \"int\",\n\n    \"ResourceId\": \"guid\",\n\n    \"OwnerType\": \"int\",\n\n    \"Owner\": \"string\"\n  }\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "997d0239-f217-4b77-a595-8fbbfa56b62a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.189903Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Campaign"
        }
      }
    }
  }, {
    "id" : "41a3a860-5068-45f0-b626-1950ea092f8b",
    "name" : "Halo 5 - Match Result - Arena - 503",
    "request" : {
      "urlPath" : "/h5/arena/matches/79x1",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "41a3a860-5068-45f0-b626-1950ea092f8b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.189806Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Arena"
        }
      }
    }
  }, {
    "id" : "57a94699-87fc-4c96-a361-e550fe15313d",
    "name" : "Halo 5 - Match Result - Arena - 500",
    "request" : {
      "urlPath" : "/h5/arena/matches/5j70",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "57a94699-87fc-4c96-a361-e550fe15313d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.189721Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Arena"
        }
      }
    }
  }, {
    "id" : "87d4dda9-01e1-4995-80ee-07d8957db678",
    "name" : "Halo 5 - Match Result - Arena - 404",
    "request" : {
      "urlPath" : "/h5/arena/matches/fvza",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "87d4dda9-01e1-4995-80ee-07d8957db678",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.189634Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Arena"
        }
      }
    }
  }, {
    "id" : "24517023-aae4-4281-91d4-cda77b395d6a",
    "name" : "Halo 5 - Match Result - Arena (application/json)",
    "request" : {
      "urlPath" : "/h5/arena/matches/ez36",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // A list of stats for each player who was present in the match.\n  \"PlayerStats\": [\n    {\n      // The experience information for the player in this match.\n      \"XpInfo\": {\n\n        // The player's Spartan Rank before the match started.\n        \"PrevSpartanRank\": \"int\",\n\n        // The player's Spartan Rank after the match ended.\n        \"SpartanRank\": \"int\",\n\n        // The player's XP before the match started.\n        \"PrevTotalXP\": \"int\",\n\n        // The player's XP after the match ended.\n        \"TotalXP\": \"int\",\n\n        // The multiplier on the XP earned this match based on their Spartan Rank when\n        // the match ended.\n        \"SpartanRankMatchXPScalar\": \"double\",\n\n        // The portion of the XP the player earned this match that was based on how much\n        // time was spent in-match.\n        \"PlayerTimePerformanceXPAward\": \"int\",\n\n        // The XP awarded to the player based on how their team ranked when the match\n        // concluded.\n        \"PerformanceXP\": \"int\",\n\n        // The XP awarded to the player for their team-agnostic rank.\n        \"PlayerRankXPAward\": \"int\",\n\n        // The amount of XP the player earned if they played a boost card for this match,\n        // and the boost card criteria was met. This is a fixed amount of XP, not a\n        // multiplier.\n        \"BoostAmount\": \"int\",\n\n        // The amount of XP the player earned for finishing the match quickly.\n        \"MatchSpeedWinAmount\": \"int\",\n\n        // The amount of XP the player earned for completing objectives.\n        \"ObjectivesCompletedAmount\": \"int\"\n      },\n\n      // The Competitive Skill Ranking (CSR) of the player before the match started. If\n      // the player is still in measurement matches, this field is null. If the player\n      // finished the last measurement match this match, this field is still null.\n      \"PreviousCsr\": {\n\n        // The CSR tier. CSR Tiers are designation-specific and are available via the\n        // Metadata API.\n        \"Tier\": \"int\",\n\n        // The Designation of the CSR. CSR Designations are available via the Metadata\n        // API.\n        \"DesignationId\": \"int\",\n\n        // The CSR value. Zero for normal (Diamond and below) designations.\n        \"Csr\": \"int\",\n\n        // The percentage of progress towards the next CSR tier.\n        \"PercentToNextTier\": \"int\",\n\n        // If the CSR is Onyx or Champion, the player's leaderboard ranking. Null\n        // otherwise.\n        \"Rank\": \"int\"\n      },\n\n      // The Competitive Skill Ranking (CSR) of the player after the match ended. If the\n      // player is still in measurement matches, this field is null.\n      \"CurrentCsr\": {\n\n        // The CSR tier. CSR Tiers are designation-specific and are available via the\n        // Metadata API.\n        \"Tier\": \"int\",\n\n        // The Designation of the CSR. CSR Designations are available via the Metadata\n        // API.\n        \"DesignationId\": \"int\",\n\n        // The CSR value. Zero for normal (Diamond and below) designations.\n        \"Csr\": \"int\",\n\n        // The percentage of progress towards the next CSR tier.\n        \"PercentToNextTier\": \"int\",\n\n        // If the CSR is Onyx or Champion, the player's leaderboard ranking. Null\n        // otherwise.\n        \"Rank\": \"int\"\n      },\n\n      // The player's measurement matches left. If this field is greater than zero, then\n      // the player will not have a CSR yet. If the player finished the match, this match\n      // is included in this count.\n      \"MeasurementMatchesLeft\": \"int\",\n\n      // The set of rewards that the player got in this match.\n      \"RewardSets\": [\n        {\n          // The ID of the reward.\n          \"RewardSet\": \"guid\",\n\n          // The source of the reward. Options are:\n          //   None = 0,\n          //   Meta Commendation = 1,\n          //   Progress Commendation = 2,\n          //   Spartan Rank = 3\n          \"RewardSourceType\": \"int\",\n\n          // If the Reward Source is Spartan Rank, this value is set to the Spartan Rank\n          // the player acquired that led to this reward being granted. Note: Unlike the\n          // commendations fields in this structure, this is not the GUID to a Spartan\n          // Rank content item. That's because the Spartan Rank content item itself does\n          // not detail what specific Spartan Rank it pertains to - this information is\n          // derived from the list of Spartan Ranks as a whole. Spartan Ranks are\n          // available via the Metadata API.\n          \"SpartanRankSource\": \"int\",\n\n          // If the Reward Source is a Commendation, this is the ID of the level of the\n          // commendation that earned the reward.\n          \"CommendationLevelId\": \"guid\",\n\n          // If the Reward Source is a Meta Commendation or Progress Commendation, this\n          // is the ID of the Meta Commendation or Progress Commendation, respectively,\n          // that earned the reward. Commendations are available via the Metadata API.\n          \"CommendationSource\": \"guid\"\n        },\n\n      ],\n\n      // The number of times the player killed each opponent. If the player did not kill\n      // an opponent, there will be no entry for that opponent.\n      \"KilledOpponentDetails\": [\n        {\n          // The gamertag of the opponent that was killed.\n          \"GamerTag\": \"string\",\n\n          // The number of times that opponent was killed.\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The number of times the player was killed by each opponent. If the player was\n      // not killed by an opponent, there will be no entry for that opponent.\n      \"KilledByOpponentDetails\": [\n        {\n          // The gamertag of the opponent that killed the player.\n          \"GamerTag\": \"string\",\n\n          // The number of times the opponent killed the player.\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The game base variant specific stats for this match. Flexible stats are\n      // available via the Metadata API.\n      \"FlexibleStats\": {\n\n        // The set of flexible stats that are derived from medal events.\n        \"MedalStatCounts\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The number of times this flexible stat was earned.\n            \"Count\": \"int\"\n          }\n        ],\n\n        // The set of flexible stats that are derived from impulse events.\n        \"ImpulseStatCounts\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The number of times this flexible stat was earned.\n            \"Count\": \"int\"\n          }\n        ],\n\n        // The set of flexible stats that are derived from medal time lapses.\n        \"MedalTimelapses\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The amount of time the flexible stat was earned for. This is expressed as\n            // an ISO 8601 Duration.\n            \"Timelapse\": \"string\"\n          }\n        ],        \n\n        // The set of flexible stats that are derived from impulse time lapses.\n        \"ImpulseTimelapses\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The amount of time the flexible stat was earned for. This is expressed as\n            // an ISO 8601 Duration.\n            \"Timelapse\": \"string\"\n          }\n        ]\n      },\n\n      // Details on any credits the player may have earned from playing this match.\n      \"CreditsEarned\": {\n\n        // Indicates how the credits result was arrived at. Options are:\n        //   Credits Disabled In Playlist = 0,\n        //   Player Did Not Finish = 1,\n        //   Credits Earned = 2\n        // Credits Disabled In Playlist: TotalCreditsEarned is zero because this playlist\n        // has credits disabled.\n        // Player Did Not Finish: Credits are enabled in this playlist, but\n        // TotalCreditsEarned is zero because the player did not finish the match.\n        // Credits Earned: Credits are enabled in this playlist and the player completed\n        // the match, so the credits formula was successfully evaluated. The fields below\n        // provide the client with the values used in the formula. Note: That if we used\n        // one or more default values, we still return \"NormalResult\". The fields below\n        // will confirm the actual values used.\n        \"Result\": \"int\",\n\n        // The total number of credits the player earned from playing this match.\n        \"TotalCreditsEarned\": \"int\",\n\n        // The scalar applied to the credits earned based on the player's Spartan Rank.\n        \"SpartanRankModifier\": \"double\",\n\n        // The portion of credits earned due to the player's team-agnostic rank in the\n        // match.\n        \"PlayerRankAmount\": \"int\",\n\n        // The portion of credits earned due to the time the player played in the match.\n        \"TimePlayedAmount\": \"double\",\n\n        // The portion of credits earned due to the boost card the user applied\n        \"BoostAmount\": \"int\"\n      },\n\n      // The player's progress towards meta commendations. Commendations that had no\n      // progress earned this match will not be returned. \n      \"MetaCommendationDeltas\": [\n        {\n          // The commendation ID. Commendations are available via the Metadata API.\n          \"Id\": \"guid\",\n\n          // The progress the player had made towards the commendation level before the\n          // match. In C#, this can be reassembled into a Guid in the following manner:\n          // new Guid((int)Data1, (short)Data2, (short)Data3,\n          // BitConverter.GetBytes((long)Data4)).\n          \"PreviousMetRequirements\": [\n            {\n              \"Data1\": \"int\",\n\n              \"Data2\": \"int\",\n\n              \"Data3\": \"int\",\n\n              \"Data4\": \"int\"\n            }\n          ],\n\n          // The progress the player had made towards the commendation level after the\n          // match. In C#, this can be reassembled into a Guid in the following manner:\n          // new Guid((int)Data1, (short)Data2, (short)Data3,\n          // BitConverter.GetBytes((long)Data4)).\n          \"MetRequirements\": [\n            {\n              \"Data1\": \"int\",\n\n              \"Data2\": \"int\",\n\n              \"Data3\": \"int\",\n\n              \"Data4\": \"int\"\n            }\n          ]\n        }\n      ],\n\n      // The player's progress towards progressive commendations. Commendations that had\n      // no progress earned this match will not be returned.\n      \"ProgressiveCommendationDeltas\": [\n        {\n          // The commendation ID. Commendations are available via the Metadata API.\n          \"Id\": \"guid\",\n\n          // The progress the player had made towards the commendation level before the\n          // match.\n          \"PreviousProgress\": \"int\",\n\n          // The progress the player had made towards the commendation level after the\n          // match.\n          \"Progress\": \"int\"\n        }\n      ],\n\n      // Details on the boost card the user used in this match. If the user did not use a\n      // boost card this field will be null.\n      \"BoostData\": {\n\n        // The identifier of the boost card that was used. Boost cards are available via\n        // the Requisitions Metadata API.\n        \"DefinitionId\": \"guid\",\n\n        // Whether the card was consumed because its conditions were met. If not consumed\n        // the card is returned to the user's inventory.\n        \"CardConsumed\": \"bool\"\n      },\n\n      \"Player\": {\n\n         // The player's gamertag.\n        \"Gamertag\": \"string\",\n\n        // Internal use only. This will always be null.\n        \"Xuid\": null\n      },\n\n      // The ID of the team that the player was on when the match ended. \n      \"TeamId\": \"int\",\n\n      // The player's team-agnostic ranking.\n      \"Rank\": \"int\",\n\n      // Indicates whether the player was present in the match when it ended.\n      \"DNF\": \"boolean\",\n\n      // The player's average lifetime.\n      \"AvgLifeTimeOfPlayer\": \"string\",\n\n      // Internal use only. This will always be null.\n      \"PreMatchRatings\": null,\n\n      // Internal use only. This will always be null.\n      \"PostMatchRatings\": null,\n\n      // The Player's Score. This is not used by all Game Variants and may contain null\n      // or invalid data.\n      \"PlayerScore\": \"int\",\n\n      // Total number of kills done by the player. This includes melee kills, shoulder\n      // bash kills and Spartan charge kills, all power weapons, AI kills and vehicle\n      // destructions.       \n      \"TotalKills\": \"int\",\n\n      // Total number of headshots done by the player.\n      \"TotalHeadshots\": \"int\",\n\n      // Total weapon damage dealt by the player.\n      \"TotalWeaponDamage\": \"double\",\n\n      // Total number of shots fired by the player.\n      \"TotalShotsFired\": \"int\",\n\n      // Total number of shots landed by the player.\n      \"TotalShotsLanded\": \"int\",\n\n      // The weapon the player used to get the most kills this match.\n      \"WeaponWithMostKills\": {\n\n        \"WeaponId\": {\n\n          // The ID of the weapon. Weapons are available via the Metadata API.\n          \"StockId\": \"int\",\n\n          // Any attachments the weapon had.\n          \"Attachments\": [ \"int\" ]\n        },\n\n        // The number of shots fired for this weapon.\n        \"TotalShotsFired\": \"int\",\n\n        // The number of shots landed for this weapon.\n        \"TotalShotsLanded\": \"int\",\n\n        // The number of headshots for this weapon.\n        \"TotalHeadshots\": \"int\",\n\n        // The number of kills for this weapon.\n        \"TotalKills\": \"int\",\n\n        // The total damage dealt for this weapon.\n        \"TotalDamageDealt\": \"double\",\n\n        // The total possession time for this weapon. This is expressed as an ISO 8601\n        // Duration.\n        \"TotalPossessionTime\": \"string\"\n      },\n\n      // Total number of melee kills by the player.\n      \"TotalMeleeKills\": \"int\",\n\n      // Total melee damage dealt by the player.\n      \"TotalMeleeDamage\": \"double\",\n\n      // Total number of assassinations by the player.\n      \"TotalAssassinations\": \"int\",\n\n      // Total number of ground pound kills by the player.\n      \"TotalGroundPoundKills\": \"int\",\n\n      // Total ground pound damage dealt by the player.\n      \"TotalGroundPoundDamage\": \"double\",\n\n      // Total number of shoulder bash kills by the player.\n      \"TotalShoulderBashKills\": \"int\",\n\n      // Total shoulder bash damage dealt by the player.\n      \"TotalShoulderBashDamage\": \"double\",\n\n      // Total grenade damage dealt by the player.\n      \"TotalGrenadeDamage\": \"double\",\n\n      // Total number of power weapon kills by the player.\n      \"TotalPowerWeaponKills\": \"int\",\n\n      // Total power weapon damage dealt by the player.\n      \"TotalPowerWeaponDamage\": \"double\",\n\n      // Total number of power weapon grabs by the player.\n      \"TotalPowerWeaponGrabs\": \"int\",\n\n      // Total power weapon possession by the player. This is expressed as an ISO 8601\n      // Duration.\n      \"TotalPowerWeaponPossessionTime\": \"string\",\n\n      // Total number of deaths by the player.\n      \"TotalDeaths\": \"int\",\n\n      // Total number of assists by the player.\n      \"TotalAssists\": \"int\",\n\n      // Not used.\n      \"TotalGamesCompleted\": \"int\",\n\n      // Not used.\n      \"TotalGamesWon\": \"int\",\n\n      // Not used.\n      \"TotalGamesLost\": \"int\",\n\n      // Not used.\n      \"TotalGamesTied\": \"int\",\n\n      // Total timed played in this match by the player.\n      \"TotalTimePlayed\": \"string\",\n\n      // Total number of grenade kills by the player.\n      \"TotalGrenadeKills\": \"int\",\n\n      // The set of Medals earned by the player.\n      \"MedalAwards\": [\n        {\n          // The ID of the Medal. Medals are available via the Metadata API.\n          \"MedalId\": \"int\",\n\n          // The number of times the Medal was earned.\n          \"Count\": \"int\"\n        }\n      ], \n\n      // List of enemy vehicles destroyed. Vehicles are available via the Metadata API.\n      // Note: this stat measures enemy vehicles, not any vehicle destruction.\n      \"DestroyedEnemyVehicles\": [\n        {\n          // The enemy this entry references\n          \"Enemy\": {\n\n            // The Base ID for the enemy.\n            \"BaseId\": \"int\",\n\n            // The attachments (variants) for the enemy.\n            \"Attachments\": [\n              \"int\"\n            ]\n          },\n\n          // Total number of kills on the enemy by the player\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // List of enemies killed, per enemy type. Enemies are available via the Metadata\n      // API.\n      \"EnemyKills\": [\n        {\n          // The enemy this entry references\n          \"Enemy\": {\n\n            // The Base ID for the enemy.\n            \"BaseId\": \"int\",\n\n            // The attachments (variants) for the enemy.\n            \"Attachments\": [\n              \"int\"\n            ]\n          },\n\n          // Total number of kills on the enemy by the player\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The set of weapons (weapons and vehicles included) used by the player.\n      \"WeaponStats\": [\n        {\n          \"WeaponId\": {\n\n              // The ID of the weapon. Weapons are available via the Metadata API.\n            \"StockId\": \"int\",\n\n              // Any attachments the weapon had.\n            \"Attachments\": [ \n              \"int\" \n            ]\n          },\n\n          // The number of shots fired for this weapon.\n          \"TotalShotsFired\": \"int\",\n\n          // The number of shots landed for this weapon.\n          \"TotalShotsLanded\": \"int\",\n\n          // The number of headshots for this weapon.\n          \"TotalHeadshots\": \"int\",\n\n          // The number of kills for this weapon.\n          \"TotalKills\": \"int\",\n\n          // The total damage dealt for this weapon.\n          \"TotalDamageDealt\": \"double\",\n\n          // The total possession time for this weapon. This is expressed as an ISO 8601\n          // Duration.\n          \"TotalPossessionTime\": \"string\"\n        }\n      ],\n\n      // The set of Impulses (invisible Medals) earned by the player.\n      \"Impulses\": [\n        {\n          // The ID of the Impulse. Impulses are available via the Metadata API.\n          \"Id\": \"int\",\n\n          // The number of times the Impulse was earned.\n          \"Count\": \"int\"\n        }\n      ],\n\n      // Total number of Spartan kills by the player.\n      \"TotalSpartanKills\": \"int\"\n    }\n  ],\n\n  // A list of stats for each team who in the match. Note that in Free For All modes,\n  // there is an entry for every player.\n  \"TeamStats\": [\n    {\n      // The ID for the team.\n      \"TeamId\": \"int\",\n\n      // The team's score at the end of the match. The way the score is determined is\n      // based off the game base variant being played: \n      //   Breakout = number of rounds won,\n      //   CTF = number of flag captures,\n      //   Slayer = number of kills,\n      //   Strongholds = number of points,\n      //   Warzone = number of points.\n      // Score can be a negative value. Unfortunately, this value is returned as an\n      // unsigned 32-bit integer. This means that if the score is -1, the score reported\n      // is 4,294,967,295.\n      \"Score\": \"uint32\",\n\n      // The team's rank at the end of the match.\n      \"Rank\": \"int\",\n\n      // The set of round stats for the team.\n      \"RoundStats\": [\n        {\n          // The round number this entry pertains to.\n          \"RoundNumber\": \"int\",\n\n          // The end rank for the team this round.\n          \"Rank\": \"int\",\n\n          // The end score for the team this round.\n          // Score can be a negative value. Unfortunately, this value is returned as an\n          // unsigned 32-bit integer. This means that if the score is -1, the score\n          // reported is 4,294,967,295.\n          \"Score\": \"uint32\",\n\n        }\n      ]\n    }\n  ],\n\n  // Indicates if the match is completed or not. Some match details are available while\n  // the match is in-progress, but the behavior for incomplete matches in undefined.\n  \"IsMatchOver\": \"boolean\",\n\n  // The length of the match. This is expressed as an ISO 8601 Duration.\n  \"TotalDuration\": \"string\",\n\n  // The variant of the map for this match. Map variants are available via the Metadata\n  // API. More information is available in MapVariantResourceId.\n  \"MapVariantId\": \"guid\",\n\n  // The variant of the game for this match. Game variants are available via the Metadata\n  // API. More information is available in GameVariantResourceId.\n  \"GameVariantId\": \"guid\",\n\n  // The playlist ID of the match. Playlists are available via the Metadata API.\n  \"PlaylistId\": \"guid\",\n\n  // The ID of the base map for this match. Maps are available via the Metadata API.\n  \"MapId\": \"guid\",\n\n  // The ID of the game base variant for this match. Game base variants are available via\n  // the Metadata API.\n  \"GameBaseVariantId\": \"guid\",\n\n  // Whether this was a team-based game or not.\n  \"IsTeamGame\": \"boolean\",\n\n  // The ID of the season for this match if it was played in a seasonal playlist. Null if\n  // the match was played in a non-seasonal playlist.\n  \"SeasonId\": \"guid\",\n\n  // The variant of the game for this match. There are two sources of game variants:\n  // official game variants available via the Metadata API and user-generated game\n  // variants available via the UGC API.\n  \"GameVariantResourceId\": {\n\n    // The resource type. 2 indicates game variant.\n    \"ResourceType\": 2,\n\n    // The ID of the game variant. Official game variants are available via the Metadata\n    // API.\n    \"ResourceId\": \"guid\",        \n\n    // The source of the game variant. Options are:\n    //   Unknown = 0,\n    //   User-generated = 1,\n    //   Official = 3.\n    \"OwnerType\": \"int\",\n\n    // The gamertag of the user that created the game variant if this is a user-generated\n    // game variant, or null otherwise. \n    \"Owner\": \"string\"\n  },\n\n  // The variant of the map for this match. There are two sources of map variants:\n  // official map variants available via the Metadata API and user-generated map variants\n  // available via the UGC API.\n  \"MapVariantResourceId\": {\n\n    // The resource type. 3 indicates map variant.\n    \"ResourceType\": 3,\n\n    // The ID of the map variant. Official map variants are available via the Metadata\n    // API.\n    \"ResourceId\": \"guid\",\n\n    // The source of the map variant. Options are:\n    //   Unknown = 0,\n    //   User-generated = 1,\n    //   Official = 3.\n    \"OwnerType\": \"int\",\n\n    // The gamertag of the user that created the map variant if this is a user-generated\n    // map variant, or null otherwise. \n    \"Owner\": \"string\"\n  }\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "24517023-aae4-4281-91d4-cda77b395d6a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:52.189511Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Arena"
        }
      }
    }
  } ]
}