{
  "mappings" : [ {
    "id" : "b45b002b-0fcb-360e-8f06-49cf69f1755f",
    "name" : "Halo Wars 2 - Player XPs - 503",
    "request" : {
      "urlPath" : "/hw2/xp",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "zqq7fbipw3ysrw8egtry5de751fen"
        }
      }
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "b45b002b-0fcb-360e-8f06-49cf69f1755f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-XPs"
        }
      }
    },
    "insertionIndex" : 0
  }, {
    "id" : "22e8d740-fb94-3b91-9cf9-cb8d857a79fb",
    "name" : "Halo Wars 2 - Player XPs - 500",
    "request" : {
      "urlPath" : "/hw2/xp",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "0695628mm2p9yusdfpvf8sr3ch6nbh8y9uopcivuoilhljpwfr0ubcywqe"
        }
      }
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "22e8d740-fb94-3b91-9cf9-cb8d857a79fb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-XPs"
        }
      }
    },
    "insertionIndex" : 1
  }, {
    "id" : "d75752bf-3982-3893-8fd4-c756e1e9da18",
    "name" : "Halo Wars 2 - Player XPs (application/json)",
    "request" : {
      "urlPath" : "/hw2/xp",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      },
      "queryParameters" : {
        "players" : {
          "equalTo" : "03c7r6n163qyq5nxym3t9sg5h8o6wu6bf8fl93c9t3jy508j2p3q9mj8xb1leavp6vo52uqw22g6nqau5l6clc1lrmzz14git745irh3vwguggu1xbi6p2dn0762xz"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // Set of results. One per player.\n  \"Results\": [\n    {\n      // The player's gamertag.\n      \"Id\": \"string\",\n\n      // The result of the query for the player. This field will contain one of the\n      // following values:\n      //   Success = 0,\n      //   NotFound = 1,\n      //   ServiceFailure = 2,\n      //   ServiceUnavailable = 3\n      // It is possible for different requests from the batch to succeed and fail\n      // independently.\n      \"ResultCode\": \"int\",\n\n      \"Result\": {\n\n        // Amount of XP that the player has earned in multiplayer play. This includes\n        // both campaign earned by gameplay and challenges.\n        \"MultiplayerXp\": \"int\",\n\n        // Amount of XP that the player has earned in campaign play. This includes XP\n        // from solo and cooperative modes.\n        \"CampaignXp\": \"int\",\n\n        // Total amount of XP that the player has earned from all sources.\n        \"TotalXp\": \"int\",\n\n        // Date and Time when the player's XP was last updated. This is expressed as an\n        // ISO 8601 combined Date and Time.\n        \"LastUpdatedDateUtc\": {\n\n          \"ISO8601Date\": \"string\"\n        },\n\n        // Current rank of the player.\n        \"SpartanRankId\": \"guid\"\n      }\n    }\n  ],\n\n  // Internal use.\n  \"Links\": { }\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d75752bf-3982-3893-8fd4-c756e1e9da18",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-XPs"
        }
      }
    },
    "insertionIndex" : 2
  }, {
    "id" : "ec777da3-f48a-3470-8086-0513530a9001",
    "name" : "Halo Wars 2 - Player Playlist Ratings - 503",
    "request" : {
      "urlPath" : "/hw2/playlist/xc84/rating",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "x4xll4byji3x3f1tyoc1xx9f7vq1aeexkteqgjg5aefax043sqkzii8xj1mk3tdnetgmejc4ajd0vqje566zbhnl8mmtjfi8"
        }
      }
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "ec777da3-f48a-3470-8086-0513530a9001",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Playlist-Ratings"
        }
      }
    },
    "insertionIndex" : 3
  }, {
    "id" : "74411b08-a95f-3af2-a90f-f89cad22ec6a",
    "name" : "Halo Wars 2 - Player Playlist Ratings - 500",
    "request" : {
      "urlPath" : "/hw2/playlist/699n/rating",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "wricqqxbl5fdn3c518ryohdh1ffm76e2z2zzirycf2mj7oiy21ce4l7b19s4gedquz9xbkx7e212dfblt70fvd4fdo9ccddpqwpatzu7uappd0bq2qgo10egrl624xat2ye9g2xkkl9r3zf2dy8fupbf98cqcosuigxonrivz1u1ucxk7i7ihq"
        }
      }
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "74411b08-a95f-3af2-a90f-f89cad22ec6a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Playlist-Ratings"
        }
      }
    },
    "insertionIndex" : 4
  }, {
    "id" : "ea256a0b-b3f2-3aac-bd1c-a280473d813c",
    "name" : "Halo Wars 2 - Player Playlist Ratings (application/json)",
    "request" : {
      "urlPath" : "/hw2/playlist/um4o/rating",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      },
      "queryParameters" : {
        "players" : {
          "equalTo" : "bnbqhhuruijd4vpbiffy4ij3z10rfatdph7ps9t3cwj7mx8orslgslnr7rg00gn8j5jqqw7wminhkcyd6lop498j9u7e74j44pa1iyvki75h4ygivbxz5a4kij11ii8m56yes7dfx4owwl95dy4khltx2phdfmqo9rdds36j2l3xbfusxpxx28n"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // Set of results. One per player.\n  \"Results\": [\n    {\n      // The player's gamertag.\n      \"Id\": \"string\",\n\n      // The result of the query for the player. This field will contain one of the\n      // following values:\n      //   Success = 0,\n      //   NotFound = 1,\n      //   ServiceFailure = 2,\n      //   ServiceUnavailable = 3\n      // It is possible for different requests from the batch to succeed and fail\n      // independently.\n      \"ResultCode\": \"int\",\n\n      \"Result\": {\n\n        // Internal use.\n        \"Mmr\": {\n\n          \"Rating\": \"double\",\n\n          \"Variance\": \"double\",\n\n          // Unused.\n          \"LastModifiedDate\": {\n\n            \"ISO8601Date\": \"\"\n          }\n        },\n\n        // Competitive Skill Ranking (CSR) of the player. If this is not a ranked\n        // playlist, this will be null.\n        \"Csr\": {\n\n          // CSR Tier. CSR Tiers are designation-specific. If the player is still in\n          // measurement matches, this field will be null. CSR Tiers are referenced by\n          // CSR Designations, which are available via the Metadata API.\n          \"Tier\": \"int\",\n\n          // CSR Designation. If the player is still in measurement matches, this field\n          // will be null. CSR Designations are available via the Metadata API.\n          \"Designation\": \"int\",\n\n          // Raw CSR value. If the player is still in measurement matches, this field\n          // will be null. If the player is not in a high enough designation, this will\n          // be zero.\n          \"Raw\": \"int\",\n\n          // Percentage of progress towards the next CSR tier. If the player is still in\n          // measurement matches, this field will be null.\n          \"PercentToNextTier\": \"int\",\n\n          // Number of measurement matches remaining until the player earns a CSR. If\n          // this field is greater than zero, the player does not have a CSR yet and the\n          // other components of the CSR will be null.\n          \"MeasurementMatchesRemaining\": \"int\",\n\n          // Player's ranking on the CSR leaderboard. If the player is still in\n          // measurement matches, this field will be null. If the player is not in a high\n          // enough designation, this will be zero.\n          \"Rank\": \"int\"\n        }\n      }\n    }\n  ],\n\n  // Internal use.\n  \"Links\": { }\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ea256a0b-b3f2-3aac-bd1c-a280473d813c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Playlist-Ratings"
        }
      }
    },
    "insertionIndex" : 5
  }, {
    "id" : "d7d7a391-0b43-3600-8154-9b1a2157c028",
    "name" : "Halo Wars 2 - Player Season Stats Summary - 503",
    "request" : {
      "urlPath" : "/hw2/players/x3emu91d14lufztwrazjq331z483pm4ffdmmdfbvffaffuh0voag42e0poyu2u7wa8k27fvau8/stats/seasons/cnj7",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "d7d7a391-0b43-3600-8154-9b1a2157c028",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Season-Stats-Summary"
        }
      }
    },
    "insertionIndex" : 6
  }, {
    "id" : "d03ae392-e7f6-3f28-95d1-bea03e0efb8a",
    "name" : "Halo Wars 2 - Player Season Stats Summary - 500",
    "request" : {
      "urlPath" : "/hw2/players/ow1gide/stats/seasons/v5tr",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "d03ae392-e7f6-3f28-95d1-bea03e0efb8a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Season-Stats-Summary"
        }
      }
    },
    "insertionIndex" : 7
  }, {
    "id" : "389b43fe-0df3-3d71-b169-393458b26941",
    "name" : "Halo Wars 2 - Player Season Stats Summary - 404",
    "request" : {
      "urlPath" : "/hw2/players/614eak2g9z7zdcw1eyn5p744ogvnflatg3xl3c48cf81595dh00ez20715pecn/stats/seasons/8480",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "389b43fe-0df3-3d71-b169-393458b26941",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Season-Stats-Summary"
        }
      }
    },
    "insertionIndex" : 8
  }, {
    "id" : "d1ef7de9-6d71-35c0-be8b-aaefa6c2be5b",
    "name" : "Halo Wars 2 - Player Season Stats Summary (application/json)",
    "request" : {
      "urlPath" : "/hw2/players/39qllgj6okewqvh9pre23o4pzjha26uhdhbojy1zbd62i2hmzzbj3faaw98q13r7gmx7hb72vdp12i56wnbygzt79cvbjmg21md8bnemq0a/stats/seasons/4m08",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // ID of the Season that this summary information is for. Seasons are available via the\n  // Metadata API.\n  \"SeasonId\": \"guid\",\n\n  // Summary of activity across all playlists that were part of the season (and therefore\n  // ranked). Stats from gameplay in social playlists during the timeframe of the season\n  // are not provided. Playlists that the player has never played in are omitted from\n  // this collection.\n  \"RankedPlaylistStats\": [\n    {\n      // Playlist ID that this entry summarizes. If this entry summarizes Custom matches,\n      // this will be null. Playlists are available via the Metadata API.\n      \"PlaylistId\": \"guid\",\n\n      // When summarizing a set of matches that took place in a common playlist, this\n      // field provides the current classification. This field will contain one of the\n      // following values:\n      //   General Stats = 0,\n      //   Blitz Stats = 1,\n      //   Firefight Stats = 2\n      // If this entry summarizes Custom matches, this will be null.\n      \"PlaylistClassification\": \"int\",\n\n      // Highest Competitive Skill Ranking (CSR) achieved by the player in the playlist.\n      // If the player has never finished the measurement matches on this playlist, this\n      // field will be null. If this entry does not summarize ranked matches, this will\n      // be null.\n      \"HighestCsr\": {\n\n        // CSR Tier. CSR Tiers are designation-specific. If the player is still in\n        // measurement matches, this field will be null. CSR Tiers are referenced by CSR\n        // Designations, which are available via the Metadata API.\n        \"Tier\": \"int\",\n\n        // CSR Designation. If the player is still in measurement matches, this field\n        // will be null. CSR Designations are available via the Metadata API.\n        \"Designation\": \"int\",\n\n        // Raw CSR value. If the player is still in measurement matches, this field will\n        // be null. If the player is not in a high enough designation, this will be zero.\n        \"Raw\": \"int\",\n\n        // Percentage of progress towards the next CSR tier. If the player is still in\n        // measurement matches, this field will be null.\n        \"PercentToNextTier\": \"int\",\n\n        // Number of measurement matches remaining until the player earns a CSR. If this\n        // field is greater than zero, the player does not have a CSR yet and the other\n        // components of the CSR will be null.\n        \"MeasurementMatchesRemaining\": \"int\",\n\n        // Player's ranking on the CSR leaderboard. If the player is still in measurement\n        // matches, this field will be null. If the player is not in a high enough\n        // designation, this will be zero.\n        \"Rank\": \"int\"\n      },\n\n      // Total amount of time the player spent in matches. This includes time spent\n      // observing the match after being eliminated. This is expressed as an ISO 8601\n      // Duration.\n      \"TotalTimePlayed\": \"string\",\n\n      // Total number of matches that the player participated in.\n      \"TotalMatchesStarted\": \"int\",\n\n      // Total number of matches where the player was present until the match ended.\n      \"TotalMatchesCompleted\": \"int\",\n\n      // Total number of matches that the player won.\n      \"TotalMatchesWon\": \"int\",\n\n      // Total number of matches that the player lost.\n      \"TotalMatchesLost\": \"int\",\n\n      // Total number of times the player has captured a point.\n      \"TotalPointCaptures\": \"int\",\n\n      // Total number of units trained by the player.\n      \"TotalUnitsBuilt\": \"int\",\n\n      // Total number of units trained by the player that were later destroyed.\n      \"TotalUnitsLost\": \"int\",\n\n      // Total number of units that the player participated in destroying.\n      \"TotalUnitsDestroyed\": \"int\",\n\n      // Total number of times the player played a card, if applicable; otherwise, 0.\n      \"TotalCardPlays\": \"int\",\n\n      // Highest wave completed while the player was still present in a match, if\n      // applicable; otherwise, 0.\n      \"HighestWaveCompleted\": \"int\",\n\n      // Summary for all leaders used by the player.\n      \"LeaderStats\": {\n\n        // Leader ID. Leaders are available via the Metadata API.\n        \"string\": {\n\n          // Total amount of time the player spent in matches with this leader. This\n          // includes time spent observing the match after being eliminated. This is\n          // expressed as an ISO 8601 Duration.\n          \"TotalTimePlayed\": \"string\",\n\n          // Total number of matches that the player participated in with this leader.\n          \"TotalMatchesStarted\": \"int\",\n\n          // Total number of matches where the player was present until the match ended\n          // with this leader.\n          \"TotalMatchesCompleted\": \"int\",\n\n          // Total number of matches that the player won with this leader.\n          \"TotalMatchesWon\": \"int\",\n\n          // Total number of matches that the player lost with this leader.\n          \"TotalMatchesLost\": \"int\",\n\n          // Total number of times the player used this leader's active leader power.\n          \"TotalLeaderPowersCast\": \"int\"\n        }\n      },\n\n      // Game Mode that this entry summarizes. If this entry is not summarizing a game\n      // mode pivot, this field will be null. Otherwise, this field will contain one of\n      // the following values:\n      //   Unknown = 0,\n      //   CampaignSolo = 1,\n      //   CampaignCooperative = 2,\n      //   Deathmatch = 3,\n      //   Domination = 4,\n      //   Strongholds = 5,\n      //   Blitz = 6,\n      //   Firefight = 7,\n      //   NormalTutorial = 8,\n      //   BlitzTutorial = 9,\n      //   TerminusFirefight = 10\n      \"GameMode\": \"int\",\n\n      // Highest objective score that the player has ever achieved in matches summarized\n      // by this entry. This field is a mapping from the team size to the highest\n      // objective score achieved.\n      \"HighestObjectiveScoreByTeamSize\": {\n\n        \"int\": \"int\",\n\n      }\n    }\n  ]\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d1ef7de9-6d71-35c0-be8b-aaefa6c2be5b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Season-Stats-Summary"
        }
      }
    },
    "insertionIndex" : 9
  }, {
    "id" : "06e3fe4e-859c-308a-a969-105d0e2b89ba",
    "name" : "Halo Wars 2 - Player Stats Summary - 503",
    "request" : {
      "urlPath" : "/hw2/players/t0ihb5kkslggxbh33fdizxoakd3o6hvmv09jucz6pss25kkf0tvkd4vbj3yh1lnvcwiaop76dzv48/stats",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "06e3fe4e-859c-308a-a969-105d0e2b89ba",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Stats-Summary"
        }
      }
    },
    "insertionIndex" : 10
  }, {
    "id" : "bf44a79d-720e-3c67-a9a7-68d0f264f3c8",
    "name" : "Halo Wars 2 - Player Stats Summary - 500",
    "request" : {
      "urlPath" : "/hw2/players/7syxt9peodi2572jxr6g7kxi1ch9wn6e3fkdgvuqbkpcttsf1or1mf35030bd5e38/stats",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "bf44a79d-720e-3c67-a9a7-68d0f264f3c8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Stats-Summary"
        }
      }
    },
    "insertionIndex" : 11
  }, {
    "id" : "b891fc8f-336e-3f09-861f-35479387e625",
    "name" : "Halo Wars 2 - Player Stats Summary - 404",
    "request" : {
      "urlPath" : "/hw2/players/4j0vxqtjnds5ypjm1vvlcuig7fyocxi6c1b49aleraom916wbgm8rz/stats",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "b891fc8f-336e-3f09-861f-35479387e625",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Stats-Summary"
        }
      }
    },
    "insertionIndex" : 12
  }, {
    "id" : "80ab0472-c172-3e8e-9335-c9dcc3408526",
    "name" : "Halo Wars 2 - Player Stats Summary (application/json)",
    "request" : {
      "urlPath" : "/hw2/players/npf69ihnid591b3dp7e1obej4n/stats",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "//\n// Main Response\n//\n{\n  // Summary of activity across all Custom matches that the player has participated in.\n  \"CustomSummary\": {\n\n    // Summary of activity across all Skirmish matches (player(s) vs. AI(s)) that the\n    // player has participated in.\n    \"SkirmishStats\": {\n\n      // Summary of activity across all Skirmish matches that contained only the player.\n      // This will contain a single Summary. The Summary contract is documented in detail\n      // below the documentation for the Main Response.\n      \"SinglePlayerStats\": \"Summary\",\n\n      // Summary of activity across all Skirmish matches that contained two or more human\n      // players that the player has participated in. This will contain a single Summary.\n      // The Summary contract is documented in detail below the documentation for the\n      // Main Response.\n      \"MultiplayerStats\": \"Summary\",\n\n      // Summary of activity across all Skirmish matches that contained only the player,\n      // separated by game mode. This will contain multiple Summary entries, one for each\n      // game mode. The Summary contract is documented in detail below the documentation\n      // for the Main Response.\n      \"SinglePlayerModeStats\": [ \"Summary\" ],\n\n      // Summary of activity across all Skirmish matches that contained two or more human\n      // players that the player has participated in. This will contain multiple Summary\n      // entries, one for each game mode. The Summary contract is documented in detail\n      // below the documentation for the Main Response.\n      \"MultiplayerModeStats\": [ \"Summary\" ],\n\n    },\n\n    // Summary of activity across all non-Skirmish matches that the player has\n    // participated in. This will contain a single Summary. The Summary contract is\n    // documented in detail below the documentation for the Main Response.\n    \"CustomStats\": \"Summary\",\n\n    // Summary of activity across all non-Skirmish matches that the player has\n    // participated in, separated by game mode. This will contain multiple Summary\n    // entries, one for each game mode. The Summary contract is documented in detail\n    // below the documentation for the Main Response.\n    \"CustomModeStats\": [ \"Summary\" ]\n  },\n\n  // Summary across all matchmade matches that the player has participated in. This\n  // includes both social and ranked matches, matches from all seasons, and matches from\n  // all game modes.\n  \"MatchmakingSummary\": {\n\n    // Summary across all matches in social (unranked) playlists. This may include\n    // summary information from playlists that are no longer playable. Playlists that the\n    // player has never played in are omitted from this collection. Note that is possible\n    // for a playlist to go between social and ranked. Consumers of this endpoint should\n    // be careful about the possibility that a playlist appears in both collections. This\n    // will contain a Summary entry for each playlist. The Summary contract is documented\n    // in detail below the documentation for the Main Response.\n    \"SocialPlaylistStats\": [ \"Summary\" ],\n\n    // Summary across all matches in ranked playlists. This may include summary\n    // information from playlists that are no longer playable. Playlists that the player\n    // has never played in are omitted from this collection. Note that is possible for a\n    // playlist to go between social and ranked. Consumers of this endpoint should be\n    // careful about the possibility that a playlist appears in both collections. The\n    // Summary contract is documented in detail below the documentation for the Main\n    // Response.\n    \"RankedPlaylistStats\": [ \"Summary\" ],\n\n    // Summary across all matches in social (unranked) playlists, separated by game mode.\n    // This may include summary information from playlists that are no longer playable.\n    // Playlists that the player has never played in are omitted from this collection.\n    // Note that is possible for a playlist to go between social and ranked. Consumers of\n    // this endpoint should be careful about the possibility that a playlist appears in\n    // both collections. This will contain multiple Summary entries, one for each\n    // playlist and game mode combination. The Summary contract is documented in detail\n    // below the documentation for the Main Response.\n    \"SocialModeStats\": [ \"Summary\" ],\n\n    // Summary across all matches in ranked playlists, separated by game mode. This may\n    // include summary information from playlists that are no longer playable. Playlists\n    // that the player has never played in are omitted from this collection. Note that is\n    // possible for a playlist to go between social and ranked. Consumers of this\n    // endpoint should be careful about the possibility that a playlist appears in both\n    // collections. This will contain multiple Summary entries, one for each playlist and\n    // game mode combination. The Summary contract is documented in detail below the\n    // documentation for the Main Response.\n    \"RankedModeStats\": [ \"Summary\" ],\n\n  }\n}\n\n//\n// Summary\n//\n{\n  // Playlist ID that this entry summarizes. If this entry summarizes Custom matches,\n  // this will be null. Playlists are available via the Metadata API.\n  \"PlaylistId\": \"guid\",\n\n  // When summarizing a set of matches that took place in a common playlist, this field\n  // provides the current classification. This field will contain one of the following\n  // values:\n  //   General Stats = 0,\n  //   Blitz Stats = 1,\n  //   Firefight Stats = 2\n  // If this entry summarizes Custom matches, this will be null.\n  \"PlaylistClassification\": \"int\",\n\n  // Highest Competitive Skill Ranking (CSR) achieved by the player in the playlist. If\n  // the player has never finished the measurement matches on this playlist, this field\n  // will be null. If this entry does not summarize ranked matches, this will be null.\n  \"HighestCsr\": {\n\n    // CSR Tier. CSR Tiers are designation-specific. If the player is still in\n    // measurement matches, this field will be null. CSR Tiers are referenced by CSR\n    // Designations, which are available via the Metadata API.\n    \"Tier\": \"int\",\n\n    // CSR Designation. If the player is still in measurement matches, this field will be\n    // null. CSR Designations are available via the Metadata API.\n    \"Designation\": \"int\",\n\n    // Raw CSR value. If the player is still in measurement matches, this field will be\n    // null. If the player is not in a high enough designation, this will be zero.\n    \"Raw\": \"int\",\n\n    // Percentage of progress towards the next CSR tier. If the player is still in\n    // measurement matches, this field will be null.\n    \"PercentToNextTier\": \"int\",\n\n    // Number of measurement matches remaining until the player earns a CSR. If this\n    // field is greater than zero, the player does not have a CSR yet and the other\n    // components of the CSR will be null.\n    \"MeasurementMatchesRemaining\": \"int\",\n\n    // Player's ranking on the CSR leaderboard. If the player is still in measurement\n    // matches, this field will be null. If the player is not in a high enough\n    // designation, this will be zero.\n    \"Rank\": \"int\"\n  },\n\n  // Total amount of time the player spent in matches. This includes time spent observing\n  // the match after being eliminated. This is expressed as an ISO 8601 Duration.\n  \"TotalTimePlayed\": \"string\",\n\n  // Total number of matches that the player participated in.\n  \"TotalMatchesStarted\": \"int\",\n\n  // Total number of matches where the player was present until the match ended.\n  \"TotalMatchesCompleted\": \"int\",\n\n  // Total number of matches that the player won.\n  \"TotalMatchesWon\": \"int\",\n\n  // Total number of matches that the player lost.\n  \"TotalMatchesLost\": \"int\",\n\n  // Total number of times the player has captured a point.\n  \"TotalPointCaptures\": \"int\",\n\n  // Total number of units trained by the player.\n  \"TotalUnitsBuilt\": \"int\",\n\n  // Total number of units trained by the player that were later destroyed.\n  \"TotalUnitsLost\": \"int\",\n\n  // Total number of units that the player participated in destroying.\n  \"TotalUnitsDestroyed\": \"int\",\n\n  // Total number of times the player played a card, if applicable; otherwise, 0.\n  \"TotalCardPlays\": \"int\",\n\n  // Highest wave completed while the player was still present in a match, if applicable;\n  // otherwise, 0.\n  \"HighestWaveCompleted\": \"int\",\n\n  // Summary for all leaders used by the player.\n  \"LeaderStats\": {\n\n    // Leader ID. Leaders are available via the Metadata API.\n    \"string\": {\n\n      // Total amount of time the player spent in matches with this leader. This includes\n      // time spent observing the match after being eliminated. This is expressed as an\n      // ISO 8601 Duration.\n      \"TotalTimePlayed\": \"string\",\n\n      // Total number of matches that the player participated in with this leader.\n      \"TotalMatchesStarted\": \"int\",\n\n      // Total number of matches where the player was present until the match ended with\n      // this leader.\n      \"TotalMatchesCompleted\": \"int\",\n\n      // Total number of matches that the player won with this leader.\n      \"TotalMatchesWon\": \"int\",\n\n      // Total number of matches that the player lost with this leader.\n      \"TotalMatchesLost\": \"int\",\n\n      // Total number of times the player used this leader's active leader power.\n      \"TotalLeaderPowersCast\": \"int\"\n    }\n  },\n\n  // Game mode that this entry summarizes. If this entry is not summarizing a game mode\n  // pivot, this field will be null. Otherwise, this field will contain one of the\n  // following values:\n  //   Unknown = 0,\n  //   CampaignSolo = 1,\n  //   CampaignCooperative = 2,\n  //   Deathmatch = 3,\n  //   Domination = 4,\n  //   Strongholds = 5,\n  //   Blitz = 6,\n  //   Firefight = 7,\n  //   NormalTutorial = 8,\n  //   BlitzTutorial = 9,\n  //   TerminusFirefight = 10\n  \"GameMode\": \"int\",\n\n  // Highest objective score that the player has ever achieved in matches summarized by\n  // this entry. This field is a mapping from the team size to the highest objective\n  // score achieved.\n  \"HighestObjectiveScoreByTeamSize\": {\n\n    \"int\": \"int\",\n\n  }\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "80ab0472-c172-3e8e-9335-c9dcc3408526",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Stats-Summary"
        }
      }
    },
    "insertionIndex" : 13
  }, {
    "id" : "05945422-0571-3f9c-ae9a-b4dd18921bc4",
    "name" : "Halo Wars 2 - Player Match History - 503",
    "request" : {
      "urlPath" : "/hw2/players/srfqxrrecmmk98czzuin6kirbtk62xdkbcv2drderwdarq3glrs3aw9tovf4zhgw1lr61k0fx781s01vwz3x1seamubtkh685xun30dic2mqulh9f726rg7f554zh7psgm7xvpzie78pfp/matches",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "05945422-0571-3f9c-ae9a-b4dd18921bc4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Match-History"
        }
      }
    },
    "insertionIndex" : 14
  }, {
    "id" : "b1952ea0-8c7e-3282-a515-2e9b03bf8360",
    "name" : "Halo Wars 2 - Player Match History - 500",
    "request" : {
      "urlPath" : "/hw2/players/9s25dehyh4o3n3yedo2s6vnnzps0leoi01q5jlg89qusopblztvfoyf7o89i5tgr301luddnofcjetm2e6h5lpefizdzok0hkcrejgk3uy6c71k9q702x0k96nat71c7zis00svph8g2awoj6r4at7m7s0lu7zlllqcib3o0jsxjzaqrnn490q08/matches",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "b1952ea0-8c7e-3282-a515-2e9b03bf8360",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Match-History"
        }
      }
    },
    "insertionIndex" : 15
  }, {
    "id" : "44fe2ad2-f8da-3539-9e7a-a21ba64dcf8b",
    "name" : "Halo Wars 2 - Player Match History - 404",
    "request" : {
      "urlPath" : "/hw2/players/d56qy4l4n5bajl7/matches",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "44fe2ad2-f8da-3539-9e7a-a21ba64dcf8b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Match-History"
        }
      }
    },
    "insertionIndex" : 16
  }, {
    "id" : "b2b64269-346d-3627-b9c0-5fc5369fd954",
    "name" : "Halo Wars 2 - Player Match History (application/json)",
    "request" : {
      "urlPath" : "/hw2/players/qhgljma2obip2ulwci89tyjfq2e0t35zxp2ld3e9b4929dv6aw4s84keunjxx9c7pux0/matches",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // Starting point that was used. When the \"start\" query string parameter is specified,\n  // this value is identical. When \"start\" is omitted, the default value is returned.\n  \"Start\": \"int\",  \n\n  // Number of results that the service attempted to retrieve to satisfy this request.\n  // Normally this value is equal to the \"count\" parameter. If the client specified a\n  // count parameter greater than the maximum allowed, this value contains the maximum\n  // allowed amount.\n  \"Count\": \"int\",\n\n  // Number of results that are actually being returned in this response. This field is\n  // named \"ResultCount\" to avoid confusion with \"Count\".\n  \"ResultCount\": \"int\",\n\n  // A list of recent matches. Matches are listed in reverse chronological order with the\n  // most recently started match first.\n  \"Results\": [\n    {\n      // ID for this match. More match details are available via the \"Halo Wars 2 - Match\n      // Result\" Endpoint.\n      \"MatchId\": \"guid\",\n\n      // Match type for this match. This field will contain one of the following values:\n      //   Unknown = 0,\n      //   Campaign = 1,\n      //   Custom = 2,\n      //   Matchmaking = 3\n      \"MatchType\": \"int\",\n\n      // Game mode for this match. This field will contain one of the following values:\n      //   Unknown = 0,\n      //   CampaignSolo = 1,\n      //   CampaignCooperative = 2,\n      //   Deathmatch = 3,\n      //   Domination = 4,\n      //   Strongholds = 5,\n      //   Blitz = 6,\n      //   Firefight = 7,\n      //   NormalTutorial = 8,\n      //   BlitzTutorial = 9,\n      //   TerminusFirefight = 10\n      \"GameMode\": \"int\",\n\n      // Season ID for the match if the match occurred in a ranked playlist; otherwise,\n      // null. Seasons are available via the Metadata API.\n      \"SeasonId\": \"guid\",\n\n      // Playlist the match occurred in if the match occurred in a playlist; otherwise,\n      // null or empty Guid. Playlists are available via the Metadata API.\n      \"PlaylistId\": \"guid\",\n\n      // Information regarding the teams in the match. Neutral teams are not included in\n      // this collection.\n      \"Teams\": {\n\n        // Team ID.\n        \"int\": {\n\n          // Number of players on the team.\n          \"TeamSize\": \"int\"\n        },\n\n      },\n\n      // ID of the map the match was played on. Maps are available via the Metadata API.\n      \"MapId\": \"string\",\n\n      // Date and time the match started. This is expressed as an ISO 8601 combined Date\n      // and Time.\n      \"MatchStartDate\": {\n\n        \"ISO8601Date\": \"string\"\n      },\n\n      // Duration of time the player participated in the match. If the player finished\n      // the match, this will be equivalent to the match duration. If the player did not\n      // finish the match, this will be how long the player participated in the match\n      // until they left (with the assumption that the match potentially continued on\n      // without the player and the actual match duration was longer). This is expressed\n      // as an ISO 8601 Duration.\n      \"PlayerMatchDuration\": \"string\",\n\n      // Index of the player in the match.\n      \"PlayerIndex\": \"int\",\n\n      // ID of the team the player was a member of.\n      \"TeamId\": \"int\",\n\n      // Index of the player on their team. This is derived by sorting all the players on\n      // a team by their PlayerIndex and selecting the resulting position.\n      \"TeamPlayerIndex\": \"int\",\n\n      // Leader the player used. Leaders are available via the Metadata API.\n      \"LeaderId\": \"int\",\n\n      // Whether the player finished the match.\n      \"PlayerCompletedMatch\": \"bool\",\n\n      // Outcome of the match for the player. If the player did not finish the match,\n      // this will indicate a loss. This field will contain one of the following values:\n      //   Unknown = 0,\n      //   Win = 1,\n      //   Loss = 2,\n      //   Tie = 3\n      \"PlayerMatchOutcome\": \"int\",\n\n      // XP progress the player earned as a result of their participation in the match.\n      \"XPProgress\": {\n\n        // Total amount of XP the player had when they entered the match.\n        \"PreviousTotalXP\": \"int\",\n\n        // XP the player earned as a result of actions taken in the match. This does not\n        // include XP the player earned as a result of challenges completed in the match,\n        // which is reported separately.\n        \"GameplayXP\": \"int\",\n\n        // XP the player earned as a result of completing challenges in the match. This\n        // does not include XP the player earned as a result of actions taken in the\n        // match, which is reported separately.\n        \"ChallengesXP\": \"int\",\n\n        // Total amount of XP the player had after the match.\n        \"UpdatedTotalXP\": \"int\",\n\n        // Spartan Ranks the player completed as a result of the XP earned in the match.\n        // If this collection is empty, the player did not earn enough XP in this match\n        // to complete a rank. There is no significance to the ordering of this\n        // collection.\n        \"CompletedSpartanRanks\": [\n          {\n            // Spartan Rank the player completed. Spartan Ranks are available via the\n            // Metadata API.\n            \"Id\": \"guid\",\n\n            // Packs the player was awarded as a result of completing the rank. There is\n            // no significance to the ordering of this collection. Packs are available\n            // via the Metadata API.\n            \"PacksAwarded\": [ \"guid\" ]\n          }\n        ]\n      },\n\n      // Rating progress the player earned as a result of their participation in the\n      // match.\n      \"RatingProgress\": {\n\n        // Competitive Skill Ranking (CSR) of the player before the match started. If the\n        // match did not occur in a ranked playlist, this will be null.\n        \"PreviousCsr\": {\n\n          // CSR Tier. CSR Tiers are designation-specific. If the player is still in\n          // measurement matches, this field will be null. CSR Tiers are referenced by\n          // CSR Designations, which are available via the Metadata API.\n          \"Tier\": \"int\",\n\n          // CSR Designation. If the player is still in measurement matches, this field\n          // will be null. CSR Designations are available via the Metadata API.\n          \"Designation\": \"int\",\n\n          // Raw CSR value. If the player is still in measurement matches, this field\n          // will be null. If the player is not in a high enough designation, this will\n          // be zero.\n          \"Raw\": \"int\",\n\n          // Percentage of progress towards the next CSR tier. If the player is still in\n          // measurement matches, this field will be null.\n          \"PercentToNextTier\": \"int\",\n\n          // Number of measurement matches remaining until the player earns a CSR. If\n          // this field is greater than zero, the player does not have a CSR yet and the\n          // other components of the CSR will be null.\n          \"MeasurementMatchesRemaining\": \"int\",\n\n          // Player's ranking on the CSR leaderboard. If the player is still in\n          // measurement matches, this field will be null. If the player is not in a high\n          // enough designation, this will be zero.\n          \"Rank\": \"int\"\n        },\n\n        // Competitive Skill Ranking (CSR) of the player after the match ended. If the\n        // match did not occur in a ranked playlist, this will be null.\n        \"UpdatedCsr\": {\n\n          // CSR Tier. CSR Tiers are designation-specific. If the player is still in\n          // measurement matches, this field will be null. CSR Tiers are referenced by\n          // CSR Designations, which are available via the Metadata API.\n          \"Tier\": \"int\",\n\n          // CSR Designation. If the player is still in measurement matches, this field\n          // will be null. CSR Designations are available via the Metadata API.\n          \"Designation\": \"int\",\n\n          // Raw CSR value. If the player is still in measurement matches, this field\n          // will be null. If the player is not in a high enough designation, this will\n          // be zero.\n          \"Raw\": \"int\",\n\n          // Percentage of progress towards the next CSR tier. If the player is still in\n          // measurement matches, this field will be null.\n          \"PercentToNextTier\": \"int\",\n\n          // Number of measurement matches remaining until the player earns a CSR. If\n          // this field is greater than zero, the player does not have a CSR yet and the\n          // other components of the CSR will be null.\n          \"MeasurementMatchesRemaining\": \"int\",\n\n          // Player's ranking on the CSR leaderboard. If the player is still in\n          // measurement matches, this field will be null. If the player is not in a high\n          // enough designation, this will be zero.\n          \"Rank\": \"int\"\n        },\n\n        // Internal use.\n        \"PreviousMmr\": {\n\n          \"Rating\": \"double\",\n\n          \"Variance\": \"double\",\n\n          // Unused.\n          \"LastModifiedDate\": {\n\n            \"ISO8601Date\": \"string\"\n          }\n        },\n\n        // Internal use.\n        \"UpdatedMmr\": {\n\n          \"Rating\": \"double\",\n\n          \"Variance\": \"double\",\n\n          // Unused.\n          \"LastModifiedDate\": {\n\n            \"ISO8601Date\": \"string\"\n          }\n        },\n\n      }\n    }\n  ],\n\n  // Unused.\n  \"Links\": {}\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b2b64269-346d-3627-b9c0-5fc5369fd954",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Match-History"
        }
      }
    },
    "insertionIndex" : 17
  }, {
    "id" : "dc74f44a-f066-314e-92a0-0fa62071c978",
    "name" : "Halo Wars 2 - Player Campaign Progress - 503",
    "request" : {
      "urlPath" : "/hw2/players/3hvvybs6la2wfgsul9q65j0s7albym3pf4ifeakw2eztbpvzbl0/campaign-progress",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "dc74f44a-f066-314e-92a0-0fa62071c978",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Campaign-Progress"
        }
      }
    },
    "insertionIndex" : 18
  }, {
    "id" : "72003f72-d7d8-3cb2-bd73-44872a2e6b18",
    "name" : "Halo Wars 2 - Player Campaign Progress - 500",
    "request" : {
      "urlPath" : "/hw2/players/91ym/campaign-progress",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "72003f72-d7d8-3cb2-bd73-44872a2e6b18",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Campaign-Progress"
        }
      }
    },
    "insertionIndex" : 19
  }, {
    "id" : "38a776ce-ccd4-3c50-a70a-3b497eb7cc12",
    "name" : "Halo Wars 2 - Player Campaign Progress - 404",
    "request" : {
      "urlPath" : "/hw2/players/nuglvaqq6shtyq147ira1jyp2b/campaign-progress",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "38a776ce-ccd4-3c50-a70a-3b497eb7cc12",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Campaign-Progress"
        }
      }
    },
    "insertionIndex" : 20
  }, {
    "id" : "cfb875a1-9e67-36b1-8ce8-9b016695ff07",
    "name" : "Halo Wars 2 - Player Campaign Progress (application/json)",
    "request" : {
      "urlPath" : "/hw2/players/csz7ur4wl1f2ijj7bj5tcux2mz6b2a4k7qi46waoqytt4fh8qjtdg3fbg0tbder4v5qs7vxauogwdzljze4lv5g3eok1dfdgggtv61/campaign-progress",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // Total amount of XP the player has earned from the campaign.\n  \"CampaignXP\": \"int\",\n\n  // Per-level progress information. If an entry is missing from this collection, the\n  // player has not made any progress towards the level. Campaign Levels are available\n  // via the Metadata API.\n  \"Levels\": {\n\n    // Level ID.\n    \"int\": {\n\n      // Skulls from this level that the player has unlocked. Campaign Skulls are\n      // available via the Metadata API.\n      \"SkullsUnlocked\": [ \"int\" ],\n\n      // Total amount of time the player has spent playing this level in solo mode. This\n      // is expressed as an ISO 8601 Duration.\n      \"TotalSoloPlayTime\": \"string\",\n\n      // Total amount of time the player has spent playing this level in cooperative\n      // mode. This is expressed as an ISO 8601 Duration.\n      \"TotalCooperativePlayTime\": \"string\",\n\n      // Per-difficulty progress information for solo mode. If this level has not been\n      // completed in solo mode, this collection will be empty. Difficulties are\n      // available via the Metadata API.\n      \"SoloCompletion\": {\n\n        // Difficulty ID.\n        \"int\": {\n\n          // The fastest time that the player has ever achieved on this level on this\n          // mode on this difficulty. This may or may not have occurred at the same time\n          // the player earned their best score. This is expressed as an ISO 8601\n          // Duration.\n          \"BestCompletionTime\": \"string\",\n\n          // The highest score that the player has ever achieved on this level on this\n          // mode on this difficulty. This indicates the individual score, not the team\n          // score. This may or may not have occurred at the same time the player earned\n          // their best completion time.\n          \"BestScore\": \"int\",\n\n          // The critical objectives that the player has completed on this level on this\n          // mode on this difficulty. These may or may not have occurred in the same\n          // playthrough. Critical Objectives are referenced by Campaign Levels, which\n          // are available via the Metadata API.\n          \"CriticalObjectivesCompleted\": [ \"int\" ],\n\n          // The bonus objectives that the player has completed on this level on this\n          // mode on this difficulty. These may or may not have occurred in the same\n          // playthrough. Bonus Objectives are referenced by Campaign Levels, which are\n          // available via the Metadata API.\n          \"BonusObjectivesCompleted\": [ \"int\" ],\n\n          // The optional objectives that the player has completed on this level on this\n          // mode on this difficulty. These may or may not have occurred in the same\n          // playthrough. Optional Objectives are referenced by Campaign Levels, which\n          // are available via the Metadata API.\n          \"OptionalObjectivesCompleted\": [ \"int\" ]\n        }\n      },\n\n      // Per-difficulty progress information for cooperative mode. If this level has not\n      // been completed in cooperative mode, this collection will be empty. Difficulties\n      // are available via the Metadata API.\n      \"SoloCompletion\": {\n\n        // Difficulty ID.\n        \"int\": {\n\n          // The fastest time that the player has ever achieved on this level on this\n          // mode on this difficulty. This may or may not have occurred at the same time\n          // the player earned their best score. This is expressed as an ISO 8601\n          // Duration.\n          \"BestCompletionTime\": \"string\",\n\n          // The highest score that the player has ever achieved on this level on this\n          // mode on this difficulty. This indicates the individual score, not the team\n          // score. This may or may not have occurred at the same time the player earned\n          // their best completion time.\n          \"BestScore\": \"int\",\n\n          // The critical objectives that the player has completed on this level on this\n          // mode on this difficulty. These may or may not have occurred in the same\n          // playthrough. Critical Objectives are referenced by Campaign Levels, which\n          // are available via the Metadata API.\n          \"CriticalObjectivesCompleted\": [ \"int\" ],\n\n          // The bonus objectives that the player has completed on this level on this\n          // mode on this difficulty. These may or may not have occurred in the same\n          // playthrough. Bonus Objectives are referenced by Campaign Levels, which are\n          // available via the Metadata API.\n          \"BonusObjectivesCompleted\": [ \"int\" ],\n\n          // The optional objectives that the player has completed on this level on this\n          // mode on this difficulty. These may or may not have occurred in the same\n          // playthrough. Optional Objectives are referenced by Campaign Levels, which\n          // are available via the Metadata API.\n          \"OptionalObjectivesCompleted\": [ \"int\" ]\n        }\n      },\n\n      // Date when the player first completed the level in either solo or cooperative\n      // mode on any difficulty. If this level has not been completed, this will be null.\n      // This is expressed as an ISO 8601 combined Date and Time.\n      \"FirstCompletionDate\": {\n\n        \"ISO8601Date\": \"string\"\n      }\n    }\n  },\n\n  // Logs that the player has unlocked. Campaign Logs are available via the Metadata API.\n  \"LogsUnlocked\": [ \"int\" ]\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "cfb875a1-9e67-36b1-8ce8-9b016695ff07",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Player-Campaign-Progress"
        }
      }
    },
    "insertionIndex" : 21
  }, {
    "id" : "82aab936-dd25-300a-95aa-b092e21fdb18",
    "name" : "Halo Wars 2 - Leaderboard - Player CSR - 503",
    "request" : {
      "urlPath" : "/hw2/player-leaderboards/csr/7sbj/ey4q",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "82aab936-dd25-300a-95aa-b092e21fdb18",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Leaderboard-Player-CSR"
        }
      }
    },
    "insertionIndex" : 22
  }, {
    "id" : "7f114c3f-2d0b-32b2-a851-5cdec4de188f",
    "name" : "Halo Wars 2 - Leaderboard - Player CSR - 500",
    "request" : {
      "urlPath" : "/hw2/player-leaderboards/csr/p24l/6h86",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "7f114c3f-2d0b-32b2-a851-5cdec4de188f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Leaderboard-Player-CSR"
        }
      }
    },
    "insertionIndex" : 23
  }, {
    "id" : "0d1c2622-7185-350b-856d-d72da6cd2637",
    "name" : "Halo Wars 2 - Leaderboard - Player CSR - 404",
    "request" : {
      "urlPath" : "/hw2/player-leaderboards/csr/p5do/ko9j",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "0d1c2622-7185-350b-856d-d72da6cd2637",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Leaderboard-Player-CSR"
        }
      }
    },
    "insertionIndex" : 24
  }, {
    "id" : "360eea22-627f-3ae5-b361-2de7e1ea709e",
    "name" : "Halo Wars 2 - Leaderboard - Player CSR (application/json)",
    "request" : {
      "urlPath" : "/hw2/player-leaderboards/csr/w9vi/tr69",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // The starting point that was used. Will always be 0.\n  \"Start\": \"int\",\n\n  // The number of results that the service attempted to retrieve to satisfy this\n  // request. Normally this value is equal to the \"count\" parameter. If the client\n  // specified a count parameter greater than the maximum allowed, this value contains\n  // the maximum allowed amount.\n  \"Count\": \"int\",\n\n  // The number of results that are actually being returned in this response. This field\n  // is named \"ResultCount\" to avoid confusion with \"Count\".\n  \"ResultCount\": \"int\",\n\n  // Internal use only. A set of related resource links.\n  \"Links\": \"links\",\n\n  // A list of players in the leaderboard. Players are listed in chronological order with\n  // the player with the highest CSR first.\n  \"Results\": [\n    {\n      // Information about the player for whom this data was returned.\n      \"Player\": {\n\n        // The gamertag of the player queried.\n        \"Gamertag\": \"string\",\n\n        // Internal use only. This will always be null.\n        \"Xuid\": null\n      },\n\n      // The player's rank in the leaderboard.\n      \"Rank\": \"int\",\n\n      \"Score\": {\n\n        // The CSR tier. CSR Tiers are designation-specific and are available via the\n        // Metadata API.\n        \"Tier\": \"int\",\n\n        // The Designation of the CSR. CSR Designations are available via the Metadata\n        // API.\n        \"DesignationId\": \"int\",\n\n        // The CSR value. Zero for normal (Diamond and below) designations.\n        \"Csr\": \"int\",\n\n        // The percentage of progress towards the next CSR tier.\n        \"PercentToNextTier\": \"int\",\n\n        // If the CSR is Onyx or Champion, the player's leaderboard ranking. Null\n        // otherwise.\n        \"Rank\": \"int\"\n      }\n    }\n  ]\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "360eea22-627f-3ae5-b361-2de7e1ea709e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Leaderboard-Player-CSR"
        }
      }
    },
    "insertionIndex" : 25
  }, {
    "id" : "e230a6cd-7d1a-3716-a6b0-33761ac469c3",
    "name" : "Halo Wars 2 - Match Events - 503",
    "request" : {
      "urlPath" : "/hw2/matches/16tx/events",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "e230a6cd-7d1a-3716-a6b0-33761ac469c3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Match-Events"
        }
      }
    },
    "insertionIndex" : 26
  }, {
    "id" : "126b88bd-c6d8-360a-a996-c81c4228b27a",
    "name" : "Halo Wars 2 - Match Events - 500",
    "request" : {
      "urlPath" : "/hw2/matches/2f61/events",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "126b88bd-c6d8-360a-a996-c81c4228b27a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Match-Events"
        }
      }
    },
    "insertionIndex" : 27
  }, {
    "id" : "91f08653-d0aa-3c71-ba61-e4dfb185f6ba",
    "name" : "Halo Wars 2 - Match Events - 404",
    "request" : {
      "urlPath" : "/hw2/matches/04r9/events",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "91f08653-d0aa-3c71-ba61-e4dfb185f6ba",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Match-Events"
        }
      }
    },
    "insertionIndex" : 28
  }, {
    "id" : "05644ea1-afb6-3dcf-a75b-6eae4842fd87",
    "name" : "Halo Wars 2 - Match Events (application/json)",
    "request" : {
      "urlPath" : "/hw2/matches/818m/events",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "//\n// Main Response\n//\n{\n  // Events that describe a match from start to completion. Events are reported in\n  // chronological order.\n  // Events can come in a variety of types indicated by the \"EventName\" field. Each event\n  // is documented in detail below the documentation for this return contract.\n  // Additional event types may be added in the future.\n  // When deserializing events, it is suggested to use a union of all of the fields\n  // across all of the different event types.\n  \"GameEvents\": [ \"GameEvent\" ],\n\n  // Whether this set of events accounts for the complete set of events from the match.\n  \"IsCompleteSetOfEvents\": \"bool\"\n}\n\n//\n// BuildingConstructionQueued Event\n//\n// This event is fired for the following reasons:\n//   - A player queues a building for construction.\n//   - A building is provided by the scenario (for instance, the buildings a player\n//     starts with at the beginning of the scenario). In this case, a subsequent\n//     BuildingConstructionCompleted event will not be fired.\n//   - A building is produced by a leader power.\n//   - A building is built in an \"upgraded\" state. In this case, a\n//     BuildingConstructionQueued event is fired for the the \"upgraded\" building rather\n//     than firing a BuildingConstructionQueued event for the \"non-upgraded\" building\n//     followed by a subsequent BuildingUpgraded event.\n//\n{\n  // Index of the player that will control building that was queued for construction.\n  \"PlayerIndex\": \"int\",\n\n  // ID that indicates the type of the building. Buildings are available via the Metadata\n  // API as Game Objects.\n  \"BuildingId\": \"string\",\n\n  // Instance ID that identifies the building. The building will be referred to by this\n  // ID in subsequent events.\n  \"InstanceId\": \"int\",\n\n  // Location that the building will be created at.\n  \"Location\": {\n\n    \"x\": \"double\",\n\n    \"y\": \"double\",\n\n    \"z\": \"double\"\n  },\n\n  // Supply cost paid to construct the building.\n  \"SupplyCost\": \"int\",\n\n  // Energy cost paid to construct the building.\n  \"EnergyCost\": \"int\",\n\n  // Length of the construction queue after enqueuing the building.\n  \"QueueLength\": \"int\",\n\n  // Whether the building was queued by the player or the scenario.\n  \"ProvidedByScenario\": \"bool\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"EventName\"  \n}\n\n//\n// BuildingConstructionCompleted Event\n//\n// This event is fired when a building is successfully constructed.\n//\n{\n  // Index of the player that controls the building that was constructed.\n  \"PlayerIndex\": \"int\",\n\n  // Instance of the building that was constructed.\n  \"InstanceId\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"BuildingConstructionCompleted\"  \n}\n\n//\n// BuildingRecycled Event\n//\n// This event is fired when a building is recycled.\n//\n{\n  // Index of the player that controls the building that was recycled.\n  \"PlayerIndex\": \"int\",\n\n  // Instance of the building that was recycled.\n  \"InstanceId\": \"int\",\n\n  // Supply earned from recycling the building.\n  \"SupplyEarned\": \"int\",\n\n  // Energy earned from recycling the building.\n  \"EnergyEarned\": \"int\",\n\n  // Whether the building was recycled by the player or the scenario.\n  \"ProvidedByScenario\": \"bool\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"BuildingRecycled\"  \n}\n\n//\n// BuildingUpgraded Event\n//\n// This event is fired when a building is upgraded.\n//\n{\n  // Index of the player that controls the building that was upgraded.\n  \"PlayerIndex\": \"int\",\n\n  // ID that indicates the new type of the building. Buildings are available via the\n  // Metadata API as Game Objects.\n  \"NewBuildingId\": \"string\",\n\n  // Instance ID of the building that was upgraded.\n  \"InstanceId\": \"int\",\n\n  // Supply cost paid to upgrade the building.\n  \"SupplyCost\": \"int\",\n\n  // Energy cost paid to upgrade the building.\n  \"EnergyCost\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"BuildingUpgraded\"  \n}\n\n//\n// CardCycled Event\n//\n// This event is fired when a card is cycled.\n//\n{\n  // Index of the player that cycled a card.\n  \"PlayerIndex\": \"int\",\n\n  // Mana cost paid to cycle the card.\n  \"ManaCost\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"CardCycled\"  \n}\n\n//\n// CardPlayed Event\n//\n// This event is fired when a card is played.\n//\n{\n  // Index of the player that played a card.\n  \"PlayerIndex\": \"int\",\n\n  // ID that indicates the type of the card. Cards are available via the Metadata API.\n  \"CardId\": \"guid\",\n\n  // Instance ID that identifies this cast of the card. This instance will be referred to\n  // by this ID in subsequent events.\n  \"InstanceId\": \"int\",\n\n  // Mana cost paid to play the card.\n  \"ManaCost\": \"int\",\n\n  // Location where the card was played.\n  \"TargetLocation\": {\n\n    \"x\": \"double\",\n\n    \"y\": \"double\",\n\n    \"z\": \"double\"\n  },\n\n  // Whether the card was played in the base.\n  \"SpawnAtBase\": \"bool\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"CardPlayed\"  \n}\n\n//\n// Death Event\n//\n// This event is fired when a building or unit is destroyed.\n//\n{\n  // Index of the player that controlled the building or unit that was destroyed.\n  \"VictimPlayerIndex\": \"int\",\n\n  // ID that indicates the type of the building or unit that was destroyed. Game Objects\n  // are available via the Metadata API.\n  \"VictimObjectTypeId\": \"string\",\n\n  // Instance ID of the building or unit that was destroyed.\n  \"VictimInstanceId\": \"int\",\n\n  // Whether the death was considered a suicide.\n  \"IsSuicide\": \"bool\",\n\n  // Participants that contributed to the destruction of the building or unit.\n  // Participants are grouped by player, then object, then combat stats.\n  \"Participants\": {\n\n    // Index of the player that participated in the destruction.\n    \"int\": {\n\n      // Objects that participated in the destruction that were owned by the given\n      // player. Object participants are grouped by object then combat stats.\n      \"ObjectParticipants\": {\n\n        // ID that indicates the type of the building or unit that participated in the\n        // destruction. Game Objects are available via the Metadata API.\n        \"string\": {\n\n          // Number of objects of the given type owned by the given player that\n          // participated in the destruction.\n          \"Count\": \"int\",\n\n          // Information about the combat stats across all the objects of the given type\n          // owned by the given player that participated in the destruction. Combat stats\n          // are grouped by damage type.\n          \"CombatStats\": {\n\n            // Damage type dealt by the object of the given type. This field will contain\n            // one of the following values:\n            //   Basic = 0,\n            //   LeaderPower = 1,\n            //   LeaderPowerNonFlying = 2,\n            //   AntiInfantry = 3,\n            //   Fire = 4,\n            //   AntiBuildingFire = 5,\n            //   SmallArms = 6,\n            //   AASmallArms = 7,\n            //   SmallArmsScouts = 8,\n            //   MediumArms = 9,\n            //   ChainGun = 10,\n            //   ArmorPiercing = 11,\n            //   AntiVehicle = 12,\n            //   FuelRod = 13,\n            //   BansheeFuelRod = 14,\n            //   AntiAir = 15,\n            //   Explosive = 16,\n            //   TankExplosive = 17,\n            //   Artillery = 18,\n            //   Missile = 19,\n            //   Grenade = 20,\n            //   Demolition = 21,\n            //   Beam = 22,\n            //   WarthogRam = 23,\n            //   GaussCannon = 24,\n            //   BruteShot = 25,\n            //   Melee = 26,\n            //   SuicideGrunt = 27,\n            //   SuicideGruntAV = 28,\n            //   SuperSentinel = 29,\n            //   Hero = 30,\n            //   CampaignHero = 31,\n            //   ScarabBeam = 32,\n            //   Unknown = 255\n            // Additional damage types may be added in the future.\n            \"int\": {\n\n              // Number of attacks of the given damage type that were successfully landed\n              // on the victim building or unit.\n              \"AttacksLanded\": \"int\"\n            }\n          }\n        }\n      }\n    }\n  },\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"Death\"  \n}\n\n//\n// FirefightWaveCompleted Event\n//\n// This event is fired when a team successfully clears a Firefight wave.\n//\n{\n  // Wave number that was completed.\n  \"WaveNumber\": \"int\",\n\n  // Elapsed time, measured in milliseconds, that the team took to clear the wave.\n  \"WaveDurationMilliseconds\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"FirefightWaveCompleted\"  \n}\n\n//\n// FirefightWaveSpawned Event\n//\n// This event is fired when a Firefight wave has been spawned.\n//\n{\n  // Wave number that was spawned.\n  \"WaveNumber\": \"int\",\n\n  // Instance IDs of the buildings and units that make up the wave.\n  \"InstancesSpawned\": [ \"int\" ],\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"FirefightWaveSpawned\"  \n}\n\n//\n// FirefightWaveStarted Event\n//\n// This event is fired when a Firefight wave has started.\n//\n{\n  // Wave number that was started.\n  \"WaveNumber\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"FirefightWaveStarted\"  \n}\n\n//\n// LeaderPowerCast Event\n//\n// This event is fired when a leader power is cast.\n//\n{\n  // Index of the player that cast the leader power.\n  \"PlayerIndex\": \"int\",\n\n  // ID that indicates the type of the leader power. Leader Powers are available via the\n  // Metadata API.\n  \"PowerId\": \"string\",\n\n  // Instance ID that identifies this cast of the leader power. This instance will be\n  // referred to by this ID in subsequent events.\n  \"InstanceId\": \"int\",\n\n  // Location where the leader power was cast.\n  \"TargetLocation\": {\n\n    \"x\": \"double\",\n\n    \"y\": \"double\",\n\n    \"z\": \"double\"\n  },\n\n  // Supply cost paid to cast the leader power.\n  \"SupplyCost\": \"int\",\n\n  // Energy cost paid to cast the leader power.\n  \"EnergyCost\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"LeaderPowerCast\"  \n}\n\n//\n// LeaderPowerUnlocked Event\n//\n// This event is fired when a leader power is unlocked.\n//\n{\n  // Index of the player that unlocked the leader power.\n  \"PlayerIndex\": \"int\",\n\n  // ID that indicates the type of the leader power. Leader Powers are available via the\n  // Metadata API.\n  \"PowerId\": \"string\",\n\n  // Command point cost paid to unlock the leader power.\n  \"CommandPointCost\": \"int\",\n\n  // Whether the leader power was unlocked by the scenario.\n  \"ProvidedByScenario\": \"bool\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"LeaderPowerUnlocked\"  \n}\n\n//\n// ManaOrbCollected Event\n//\n// This event is fired when a mana orb is collected.\n//\n{\n  // Index of the player that collected the mana orb.\n  \"PlayerIndex\": \"int\",\n\n  // Instance ID of the unit that collected the mana orb.\n  \"CollectorInstanceId\": \"int\",\n\n  // Increase to the player's mana generation rate.\n  \"ManaRateIncrease\": \"int\",\n\n  // Location of the mana orb that was collected.\n  \"Location\": {\n\n    \"x\": \"double\",\n\n    \"y\": \"double\",\n\n    \"z\": \"double\"\n  },\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"ManaOrbCollected\"  \n}\n\n//\n// MatchEnd Event\n//\n// This event is fired when the match ends.\n//\n{\n  // Reason the match ended. This field will contain one of the following values:\n  //   Unknown = 0,\n  //   Completed = 1,\n  //   StartedNewMission = 2,\n  //   EveryoneDisconnected = 3,\n  //   InviteAccepted = 4\n  \"MatchEndReason\": \"int\",\n\n  // Reason the winning team achieved victory. This field will contain one of the\n  // following values:\n  //   EndedPrematurely = 0,\n  //   ObjectiveCompleted = 1,\n  //   OpponentsEliminated = 2,\n  //   Unknown = 255\n  \"VictoryCondition\": \"int\",\n\n  // Elapsed time, measured in milliseconds, spent playing the match.\n  \"ActivePlaytimeMilliseconds\": \"int\",\n\n  // Ending states for the teams in the match.\n  \"TeamState\": {\n\n    // Team ID.\n    \"int\": {\n\n      // Score for the team.\n      \"ObjectiveScore\": \"int\",\n\n      // Outcome for the team. This field will contain one of the following values:\n      //   Unknown = 0,\n      //   Win = 1,\n      //   Loss = 2,\n      //   Tie = 3\n      \"MatchOutcome\": \"int\"\n    }\n  },\n\n  // Ending states for the players in the match.\n  \"PlayerState\": {\n\n    // Player Index.\n    \"int\": {\n\n      // Score for the player.\n      \"PersonalScore\": \"int\"\n    }\n  },\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"MatchEnd\"  \n}\n\n//\n// MatchStart Event\n//\n// This event is fired when the match starts.\n//\n{\n  // ID of the match.\n  \"MatchId\": \"guid\",\n\n  // Game mode. This field will contain one of the following values:\n  //   Unknown = 0,\n  //   CampaignSolo = 1,\n  //   CampaignCooperative = 2,\n  //   Deathmatch = 3,\n  //   Domination = 4,\n  //   Strongholds = 5,\n  //   Blitz = 6,\n  //   Firefight = 7,\n  //   NormalTutorial = 8,\n  //   BlitzTutorial = 9,\n  //   TerminusFirefight = 10\n  \"GameMode\": \"int\",\n\n  // Match type. This field will contain one of the following values:\n  //   Unknown = 0,\n  //   Campaign = 1,\n  //   Custom = 2,\n  //   Matchmaking = 3\n  \"MatchType\": \"int\",\n\n  // ID of the map. Maps are available via the Metadata API.\n  \"MapId\": \"string\",\n\n  // Playlist the match occurred in if the match occurred in a playlist; otherwise, empty\n  // Guid.\n  \"PlaylistId\": \"guid\",\n\n  // Max team size for the match.\n  \"TeamSize\": \"int\",\n\n  // whether the match is using the default rule set.\n  \"IsDefaultRuleSet\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"MatchStart\"  \n}\n\n//\n// PlayerEliminated Event\n//\n// This event is fired when a player is eliminated from the match.\n//\n{\n  // Index of the player that was eliminated.\n  \"PlayerIndex\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"PlayerEliminated\"  \n}\n\n//\n// PlayerJoinedMatch Event\n//\n// This event is fired at the start of the match for each player in the match. This event\n// is fired for the neutral players in addition to the Human and Computer players.\n//\n{\n  // Index of the player that joined the match. The player will be referred to by this\n  // index in subsequent events.\n  \"PlayerIndex\": \"int\",\n\n  // Type of the player that joined the match. This field will contain one of the\n  // following values:\n  //   Unknown = 0,\n  //   Human = 1,\n  //   Computer = 2,\n  //   NPC = 3\n  \"PlayerType\": \"int\",\n\n  // Identify of the player if this is a human player; otherwise, null.\n  \"HumanPlayerId\": {\n\n    // Gamertag of the player.\n    \"Gamertag\": \"string\",\n\n    // Internal use. This will always be null.\n    \"Xuid\": null\n  },\n\n  // ID of the computer player if this is a computer player; otherwise, null.\n  \"ComputerPlayerId\": \"int\",\n\n  // Difficulty of the computer player if this is a computer player; otherwise, null.\n  // Difficulties are available via the Metadata API.\n  \"ComputerDifficulty\": \"int\",\n\n  // Team the player is a member of.\n  \"TeamId\": \"int\",\n\n  // Leader the player is using. Leaders are available via the Metadata API.\n  \"LeaderId\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"PlayerJoinedMatch\"  \n}\n\n//\n// PlayerLeftMatch Event\n//\n// This event is fired when a player leaves the match early for any reason. This is not\n// to be confused with the PlayerEliminated event. If a player is eliminated, the\n// PlayerEliminated event will be fired. The player may continue to spectate the match\n// after being eliminated. If the player stops spectating the match, then this event will\n// be fired.\n//\n{\n  // Index of the player that left the match.\n  \"PlayerIndex\": \"int\",\n\n  // Elapsed time, measured in milliseconds, the player spent playing the match.\n  \"TimeInMatchMilliseconds\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"PlayerLeftMatch\"  \n}\n\n//\n// PointCaptured Event\n//\n// This event is fired when an objective is captured in all game modes besides Blitz.\n//\n{\n  // Index of the player that captured the objective.\n  \"PlayerIndex\": \"int\",\n\n  // Instance ID of the objective that was captured.\n  \"InstanceId\": \"int\",\n\n  // Instance ID of the unit that captured the objective.\n  \"CapturerInstanceId\": \"int\",\n\n  // Location of the unit that captured the objective.\n  \"CapturerLocation\": {\n\n    \"x\": \"double\",\n\n    \"y\": \"double\",\n\n    \"z\": \"double\"\n  },\n\n  // ID of the team that now owns the objective. If the objective is not owned by a team,\n  // this will be 0.\n  \"NewOwningTeamId\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"PointCaptured\"  \n}\n\n//\n// PointCreated Event\n//\n// This event is fired at the start of the match for each objective that can be captured\n// on the map.\n//\n{\n  // ID that indicates the type of the objective.\n  \"PointId\": \"string\",\n\n  // Instance ID that identifies the objective. The objective will be referred to by this\n  // ID in subsequent events.\n  \"InstanceId\": \"int\",\n\n  // Location of the objective.\n  \"Location\": {\n\n    \"x\": \"double\",\n\n    \"y\": \"double\",\n\n    \"z\": \"double\"\n  },\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"PointCreated\"  \n}\n\n//\n// PointStatusChange Event\n//\n// This event is fired when an objective is captured in the Blitz game mode.\n//\n{\n  // Instance ID of the objective that was captured.\n  \"InstanceId\": \"int\",\n\n  // Updated status of the objective. This field will contain one of the following values:\n  //   Neutral = 0,\n  //   Contested = 1,\n  //   Captured = 2\n  \"Status\": \"int\",\n\n  // ID of the team that now owns the objective. If the objective is not owned by a team,\n  // this will be 255.\n  \"OwningTeamId\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"PointStatusChange\"  \n}\n\n//\n// ResourceHeartbeat Event\n//\n// This event is fired at the start of a match and then at regular 5 seconds thereafter.\n//\n{\n  // Current resources for each team.\n  \"TeamResources\": {\n\n    // Team ID.\n    \"int\": {\n\n      // Current objective score for the team.\n      \"ObjectiveScore\": \"int\"\n    }\n  },\n\n  // Current resources for each player.\n  \"PlayerResources\": {\n\n    // Player Index.\n    \"int\": {\n\n      // Current supply balance for the player.\n      \"Supply\": \"int\",\n\n      // Total supply generated by the player throughout the match.\n      \"TotalSupply\": \"int\",\n\n      // Current energy balance for the player.\n      \"Energy\": \"int\",\n\n      // Total energy generated by the player throughout the match.\n      \"TotalEnergy\": \"int\",\n\n      // Current population count for the player.\n      \"Population\": \"int\",\n\n      // Current maximum population for the player.\n      \"PopulationCap\": \"int\",\n\n      // Current tech level for the player.\n      \"TechLevel\": \"int\",\n\n      // Current command point balance for the player.\n      \"CommandPoints\": \"int\",\n\n      // Total command points generated by the player throughout the match.\n      \"TotalCommandPoints\": \"int\",\n\n      // Current mana balance for the player.\n      \"Mana\": \"int\",\n\n      // Total mana generated by the player throughout the match.\n      \"TotalMana\": \"int\",\n\n      // Unused.\n      \"ManaRate\": \"int\",\n\n      // Current command XP for the player.\n      \"CommandXP\": \"int\"\n    }\n  },\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"EventName\"  \n}\n\n//\n// ResourceTransferred Event\n//\n// This event is fired when a player transfers resources to another player.\n//\n{\n  // Index of the player that sent the resources.\n  \"SendingPlayerIndex\": \"int\",\n\n  // Index of the player that received the resources.\n  \"ReceivingPlayerIndex\": \"int\",\n\n  // Supply cost paid by the sending player to send the resource.\n  \"SupplyCost\": \"int\",\n\n  // Energy cost paid by the sending player to send the resource.\n  \"EnergyCost\": \"int\",\n\n  // Supply earned by the receiving player.\n  \"SupplyEarned\": \"int\",\n\n  // Energy earned by the receiving player.\n  \"EnergyEarned\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"ResourceTransferred\"  \n}\n\n//\n// TechResearched Event\n//\n// This event is fired when a tech is researched.\n//\n{\n  // Index of the player that received the researched tech.\n  \"PlayerIndex\": \"int\",\n\n  // ID that indicates the type of the tech that was researched. Techs are available via\n  // the Metadata API.\n  \"TechId\": \"string\",\n\n  // ID of the instance that researched the tech.\n  \"ResearcherInstanceId\": \"int\",\n\n  // Supply cost paid to research the tech.\n  \"SupplyCost\": \"int\",\n\n  // Energy cost paid to research the tech.\n  \"EnergyCost\": \"int\",\n\n  // Whether the tech was researched by the player or the scenario.\n  \"ProvidedByScenario\": \"bool\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"TechResearched\"  \n}\n\n//\n// UnitControlTransferred Event\n//\n// This event is fired when control of a unit is transferred from a player to another\n// player.\n//\n{\n  // Index of the player that lost control of the unit.\n  \"OldPlayerIndex\": \"int\",\n\n  // Index of the player that gained control of the unit.\n  \"NewPlayerIndex\": \"int\",\n\n  // ID that indicates the type of the unit that was transferred. Units are available via\n  // the Metadata API as Game Objects.\n  \"SquadId\": \"string\",\n\n  // ID of the instance that was transferred.\n  \"InstanceId\": \"int\",\n\n  // ID of the instance that caused the transfer of the unit, if appropriate; otherwise,\n  // 0.\n  \"CapturerInstanceId\": \"int\",\n\n  // Location of the unit when control was transferred.\n  \"Location\": {\n\n    \"x\": \"double\",\n\n    \"y\": \"double\",\n\n    \"z\": \"double\"\n  },\n\n  // Population consumed by the transferred unit.\n  \"PopulationCost\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"UnitControlTransferred\"  \n}\n\n//\n// UnitPromoted Event\n//\n// This event is fired when a unit is promoted.\n//\n{\n  // Index of the player that controls the unit that was promoted.\n  \"PlayerIndex\": \"int\",\n\n  // ID that indicates the type of the unit that was promoted. Units are available via\n  // the Metadata API as Game Objects.\n  \"SquadId\": \"string\",\n\n  // ID of the instance that was promoted.\n  \"InstanceId\": \"int\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"UnitPromoted\"  \n}\n\n//\n// UnitTrained Event\n//\n// This event is fired for the following reasons:\n//   - A player trains a unit from a building.\n//   - A unit is produced by a leader power or card.\n//   - A unit is provided by the scenario (for instance, the units a player starts with\n//     at the beginning of the scenario).\n//\n{\n  // Index of the player that controls the unit that was trained.\n  \"PlayerIndex\": \"int\",\n\n  // ID that indicates the type of the unit that was trained. Units are available via the\n  // Metadata API as Game Objects.\n  \"SquadId\": \"string\",\n\n  // Instance ID that identifies the unit. The unit will be referred to by this ID in\n  // subsequent events.\n  \"InstanceId\": \"int\",\n\n  // ID of the instance that trained the unit, if appropriate; otherwise, 0.\n  \"CreatorInstanceId\": \"int\",\n\n  // Location of the unit when it spawned.\n  \"SpawnLocation\": {\n\n    \"x\": \"double\",\n\n    \"y\": \"double\",\n\n    \"z\": \"double\"\n  },\n\n  // Supply cost paid to train the unit.\n  \"SupplyCost\": \"int\",\n\n  // Energy cost paid to train the unit.\n  \"EnergyCost\": \"int\",\n\n  // Population cost paid to train the unit.\n  \"PopulationCost\": \"int\",\n\n  // Whether the unit that was trained was cloned by a leader power.\n  \"IsClone\": \"bool\",\n\n  // Whether the unit was trained by the player or the scenario.\n  \"ProvidedByScenario\": \"bool\",\n\n  // Elapsed time, measured in milliseconds, since the point when the match started.\n  \"TimeSinceStartMilliseconds\": \"int\",\n\n  // Name of the event.\n  \"EventName\": \"UnitTrained\"  \n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "05644ea1-afb6-3dcf-a75b-6eae4842fd87",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Match-Events"
        }
      }
    },
    "insertionIndex" : 29
  }, {
    "id" : "dfdaf804-24b5-3502-ad1c-10c0c42cedcf",
    "name" : "Halo Wars 2 - Match Result - 503",
    "request" : {
      "urlPath" : "/hw2/matches/9b6d",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "dfdaf804-24b5-3502-ad1c-10c0c42cedcf",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Match-Result"
        }
      }
    },
    "insertionIndex" : 30
  }, {
    "id" : "f5eb1fbd-91e6-3340-8359-1c2eef7ba84f",
    "name" : "Halo Wars 2 - Match Result - 500",
    "request" : {
      "urlPath" : "/hw2/matches/wh72",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "f5eb1fbd-91e6-3340-8359-1c2eef7ba84f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Match-Result"
        }
      }
    },
    "insertionIndex" : 31
  }, {
    "id" : "f8e9cb45-4a7c-33b4-98e5-e780efc85e25",
    "name" : "Halo Wars 2 - Match Result - 404",
    "request" : {
      "urlPath" : "/hw2/matches/1d6n",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "f8e9cb45-4a7c-33b4-98e5-e780efc85e25",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Match-Result"
        }
      }
    },
    "insertionIndex" : 32
  }, {
    "id" : "a0ef628d-ec4f-36aa-bd7e-d16e1a1bf788",
    "name" : "Halo Wars 2 - Match Result (application/json)",
    "request" : {
      "urlPath" : "/hw2/matches/xy4q",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // ID for this match.\n  \"MatchId\": \"guid\",\n\n  // Match type for this match. This field will contain one of the following values:\n  //   Unknown = 0,\n  //   Campaign = 1,\n  //   Custom = 2,\n  //   Matchmaking = 3\n  \"MatchType\": \"int\",\n\n  // Game mode for this match. This field will contain one of the following values:\n  //   Unknown = 0,\n  //   CampaignSolo = 1,\n  //   CampaignCooperative = 2,\n  //   Deathmatch = 3,\n  //   Domination = 4,\n  //   Strongholds = 5,\n  //   Blitz = 6,\n  //   Firefight = 7,\n  //   NormalTutorial = 8,\n  //   BlitzTutorial = 9,\n  //   TerminusFirefight = 10\n  \"GameMode\": \"int\",\n\n  // Season ID for the match if the match occurred in a ranked playlist; otherwise, null.\n  // Seasons are available via the Metadata API.\n  \"SeasonId\": \"guid\",\n\n  // Playlist the match occurred in if the match occurred in a playlist; otherwise, null\n  // or empty Guid. Playlists are available via the Metadata API.\n  \"PlaylistId\": \"guid\",\n\n  // ID of the map the match was played on. Maps are available via the Metadata API.\n  \"MapId\": \"string\",\n\n  // Whether the match is in-progress or completed. If the match is not complete, many\n  // fields will not be set.\n  \"IsMatchComplete\": \"bool\",\n\n  // Reason the match ended. If the match is not complete, this will be null. This field\n  // will contain one of the following values:\n  //   Unknown = 0,\n  //   Completed = 1,\n  //   StartedNewMission = 2,\n  //   EveryoneDisconnected = 3,\n  //   InviteAccepted = 4\n  \"MatchEndReason\": \"int\",\n\n  // Reason the winning team achieved victory. If the match is not complete, this will be\n  // null. This field will contain one of the following values:\n  //   EndedPrematurely = 0,\n  //   ObjectiveCompleted = 1,\n  //   OpponentsEliminated = 2,\n  //   Unknown = 255\n  \"VictoryCondition\": \"int\",\n\n  // Date and time the match started. This is expressed as an ISO 8601 combined Date and\n  // Time.\n  \"MatchStartDate\": {\n\n    \"ISO8601Date\": \"string\"\n  },\n\n  // Duration of the match. This is expressed as an ISO 8601 Duration.\n  \"MatchDuration\": \"string\",\n\n  // Information regarding the teams in the match. Neutral teams are not included in this\n  // collection.\n  \"Teams\": {\n\n    // Team ID.\n    \"int\": {\n\n      // Number of players on the team.\n      \"TeamSize\": \"int\",\n\n      // Outcome for the team in the match. If the match is not complete, this will be\n      // null. This field will contain one of the following values:\n      //   Unknown = 0,\n      //   Win = 1,\n      //   Loss = 2,\n      //   Tie = 3\n      \"MatchOutcome\": \"int\",\n\n      // Score for the team at the end of the match. If the match is not complete, this\n      // will be null.\n      \"ObjectiveScore\": \"int\"\n    }\n  },\n\n  // Information regarding the players in the match. Netural players are not included in\n  // this collection.\n  \"Players\": {\n\n    // Player Index.\n    \"int\": {\n\n      // Whether this represents a human player or a computer player.\n      \"IsHuman\": \"bool\",\n\n      // Identify of the player if this is a human player; otherwise, null.\n      \"HumanPlayerId\": {\n\n        // Gamertag of the player.\n        \"Gamertag\": \"string\",\n\n        // Internal use. This will always be null.\n        \"Xuid\": null\n      },\n\n      // ID of the computer player if this is a computer player; otherwise, null.\n      \"ComputerPlayerId\": \"int\",\n\n      // Difficulty of the computer player if this is a computer player; otherwise, null.\n      // Difficulties are available via the Metadata API.\n      \"ComputerDifficulty\": \"int\",\n\n      // ID of the team the player was a member of.\n      \"TeamId\": \"int\",\n\n      // Index of the player on their team. This is derived by sorting all the players on\n      // a team by their PlayerIndex and selecting the resulting position.\n      \"TeamPlayerIndex\": \"int\",\n\n      // Leader the player used. Leaders are available via the Metadata API.\n      \"LeaderId\": \"int\",\n\n      // Whether the player finished the match. This will be null until either the player\n      // leaves the match or the match is complete.\n      \"PlayerCompletedMatch\": \"bool\",\n\n      // Duration of time the player participated in the match. This will be null until\n      // either the player leaves the match or the match is complete.\n      \"TimeInMatch\": \"string\",\n\n      // Outcome of the match for the player. This will be null until either the player\n      // leaves the match or the match is complete. If the player leaves the match early,\n      // the player might have a different match outcome than their team. This field will\n      // contain one of the following values:\n      //   Unknown = 0,\n      //   Win = 1,\n      //   Loss = 2,\n      //   Tie = 3\n      \"PlayerMatchOutcome\": \"int\",\n\n      // Information about the capture points the player interacted with in the match. If\n      // the match is not complete, this will be null.\n      \"PointStats\": {\n\n        // ID of the capture point.\n        \"string\": {\n\n          // Number of times the player captured the point. \n          \"TimesCaptured\": \"int\"\n        }\n      },\n\n      // Information about the units the player interacted with in the match. If the\n      // match is not complete, this will be null.\n      \"UnitStats\": {\n\n        // ID of the unit. Units are available via the Metadata API as Game Objects.\n        \"string\": {\n\n          // Number of times the player trained a unit of this type.\n          \"TotalBuilt\": \"int\",\n\n          // Number of times the player lost a unit of this type.\n          \"TotalLost\": \"int\",\n\n          // Number of times the player assisted in killing a unit of this type.\n          \"TotalDestroyed\": \"int\"\n        }\n      },\n\n      // Information about the cards the player used in the match. If the match is not\n      // complete, this will be null.\n      \"CardStats\": {\n\n        // ID of the card. Cards are available via the Metadata API.\n        \"guid\": {\n\n          // Number of times the player played a card of this type.\n          \"TotalPlays\": \"int\"\n        }\n      },\n\n      // Information about the waves the player participated in. If the match is not\n      // complete, this will be null.\n      \"WaveStats\": {\n\n        // Wave number.\n        \"int\": {\n\n          // Duration of how long the team the player was on took to complete the wave.\n          // This is expressed as an ISO 8601 Duration.\n          \"WaveDuration\": \"string\"\n        }\n      },\n\n      // Information about the leader powers the player used in the match. If the match\n      // is not complete, this will be null.\n      \"LeaderPowerStats\": {\n\n        // ID of the leader power. Leader Powers are available via the Metadata API.\n        \"string\": {\n\n          // Number of times the player used a leader power of this type.\n          \"TimesCast\": \"int\"\n        }\n      },\n\n      // XP progress the player earned as a result of their participation in the match. \n      \"XPProgress\": {\n\n        // Total amount of XP the player had when they entered the match.\n        \"PreviousTotalXP\": \"int\",\n\n        // XP the player earned as a result of actions taken in the match. This does not\n        // include XP the player earned as a result of challenges completed in the match,\n        // which is reported separately. If the match is not complete, this will be 0.\n        \"GameplayXP\": \"int\",\n\n        // XP the player earned as a result of completing challenges in the match. This\n        // does not include XP the player earned as a result of actions taken in the\n        // match, which is reported separately. If the match is not complete, this will\n        // be 0.\n        \"ChallengesXP\": \"int\",\n\n        // Total amount of XP the player had after the match. If the match is not\n        // complete, this will be 0.\n        \"UpdatedTotalXP\": \"int\",\n\n        // Spartan Ranks the player completed as a result of the XP earned in the match.\n        // If this collection is empty, the player did not earn enough XP in this match\n        // to complete a rank. There is no significance to the ordering of this\n        // collection.\n        \"CompletedSpartanRanks\": [\n          {\n            // Spartan Rank the player completed. Spartan Ranks are available via the\n            // Metadata API.\n            \"Id\": \"guid\",\n\n            // Packs the player was awarded as a result of completing the rank. There is\n            // no significance to the ordering of this collection. Packs are available\n            // via the Metadata API.\n            \"PacksAwarded\": [ \"guid\" ]\n          }\n        ]\n      },\n\n      // Rating progress the player earned as a result of their participation in the\n      // match.\n      \"RatingProgress\": {\n\n        // Competitive Skill Ranking (CSR) of the player before the match started. If the\n        // match did not occur in a ranked playlist, this will be null.\n        \"PreviousCsr\": {\n\n          // CSR Tier. CSR Tiers are designation-specific. If the player is still in\n          // measurement matches, this field will be null. CSR Tiers are referenced by\n          // CSR Designations, which are available via the Metadata API.\n          \"Tier\": \"int\",\n\n          // CSR Designation. If the player is still in measurement matches, this field\n          // will be null. CSR Designations are available via the Metadata API.\n          \"Designation\": \"int\",\n\n          // Raw CSR value. If the player is still in measurement matches, this field\n          // will be null. If the player is not in a high enough designation, this will\n          // be zero.\n          \"Raw\": \"int\",\n\n          // Percentage of progress towards the next CSR tier. If the player is still in\n          // measurement matches, this field will be null.\n          \"PercentToNextTier\": \"int\",\n\n          // Number of measurement matches remaining until the player earns a CSR. If\n          // this field is greater than zero, the player does not have a CSR yet and the\n          // other components of the CSR will be null.\n          \"MeasurementMatchesRemaining\": \"int\",\n\n          // Player's ranking on the CSR leaderboard. If the player is still in\n          // measurement matches, this field will be null. If the player is not in a high\n          // enough designation, this will be zero.\n          \"Rank\": \"int\"\n        },\n\n        // Competitive Skill Ranking (CSR) of the player after the match ended. If the\n        // match did not occur in a ranked playlist, this will be null. If the match is\n        // not complete, this will be null.\n        \"UpdatedCsr\": {\n\n          // CSR Tier. CSR Tiers are designation-specific. If the player is still in\n          // measurement matches, this field will be null. CSR Tiers are referenced by\n          // CSR Designations, which are available via the Metadata API.\n          \"Tier\": \"int\",\n\n          // CSR Designation. If the player is still in measurement matches, this field\n          // will be null. CSR Designations are available via the Metadata API.\n          \"Designation\": \"int\",\n\n          // Raw CSR value. If the player is still in measurement matches, this field\n          // will be null. If the player is not in a high enough designation, this will\n          // be zero.\n          \"Raw\": \"int\",\n\n          // Percentage of progress towards the next CSR tier. If the player is still in\n          // measurement matches, this field will be null.\n          \"PercentToNextTier\": \"int\",\n\n          // Number of measurement matches remaining until the player earns a CSR. If\n          // this field is greater than zero, the player does not have a CSR yet and the\n          // other components of the CSR will be null.\n          \"MeasurementMatchesRemaining\": \"int\",\n\n          // Player's ranking on the CSR leaderboard. If the player is still in\n          // measurement matches, this field will be null. If the player is not in a high\n          // enough designation, this will be zero.\n          \"Rank\": \"int\"\n        },\n\n        // Internal use.\n        \"PreviousMmr\": {\n\n          \"Rating\": \"double\",\n\n          \"Variance\": \"double\",\n\n          // Unused.\n          \"LastModifiedDate\": {\n\n            \"ISO8601Date\": \"string\"\n          }\n        },\n\n        // Internal use.\n        \"UpdatedMmr\": {\n\n          \"Rating\": \"double\",\n\n          \"Variance\": \"double\",\n\n          // Unused.\n          \"LastModifiedDate\": {\n\n            \"ISO8601Date\": \"string\"\n          }\n        }\n      }\n    }\n  }\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a0ef628d-ec4f-36aa-bd7e-d16e1a1bf788",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-Wars-2-Match-Result"
        }
      }
    },
    "insertionIndex" : 33
  }, {
    "id" : "cf51dd4f-242a-3702-a3ed-b07670dffa77",
    "name" : "Halo 5 PC - Player Service Records - Custom - 503",
    "request" : {
      "urlPath" : "/h5pc/servicerecords/custom",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "s6hsqslsu1e8jb6b1a62e11uly3u7d8l7v90ggpicypktlaoxpdxm7lihl9h64pumvnth5rkbf8a72uiq5ckn8qrzpd38ioxrk8eb"
        }
      }
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "cf51dd4f-242a-3702-a3ed-b07670dffa77",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-PC-Player-Service-Records-Custom"
        }
      }
    },
    "insertionIndex" : 34
  }, {
    "id" : "f9d271f8-cdd3-3b91-b883-2da508fdfc52",
    "name" : "Halo 5 PC - Player Service Records - Custom - 500",
    "request" : {
      "urlPath" : "/h5pc/servicerecords/custom",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "8039l1pzdjtqiabmhcphg95ujlsr4cxo9rhjecdrn011k35zhx922sez41whd8vm5gjayjwbbl6z9v2wvsa68c0dnvvontlll09wz91cr94wt77nezt2q5inxbxratmagr7njilkrd7blcny7mbtcrg25gdfvbf4rc0w5bryh9f5vkro1u"
        }
      }
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "f9d271f8-cdd3-3b91-b883-2da508fdfc52",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-PC-Player-Service-Records-Custom"
        }
      }
    },
    "insertionIndex" : 35
  }, {
    "id" : "4777eedb-711b-3814-8dbd-9685dec99071",
    "name" : "Halo 5 PC - Player Service Records - Custom - 404",
    "request" : {
      "urlPath" : "/h5pc/servicerecords/custom",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "gitqnze90azssrqsycnivblu2"
        }
      }
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "4777eedb-711b-3814-8dbd-9685dec99071",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-PC-Player-Service-Records-Custom"
        }
      }
    },
    "insertionIndex" : 36
  }, {
    "id" : "3e27ee78-a97c-3edc-a009-49a46d74667b",
    "name" : "Halo 5 PC - Player Service Records - Custom (application/json)",
    "request" : {
      "urlPath" : "/h5pc/servicerecords/custom",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      },
      "queryParameters" : {
        "players" : {
          "equalTo" : "xvyjeoo25hy62c89x821ms4u1n4y92enw8tpq7guzvp4wdzjiy3xiulac4pc7kczfohyasw4x0"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // Set of responses. One per user queried.\n  \"Results\": [\n    {\n      // The player's gamertag.\n      \"Id\": \"string\",\n\n      // The result of the query for the player. One of the following:\n      //   Success = 0,\n      //   NotFound = 1,\n      //   ServiceFailure = 2,\n      //   ServiceUnavailable = 3\n      // It is possible for different requests from the batch to succeed and fail\n      // independently.\n      \"ResultCode\": \"int\",\n\n      // The Service Record result for the player. Only set if ResultCode is Success.\n      \"Result\": {\n\n        // Custom stats data.\n        \"CustomStats\": {\n\n          // List of custom stats by CustomGameBaseVariant.\n          \"CustomGameBaseVariantStats\": [\n            {\n              // The game base variant specific stats. Flexible stats are available via\n              // the Metadata API.\n              \"FlexibleStats\": {\n\n                // The set of flexible stats that are derived from medal events.\n                \"MedalStatCounts\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The number of times this flexible stat was earned.\n                    \"Count\": \"int\"\n                  }\n                ],\n\n                // The set of flexible stats that are derived from impulse events.\n                \"ImpulseStatCounts\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The number of times this flexible stat was earned.\n                    \"Count\": \"int\"\n                  }\n                ],\n\n                // The set of flexible stats that are derived from medal time lapses.\n                \"MedalTimelapses\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The amount of time the flexible stat was earned for. This is\n                    // expressed as an ISO 8601 Duration.\n                    \"Timelapse\": \"string\"\n                  }\n                ],    \n\n                // The set of flexible stats that are derived from impulse time lapses.\n                \"ImpulseTimelapses\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The amount of time the flexible stat was earned for. This is\n                    // expressed as an ISO 8601 Duration.\n                    \"Timelapse\": \"string\"\n                  }\n                ]\n              },\n\n              // The ID of the game base variant. Game base variants are available via\n              // the Metadata API.\n              \"GameBaseVariantId\": \"guid\",\n\n              // Total number of kills done by the player. This includes melee kills,\n              // shoulder bash kills and Spartan charge kills, all power weapons, AI\n              // kills and vehicle destructions. \n              \"TotalKills\": \"int\",\n\n              // Total number of headshots done by the player.\n              \"TotalHeadshots\": \"int\",\n\n              // Total weapon damage dealt by the player.\n              \"TotalWeaponDamage\": \"double\",\n\n              // Total number of shots fired by the player.\n              \"TotalShotsFired\": \"int\",\n\n              // Total number of shots landed by the player.\n              \"TotalShotsLanded\": \"int\",\n\n              // The weapon the player used to get the most kills.\n              \"WeaponWithMostKills\": {\n\n                \"WeaponId\": {\n\n                  // The ID of the weapon. Weapons are available via the Metadata API.\n                  \"StockId\": \"int\",\n\n                  // Any attachments the weapon had.\n                  \"Attachments\": [\n                    \"int\"\n                  ]\n                },\n\n                // The number of shots fired for this weapon.\n                \"TotalShotsFired\": \"int\",\n\n                // The number of shots landed for this weapon.\n                \"TotalShotsLanded\": \"int\",\n\n                // The number of headshots for this weapon.\n                \"TotalHeadshots\": \"int\",\n\n                // The number of kills for this weapon.\n                \"TotalKills\": \"int\",\n\n                // The total damage dealt for this weapon.\n                \"TotalDamageDealt\": \"double\",\n\n                // The total possession time for this weapon. This is expressed as an ISO\n                // 8601 Duration.\n                \"TotalPossessionTime\": \"string\"\n              },\n\n              // Total number of melee kills by the player.\n              \"TotalMeleeKills\": \"int\",\n\n              // Total melee damage dealt by the player.\n              \"TotalMeleeDamage\": \"double\",\n\n              // Total number of assassinations by the player.\n              \"TotalAssassinations\": \"int\",\n\n              // Total number of ground pound kills by the player.\n              \"TotalGroundPoundKills\": \"int\",\n\n              // Total ground pound damage dealt by the player.\n              \"TotalGroundPoundDamage\": \"double\",\n\n              // Total number of shoulder bash kills by the player.\n              \"TotalShoulderBashKills\": \"int\",\n\n              // Total shoulder bash damage dealt by the player.\n              \"TotalShoulderBashDamage\": \"double\",\n\n              // Total grenade damage dealt by the player.\n              \"TotalGrenadeDamage\": \"double\",\n\n              // Total number of power weapon kills by the player.\n              \"TotalPowerWeaponKills\": \"int\",\n\n              // Total power weapon damage dealt by the player.\n              \"TotalPowerWeaponDamage\": \"double\",\n\n              // Total number of power weapon grabs by the player.\n              \"TotalPowerWeaponGrabs\": \"int\",\n\n              // Total power weapon possession by the player. This is expressed as an ISO\n              // 8601 Duration.\n              \"TotalPowerWeaponPossessionTime\": \"string\",\n\n              // Total number of deaths by the player.\n              \"TotalDeaths\": \"int\",\n\n              // Total number of assists by the player.\n              \"TotalAssists\": \"int\",\n\n              // Total number of games the player has completed.\n              \"TotalGamesCompleted\": \"int\",\n\n              // Total number of games won by the player.\n              \"TotalGamesWon\": \"int\",\n\n              // Total number of games lost by the player.\n              \"TotalGamesLost\": \"int\",\n\n              // Total number of games tied by the player.\n              \"TotalGamesTied\": \"int\",\n\n              // Total timed played by the player.\n              \"TotalTimePlayed\": \"string\",\n\n              // Total number of grenade kills by the player.\n              \"TotalGrenadeKills\": \"int\",\n\n              // The set of Medals earned by the player.\n              \"MedalAwards\": [\n                {\n                  // The ID of the Medal. Medals are available via the Metadata API.\n                  \"MedalId\": \"int\",\n\n                  // The number of times the Medal was earned.\n                  \"Count\": \"int\"\n                }\n              ], \n\n              // List of enemy vehicles destroyed. Vehicles are available via the\n              // Metadata API. Note: this stat measures enemy vehicles, not any vehicle\n              // destruction.\n              \"DestroyedEnemyVehicles\": [\n                {\n                  // The enemy this entry references\n                  \"Enemy\": {\n\n                    // The Base ID for the enemy.\n                    \"BaseId\": \"int\",\n\n                    // The attachments (variants) for the enemy.\n                    \"Attachments\": [\n                      \"int\"\n                    ]\n                  },\n\n                  // Total number of kills on the enemy by the player\n                  \"TotalKills\": \"int\"\n                }\n              ],\n\n              // List of enemies killed, per enemy type. Enemies are available via the\n              // Metadata API.\n              \"EnemyKills\": [\n                {\n                  // The enemy this entry references\n                  \"Enemy\": {\n\n                    // The Base ID for the enemy.\n                    \"BaseId\": \"int\",\n\n                    // The attachments (variants) for the enemy.\n                    \"Attachments\": [\n                      \"int\"\n                    ]\n                  },\n\n                  // Total number of kills on the enemy by the player\n                  \"TotalKills\": \"int\"\n                }\n              ],\n\n              // The set of weapons (weapons and vehicles included) used by the player.\n              \"WeaponStats\": [\n                {\n                  \"WeaponId\": {\n\n                    // The ID of the weapon. Weapons are available via the Metadata API.\n                    \"StockId\": \"int\",\n\n                    // Any attachments the weapon had.\n                    \"Attachments\": [ \n                      \"int\" \n                    ]\n                  },\n\n                  // The number of shots fired for this weapon.\n                  \"TotalShotsFired\": \"int\",\n\n                  // The number of shots landed for this weapon.\n                  \"TotalShotsLanded\": \"int\",\n\n                  // The number of headshots for this weapon.\n                  \"TotalHeadshots\": \"int\",\n\n                  // The number of kills for this weapon.\n                  \"TotalKills\": \"int\",\n\n                  // The total damage dealt for this weapon.\n                  \"TotalDamageDealt\": \"double\",\n\n                  // The total possession time for this weapon. This is expressed as an\n                  // ISO 8601 Duration.\n                  \"TotalPossessionTime\": \"string\"\n                }\n              ],\n\n              // The set of Impulses (invisible Medals) earned by the player.\n              \"Impulses\": [\n                {\n                  // The ID of the Impulse. Impulses are available via the Metadata API.\n                  \"Id\": \"int\",\n\n                  // The number of times the Impulse was earned.\n                  \"Count\": \"int\"\n                }\n              ],\n\n              // Total number of Spartan kills by the player.\n              \"TotalSpartanKills\": \"int\"\n            }\n          ],\n\n          // A list of up to 3 top game base variants played by the user Top means\n          // Wins/Completed matches. If there is a tie, the one with more completions is\n          // higher. If there's still a tie, the GUIDs are sorted and selected\n          \"TopGameBaseVariants\": [\n            {\n              // Rank between 1-3\n              \"GameBaseVariantRank\": \"int\",\n\n              // Number of games played in game base variant\n              \"NumberOfMatchesCompleted\": \"int\",\n\n              // Id of the game base variant\n              \"GameBaseVariantId\": \"guid\",\n\n              // Number of matches won on game base variant\n              \"NumberOfMatchesWon\": \"int\"\n            }\n          ],\n\n          // Total number of kills done by the player. This includes melee kills,\n          // shoulder bash kills and Spartan charge kills, all power weapons, AI kills\n          // and vehicle destructions. \n          \"TotalKills\": \"int\",\n\n          // Total number of headshots done by the player.\n          \"TotalHeadshots\": \"int\",\n\n          // Total weapon damage dealt by the player.\n          \"TotalWeaponDamage\": \"double\",\n\n          // Total number of shots fired by the player.\n          \"TotalShotsFired\": \"int\",\n\n          // Total number of shots landed by the player.\n          \"TotalShotsLanded\": \"int\",\n\n          // The weapon the player used to get the most kills.\n          \"WeaponWithMostKills\": {\n\n            \"WeaponId\": {\n\n              // The ID of the weapon. Weapons are available via the Metadata API.\n              \"StockId\": \"int\",\n\n              // Any attachments the weapon had.\n              \"Attachments\": [\n                \"int\"\n              ]\n            },\n\n            // The number of shots fired for this weapon.\n            \"TotalShotsFired\": \"int\",\n\n            // The number of shots landed for this weapon.\n            \"TotalShotsLanded\": \"int\",\n\n            // The number of headshots for this weapon.\n            \"TotalHeadshots\": \"int\",\n\n            // The number of kills for this weapon.\n            \"TotalKills\": \"int\",\n\n            // The total damage dealt for this weapon.\n            \"TotalDamageDealt\": \"double\",\n\n            // The total possession time for this weapon. This is expressed as an ISO\n            // 8601 Duration.\n            \"TotalPossessionTime\": \"string\"\n          },\n\n          // Total number of melee kills by the player.\n          \"TotalMeleeKills\": \"int\",\n\n          // Total melee damage dealt by the player.\n          \"TotalMeleeDamage\": \"double\",\n\n          // Total number of assassinations by the player.\n          \"TotalAssassinations\": \"int\",\n\n          // Total number of ground pound kills by the player.\n          \"TotalGroundPoundKills\": \"int\",\n\n          // Total ground pound damage dealt by the player.\n          \"TotalGroundPoundDamage\": \"double\",\n\n          // Total number of shoulder bash kills by the player.\n          \"TotalShoulderBashKills\": \"int\",\n\n          // Total shoulder bash damage dealt by the player.\n          \"TotalShoulderBashDamage\": \"double\",\n\n          // Total grenade damage dealt by the player.\n          \"TotalGrenadeDamage\": \"double\",\n\n          // Total number of power weapon kills by the player.\n          \"TotalPowerWeaponKills\": \"int\",\n\n          // Total power weapon damage dealt by the player.\n          \"TotalPowerWeaponDamage\": \"double\",\n\n          // Total number of power weapon grabs by the player.\n          \"TotalPowerWeaponGrabs\": \"int\",\n\n          // Total power weapon possession by the player. This is expressed as an ISO\n          // 8601 Duration.\n          \"TotalPowerWeaponPossessionTime\": \"string\",\n\n          // Total number of deaths by the player.\n          \"TotalDeaths\": \"int\",\n\n          // Total number of assists by the player.\n          \"TotalAssists\": \"int\",\n\n          // Not used.\n          \"TotalGamesCompleted\": \"int\",\n\n          // Not used.\n          \"TotalGamesWon\": \"int\",\n\n          // Not used.\n          \"TotalGamesLost\": \"int\",\n\n          // Not used.\n          \"TotalGamesTied\": \"int\",\n\n          // Total timed played by the player.\n          \"TotalTimePlayed\": \"string\",\n\n          // Total number of grenade kills by the player.\n          \"TotalGrenadeKills\": \"int\",\n\n          // The set of Medals earned by the player.\n          \"MedalAwards\": [\n            {\n              // The ID of the Medal. Medals are available via the Metadata API.\n              \"MedalId\": \"int\",\n\n              // The number of times the Medal was earned.\n              \"Count\": \"int\"\n            }\n          ], \n\n          // List of enemy vehicles destroyed. Vehicles are available via the Metadata\n          // API. Note: this stat measures enemy vehicles, not any vehicle destruction.\n          \"DestroyedEnemyVehicles\": [\n            {\n              // The enemy this entry references\n              \"Enemy\": {\n\n                // The Base ID for the enemy.\n                \"BaseId\": \"int\",\n\n                // The attachments (variants) for the enemy.\n                \"Attachments\": [\n                  \"int\"\n                ]\n              },\n\n              // Total number of kills on the enemy by the player\n              \"TotalKills\": \"int\"\n            }\n          ],\n\n          // List of enemies killed, per enemy type. Enemies are available via the\n          // Metadata API.\n          \"EnemyKills\": [\n            {\n              // The enemy this entry references\n              \"Enemy\": {\n\n                // The Base ID for the enemy.\n                \"BaseId\": \"int\",\n\n                // The attachments (variants) for the enemy.\n                \"Attachments\": [\n                  \"int\"\n                ]\n              },\n\n              // Total number of kills on the enemy by the player\n              \"TotalKills\": \"int\"\n            }\n          ],\n\n          // The set of weapons (weapons and vehicles included) used by the player.\n          \"WeaponStats\": [\n            {\n              \"WeaponId\": {\n\n                // The ID of the weapon. Weapons are available via the Metadata API.\n                \"StockId\": \"int\",\n\n                // Any attachments the weapon had.\n                \"Attachments\": [ \n                  \"int\" \n                ]\n              },\n\n              // The number of shots fired for this weapon.\n              \"TotalShotsFired\": \"int\",\n\n              // The number of shots landed for this weapon.\n              \"TotalShotsLanded\": \"int\",\n\n              // The number of headshots for this weapon.\n              \"TotalHeadshots\": \"int\",\n\n              // The number of kills for this weapon.\n              \"TotalKills\": \"int\",\n\n              // The total damage dealt for this weapon.\n              \"TotalDamageDealt\": \"double\",\n\n              // The total possession time for this weapon. This is expressed as an ISO\n              // 8601 Duration.\n              \"TotalPossessionTime\": \"string\"\n            }\n          ],\n\n          // The set of Impulses (invisible Medals) earned by the player.\n          \"Impulses\": [\n            {\n              // The ID of the Impulse. Impulses are available via the Metadata API.\n              \"Id\": \"int\",\n\n              // The number of times the Impulse was earned.\n              \"Count\": \"int\"\n            }\n          ],\n\n          // Total number of Spartan kills by the player.\n          \"TotalSpartanKills\": \"int\"\n        },\n\n        // Information about the player for whom this data was returned.\n        \"PlayerId\": {\n\n          // The gamertag of the player queried.\n          \"GamerTag\": \"string\",\n\n          // Internal use only. This will always be null.\n          \"Xuid\": null\n        },\n\n        // The player's Spartan Rank. Zero for custom.\n        \"SpartanRank\": \"int\",\n\n        // The player's XP. Zero for custom.\n        \"Xp\": \"int\"\n      }\n    }\n  ],\n\n  // Internal use only. A set of related resource links.\n  \"Links\": null\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3e27ee78-a97c-3edc-a009-49a46d74667b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-PC-Player-Service-Records-Custom"
        }
      }
    },
    "insertionIndex" : 37
  }, {
    "id" : "9828013e-a3a8-3cb8-acbb-6033286db12e",
    "name" : "Halo 5 PC - Player Match History - 503",
    "request" : {
      "urlPath" : "/h5pc/players/4vb/matches",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "9828013e-a3a8-3cb8-acbb-6033286db12e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-PC-Player-Match-History"
        }
      }
    },
    "insertionIndex" : 38
  }, {
    "id" : "4586a448-abca-3ca6-8270-97025eb98aa2",
    "name" : "Halo 5 PC - Player Match History - 500",
    "request" : {
      "urlPath" : "/h5pc/players/iq1mj5f9n7crmpk642xl6h8lf2ru5cysilocx7trujq5fw5s6aokci13nl06/matches",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "4586a448-abca-3ca6-8270-97025eb98aa2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-PC-Player-Match-History"
        }
      }
    },
    "insertionIndex" : 39
  }, {
    "id" : "3ead945b-3622-3714-868b-059f1b498a85",
    "name" : "Halo 5 PC - Player Match History - 404",
    "request" : {
      "urlPath" : "/h5pc/players/lpygwzip7xecmgkukqnqer5801t95vkdauzm8ddfbfitgrqh78l5mjhht2jzmbczrmrbg8oindbbedmvur112isjgec6yjs9q2wbbp332fl2c1vo3gfz9ql9hw80ot0lg0cn1zjam640fsa00pvywod/matches",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "3ead945b-3622-3714-868b-059f1b498a85",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-PC-Player-Match-History"
        }
      }
    },
    "insertionIndex" : 40
  }, {
    "id" : "93246c5b-741a-3074-b7aa-e20bfb4ed9d5",
    "name" : "Halo 5 PC - Player Match History - 400",
    "request" : {
      "urlPath" : "/h5pc/players/e0p5/matches",
      "method" : "GET"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "93246c5b-741a-3074-b7aa-e20bfb4ed9d5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-PC-Player-Match-History"
        }
      }
    },
    "insertionIndex" : 41
  }, {
    "id" : "d9d21c71-095e-3780-9c13-230262f0de0a",
    "name" : "Halo 5 PC - Player Match History (application/json)",
    "request" : {
      "urlPath" : "/h5pc/players/v7oc32a15cyoseffpi7nq0ridt819lnlbmemonyneb9dtahvz3fr1kuv3j4szaksm5deywujbkbkxgtijumog0g30kcgtzvkzplxlbyp4vem7p4t00w91zfdup8uookewm612rdaw8z8jkhvyo16bhki6aogz2da47kb/matches",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // The starting point that was used. When the \"start\" query string parameter is\n  // specified, this value is identical. When \"start\" is omitted, the default value is\n  // returned.\n  \"Start\": \"int\",  \n\n  // The number of results that the service attempted to retrieve to satisfy this\n  // request. Normally this value is equal to the \"count\" parameter. If the client\n  // specified a count parameter greater than the maximum allowed, this value contains\n  // the maximum allowed amount.\n  \"Count\": \"int\",\n\n  // The number of results that are actually being returned in this response. This field\n  // is named \"ResultCount\" to avoid confusion with \"Count\".\n  \"ResultCount\": \"int\",\n\n  // A list of recent matches. Matches are listed in reverse chronological order with the\n  // most recently started match first.\n  \"Results\": [\n    {\n      // Internal use only. A set of related resource links.\n      \"Links\": \"links\",\n\n      \"Id\": {\n\n        // The ID for this match. More match details are available via the applicable\n        // Match Result Endpoint.\n        \"MatchId\": \"guid\",\n\n        // The game mode applicable to this match. Options are: \n        //   Error = 0, \n        //   Arena = 1, \n        //   Campaign = 2, \n        //   Custom = 3, \n        //   Warzone = 4,\n        //   CustomLocal = 6.\n        \"GameMode\": \"int\",\n\n      },\n\n      // The ID of the playlist (aka \"Hopper\") for the match. \n      // Hoppers are used in Arena and Warzone. In Arena, they function just as you would\n      // expect, similar to previous Halo titles. Warzone uses hoppers as well. There\n      // will be multiple Warzone hoppers which contain a rotating playlist of scenarios\n      // to play. \n      // Null for campaign & custom games. \n      // Playlists are available via the Metadata API.\n      \"HopperId\": \"guid\",\n\n      // The ID of the base map for this match. Maps are available via the Metadata API.\n      \"MapId\": \"guid\",\n\n      // The variant of the map for this match. There are two sources of map variants:\n      // official map variants available via the Metadata API and user-generated map\n      // variants which are not available via the APIs currently. This will be null for\n      // campaign games.\n      \"MapVariant\": {\n\n        // The resource type. 3 indicates map variant.\n        \"ResourceType\": 3,\n\n        // The ID of the map variant. Official map variants are available via the\n        // Metadata API.\n        \"ResourceId\": \"guid\",\n\n        // The source of the map variant. Options are:\n        //   Unknown = 0,\n        //   User-generated = 1,\n        //   Official = 3.\n        \"OwnerType\": \"int\",\n\n        // The gamertag of the user that created the map variant if this is a\n        // user-generated map variant, or null otherwise. \n        \"Owner\": \"string\"\n      },\n\n      // The ID of the game base variant for this match. Game base variants are available\n      // via the Metadata API.\n      \"GameBaseVariantId\": \"guid\",\n\n      // The variant of the game for this match. There are two sources of game variants:\n      // official game variants available via the Metadata API and user-generated game\n      // variants which are not available via the APIs currently. This will be null for\n      // campaign games.\n      \"GameVariant\": {\n\n        // The resource type. 2 indicates game variant.\n        \"ResourceType\": 2,\n\n        // The ID of the game variant. Official game variants are available via the\n        // Metadata API.\n        \"ResourceId\": \"guid\",        \n\n        // The source of the game variant. Options are:\n        //   Unknown = 0,\n        //   User-generated = 1,\n        //   Official = 3.\n        \"OwnerType\": \"int\",\n\n        // The gamertag of the user that created the game variant if this is a\n        // user-generated game variant, or null otherwise. \n        \"Owner\": \"string\"\n      },\n\n      // The length of the match. This is expressed as an ISO 8601 Duration.\n      \"MatchDuration\": \"string\",\n\n      // The date and time when the match ended. Note that this is different than the\n      // processing date, once matches end they typically take a small amount of time to\n      // process. The processing date is not available through this API. The time\n      // component of this date is set to \"00:00:00\" unless the \"{include-times}\" request\n      // parameter is set to \"true\". This is expressed as an ISO 8601 combined Date and\n      // Time.\n      \"MatchCompletedDate\": {\n\n        \"ISO8601Date\": \"string\"\n      },\n\n      // Provides team data. This list contains all team that Won or Tied. Losing teams\n      // are not included. This list is empty for campaign games. \n      \"Teams\": [\n        {\n          // The ID for the team. The team's ID dictates the team's color. Team colors\n          // are available via the Metadata API.\n          \"Id\": \"int\",\n\n          // The team's score at the end of the match. The way the score is determined is\n          // based off the game base variant being played: \n          //   Breakout = number of rounds won,\n          //   CTF = number of flag captures,\n          //   Slayer = number of kills,\n          //   Strongholds = number of points,\n          //   Warzone = number of points.\n          // Score can be a negative value. Unfortunately, this value is returned as an\n          // unsigned 32-bit integer. This means that if the score is -1, the score\n          // reported is 4,294,967,295.\n          \"Score\": \"uint32\",\n\n          // The team's rank at the end of the match.\n          \"Rank\": \"int\"\n        }\n      ],\n\n      // This field contains the player's data. This will only contain data for the\n      // player specified in the request.\n      \"Players\": [\n        {          \n          \"Player\": {\n\n            // The player's gamertag.\n            \"Gamertag\": \"string\",\n\n            // Internal use only. This will always be null.\n            \"Xuid\": null\n          },\n\n          // The ID of the team that the player was on when the match ended. Zero for\n          // campaign games.\n          \"TeamId\": \"int\",\n\n          // The player's team-agnostic ranking in this match.\n          \"Rank\": \"int\",\n\n          // Indicates what result the player received at the conclusion of the match.\n          // Options are:\n          //   Did Not Finish = 0, \n          //   Lost = 1, \n          //   Tied = 2, \n          //   Won = 3. \n          // Did Not Finish: The player was not present when the match ended.\n          // Lost: The player was on a team that was assigned a loss, typically this is\n          // when a team does not have rank = 1. \n          // Won: The player was on the team that was assigned the win, typically this is\n          // the team that has rank = 1. \n          // Tied: The player was on the team that was awarded a tie. Typically this is\n          // when the player is on the team with rank = 1, and there is at least one\n          // other team with rank = 1. Ties are only for rank = 1 teams. Consider the\n          // scenario when exactly one team is rank = 1, and two teams are rank = 2.\n          // Players on the rank=1 team will have \"Won\", players on the rank = 2 teams\n          // will have \"Lost\". For ties, this documentation states 'typically' because\n          // the game may have unique rules for multi-team and FFA scenarios, in which\n          // multiple teams are awarded a win.\n          \"Result\": \"int\",\n\n          // The number of enemy kills the player had during this match. This includes\n          // other Spartans and Enemy AI.\n          \"TotalKills\": \"int\",\n\n          // The number of times this player died during the match.\n          \"TotalDeaths\": \"int\",\n\n          // The number of assists credited to the player during the match. This includes\n          // other Spartans and Enemy AI.\n          \"TotalAssists\": \"int\",\n\n          // Internal use only. This will always be null.\n          \"PreMatchRatings\": null,\n\n          // Internal use only. This will always be null.\n          \"PostMatchRatings\": null\n        }\n      ],\n\n      // Whether this was a team-based game or not (e.g. free-for-all).\n      \"IsTeamGame\": \"boolean\",\n\n      // The ID of the season for this match if it was played in a seasonal playlist.\n      // Null if the match was played in a non-seasonal playlist. This will only be set\n      // for Arena matches and will be null for all other game modes.\n      \"SeasonId\": null,\n\n      // Internal use only. Do not use.\n      \"MatchCompletedDateFidelity\": \"int\"\n    }\n  ]\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d9d21c71-095e-3780-9c13-230262f0de0a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-PC-Player-Match-History"
        }
      }
    },
    "insertionIndex" : 42
  }, {
    "id" : "e98c734d-8dd6-38df-813b-8adb38a93f4c",
    "name" : "Halo 5 PC - Match Result - Custom - 503",
    "request" : {
      "urlPath" : "/h5pc/custom/matches/372x",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "e98c734d-8dd6-38df-813b-8adb38a93f4c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-PC-Match-Result-Custom"
        }
      }
    },
    "insertionIndex" : 43
  }, {
    "id" : "31bdbbea-3904-300d-814b-f07985c1a38b",
    "name" : "Halo 5 PC - Match Result - Custom - 500",
    "request" : {
      "urlPath" : "/h5pc/custom/matches/o0x7",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "31bdbbea-3904-300d-814b-f07985c1a38b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-PC-Match-Result-Custom"
        }
      }
    },
    "insertionIndex" : 44
  }, {
    "id" : "3439bf7a-0a55-36a7-85ba-6ae444b60a16",
    "name" : "Halo 5 PC - Match Result - Custom - 404",
    "request" : {
      "urlPath" : "/h5pc/custom/matches/rf95",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "3439bf7a-0a55-36a7-85ba-6ae444b60a16",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-PC-Match-Result-Custom"
        }
      }
    },
    "insertionIndex" : 45
  }, {
    "id" : "daac72ac-5df5-3eca-8707-c2a5562b39f0",
    "name" : "Halo 5 PC - Match Result - Custom (application/json)",
    "request" : {
      "urlPath" : "/h5pc/custom/matches/51yp",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // A list of stats for each player who was present in the match.\n  \"PlayerStats\": [\n    {\n      // The number of times the player killed each opponent. If the player did not kill\n      // an opponent, there will be no entry for that opponent.\n      \"KilledOpponentDetails\": [\n        {\n          // The gamertag of the opponent that was killed.\n          \"GamerTag\": \"string\",\n\n          // The number of times that opponent was killed.\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The number of times the player was killed by each opponent. If the player was\n      // not killed by an opponent, there will be no entry for that opponent.\n      \"KilledByOpponentDetails\": [\n        {\n          // The gamertag of the opponent that killed the player.\n          \"GamerTag\": \"string\",\n\n          // The number of times the opponent killed the player.\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The game base variant specific stats for this match. Flexible stats are\n      // available via the Metadata API.\n      \"FlexibleStats\": {\n\n        // The set of flexible stats that are derived from medal events.\n        \"MedalStatCounts\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The number of times this flexible stat was earned.\n            \"Count\": \"int\"\n          }\n        ],\n\n        // The set of flexible stats that are derived from impulse events.\n        \"ImpulseStatCounts\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The number of times this flexible stat was earned.\n            \"Count\": \"int\"\n          }\n        ],\n\n        // The set of flexible stats that are derived from medal time lapses.\n        \"MedalTimelapses\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The amount of time the flexible stat was earned for. This is expressed as\n            // an ISO 8601 Duration.\n            \"Timelapse\": \"string\"\n          }\n        ],        \n\n        // The set of flexible stats that are derived from impulse time lapses.\n        \"ImpulseTimelapses\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The amount of time the flexible stat was earned for. This is expressed as\n            // an ISO 8601 Duration.\n            \"Timelapse\": \"string\"\n          }\n        ]\n      },\n\n      // Internal use only.\n      \"PresentInMatch\": \"boolean\",\n\n      \"Player\": {\n\n         // The player's gamertag.\n        \"Gamertag\": \"string\",\n\n        // Internal use only. This will always be null.\n        \"Xuid\": null\n      },\n\n      // The ID of the team that the player was on when the match ended. \n      \"TeamId\": \"int\",\n\n      // The player's team-agnostic ranking.\n      \"Rank\": \"int\",\n\n      // Indicates whether the player was present in the match when it ended.\n      \"DNF\": \"boolean\",\n\n      // The player's average lifetime.\n      \"AvgLifeTimeOfPlayer\": \"string\",\n\n      // Internal use only. This will always be null.\n      \"PreMatchRatings\": null,\n\n      // Internal use only. This will always be null.\n      \"PostMatchRatings\": null,\n\n      // The Player's Score. This is not used by all Game Variants and may contain null\n      // or invalid data.\n      \"PlayerScore\": \"int\",\n\n      // Total number of kills done by the player. This includes melee kills, shoulder\n      // bash kills and Spartan charge kills, all power weapons, AI kills and vehicle\n      // destructions. \n      \"TotalKills\": \"int\",\n\n      // Total number of headshots done by the player.\n      \"TotalHeadshots\": \"int\",\n\n      // Total weapon damage dealt by the player.\n      \"TotalWeaponDamage\": \"double\",\n\n      // Total number of shots fired by the player.\n      \"TotalShotsFired\": \"int\",\n\n      // Total number of shots landed by the player.\n      \"TotalShotsLanded\": \"int\",\n\n      // The weapon the player used to get the most kills this match.\n      \"WeaponWithMostKills\": {\n\n        \"WeaponId\": {\n\n          // The ID of the weapon. Weapons are available via the Metadata API.\n          \"StockId\": \"int\",\n\n          // Any attachments the weapon had.\n          \"Attachments\": [ \"int\" ]\n        },\n\n        // The number of shots fired for this weapon.\n        \"TotalShotsFired\": \"int\",\n\n        // The number of shots landed for this weapon.\n        \"TotalShotsLanded\": \"int\",\n\n        // The number of headshots for this weapon.\n        \"TotalHeadshots\": \"int\",\n\n        // The number of kills for this weapon.\n        \"TotalKills\": \"int\",\n\n        // The total damage dealt for this weapon.\n        \"TotalDamageDealt\": \"double\",\n\n        // The total possession time for this weapon. This is expressed as an ISO 8601\n        // Duration.\n        \"TotalPossessionTime\": \"string\"\n      },\n\n      // Total number of melee kills by the player.\n      \"TotalMeleeKills\": \"int\",\n\n      // Total melee damage dealt by the player.\n      \"TotalMeleeDamage\": \"double\",\n\n      // Total number of assassinations by the player.\n      \"TotalAssassinations\": \"int\",\n\n      // Total number of ground pound kills by the player.\n      \"TotalGroundPoundKills\": \"int\",\n\n      // Total ground pound damage dealt by the player.\n      \"TotalGroundPoundDamage\": \"double\",\n\n      // Total number of shoulder bash kills by the player.\n      \"TotalShoulderBashKills\": \"int\",\n\n      // Total shoulder bash damage dealt by the player.\n      \"TotalShoulderBashDamage\": \"double\",\n\n      // Total grenade damage dealt by the player.\n      \"TotalGrenadeDamage\": \"double\",\n\n      // Total number of power weapon kills by the player.\n      \"TotalPowerWeaponKills\": \"int\",\n\n      // Total power weapon damage dealt by the player.\n      \"TotalPowerWeaponDamage\": \"double\",\n\n      // Total number of power weapon grabs by the player.\n      \"TotalPowerWeaponGrabs\": \"int\",\n\n      // Total power weapon possession by the player. This is expressed as an ISO 8601\n      // Duration.\n      \"TotalPowerWeaponPossessionTime\": \"string\",\n\n      // Total number of deaths by the player.\n      \"TotalDeaths\": \"int\",\n\n      // Total number of assists by the player.\n      \"TotalAssists\": \"int\",\n\n      // Not used.\n      \"TotalGamesCompleted\": \"int\",\n\n      // Not used.\n      \"TotalGamesWon\": \"int\",\n\n      // Not used.\n      \"TotalGamesLost\": \"int\",\n\n      // Not used.\n      \"TotalGamesTied\": \"int\",\n\n      // Total timed played in this match by the player.\n      \"TotalTimePlayed\": \"string\",\n\n      // Total number of grenade kills by the player.\n      \"TotalGrenadeKills\": \"int\",\n\n      // The set of Medals earned by the player.\n      \"MedalAwards\": [\n        {\n          // The ID of the Medal. Medals are available via the Metadata API.\n          \"MedalId\": \"int\",\n\n          // The number of times the Medal was earned.\n          \"Count\": \"int\"\n        }\n      ], \n\n      // List of enemy vehicles destroyed. Vehicles are available via the Metadata API.\n      // Note: this stat measures enemy vehicles, not any vehicle destruction.\n      \"DestroyedEnemyVehicles\": [\n        {\n          // The enemy this entry references\n          \"Enemy\": {\n\n            // The Base ID for the enemy.\n            \"BaseId\": \"int\",\n\n            // The attachments (variants) for the enemy.\n            \"Attachments\": [\n              \"int\"\n            ]\n          },\n\n          // Total number of kills on the enemy by the player\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // List of enemies killed, per enemy type. Enemies are available via the Metadata\n      // API.\n      \"EnemyKills\": [\n        {\n          // The enemy this entry references\n          \"Enemy\": {\n\n            // The Base ID for the enemy.\n            \"BaseId\": \"int\",\n\n            // The attachments (variants) for the enemy.\n            \"Attachments\": [\n              \"int\"\n            ]\n          },\n\n          // Total number of kills on the enemy by the player\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The set of weapons (weapons and vehicles included) used by the player.\n      \"WeaponStats\": [\n        {\n          \"WeaponId\": {\n\n              // The ID of the weapon. Weapons are available via the Metadata API.\n            \"StockId\": \"int\",\n\n              // Any attachments the weapon had.\n            \"Attachments\": [ \n              \"int\" \n            ]\n          },\n\n            // The number of shots fired for this weapon.\n          \"TotalShotsFired\": \"int\",\n\n            // The number of shots landed for this weapon.\n          \"TotalShotsLanded\": \"int\",\n\n            // The number of headshots for this weapon.\n          \"TotalHeadshots\": \"int\",\n\n            // The number of kills for this weapon.\n          \"TotalKills\": \"int\",\n\n            // The total damage dealt for this weapon.\n          \"TotalDamageDealt\": \"double\",\n\n            // The total possession time for this weapon. This is expressed as an ISO\n            // 8601 Duration.\n          \"TotalPossessionTime\": \"string\"\n        }\n      ],\n\n      // The set of Impulses (invisible Medals) earned by the player.\n      \"Impulses\": [\n        {\n          // The ID of the Impulse. Impulses are available via the Metadata API.\n          \"Id\": \"int\",\n\n          // The number of times the Impulse was earned.\n          \"Count\": \"int\"\n        }\n      ],\n\n      // Total number of Spartan kills by the player.\n      \"TotalSpartanKills\": \"int\"\n    },\n\n  ],\n\n  // A list of stats for each team who in the match. Note that in Free For All modes,\n  // there is an entry for every player.\n  \"TeamStats\": [\n    {\n      // The ID for the team.\n      \"TeamId\": \"int\",\n\n      // The team's score at the end of the match. The way the score is determined is\n      // based off the game base variant being played: \n      //   Breakout = number of rounds won,\n      //   CTF = number of flag captures,\n      //   Slayer = number of kills,\n      //   Strongholds = number of points,\n      //   Warzone = number of points.\n      // Score can be a negative value. Unfortunately, this value is returned as an\n      // unsigned 32-bit integer. This means that if the score is -1, the score reported\n      // is 4,294,967,295.\n      \"Score\": \"uint32\",\n\n      // The team's rank at the end of the match.\n      \"Rank\": \"int\",\n\n      // The set of round stats for the team.\n      \"RoundStats\": [\n        {\n          // The round number this entry pertains to.\n          \"RoundNumber\": \"int\",\n\n          // The end rank for the team this round.\n          \"Rank\": \"int\",\n\n          // The end score for the team this round.\n          // Score can be a negative value. Unfortunately, this value is returned as an\n          // unsigned 32-bit integer. This means that if the score is -1, the score\n          // reported is 4,294,967,295.\n          \"Score\": \"uint32\",\n\n        }\n      ]\n    }\n  ],\n\n  // Indicates if the match is completed or not. Some match details are available while\n  // the match is in-progress, but the behavior for incomplete matches in undefined.\n  \"IsMatchOver\": \"boolean\",\n\n  // The length of the match. This is expressed as an ISO 8601 Duration.\n  \"TotalDuration\": \"string\",\n\n  // The variant of the map for this match. Map variants are available via the Metadata\n  // API. More information is available in MapVariantResourceId.\n  \"MapVariantId\": \"guid\",\n\n  // The variant of the game for this match. Game variants are available via the Metadata\n  // API. More information is available in GameVariantResourceId.\n  \"GameVariantId\": \"guid\",\n\n  // The playlist ID of the match. Playlists are available via the Metadata API.\n  \"PlaylistId\": \"guid\",\n\n  // The ID of the base map for this match. Maps are available via the Metadata API.\n  \"MapId\": \"guid\",\n\n  // The ID of the game base variant for this match. Game base variants are available via\n  // the Metadata API.\n  \"GameBaseVariantId\": \"guid\",\n\n  // Whether this was a team-based game or not.\n  \"IsTeamGame\": \"boolean\",\n\n  // Unused for Custom matches. This will always be null.\n  \"SeasonId\": null,\n\n  // The variant of the game for this match. There are two sources of game variants:\n  // official game variants available via the Metadata API and user-generated game\n  // variants are available via the UGC API.\n  \"GameVariantResourceId\": {\n\n    // The resource type. 2 indicates game variant.\n    \"ResourceType\": 2,\n\n    // The ID of the game variant. Official game variants are available via the Metadata\n    // API.\n    \"ResourceId\": \"guid\",        \n\n    // The source of the game variant. Options are:\n    //   Unknown = 0,\n    //   User-generated = 1,\n    //   Official = 3.\n    \"OwnerType\": \"int\",\n\n    // The gamertag of the user that created the game variant if this is a user-generated\n    // game variant, or null otherwise. \n    \"Owner\": \"string\"\n  },\n\n  // The variant of the map for this match. There are two sources of map variants:\n  // official map variants available via the Metadata API and user-generated map variants\n  // available vai the UGC API.\n  \"MapVariantResourceId\": {\n\n    // The resource type. 3 indicates map variant.\n    \"ResourceType\": 3,\n\n    // The ID of the map variant. Official map variants are available via the Metadata\n    // API.\n    \"ResourceId\": \"guid\",\n\n    // The source of the map variant. Options are:\n    //   Unknown = 0,\n    //   User-generated = 1,\n    //   Official = 3.\n    \"OwnerType\": \"int\",\n\n    // The gamertag of the user that created the map variant if this is a user-generated\n    // map variant, or null otherwise. \n    \"Owner\": \"string\"\n  }\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "daac72ac-5df5-3eca-8707-c2a5562b39f0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-PC-Match-Result-Custom"
        }
      }
    },
    "insertionIndex" : 46
  }, {
    "id" : "21071bde-27ce-3ec4-9934-6abe856cb527",
    "name" : "Halo 5 - Match Result - Warzone - 503",
    "request" : {
      "urlPath" : "/h5/warzone/matches/eo37",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "21071bde-27ce-3ec4-9934-6abe856cb527",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Warzone"
        }
      }
    },
    "insertionIndex" : 47
  }, {
    "id" : "a923a957-b792-3cbe-981b-9036ba64552f",
    "name" : "Halo 5 - Match Result - Warzone - 500",
    "request" : {
      "urlPath" : "/h5/warzone/matches/97nw",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "a923a957-b792-3cbe-981b-9036ba64552f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Warzone"
        }
      }
    },
    "insertionIndex" : 48
  }, {
    "id" : "6c6d154a-94fa-3092-bc5c-d68a79b07073",
    "name" : "Halo 5 - Match Result - Warzone - 404",
    "request" : {
      "urlPath" : "/h5/warzone/matches/2n8k",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "6c6d154a-94fa-3092-bc5c-d68a79b07073",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Warzone"
        }
      }
    },
    "insertionIndex" : 49
  }, {
    "id" : "aea6af3c-abe7-34ca-a4ef-ef78d7ca635c",
    "name" : "Halo 5 - Match Result - Warzone (application/json)",
    "request" : {
      "urlPath" : "/h5/warzone/matches/xtdx",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // A list of stats for each player who was present in the match.\n  \"PlayerStats\": [\n    {\n      // The experience information for the player in this match.\n      \"XpInfo\": {\n\n        // The player's Spartan Rank before the match started.\n        \"PrevSpartanRank\": \"int\",\n\n        // The player's Spartan Rank after the match ended.\n        \"SpartanRank\": \"int\",\n\n        // The player's XP before the match started.\n        \"PrevTotalXP\": \"int\",\n\n        // The player's XP after the match ended.\n        \"TotalXP\": \"int\",\n\n        // The multiplier on the XP earned this match based on their Spartan Rank when\n        // the match ended.\n        \"SpartanRankMatchXPScalar\": \"double\",\n\n        // The portion of the XP the player earned this match that was based on how much\n        // time was spent in-match.\n        \"PlayerTimePerformanceXPAward\": \"int\",\n\n        // The XP awarded to the player based on how their team ranked when the match\n        // concluded.\n        \"PerformanceXP\": \"int\",\n\n        // The XP awarded to the player for their team-agnostic rank.\n        \"PlayerRankXPAward\": \"int\",\n\n        // The amount of XP the player earned if they played a boost card for this match,\n        // and the boost card criteria was met. This is a fixed amount of XP, not a\n        // multiplier.\n        \"BoostAmount\": \"int\",\n\n        // The amount of XP the player earned for finishing the match quickly.\n        \"MatchSpeedWinAmount\": \"int\",\n\n        // The amount of XP the player earned for completing objectives.\n        \"ObjectivesCompletedAmount\": \"int\"\n      },\n\n      // The number of times the player killed each opponent. If the player did not kill\n      // an opponent, there will be no entry for that opponent.\n      \"KilledOpponentDetails\": [\n        {\n          // The gamertag of the opponent that was killed.\n          \"GamerTag\": \"string\",\n\n          // The number of times that opponent was killed.\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The number of times the player was killed by each opponent. If the player was\n      // not killed by an opponent, there will be no entry for that opponent.\n      \"KilledByOpponentDetails\": [\n        {\n          // The gamertag of the opponent that killed the player.\n          \"GamerTag\": \"string\",\n\n          // The number of times the opponent killed the player.\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The maximum level the player achieved in the match.\n      \"WarzoneLevel\": \"int\",\n\n      // The total number of \"pies\" (in-game currency) the player earned in the match.\n      \"TotalPiesEarned\": \"int\",\n\n      // The game base variant specific stats for this match. Flexible stats are\n      // available via the Metadata API.\n      \"FlexibleStats\": {\n\n        // The set of flexible stats that are derived from medal events.\n        \"MedalStatCounts\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The number of times this flexible stat was earned.\n            \"Count\": \"int\"\n          }\n        ],\n\n        // The set of flexible stats that are derived from impulse events.\n        \"ImpulseStatCounts\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The number of times this flexible stat was earned.\n            \"Count\": \"int\"\n          }\n        ],\n\n        // The set of flexible stats that are derived from medal time lapses.\n        \"MedalTimelapses\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The amount of time the flexible stat was earned for. This is expressed as\n            // an ISO 8601 Duration.\n            \"Timelapse\": \"string\"\n          }\n        ],        \n\n        // The set of flexible stats that are derived from impulse time lapses.\n        \"ImpulseTimelapses\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The amount of time the flexible stat was earned for. This is expressed as\n            // an ISO 8601 Duration.\n            \"Timelapse\": \"string\"\n          }\n        ]\n      },\n\n      // The set of rewards that the player got in this match. Rewards are available via\n      // the Metadata API.\n      \"RewardSets\": [\n        {\n          // The ID of the reward.\n          \"RewardSet\": \"guid\",\n\n          // The source of the reward. Options are:\n          //   None = 0,\n          //   Meta Commendation = 1,\n          //   Progress Commendation = 2,\n          //   Spartan Rank = 3\n          \"RewardSourceType\": \"int\",\n\n          // If the Reward Source is Spartan Rank, this value is set to the Spartan Rank\n          // the player acquired that led to this reward being granted. Note: Unlike the\n          // commendations fields in this structure, this is not the GUID to a Spartan\n          // Rank content item. That's because the Spartan Rank content item itself does\n          // not detail what specific Spartan Rank it pertains to - this information is\n          // derived from the list of Spartan Ranks as a whole. \n          \"SpartanRankSource\": \"int\",\n\n          // If the Reward Source is a Commendation, this is the ID of the level of the\n          // commendation that earned the reward.\n          \"CommendationLevelId\": \"guid\",\n\n          // If the Reward Source is a Meta Commendation or Progress Commendation, this\n          // is the ID of the Meta Commendation or Progress Commendation, respectively,\n          // that earned the reward.\n          \"CommendationSource\": \"guid\"\n        },\n\n      ],\n\n      // Details on any credits the player may have earned from playing this match.\n      \"CreditsEarned\": {\n\n        // Indicates how the credits result was arrived at. Options are:\n        //   Credits Disabled In Playlist = 0,\n        //   Player Did Not Finish = 1,\n        //   Credits Earned = 2\n        // Credits Disabled In Playlist: TotalCreditsEarned is zero because this playlist\n        // has credits disabled.\n        // Player Did Not Finish: Credits are enabled in this playlist, but\n        // TotalCreditsEarned is zero because the player did not finish the match.\n        // Credits Earned: Credits are enabled in this playlist and the player completed\n        // the match, so the credits formula was successfully evaluated. The fields below\n        // provide the client with the values used in the formula. Note: That if we used\n        // one or more default values, we still return \"NormalResult\". The fields below\n        // will confirm the actual values used.\n        \"Result\": \"int\",\n\n        // The total number of credits the player earned from playing this match.\n        \"TotalCreditsEarned\": \"int\",\n\n        // The scalar applied to the credits earned based on the player's Spartan Rank.\n        \"SpartanRankModifier\": \"double\",\n\n        // The portion of credits earned due to the player's team-agnostic rank in the\n        // match.\n        \"PlayerRankAmount\": \"int\",\n\n        // The portion of credits earned due to the time the player played in the match.\n        \"TimePlayedAmount\": \"double\",\n\n        // The portion of credits earned due to the boost card the user applied\n        \"BoostAmount\": \"int\"\n      },\n\n      // The player's progress towards meta commendations. Commendations that had no\n      // progress earned this match will not be returned. \n      \"MetaCommendationDeltas\": [\n        {\n          // The commendation ID. Commendations are available via the Metadata API.\n          \"Id\": \"guid\",\n\n          // The progress the player had made towards the commendation level before the\n          // match. In C#, this can be reassembled into a Guid in the following manner:\n          // new Guid((int)Data1, (short)Data2, (short)Data3,\n          // BitConverter.GetBytes((long)Data4)).\n          \"PreviousMetRequirements\": [\n            {\n              \"Data1\": \"int\",\n\n              \"Data2\": \"int\",\n\n              \"Data3\": \"int\",\n\n              \"Data4\": \"int\"\n            }\n          ],\n\n          // The progress the player had made towards the commendation level after the\n          // match. In C#, this can be reassembled into a Guid in the following manner:\n          // new Guid((int)Data1, (short)Data2, (short)Data3,\n          // BitConverter.GetBytes((long)Data4)).\n          \"MetRequirements\": [\n            {\n              \"Data1\": \"int\",\n\n              \"Data2\": \"int\",\n\n              \"Data3\": \"int\",\n\n              \"Data4\": \"int\"\n            }\n          ]\n        }\n      ],\n\n      // The player's progress towards progressive commendations. Commendations that had\n      // no progress earned this match will not be returned.\n      \"ProgressiveCommendationDeltas\": [\n        {\n          // The commendation ID. Commendations are available via the Metadata API.\n          \"Id\": \"guid\",\n\n          // The progress the player had made towards the commendation level before the\n          // match.\n          \"PreviousProgress\": \"int\",\n\n          // The progress the player had made towards the commendation level after the\n          // match.\n          \"Progress\": \"int\"\n        }\n      ],\n\n      // Details on the boost card the user used in this match. If the user did not use a\n      // boost card this field will be null.\n      \"BoostData\": {\n\n        // The identifier of the boost card that was used. Boost cards are available via\n        // the Requisitions Metadata API.\n        \"DefinitionId\": \"guid\",\n\n        // Whether the card was consumed because its conditions were met. If not consumed\n        // the card is returned to the user's inventory.\n        \"CardConsumed\": \"bool\"\n      },\n\n      \"Player\": {\n\n         // The player's gamertag.\n        \"Gamertag\": \"string\",\n\n        // Internal use only. This will always be null.\n        \"Xuid\": null\n      },\n\n      // The ID of the team that the player was on when the match ended. \n      \"TeamId\": \"int\",\n\n      // The player's team-agnostic ranking.\n      \"Rank\": \"int\",\n\n      // Indicates whether the player was present in the match when it ended.\n      \"DNF\": \"boolean\",\n\n      // The player's average lifetime.\n      \"AvgLifeTimeOfPlayer\": \"string\",\n\n      // Internal use only. This will always be null.\n      \"PreMatchRatings\": null,\n\n      // Internal use only. This will always be null.\n      \"PostMatchRatings\": null,\n\n      // The score for the player if this was a Warzone Firefight match. Otherwise, this\n      // is unused and will usually be null or contain invalid data.\n      \"PlayerScore\": null,\n\n      // Total number of kills done by the player. This includes melee kills, shoulder\n      // bash kills and Spartan charge kills, all power weapons, AI kills and vehicle\n      // destructions. \n      \"TotalKills\": \"int\",\n\n      // Total number of headshots done by the player.\n      \"TotalHeadshots\": \"int\",\n\n      // Total weapon damage dealt by the player.\n      \"TotalWeaponDamage\": \"double\",\n\n      // Total number of shots fired by the player.\n      \"TotalShotsFired\": \"int\",\n\n      // Total number of shots landed by the player.\n      \"TotalShotsLanded\": \"int\",\n\n      // The weapon the player used to get the most kills this match.\n      \"WeaponWithMostKills\": {\n\n        \"WeaponId\": {\n\n          // The ID of the weapon. Weapons are available via the Metadata API.\n          \"StockId\": \"int\",\n\n          // Any attachments the weapon had.\n          \"Attachments\": [ \"int\" ]\n        },\n\n        // The number of shots fired for this weapon.\n        \"TotalShotsFired\": \"int\",\n\n        // The number of shots landed for this weapon.\n        \"TotalShotsLanded\": \"int\",\n\n        // The number of headshots for this weapon.\n        \"TotalHeadshots\": \"int\",\n\n        // The number of kills for this weapon.\n        \"TotalKills\": \"int\",\n\n        // The total damage dealt for this weapon.\n        \"TotalDamageDealt\": \"double\",\n\n        // The total possession time for this weapon. This is expressed as an ISO 8601\n        // Duration.\n        \"TotalPossessionTime\": \"string\"\n      },\n\n      // Total number of melee kills by the player.\n      \"TotalMeleeKills\": \"int\",\n\n      // Total melee damage dealt by the player.\n      \"TotalMeleeDamage\": \"double\",\n\n      // Total number of assassinations by the player.\n      \"TotalAssassinations\": \"int\",\n\n      // Total number of ground pound kills by the player.\n      \"TotalGroundPoundKills\": \"int\",\n\n      // Total ground pound damage dealt by the player.\n      \"TotalGroundPoundDamage\": \"double\",\n\n      // Total number of shoulder bash kills by the player.\n      \"TotalShoulderBashKills\": \"int\",\n\n      // Total shoulder bash damage dealt by the player.\n      \"TotalShoulderBashDamage\": \"double\",\n\n      // Total grenade damage dealt by the player.\n      \"TotalGrenadeDamage\": \"double\",\n\n      // Total number of power weapon kills by the player.\n      \"TotalPowerWeaponKills\": \"int\",\n\n      // Total power weapon damage dealt by the player.\n      \"TotalPowerWeaponDamage\": \"double\",\n\n      // Total number of power weapon grabs by the player.\n      \"TotalPowerWeaponGrabs\": \"int\",\n\n      // Total power weapon possession by the player. This is expressed as an ISO 8601\n      // Duration.\n      \"TotalPowerWeaponPossessionTime\": \"string\",\n\n      // Total number of deaths by the player.\n      \"TotalDeaths\": \"int\",\n\n      // Total number of assists by the player.\n      \"TotalAssists\": \"int\",\n\n      // Not used.\n      \"TotalGamesCompleted\": \"int\",\n\n      // Not used.\n      \"TotalGamesWon\": \"int\",\n\n      // Not used.\n      \"TotalGamesLost\": \"int\",\n\n      // Not used.\n      \"TotalGamesTied\": \"int\",\n\n      // Total timed played in this match by the player.\n      \"TotalTimePlayed\": \"string\",\n\n      // Total number of grenade kills by the player.\n      \"TotalGrenadeKills\": \"int\",\n\n      // The set of Medals earned by the player.\n      \"MedalAwards\": [\n        {\n          // The ID of the Medal. Medals are available via the Metadata API.\n          \"MedalId\": \"int\",\n\n          // The number of times the Medal was earned.\n          \"Count\": \"int\"\n        }\n      ], \n\n      // List of enemy vehicles destroyed. Vehicles are available via the Metadata API.\n      // Note: this stat measures enemy vehicles, not any vehicle destruction.\n      \"DestroyedEnemyVehicles\": [\n        {\n          // The enemy this entry references\n          \"Enemy\": {\n\n            // The Base ID for the enemy.\n            \"BaseId\": \"int\",\n\n            // The attachments (variants) for the enemy.\n            \"Attachments\": [\n              \"int\"\n            ]\n          },\n\n          // Total number of kills on the enemy by the player\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // List of enemies killed, per enemy type. Enemies are available via the Metadata\n      // API.\n      \"EnemyKills\": [\n        {\n          // The enemy this entry references\n          \"Enemy\": {\n\n            // The Base ID for the enemy.\n            \"BaseId\": \"int\",\n\n            // The attachments (variants) for the enemy.\n            \"Attachments\": [\n              \"int\"\n            ]\n          },\n\n          // Total number of kills on the enemy by the player\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The set of weapons (weapons and vehicles included) used by the player.\n      \"WeaponStats\": [\n        {\n          \"WeaponId\": {\n\n              // The ID of the weapon. Weapons are available via the Metadata API.\n            \"StockId\": \"int\",\n\n              // Any attachments the weapon had.\n            \"Attachments\": [ \n              \"int\" \n            ]\n          },\n\n            // The number of shots fired for this weapon.\n          \"TotalShotsFired\": \"int\",\n\n            // The number of shots landed for this weapon.\n          \"TotalShotsLanded\": \"int\",\n\n            // The number of headshots for this weapon.\n          \"TotalHeadshots\": \"int\",\n\n            // The number of kills for this weapon.\n          \"TotalKills\": \"int\",\n\n            // The total damage dealt for this weapon.\n          \"TotalDamageDealt\": \"double\",\n\n            // The total possession time for this weapon. This is expressed as an ISO\n            // 8601 Duration.\n          \"TotalPossessionTime\": \"string\"\n        }\n      ],\n\n      // The set of Impulses (invisible Medals) earned by the player.\n      \"Impulses\": [\n        {\n          // The ID of the Impulse. Impulses are available via the Metadata API.\n          \"Id\": \"int\",\n\n          // The number of times the Impulse was earned.\n          \"Count\": \"int\"\n        }\n      ],\n\n      // Total number of Spartan kills by the player.\n      \"TotalSpartanKills\": \"int\"\n    }\n  ],\n\n  // A list of stats for each team who in the match. Note that in Free For All modes,\n  // there is an entry for every player.\n  \"TeamStats\": [\n    {\n      // The ID for the team.\n      \"TeamId\": \"int\",\n\n      // The team's score at the end of the match. The way the score is determined is\n      // based off the game base variant being played: \n      //   Breakout = number of rounds won,\n      //   CTF = number of flag captures,\n      //   Slayer = number of kills,\n      //   Strongholds = number of points,\n      //   Warzone = number of points.\n      // Score can be a negative value. Unfortunately, this value is returned as an\n      // unsigned 32-bit integer. This means that if the score is -1, the score reported\n      // is 4,294,967,295.\n      \"Score\": \"uint32\",\n\n      // The team's rank at the end of the match.\n      \"Rank\": \"int\",\n\n      // The set of round stats for the team.\n      \"RoundStats\": [\n        {\n          // The round number this entry pertains to.\n          \"RoundNumber\": \"int\",\n\n          // The end rank for the team this round.\n          \"Rank\": \"int\",\n\n          // The end score for the team this round.\n          // Score can be a negative value. Unfortunately, this value is returned as an\n          // unsigned 32-bit integer. This means that if the score is -1, the score\n          // reported is 4,294,967,295.\n          \"Score\": \"uint32\",\n\n        }\n      ]\n    }\n  ],\n\n  // The number of objective rounds successfully completed if the game base variant is\n  // Firefight, null otherwise.\n  \"ObjectivesCompleted\": \"int\",\n\n  // Indicates if the match is completed or not. Some match details are available while\n  // the match is in-progress, but the behavior for incomplete matches in undefined.\n  \"IsMatchOver\": \"boolean\",\n\n  // The length of the match. This is expressed as an ISO 8601 Duration.\n  \"TotalDuration\": \"string\",\n\n  // The variant of the map for this match. Map variants are available via the Metadata\n  // API. More information is available in MapVariantResourceId.\n  \"MapVariantId\": \"guid\",\n\n  // The variant of the game for this match. Game variants are available via the Metadata\n  // API. More information is available in GameVariantResourceId.\n  \"GameVariantId\": \"guid\",\n\n  // The playlist ID of the match. Playlists are available via the Metadata API.\n  \"PlaylistId\": \"guid\",\n\n  // The ID of the base map for this match. Maps are available via the Metadata API.\n  \"MapId\": \"guid\",\n\n  // The ID of the game base variant for this match. Game base variants are available via\n  // the Metadata API.\n  \"GameBaseVariantId\": \"guid\",\n\n  // Whether this was a team-based game or not.\n  \"IsTeamGame\": \"boolean\",\n\n  // Unused for Warzone matches. This will always be null.\n  \"SeasonId\": null,\n\n  // The variant of the game for this match. There are two sources of game variants:\n  // official game variants available via the Metadata API and user-generated game\n  // variants available via the UGC API.\n  \"GameVariantResourceId\": {\n\n    // The resource type. 2 indicates game variant.\n    \"ResourceType\": 2,\n\n    // The ID of the game variant. Official game variants are available via the Metadata\n    // API.\n    \"ResourceId\": \"guid\",        \n\n    // The source of the game variant. Options are:\n    //   Unknown = 0,\n    //   User-generated = 1,\n    //   Official = 3.\n    \"OwnerType\": \"int\",\n\n    // The gamertag of the user that created the game variant if this is a user-generated\n    // game variant, or null otherwise. \n    \"Owner\": \"string\"\n  },\n\n  // The variant of the map for this match. There are two sources of map variants:\n  // official map variants available via the Metadata API and user-generated map variants\n  // available via the UGC API.\n  \"MapVariantResourceId\": {\n\n    // The resource type. 3 indicates map variant.\n    \"ResourceType\": 3,\n\n    // The ID of the map variant. Official map variants are available via the Metadata\n    // API.\n    \"ResourceId\": \"guid\",\n\n    // The source of the map variant. Options are:\n    //   Unknown = 0,\n    //   User-generated = 1,\n    //   Official = 3.\n    \"OwnerType\": \"int\",\n\n    // The gamertag of the user that created the map variant if this is a user-generated\n    // map variant, or null otherwise. \n    \"Owner\": \"string\"\n  }\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "aea6af3c-abe7-34ca-a4ef-ef78d7ca635c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Warzone"
        }
      }
    },
    "insertionIndex" : 50
  }, {
    "id" : "d304bbda-924b-3265-8d7a-cb80e76e7174",
    "name" : "Halo 5 - Player Service Records - Warzone - 500",
    "request" : {
      "urlPath" : "/h5/servicerecords/warzone",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "p5th5a9oz89da51n8nlzcdwtxwrz263hwu6fldqk3tg4vw8k8myt6ddnje0xgg9kffagij3qo0bz4s3pmft52jb6wra21iezli0ci1z1qhqhq4n05cwm0imrfwig69hjqhmfvvrag3gx5oim6rsd0e6dd54x57rf8h1dnv1pz8z4htu6w11o24"
        }
      }
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "d304bbda-924b-3265-8d7a-cb80e76e7174",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Warzone"
        }
      }
    },
    "insertionIndex" : 51
  }, {
    "id" : "6225ac27-eb10-3395-b433-c0cdd8803493",
    "name" : "Halo 5 - Player Service Records - Warzone - 404",
    "request" : {
      "urlPath" : "/h5/servicerecords/warzone",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "9mvkwiaeny4dway9"
        }
      }
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "6225ac27-eb10-3395-b433-c0cdd8803493",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Warzone"
        }
      }
    },
    "insertionIndex" : 52
  }, {
    "id" : "a8149ad8-6a48-3de3-9ea1-29605f4a3f06",
    "name" : "Halo 5 - Player Service Records - Warzone (application/json)",
    "request" : {
      "urlPath" : "/h5/servicerecords/warzone",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      },
      "queryParameters" : {
        "players" : {
          "equalTo" : "fj3l478d4v6xxcqxot0n7dfkj1ud8h3srnjvn8ngngykbjvlapxv9qa2zpamkwrhjfr68bkn0evke7nnibtpz7vv9qeyikh5c1v05v5nmjhd8u7rslbtrg0b7n9e28pd53cr0tcnw9pces3kwl"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // Set of responses. One per user queried.\n  \"Results\": [\n    {\n      // The player's gamertag.\n      \"Id\": \"string\",\n\n      // The result of the query for the player. One of the following:\n      //   Success = 0,\n      //   NotFound = 1,\n      //   ServiceFailure = 2,\n      //   ServiceUnavailable = 3\n      // It is possible for different requests from the batch to succeed and fail\n      // independently.\n      \"ResultCode\": \"int\",\n\n      // The Service Record result for the player. Only set if ResultCode is Success.\n      \"Result\": {\n\n        // Warzone stats data.\n        \"WarzoneStat\": {\n\n          // The total number of \"pies\" (in-game currency) the player has earned.\n          \"TotalPiesEarned\": \"int\",\n\n          // List of scenario stats by map and game base variant id.\n          \"ScenarioStats\": [\n            {\n              // The total number of \"pies\" (in-game currency) the player has earned in\n              // the scenario.\n              \"TotalPiesEarned\": \"int\",\n\n              // The game base variant specific stats. Flexible stats are available via\n              // the Metadata API.\n              \"FlexibleStats\": {\n\n                // The set of flexible stats that are derived from medal events.\n                \"MedalStatCounts\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The number of times this flexible stat was earned.\n                    \"Count\": \"int\"\n                  }\n                ],\n\n                // The set of flexible stats that are derived from impulse events.\n                \"ImpulseStatCounts\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The number of times this flexible stat was earned.\n                    \"Count\": \"int\"\n                  }\n                ],\n\n                // The set of flexible stats that are derived from medal time lapses.\n                \"MedalTimelapses\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The amount of time the flexible stat was earned for. This is\n                    // expressed as an ISO 8601 Duration.\n                    \"Timelapse\": \"string\"\n                  }\n                ],    \n\n                // The set of flexible stats that are derived from impulse time lapses.\n                \"ImpulseTimelapses\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The amount of time the flexible stat was earned for. This is\n                    // expressed as an ISO 8601 Duration.\n                    \"Timelapse\": \"string\"\n                  }\n                ]\n              },\n\n              // The map global ID that this warzone scenario pertains to. Found in\n              // metadata\n              \"MapId\": \"guid\",\n\n              // The ID of the game base variant. Game base variants are available via\n              // the Metadata API.\n              \"GameBaseVariantId\": \"guid\",\n\n              // Total number of kills done by the player. This includes melee kills,\n              // shoulder bash kills and Spartan charge kills, all power weapons, AI\n              // kills and vehicle destructions. \n              \"TotalKills\": \"int\",\n\n              // Total number of headshots done by the player.\n              \"TotalHeadshots\": \"int\",\n\n              // Total weapon damage dealt by the player.\n              \"TotalWeaponDamage\": \"double\",\n\n              // Total number of shots fired by the player.\n              \"TotalShotsFired\": \"int\",\n\n              // Total number of shots landed by the player.\n              \"TotalShotsLanded\": \"int\",\n\n              // The weapon the player used to get the most kills.\n              \"WeaponWithMostKills\": {\n\n                \"WeaponId\": {\n\n                  // The ID of the weapon. Weapons are available via the Metadata API.\n                  \"StockId\": \"int\",\n\n                  // Any attachments the weapon had.\n                  \"Attachments\": [\n                    \"int\"\n                  ]\n                },\n\n                // The number of shots fired for this weapon.\n                \"TotalShotsFired\": \"int\",\n\n                // The number of shots landed for this weapon.\n                \"TotalShotsLanded\": \"int\",\n\n                // The number of headshots for this weapon.\n                \"TotalHeadshots\": \"int\",\n\n                // The number of kills for this weapon.\n                \"TotalKills\": \"int\",\n\n                // The total damage dealt for this weapon.\n                \"TotalDamageDealt\": \"double\",\n\n                // The total possession time for this weapon. This is expressed as an ISO\n                // 8601 Duration.\n                \"TotalPossessionTime\": \"string\"\n              },\n\n              // Total number of melee kills by the player.\n              \"TotalMeleeKills\": \"int\",\n\n              // Total melee damage dealt by the player.\n              \"TotalMeleeDamage\": \"double\",\n\n              // Total number of assassinations by the player.\n              \"TotalAssassinations\": \"int\",\n\n              // Total number of ground pound kills by the player.\n              \"TotalGroundPoundKills\": \"int\",\n\n              // Total ground pound damage dealt by the player.\n              \"TotalGroundPoundDamage\": \"double\",\n\n              // Total number of shoulder bash kills by the player.\n              \"TotalShoulderBashKills\": \"int\",\n\n              // Total shoulder bash damage dealt by the player.\n              \"TotalShoulderBashDamage\": \"double\",\n\n              // Total grenade damage dealt by the player.\n              \"TotalGrenadeDamage\": \"double\",\n\n              // Total number of power weapon kills by the player.\n              \"TotalPowerWeaponKills\": \"int\",\n\n              // Total power weapon damage dealt by the player.\n              \"TotalPowerWeaponDamage\": \"double\",\n\n              // Total number of power weapon grabs by the player.\n              \"TotalPowerWeaponGrabs\": \"int\",\n\n              // Total power weapon possession by the player. This is expressed as an ISO\n              // 8601 Duration.\n              \"TotalPowerWeaponPossessionTime\": \"string\",\n\n              // Total number of deaths by the player.\n              \"TotalDeaths\": \"int\",\n\n              // Total number of assists by the player.\n              \"TotalAssists\": \"int\",\n\n              // Total number of games the player has completed.\n              \"TotalGamesCompleted\": \"int\",\n\n              // Total number of games won by the player.\n              \"TotalGamesWon\": \"int\",\n\n              // Total number of games lost by the player.\n              \"TotalGamesLost\": \"int\",\n\n              // Total number of games tied by the player.\n              \"TotalGamesTied\": \"int\",\n\n              // Total timed played by the player.\n              \"TotalTimePlayed\": \"string\",\n\n              // Total number of grenade kills by the player.\n              \"TotalGrenadeKills\": \"int\",\n\n              // The set of Medals earned by the player.\n              \"MedalAwards\": [\n                {\n                  // The ID of the Medal. Medals are available via the Metadata API.\n                  \"MedalId\": \"int\",\n\n                  // The number of times the Medal was earned.\n                  \"Count\": \"int\"\n                }\n              ], \n\n              // List of enemy vehicles destroyed. Vehicles are available via the\n              // Metadata API. Note: this stat measures enemy vehicles, not any vehicle\n              // destruction.\n              \"DestroyedEnemyVehicles\": [\n                {\n                  // The enemy this entry references\n                  \"Enemy\": {\n\n                    // The Base ID for the enemy.\n                    \"BaseId\": \"int\",\n\n                    // The attachments (variants) for the enemy.\n                    \"Attachments\": [\n                      \"int\"\n                    ]\n                  },\n\n                  // Total number of kills on the enemy by the player\n                  \"TotalKills\": \"int\"\n                }\n              ],\n\n              // List of enemies killed, per enemy type. Enemies are available via the\n              // Metadata API.\n              \"EnemyKills\": [\n                {\n                  // The enemy this entry references\n                  \"Enemy\": {\n\n                    // The Base ID for the enemy.\n                    \"BaseId\": \"int\",\n\n                    // The attachments (variants) for the enemy.\n                    \"Attachments\": [\n                      \"int\"\n                    ]\n                  },\n\n                  // Total number of kills on the enemy by the player\n                  \"TotalKills\": \"int\"\n                }\n              ],\n\n              // The set of weapons (weapons and vehicles included) used by the player.\n              \"WeaponStats\": [\n                {\n                  \"WeaponId\": {\n\n                    // The ID of the weapon. Weapons are available via the Metadata API.\n                    \"StockId\": \"int\",\n\n                    // Any attachments the weapon had.\n                    \"Attachments\": [ \n                      \"int\" \n                    ]\n                  },\n\n                  // The number of shots fired for this weapon.\n                  \"TotalShotsFired\": \"int\",\n\n                  // The number of shots landed for this weapon.\n                  \"TotalShotsLanded\": \"int\",\n\n                  // The number of headshots for this weapon.\n                  \"TotalHeadshots\": \"int\",\n\n                  // The number of kills for this weapon.\n                  \"TotalKills\": \"int\",\n\n                  // The total damage dealt for this weapon.\n                  \"TotalDamageDealt\": \"double\",\n\n                  // The total possession time for this weapon. This is expressed as an\n                  // ISO 8601 Duration.\n                  \"TotalPossessionTime\": \"string\"\n                }\n              ],\n\n              // The set of Impulses (invisible Medals) earned by the player.\n              \"Impulses\": [\n                {\n                  // The ID of the Impulse. Impulses are available via the Metadata API.\n                  \"Id\": \"int\",\n\n                  // The number of times the Impulse was earned.\n                  \"Count\": \"int\"\n                }\n              ],\n\n              // Total number of Spartan kills by the player.\n              \"TotalSpartanKills\": \"int\"\n            }\n          ],\n\n          // Total number of kills done by the player. This includes melee kills,\n          // shoulder bash kills and Spartan charge kills, all power weapons, AI kills\n          // and vehicle destructions. \n          \"TotalKills\": \"int\",\n\n          // Total number of headshots done by the player.\n          \"TotalHeadshots\": \"int\",\n\n          // Total weapon damage dealt by the player.\n          \"TotalWeaponDamage\": \"double\",\n\n          // Total number of shots fired by the player.\n          \"TotalShotsFired\": \"int\",\n\n          // Total number of shots landed by the player.\n          \"TotalShotsLanded\": \"int\",\n\n          // The weapon the player used to get the most kills.\n          \"WeaponWithMostKills\": {\n\n            \"WeaponId\": {\n\n              // The ID of the weapon. Weapons are available via the Metadata API.\n              \"StockId\": \"int\",\n\n              // Any attachments the weapon had.\n              \"Attachments\": [\n                \"int\"\n              ]\n            },\n\n            // The number of shots fired for this weapon.\n            \"TotalShotsFired\": \"int\",\n\n            // The number of shots landed for this weapon.\n            \"TotalShotsLanded\": \"int\",\n\n            // The number of headshots for this weapon.\n            \"TotalHeadshots\": \"int\",\n\n            // The number of kills for this weapon.\n            \"TotalKills\": \"int\",\n\n            // The total damage dealt for this weapon.\n            \"TotalDamageDealt\": \"double\",\n\n            // The total possession time for this weapon. This is expressed as an ISO\n            // 8601 Duration.\n            \"TotalPossessionTime\": \"string\"\n          },\n\n          // Total number of melee kills by the player.\n          \"TotalMeleeKills\": \"int\",\n\n          // Total melee damage dealt by the player.\n          \"TotalMeleeDamage\": \"double\",\n\n          // Total number of assassinations by the player.\n          \"TotalAssassinations\": \"int\",\n\n          // Total number of ground pound kills by the player.\n          \"TotalGroundPoundKills\": \"int\",\n\n          // Total ground pound damage dealt by the player.\n          \"TotalGroundPoundDamage\": \"double\",\n\n          // Total number of shoulder bash kills by the player.\n          \"TotalShoulderBashKills\": \"int\",\n\n          // Total shoulder bash damage dealt by the player.\n          \"TotalShoulderBashDamage\": \"double\",\n\n          // Total grenade damage dealt by the player.\n          \"TotalGrenadeDamage\": \"double\",\n\n          // Total number of power weapon kills by the player.\n          \"TotalPowerWeaponKills\": \"int\",\n\n          // Total power weapon damage dealt by the player.\n          \"TotalPowerWeaponDamage\": \"double\",\n\n          // Total number of power weapon grabs by the player.\n          \"TotalPowerWeaponGrabs\": \"int\",\n\n          // Total power weapon possession by the player. This is expressed as an ISO\n          // 8601 Duration.\n          \"TotalPowerWeaponPossessionTime\": \"string\",\n\n          // Total number of deaths by the player.\n          \"TotalDeaths\": \"int\",\n\n          // Total number of assists by the player.\n          \"TotalAssists\": \"int\",\n\n          // Total number of games the player has completed.\n          \"TotalGamesCompleted\": \"int\",\n\n          // Total number of games won by the player.\n          \"TotalGamesWon\": \"int\",\n\n          // Total number of games lost by the player.\n          \"TotalGamesLost\": \"int\",\n\n          // Total number of games tied by the player.\n          \"TotalGamesTied\": \"int\",\n\n          // Total timed played by the player.\n          \"TotalTimePlayed\": \"string\",\n\n          // Total number of grenade kills by the player.\n          \"TotalGrenadeKills\": \"int\",\n\n          // The set of Medals earned by the player.\n          \"MedalAwards\": [\n            {\n              // The ID of the Medal. Medals are available via the Metadata API.\n              \"MedalId\": \"int\",\n\n              // The number of times the Medal was earned.\n              \"Count\": \"int\"\n            }\n          ], \n\n          // List of enemy vehicles destroyed. Vehicles are available via the Metadata\n          // API. Note: this stat measures enemy vehicles, not any vehicle destruction.\n          \"DestroyedEnemyVehicles\": [\n            {\n              // The enemy this entry references\n              \"Enemy\": {\n\n                // The Base ID for the enemy.\n                \"BaseId\": \"int\",\n\n                // The attachments (variants) for the enemy.\n                \"Attachments\": [\n                  \"int\"\n                ]\n              },\n\n              // Total number of kills on the enemy by the player\n              \"TotalKills\": \"int\"\n            }\n          ],\n\n          // List of enemies killed, per enemy type. Enemies are available via the\n          // Metadata API.\n          \"EnemyKills\": [\n            {\n              // The enemy this entry references\n              \"Enemy\": {\n\n                // The Base ID for the enemy.\n                \"BaseId\": \"int\",\n\n                // The attachments (variants) for the enemy.\n                \"Attachments\": [\n                  \"int\"\n                ]\n              },\n\n              // Total number of kills on the enemy by the player\n              \"TotalKills\": \"int\"\n            }\n          ],\n\n          // The set of weapons (weapons and vehicles included) used by the player.\n          \"WeaponStats\": [\n            {\n              \"WeaponId\": {\n\n                // The ID of the weapon. Weapons are available via the Metadata API.\n                \"StockId\": \"int\",\n\n                // Any attachments the weapon had.\n                \"Attachments\": [ \n                  \"int\" \n                ]\n              },\n\n              // The number of shots fired for this weapon.\n              \"TotalShotsFired\": \"int\",\n\n              // The number of shots landed for this weapon.\n              \"TotalShotsLanded\": \"int\",\n\n              // The number of headshots for this weapon.\n              \"TotalHeadshots\": \"int\",\n\n              // The number of kills for this weapon.\n              \"TotalKills\": \"int\",\n\n              // The total damage dealt for this weapon.\n              \"TotalDamageDealt\": \"double\",\n\n              // The total possession time for this weapon. This is expressed as an ISO\n              // 8601 Duration.\n              \"TotalPossessionTime\": \"string\"\n            }\n          ],\n\n          // The set of Impulses (invisible Medals) earned by the player.\n          \"Impulses\": [\n            {\n              // The ID of the Impulse. Impulses are available via the Metadata API.\n              \"Id\": \"int\",\n\n              // The number of times the Impulse was earned.\n              \"Count\": \"int\"\n            }\n          ],\n\n          // Total number of Spartan kills by the player.\n          \"TotalSpartanKills\": \"int\"\n        },\n\n        // Information about the player for whom this data was returned.\n        \"PlayerId\": {\n\n          // The gamertag of the player queried.\n          \"GamerTag\": \"string\",\n\n          // Internal use only. This will always be null.\n          \"Xuid\": null\n        },\n\n        // The player's Spartan Rank.\n        \"SpartanRank\": \"int\",\n\n        // The player's XP.\n        \"Xp\": \"int\"\n      }\n    }\n  ],\n\n  // Internal use only. A set of related resource links.\n  \"Links\": null\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a8149ad8-6a48-3de3-9ea1-29605f4a3f06",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Warzone"
        }
      }
    },
    "insertionIndex" : 53
  }, {
    "id" : "b77e7fa9-08ac-3683-a604-bf7c01ea833e",
    "name" : "Halo 5 - Player Service Records - Custom Local - 503",
    "request" : {
      "urlPath" : "/h5/servicerecords/customlocal",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "blushma7k49lo"
        }
      }
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "b77e7fa9-08ac-3683-a604-bf7c01ea833e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Custom-Local"
        }
      }
    },
    "insertionIndex" : 54
  }, {
    "id" : "8496219a-5e02-392f-b7f7-fc0f637f2e94",
    "name" : "Halo 5 - Player Service Records - Custom Local - 500",
    "request" : {
      "urlPath" : "/h5/servicerecords/customlocal",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "4ril"
        }
      }
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "8496219a-5e02-392f-b7f7-fc0f637f2e94",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Custom-Local"
        }
      }
    },
    "insertionIndex" : 55
  }, {
    "id" : "42ab2e37-c532-32ef-9f44-1d1a2b098234",
    "name" : "Halo 5 - Player Service Records - Custom Local - 404",
    "request" : {
      "urlPath" : "/h5/servicerecords/customlocal",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "r7c5kukozadupktgligq42luwb9qdc9a0w"
        }
      }
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "42ab2e37-c532-32ef-9f44-1d1a2b098234",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Custom-Local"
        }
      }
    },
    "insertionIndex" : 56
  }, {
    "id" : "19817b94-511b-3b10-8be0-386b5411c1cd",
    "name" : "Halo 5 - Player Service Records - Custom Local (application/json)",
    "request" : {
      "urlPath" : "/h5/servicerecords/customlocal",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      },
      "queryParameters" : {
        "players" : {
          "equalTo" : "dkir63mmtsost4nguvv17rkhv0muwlftl0awbj4x7equq9fkil44ojetj9c3liim"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // Set of responses. One per user queried.\n  \"Results\": [\n    {\n      // The player's gamertag.\n      \"Id\": \"string\",\n\n      // The result of the query for the player. One of the following:\n      //   Success = 0,\n      //   NotFound = 1,\n      //   ServiceFailure = 2,\n      //   ServiceUnavailable = 3\n      // It is possible for different requests from the batch to succeed and fail\n      // independently.\n      \"ResultCode\": \"int\",\n\n      // The Service Record result for the player. Only set if ResultCode is Success.\n      \"Result\": {\n\n        // Custom stats data.\n        \"CustomStats\": {\n\n          // List of custom stats by CustomGameBaseVariant.\n          \"CustomGameBaseVariantStats\": [\n            {\n              // The game base variant specific stats. Flexible stats are available via\n              // the Metadata API.\n              \"FlexibleStats\": {\n\n                // The set of flexible stats that are derived from medal events.\n                \"MedalStatCounts\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The number of times this flexible stat was earned.\n                    \"Count\": \"int\"\n                  }\n                ],\n\n                // The set of flexible stats that are derived from impulse events.\n                \"ImpulseStatCounts\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The number of times this flexible stat was earned.\n                    \"Count\": \"int\"\n                  }\n                ],\n\n                // The set of flexible stats that are derived from medal time lapses.\n                \"MedalTimelapses\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The amount of time the flexible stat was earned for. This is\n                    // expressed as an ISO 8601 Duration.\n                    \"Timelapse\": \"string\"\n                  }\n                ],    \n\n                // The set of flexible stats that are derived from impulse time lapses.\n                \"ImpulseTimelapses\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The amount of time the flexible stat was earned for. This is\n                    // expressed as an ISO 8601 Duration.\n                    \"Timelapse\": \"string\"\n                  }\n                ]\n              },\n\n              // The ID of the game base variant. Game base variants are available via\n              // the Metadata API.\n              \"GameBaseVariantId\": \"guid\",\n\n              // Total number of kills done by the player. This includes melee kills,\n              // shoulder bash kills and Spartan charge kills, all power weapons, AI\n              // kills and vehicle destructions. \n              \"TotalKills\": \"int\",\n\n              // Total number of headshots done by the player.\n              \"TotalHeadshots\": \"int\",\n\n              // Total weapon damage dealt by the player.\n              \"TotalWeaponDamage\": \"double\",\n\n              // Total number of shots fired by the player.\n              \"TotalShotsFired\": \"int\",\n\n              // Total number of shots landed by the player.\n              \"TotalShotsLanded\": \"int\",\n\n              // The weapon the player used to get the most kills.\n              \"WeaponWithMostKills\": {\n\n                \"WeaponId\": {\n\n                  // The ID of the weapon. Weapons are available via the Metadata API.\n                  \"StockId\": \"int\",\n\n                  // Any attachments the weapon had.\n                  \"Attachments\": [\n                    \"int\"\n                  ]\n                },\n\n                // The number of shots fired for this weapon.\n                \"TotalShotsFired\": \"int\",\n\n                // The number of shots landed for this weapon.\n                \"TotalShotsLanded\": \"int\",\n\n                // The number of headshots for this weapon.\n                \"TotalHeadshots\": \"int\",\n\n                // The number of kills for this weapon.\n                \"TotalKills\": \"int\",\n\n                // The total damage dealt for this weapon.\n                \"TotalDamageDealt\": \"double\",\n\n                // The total possession time for this weapon. This is expressed as an ISO\n                // 8601 Duration.\n                \"TotalPossessionTime\": \"string\"\n              },\n\n              // Total number of melee kills by the player.\n              \"TotalMeleeKills\": \"int\",\n\n              // Total melee damage dealt by the player.\n              \"TotalMeleeDamage\": \"double\",\n\n              // Total number of assassinations by the player.\n              \"TotalAssassinations\": \"int\",\n\n              // Total number of ground pound kills by the player.\n              \"TotalGroundPoundKills\": \"int\",\n\n              // Total ground pound damage dealt by the player.\n              \"TotalGroundPoundDamage\": \"double\",\n\n              // Total number of shoulder bash kills by the player.\n              \"TotalShoulderBashKills\": \"int\",\n\n              // Total shoulder bash damage dealt by the player.\n              \"TotalShoulderBashDamage\": \"double\",\n\n              // Total grenade damage dealt by the player.\n              \"TotalGrenadeDamage\": \"double\",\n\n              // Total number of power weapon kills by the player.\n              \"TotalPowerWeaponKills\": \"int\",\n\n              // Total power weapon damage dealt by the player.\n              \"TotalPowerWeaponDamage\": \"double\",\n\n              // Total number of power weapon grabs by the player.\n              \"TotalPowerWeaponGrabs\": \"int\",\n\n              // Total power weapon possession by the player. This is expressed as an ISO\n              // 8601 Duration.\n              \"TotalPowerWeaponPossessionTime\": \"string\",\n\n              // Total number of deaths by the player.\n              \"TotalDeaths\": \"int\",\n\n              // Total number of assists by the player.\n              \"TotalAssists\": \"int\",\n\n              // Total number of games the player has completed.\n              \"TotalGamesCompleted\": \"int\",\n\n              // Total number of games won by the player.\n              \"TotalGamesWon\": \"int\",\n\n              // Total number of games lost by the player.\n              \"TotalGamesLost\": \"int\",\n\n              // Total number of games tied by the player.\n              \"TotalGamesTied\": \"int\",\n\n              // Total timed played by the player.\n              \"TotalTimePlayed\": \"string\",\n\n              // Total number of grenade kills by the player.\n              \"TotalGrenadeKills\": \"int\",\n\n              // The set of Medals earned by the player.\n              \"MedalAwards\": [\n                {\n                  // The ID of the Medal. Medals are available via the Metadata API.\n                  \"MedalId\": \"int\",\n\n                  // The number of times the Medal was earned.\n                  \"Count\": \"int\"\n                }\n              ], \n\n              // List of enemy vehicles destroyed. Vehicles are available via the\n              // Metadata API. Note: this stat measures enemy vehicles, not any vehicle\n              // destruction.\n              \"DestroyedEnemyVehicles\": [\n                {\n                  // The enemy this entry references\n                  \"Enemy\": {\n\n                    // The Base ID for the enemy.\n                    \"BaseId\": \"int\",\n\n                    // The attachments (variants) for the enemy.\n                    \"Attachments\": [\n                      \"int\"\n                    ]\n                  },\n\n                  // Total number of kills on the enemy by the player\n                  \"TotalKills\": \"int\"\n                }\n              ],\n\n              // List of enemies killed, per enemy type. Enemies are available via the\n              // Metadata API.\n              \"EnemyKills\": [\n                {\n                  // The enemy this entry references\n                  \"Enemy\": {\n\n                    // The Base ID for the enemy.\n                    \"BaseId\": \"int\",\n\n                    // The attachments (variants) for the enemy.\n                    \"Attachments\": [\n                      \"int\"\n                    ]\n                  },\n\n                  // Total number of kills on the enemy by the player\n                  \"TotalKills\": \"int\"\n                }\n              ],\n\n              // The set of weapons (weapons and vehicles included) used by the player.\n              \"WeaponStats\": [\n                {\n                  \"WeaponId\": {\n\n                    // The ID of the weapon. Weapons are available via the Metadata API.\n                    \"StockId\": \"int\",\n\n                    // Any attachments the weapon had.\n                    \"Attachments\": [ \n                      \"int\" \n                    ]\n                  },\n\n                  // The number of shots fired for this weapon.\n                  \"TotalShotsFired\": \"int\",\n\n                  // The number of shots landed for this weapon.\n                  \"TotalShotsLanded\": \"int\",\n\n                  // The number of headshots for this weapon.\n                  \"TotalHeadshots\": \"int\",\n\n                  // The number of kills for this weapon.\n                  \"TotalKills\": \"int\",\n\n                  // The total damage dealt for this weapon.\n                  \"TotalDamageDealt\": \"double\",\n\n                  // The total possession time for this weapon. This is expressed as an\n                  // ISO 8601 Duration.\n                  \"TotalPossessionTime\": \"string\"\n                }\n              ],\n\n              // The set of Impulses (invisible Medals) earned by the player.\n              \"Impulses\": [\n                {\n                  // The ID of the Impulse. Impulses are available via the Metadata API.\n                  \"Id\": \"int\",\n\n                  // The number of times the Impulse was earned.\n                  \"Count\": \"int\"\n                }\n              ],\n\n              // Total number of Spartan kills by the player.\n              \"TotalSpartanKills\": \"int\"\n            }\n          ],\n\n          // A list of up to 3 top game base variants played by the user Top means\n          // Wins/Completed matches. If there is a tie, the one with more completions is\n          // higher. If there's still a tie, the GUIDs are sorted and selected\n          \"TopGameBaseVariants\": [\n            {\n              // Rank between 1-3\n              \"GameBaseVariantRank\": \"int\",\n\n              // Number of games played in game base variant\n              \"NumberOfMatchesCompleted\": \"int\",\n\n              // Id of the game base variant\n              \"GameBaseVariantId\": \"guid\",\n\n              // Number of matches won on game base variant\n              \"NumberOfMatchesWon\": \"int\"\n            }\n          ],\n\n          // Total number of kills done by the player. This includes melee kills,\n          // shoulder bash kills and Spartan charge kills, all power weapons, AI kills\n          // and vehicle destructions. \n          \"TotalKills\": \"int\",\n\n          // Total number of headshots done by the player.\n          \"TotalHeadshots\": \"int\",\n\n          // Total weapon damage dealt by the player.\n          \"TotalWeaponDamage\": \"double\",\n\n          // Total number of shots fired by the player.\n          \"TotalShotsFired\": \"int\",\n\n          // Total number of shots landed by the player.\n          \"TotalShotsLanded\": \"int\",\n\n          // The weapon the player used to get the most kills.\n          \"WeaponWithMostKills\": {\n\n            \"WeaponId\": {\n\n              // The ID of the weapon. Weapons are available via the Metadata API.\n              \"StockId\": \"int\",\n\n              // Any attachments the weapon had.\n              \"Attachments\": [\n                \"int\"\n              ]\n            },\n\n            // The number of shots fired for this weapon.\n            \"TotalShotsFired\": \"int\",\n\n            // The number of shots landed for this weapon.\n            \"TotalShotsLanded\": \"int\",\n\n            // The number of headshots for this weapon.\n            \"TotalHeadshots\": \"int\",\n\n            // The number of kills for this weapon.\n            \"TotalKills\": \"int\",\n\n            // The total damage dealt for this weapon.\n            \"TotalDamageDealt\": \"double\",\n\n            // The total possession time for this weapon. This is expressed as an ISO\n            // 8601 Duration.\n            \"TotalPossessionTime\": \"string\"\n          },\n\n          // Total number of melee kills by the player.\n          \"TotalMeleeKills\": \"int\",\n\n          // Total melee damage dealt by the player.\n          \"TotalMeleeDamage\": \"double\",\n\n          // Total number of assassinations by the player.\n          \"TotalAssassinations\": \"int\",\n\n          // Total number of ground pound kills by the player.\n          \"TotalGroundPoundKills\": \"int\",\n\n          // Total ground pound damage dealt by the player.\n          \"TotalGroundPoundDamage\": \"double\",\n\n          // Total number of shoulder bash kills by the player.\n          \"TotalShoulderBashKills\": \"int\",\n\n          // Total shoulder bash damage dealt by the player.\n          \"TotalShoulderBashDamage\": \"double\",\n\n          // Total grenade damage dealt by the player.\n          \"TotalGrenadeDamage\": \"double\",\n\n          // Total number of power weapon kills by the player.\n          \"TotalPowerWeaponKills\": \"int\",\n\n          // Total power weapon damage dealt by the player.\n          \"TotalPowerWeaponDamage\": \"double\",\n\n          // Total number of power weapon grabs by the player.\n          \"TotalPowerWeaponGrabs\": \"int\",\n\n          // Total power weapon possession by the player. This is expressed as an ISO\n          // 8601 Duration.\n          \"TotalPowerWeaponPossessionTime\": \"string\",\n\n          // Total number of deaths by the player.\n          \"TotalDeaths\": \"int\",\n\n          // Total number of assists by the player.\n          \"TotalAssists\": \"int\",\n\n          // Not used.\n          \"TotalGamesCompleted\": \"int\",\n\n          // Not used.\n          \"TotalGamesWon\": \"int\",\n\n          // Not used.\n          \"TotalGamesLost\": \"int\",\n\n          // Not used.\n          \"TotalGamesTied\": \"int\",\n\n          // Total timed played by the player.\n          \"TotalTimePlayed\": \"string\",\n\n          // Total number of grenade kills by the player.\n          \"TotalGrenadeKills\": \"int\",\n\n          // The set of Medals earned by the player.\n          \"MedalAwards\": [\n            {\n              // The ID of the Medal. Medals are available via the Metadata API.\n              \"MedalId\": \"int\",\n\n              // The number of times the Medal was earned.\n              \"Count\": \"int\"\n            }\n          ], \n\n          // List of enemy vehicles destroyed. Vehicles are available via the Metadata\n          // API. Note: this stat measures enemy vehicles, not any vehicle destruction.\n          \"DestroyedEnemyVehicles\": [\n            {\n              // The enemy this entry references\n              \"Enemy\": {\n\n                // The Base ID for the enemy.\n                \"BaseId\": \"int\",\n\n                // The attachments (variants) for the enemy.\n                \"Attachments\": [\n                  \"int\"\n                ]\n              },\n\n              // Total number of kills on the enemy by the player\n              \"TotalKills\": \"int\"\n            }\n          ],\n\n          // List of enemies killed, per enemy type. Enemies are available via the\n          // Metadata API.\n          \"EnemyKills\": [\n            {\n              // The enemy this entry references\n              \"Enemy\": {\n\n                // The Base ID for the enemy.\n                \"BaseId\": \"int\",\n\n                // The attachments (variants) for the enemy.\n                \"Attachments\": [\n                  \"int\"\n                ]\n              },\n\n              // Total number of kills on the enemy by the player\n              \"TotalKills\": \"int\"\n            }\n          ],\n\n          // The set of weapons (weapons and vehicles included) used by the player.\n          \"WeaponStats\": [\n            {\n              \"WeaponId\": {\n\n                // The ID of the weapon. Weapons are available via the Metadata API.\n                \"StockId\": \"int\",\n\n                // Any attachments the weapon had.\n                \"Attachments\": [ \n                  \"int\" \n                ]\n              },\n\n              // The number of shots fired for this weapon.\n              \"TotalShotsFired\": \"int\",\n\n              // The number of shots landed for this weapon.\n              \"TotalShotsLanded\": \"int\",\n\n              // The number of headshots for this weapon.\n              \"TotalHeadshots\": \"int\",\n\n              // The number of kills for this weapon.\n              \"TotalKills\": \"int\",\n\n              // The total damage dealt for this weapon.\n              \"TotalDamageDealt\": \"double\",\n\n              // The total possession time for this weapon. This is expressed as an ISO\n              // 8601 Duration.\n              \"TotalPossessionTime\": \"string\"\n            }\n          ],\n\n          // The set of Impulses (invisible Medals) earned by the player.\n          \"Impulses\": [\n            {\n              // The ID of the Impulse. Impulses are available via the Metadata API.\n              \"Id\": \"int\",\n\n              // The number of times the Impulse was earned.\n              \"Count\": \"int\"\n            }\n          ],\n\n          // Total number of Spartan kills by the player.\n          \"TotalSpartanKills\": \"int\"\n        },\n\n        // Information about the player for whom this data was returned.\n        \"PlayerId\": {\n\n          // The gamertag of the player queried.\n          \"GamerTag\": \"string\",\n\n          // Internal use only. This will always be null.\n          \"Xuid\": null\n        },\n\n        // The player's Spartan Rank. Zero for custom.\n        \"SpartanRank\": \"int\",\n\n        // The player's XP. Zero for custom.\n        \"Xp\": \"int\"\n      }\n    }\n  ],\n\n  // Internal use only. A set of related resource links.\n  \"Links\": null\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "19817b94-511b-3b10-8be0-386b5411c1cd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Custom-Local"
        }
      }
    },
    "insertionIndex" : 57
  }, {
    "id" : "d1096cb4-db8a-388c-845f-a18d55ee4eec",
    "name" : "Halo 5 - Player Service Records - Custom - 503",
    "request" : {
      "urlPath" : "/h5/servicerecords/custom",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "yxn0z135kfbta3e7giurqp1h67"
        }
      }
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "d1096cb4-db8a-388c-845f-a18d55ee4eec",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Custom"
        }
      }
    },
    "insertionIndex" : 58
  }, {
    "id" : "f5790f70-eecc-3d54-883e-7d488d6776f1",
    "name" : "Halo 5 - Player Service Records - Custom - 500",
    "request" : {
      "urlPath" : "/h5/servicerecords/custom",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "rs9pugptp6g5vsyeqk035eh6d5qh2punmjr9e9d1mwciwm0shihbc0hbrz49s9z12p1xt0azcalg"
        }
      }
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "f5790f70-eecc-3d54-883e-7d488d6776f1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Custom"
        }
      }
    },
    "insertionIndex" : 59
  }, {
    "id" : "406f5567-4673-3783-8d37-a85114c1712b",
    "name" : "Halo 5 - Player Service Records - Custom - 404",
    "request" : {
      "urlPath" : "/h5/servicerecords/custom",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "d9lb99y6imupoulrs8u2o6jnvqd7wljfjcp8u7p64bz40egui2p76o9us96vx4ueku2dz648pwhj8txfs1f52emsz1muds6zkzeq3cg4y5vn8bk"
        }
      }
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "406f5567-4673-3783-8d37-a85114c1712b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Custom"
        }
      }
    },
    "insertionIndex" : 60
  }, {
    "id" : "fbea8824-ac9f-3222-b68f-d5bfede915e9",
    "name" : "Halo 5 - Player Service Records - Custom (application/json)",
    "request" : {
      "urlPath" : "/h5/servicerecords/custom",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      },
      "queryParameters" : {
        "players" : {
          "equalTo" : "xa4y9iyjdcwfgmda67xowl9abxayp49by8a6cf5gudyzvdtz3morco"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // Set of responses. One per user queried.\n  \"Results\": [\n    {\n      // The player's gamertag.\n      \"Id\": \"string\",\n\n      // The result of the query for the player. One of the following:\n      //   Success = 0,\n      //   NotFound = 1,\n      //   ServiceFailure = 2,\n      //   ServiceUnavailable = 3\n      // It is possible for different requests from the batch to succeed and fail\n      // independently.\n      \"ResultCode\": \"int\",\n\n      // The Service Record result for the player. Only set if ResultCode is Success.\n      \"Result\": {\n\n        // Custom stats data.\n        \"CustomStats\": {\n\n          // List of custom stats by CustomGameBaseVariant.\n          \"CustomGameBaseVariantStats\": [\n            {\n              // The game base variant specific stats. Flexible stats are available via\n              // the Metadata API.\n              \"FlexibleStats\": {\n\n                // The set of flexible stats that are derived from medal events.\n                \"MedalStatCounts\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The number of times this flexible stat was earned.\n                    \"Count\": \"int\"\n                  }\n                ],\n\n                // The set of flexible stats that are derived from impulse events.\n                \"ImpulseStatCounts\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The number of times this flexible stat was earned.\n                    \"Count\": \"int\"\n                  }\n                ],\n\n                // The set of flexible stats that are derived from medal time lapses.\n                \"MedalTimelapses\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The amount of time the flexible stat was earned for. This is\n                    // expressed as an ISO 8601 Duration.\n                    \"Timelapse\": \"string\"\n                  }\n                ],    \n\n                // The set of flexible stats that are derived from impulse time lapses.\n                \"ImpulseTimelapses\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The amount of time the flexible stat was earned for. This is\n                    // expressed as an ISO 8601 Duration.\n                    \"Timelapse\": \"string\"\n                  }\n                ]\n              },\n\n              // The ID of the game base variant. Game base variants are available via\n              // the Metadata API.\n              \"GameBaseVariantId\": \"guid\",\n\n              // Total number of kills done by the player. This includes melee kills,\n              // shoulder bash kills and Spartan charge kills, all power weapons, AI\n              // kills and vehicle destructions. \n              \"TotalKills\": \"int\",\n\n              // Total number of headshots done by the player.\n              \"TotalHeadshots\": \"int\",\n\n              // Total weapon damage dealt by the player.\n              \"TotalWeaponDamage\": \"double\",\n\n              // Total number of shots fired by the player.\n              \"TotalShotsFired\": \"int\",\n\n              // Total number of shots landed by the player.\n              \"TotalShotsLanded\": \"int\",\n\n              // The weapon the player used to get the most kills.\n              \"WeaponWithMostKills\": {\n\n                \"WeaponId\": {\n\n                  // The ID of the weapon. Weapons are available via the Metadata API.\n                  \"StockId\": \"int\",\n\n                  // Any attachments the weapon had.\n                  \"Attachments\": [\n                    \"int\"\n                  ]\n                },\n\n                // The number of shots fired for this weapon.\n                \"TotalShotsFired\": \"int\",\n\n                // The number of shots landed for this weapon.\n                \"TotalShotsLanded\": \"int\",\n\n                // The number of headshots for this weapon.\n                \"TotalHeadshots\": \"int\",\n\n                // The number of kills for this weapon.\n                \"TotalKills\": \"int\",\n\n                // The total damage dealt for this weapon.\n                \"TotalDamageDealt\": \"double\",\n\n                // The total possession time for this weapon. This is expressed as an ISO\n                // 8601 Duration.\n                \"TotalPossessionTime\": \"string\"\n              },\n\n              // Total number of melee kills by the player.\n              \"TotalMeleeKills\": \"int\",\n\n              // Total melee damage dealt by the player.\n              \"TotalMeleeDamage\": \"double\",\n\n              // Total number of assassinations by the player.\n              \"TotalAssassinations\": \"int\",\n\n              // Total number of ground pound kills by the player.\n              \"TotalGroundPoundKills\": \"int\",\n\n              // Total ground pound damage dealt by the player.\n              \"TotalGroundPoundDamage\": \"double\",\n\n              // Total number of shoulder bash kills by the player.\n              \"TotalShoulderBashKills\": \"int\",\n\n              // Total shoulder bash damage dealt by the player.\n              \"TotalShoulderBashDamage\": \"double\",\n\n              // Total grenade damage dealt by the player.\n              \"TotalGrenadeDamage\": \"double\",\n\n              // Total number of power weapon kills by the player.\n              \"TotalPowerWeaponKills\": \"int\",\n\n              // Total power weapon damage dealt by the player.\n              \"TotalPowerWeaponDamage\": \"double\",\n\n              // Total number of power weapon grabs by the player.\n              \"TotalPowerWeaponGrabs\": \"int\",\n\n              // Total power weapon possession by the player. This is expressed as an ISO\n              // 8601 Duration.\n              \"TotalPowerWeaponPossessionTime\": \"string\",\n\n              // Total number of deaths by the player.\n              \"TotalDeaths\": \"int\",\n\n              // Total number of assists by the player.\n              \"TotalAssists\": \"int\",\n\n              // Total number of games the player has completed.\n              \"TotalGamesCompleted\": \"int\",\n\n              // Total number of games won by the player.\n              \"TotalGamesWon\": \"int\",\n\n              // Total number of games lost by the player.\n              \"TotalGamesLost\": \"int\",\n\n              // Total number of games tied by the player.\n              \"TotalGamesTied\": \"int\",\n\n              // Total timed played by the player.\n              \"TotalTimePlayed\": \"string\",\n\n              // Total number of grenade kills by the player.\n              \"TotalGrenadeKills\": \"int\",\n\n              // The set of Medals earned by the player.\n              \"MedalAwards\": [\n                {\n                  // The ID of the Medal. Medals are available via the Metadata API.\n                  \"MedalId\": \"int\",\n\n                  // The number of times the Medal was earned.\n                  \"Count\": \"int\"\n                }\n              ], \n\n              // List of enemy vehicles destroyed. Vehicles are available via the\n              // Metadata API. Note: this stat measures enemy vehicles, not any vehicle\n              // destruction.\n              \"DestroyedEnemyVehicles\": [\n                {\n                  // The enemy this entry references\n                  \"Enemy\": {\n\n                    // The Base ID for the enemy.\n                    \"BaseId\": \"int\",\n\n                    // The attachments (variants) for the enemy.\n                    \"Attachments\": [\n                      \"int\"\n                    ]\n                  },\n\n                  // Total number of kills on the enemy by the player\n                  \"TotalKills\": \"int\"\n                }\n              ],\n\n              // List of enemies killed, per enemy type. Enemies are available via the\n              // Metadata API.\n              \"EnemyKills\": [\n                {\n                  // The enemy this entry references\n                  \"Enemy\": {\n\n                    // The Base ID for the enemy.\n                    \"BaseId\": \"int\",\n\n                    // The attachments (variants) for the enemy.\n                    \"Attachments\": [\n                      \"int\"\n                    ]\n                  },\n\n                  // Total number of kills on the enemy by the player\n                  \"TotalKills\": \"int\"\n                }\n              ],\n\n              // The set of weapons (weapons and vehicles included) used by the player.\n              \"WeaponStats\": [\n                {\n                  \"WeaponId\": {\n\n                    // The ID of the weapon. Weapons are available via the Metadata API.\n                    \"StockId\": \"int\",\n\n                    // Any attachments the weapon had.\n                    \"Attachments\": [ \n                      \"int\" \n                    ]\n                  },\n\n                  // The number of shots fired for this weapon.\n                  \"TotalShotsFired\": \"int\",\n\n                  // The number of shots landed for this weapon.\n                  \"TotalShotsLanded\": \"int\",\n\n                  // The number of headshots for this weapon.\n                  \"TotalHeadshots\": \"int\",\n\n                  // The number of kills for this weapon.\n                  \"TotalKills\": \"int\",\n\n                  // The total damage dealt for this weapon.\n                  \"TotalDamageDealt\": \"double\",\n\n                  // The total possession time for this weapon. This is expressed as an\n                  // ISO 8601 Duration.\n                  \"TotalPossessionTime\": \"string\"\n                }\n              ],\n\n              // The set of Impulses (invisible Medals) earned by the player.\n              \"Impulses\": [\n                {\n                  // The ID of the Impulse. Impulses are available via the Metadata API.\n                  \"Id\": \"int\",\n\n                  // The number of times the Impulse was earned.\n                  \"Count\": \"int\"\n                }\n              ],\n\n              // Total number of Spartan kills by the player.\n              \"TotalSpartanKills\": \"int\"\n            }\n          ],\n\n          // A list of up to 3 top game base variants played by the user Top means\n          // Wins/Completed matches. If there is a tie, the one with more completions is\n          // higher. If there's still a tie, the GUIDs are sorted and selected\n          \"TopGameBaseVariants\": [\n            {\n              // Rank between 1-3\n              \"GameBaseVariantRank\": \"int\",\n\n              // Number of games played in game base variant\n              \"NumberOfMatchesCompleted\": \"int\",\n\n              // Id of the game base variant\n              \"GameBaseVariantId\": \"guid\",\n\n              // Number of matches won on game base variant\n              \"NumberOfMatchesWon\": \"int\"\n            }\n          ],\n\n          // Total number of kills done by the player. This includes melee kills,\n          // shoulder bash kills and Spartan charge kills, all power weapons, AI kills\n          // and vehicle destructions. \n          \"TotalKills\": \"int\",\n\n          // Total number of headshots done by the player.\n          \"TotalHeadshots\": \"int\",\n\n          // Total weapon damage dealt by the player.\n          \"TotalWeaponDamage\": \"double\",\n\n          // Total number of shots fired by the player.\n          \"TotalShotsFired\": \"int\",\n\n          // Total number of shots landed by the player.\n          \"TotalShotsLanded\": \"int\",\n\n          // The weapon the player used to get the most kills.\n          \"WeaponWithMostKills\": {\n\n            \"WeaponId\": {\n\n              // The ID of the weapon. Weapons are available via the Metadata API.\n              \"StockId\": \"int\",\n\n              // Any attachments the weapon had.\n              \"Attachments\": [\n                \"int\"\n              ]\n            },\n\n            // The number of shots fired for this weapon.\n            \"TotalShotsFired\": \"int\",\n\n            // The number of shots landed for this weapon.\n            \"TotalShotsLanded\": \"int\",\n\n            // The number of headshots for this weapon.\n            \"TotalHeadshots\": \"int\",\n\n            // The number of kills for this weapon.\n            \"TotalKills\": \"int\",\n\n            // The total damage dealt for this weapon.\n            \"TotalDamageDealt\": \"double\",\n\n            // The total possession time for this weapon. This is expressed as an ISO\n            // 8601 Duration.\n            \"TotalPossessionTime\": \"string\"\n          },\n\n          // Total number of melee kills by the player.\n          \"TotalMeleeKills\": \"int\",\n\n          // Total melee damage dealt by the player.\n          \"TotalMeleeDamage\": \"double\",\n\n          // Total number of assassinations by the player.\n          \"TotalAssassinations\": \"int\",\n\n          // Total number of ground pound kills by the player.\n          \"TotalGroundPoundKills\": \"int\",\n\n          // Total ground pound damage dealt by the player.\n          \"TotalGroundPoundDamage\": \"double\",\n\n          // Total number of shoulder bash kills by the player.\n          \"TotalShoulderBashKills\": \"int\",\n\n          // Total shoulder bash damage dealt by the player.\n          \"TotalShoulderBashDamage\": \"double\",\n\n          // Total grenade damage dealt by the player.\n          \"TotalGrenadeDamage\": \"double\",\n\n          // Total number of power weapon kills by the player.\n          \"TotalPowerWeaponKills\": \"int\",\n\n          // Total power weapon damage dealt by the player.\n          \"TotalPowerWeaponDamage\": \"double\",\n\n          // Total number of power weapon grabs by the player.\n          \"TotalPowerWeaponGrabs\": \"int\",\n\n          // Total power weapon possession by the player. This is expressed as an ISO\n          // 8601 Duration.\n          \"TotalPowerWeaponPossessionTime\": \"string\",\n\n          // Total number of deaths by the player.\n          \"TotalDeaths\": \"int\",\n\n          // Total number of assists by the player.\n          \"TotalAssists\": \"int\",\n\n          // Not used.\n          \"TotalGamesCompleted\": \"int\",\n\n          // Not used.\n          \"TotalGamesWon\": \"int\",\n\n          // Not used.\n          \"TotalGamesLost\": \"int\",\n\n          // Not used.\n          \"TotalGamesTied\": \"int\",\n\n          // Total timed played by the player.\n          \"TotalTimePlayed\": \"string\",\n\n          // Total number of grenade kills by the player.\n          \"TotalGrenadeKills\": \"int\",\n\n          // The set of Medals earned by the player.\n          \"MedalAwards\": [\n            {\n              // The ID of the Medal. Medals are available via the Metadata API.\n              \"MedalId\": \"int\",\n\n              // The number of times the Medal was earned.\n              \"Count\": \"int\"\n            }\n          ], \n\n          // List of enemy vehicles destroyed. Vehicles are available via the Metadata\n          // API. Note: this stat measures enemy vehicles, not any vehicle destruction.\n          \"DestroyedEnemyVehicles\": [\n            {\n              // The enemy this entry references\n              \"Enemy\": {\n\n                // The Base ID for the enemy.\n                \"BaseId\": \"int\",\n\n                // The attachments (variants) for the enemy.\n                \"Attachments\": [\n                  \"int\"\n                ]\n              },\n\n              // Total number of kills on the enemy by the player\n              \"TotalKills\": \"int\"\n            }\n          ],\n\n          // List of enemies killed, per enemy type. Enemies are available via the\n          // Metadata API.\n          \"EnemyKills\": [\n            {\n              // The enemy this entry references\n              \"Enemy\": {\n\n                // The Base ID for the enemy.\n                \"BaseId\": \"int\",\n\n                // The attachments (variants) for the enemy.\n                \"Attachments\": [\n                  \"int\"\n                ]\n              },\n\n              // Total number of kills on the enemy by the player\n              \"TotalKills\": \"int\"\n            }\n          ],\n\n          // The set of weapons (weapons and vehicles included) used by the player.\n          \"WeaponStats\": [\n            {\n              \"WeaponId\": {\n\n                // The ID of the weapon. Weapons are available via the Metadata API.\n                \"StockId\": \"int\",\n\n                // Any attachments the weapon had.\n                \"Attachments\": [ \n                  \"int\" \n                ]\n              },\n\n              // The number of shots fired for this weapon.\n              \"TotalShotsFired\": \"int\",\n\n              // The number of shots landed for this weapon.\n              \"TotalShotsLanded\": \"int\",\n\n              // The number of headshots for this weapon.\n              \"TotalHeadshots\": \"int\",\n\n              // The number of kills for this weapon.\n              \"TotalKills\": \"int\",\n\n              // The total damage dealt for this weapon.\n              \"TotalDamageDealt\": \"double\",\n\n              // The total possession time for this weapon. This is expressed as an ISO\n              // 8601 Duration.\n              \"TotalPossessionTime\": \"string\"\n            }\n          ],\n\n          // The set of Impulses (invisible Medals) earned by the player.\n          \"Impulses\": [\n            {\n              // The ID of the Impulse. Impulses are available via the Metadata API.\n              \"Id\": \"int\",\n\n              // The number of times the Impulse was earned.\n              \"Count\": \"int\"\n            }\n          ],\n\n          // Total number of Spartan kills by the player.\n          \"TotalSpartanKills\": \"int\"\n        },\n\n        // Information about the player for whom this data was returned.\n        \"PlayerId\": {\n\n          // The gamertag of the player queried.\n          \"GamerTag\": \"string\",\n\n          // Internal use only. This will always be null.\n          \"Xuid\": null\n        },\n\n        // The player's Spartan Rank. Zero for custom.\n        \"SpartanRank\": \"int\",\n\n        // The player's XP. Zero for custom.\n        \"Xp\": \"int\"\n      }\n    }\n  ],\n\n  // Internal use only. A set of related resource links.\n  \"Links\": null\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fbea8824-ac9f-3222-b68f-d5bfede915e9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Custom"
        }
      }
    },
    "insertionIndex" : 61
  }, {
    "id" : "e3b42ca7-8d12-3524-bdd6-2d9341f827d9",
    "name" : "Halo 5 - Player Service Records - Campaign - 503",
    "request" : {
      "urlPath" : "/h5/servicerecords/campaign",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "s9kwtwlmfkibkwopn0hvbm0qipcgo8syre50bmgtvtc9ncrctp1naqey2ump43"
        }
      }
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "e3b42ca7-8d12-3524-bdd6-2d9341f827d9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Campaign"
        }
      }
    },
    "insertionIndex" : 62
  }, {
    "id" : "b52906fc-d129-37c9-8182-a820500dbd56",
    "name" : "Halo 5 - Player Service Records - Campaign - 500",
    "request" : {
      "urlPath" : "/h5/servicerecords/campaign",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "3gtoc590uit6dzu9dnor3wz0hg0x7mlh31jv2whroimu59zxq269kvzf9xx7bd2nyfti6316qkv3qql27g9y53df6msp9yez2ye2p51g78pz20439ou2344kw2ibpixm2t77jai1gq306ag0630tpaub7qysu3bnv9sdfaimjhmzikx64dfr152nwuwqqvcrv6g3i9n7"
        }
      }
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "b52906fc-d129-37c9-8182-a820500dbd56",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Campaign"
        }
      }
    },
    "insertionIndex" : 63
  }, {
    "id" : "8cbfb47d-1668-34e5-bda9-f95e3999647b",
    "name" : "Halo 5 - Player Service Records - Campaign - 404",
    "request" : {
      "urlPath" : "/h5/servicerecords/campaign",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "77985ufq059f71hur76hwqs8ow5awzvz5k4ofc36eotimzo5x2popn4vs7p86n6rpmv8"
        }
      }
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "8cbfb47d-1668-34e5-bda9-f95e3999647b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Campaign"
        }
      }
    },
    "insertionIndex" : 64
  }, {
    "id" : "722051cb-b5e9-39ec-8900-e76aa2a7d8b9",
    "name" : "Halo 5 - Player Service Records - Campaign (application/json)",
    "request" : {
      "urlPath" : "/h5/servicerecords/campaign",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      },
      "queryParameters" : {
        "players" : {
          "equalTo" : "7c6kg0ngb00ju7ki0t22fsnmq8kwnv8li8giubcfua9kheyr7wzynz4apo4lxehsfsp16ssdzpxlrhzzupgofvdad3xc0ms2w3szgnfdbtxk0zhrzsykvj3nplgbsjh173a9z09n550nr0iuwhxifnmsitwwct89rti4kkivh268ugskdfo6z"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // Set of responses. One per user queried.\n  \"Results\": [\n    {\n      // The player's gamertag.\n      \"Id\": \"string\",\n\n      // The result of the query for the player. One of the following:\n      //   Success = 0,\n      //   NotFound = 1,\n      //   ServiceFailure = 2,\n      //   ServiceUnavailable = 3\n      // It is possible for different requests from the batch to succeed and fail\n      // independently.\n      \"ResultCode\": \"int\",\n\n      // The Service Record result for the player. Only set if ResultCode is Success.\n      \"Result\": {\n\n        // Campaign stats data.\n        \"CampaignStat\": {\n\n          // List of campaign stats by mission ID.\n          \"CampaignMissionStats\": [\n            {\n              // Flexible stats are available via the Metadata API.\n              \"FlexibleStats\": {\n\n                // The set of flexible stats that are derived from medal events.\n                \"MedalStatCounts\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The number of times this flexible stat was earned.\n                    \"Count\": \"int\"\n                  }\n                ],\n\n                // The set of flexible stats that are derived from impulse events.\n                \"ImpulseStatCounts\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The number of times this flexible stat was earned.\n                    \"Count\": \"int\"\n                  }\n                ],\n\n                // The set of flexible stats that are derived from medal time lapses.\n                \"MedalTimelapses\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The amount of time the flexible stat was earned for. This is\n                    // expressed as an ISO 8601 Duration.\n                    \"Timelapse\": \"string\"\n                  }\n                ],    \n\n                // The set of flexible stats that are derived from impulse time lapses.\n                \"ImpulseTimelapses\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The amount of time the flexible stat was earned for. This is\n                    // expressed as an ISO 8601 Duration.\n                    \"Timelapse\": \"string\"\n                  }\n                ]\n              },\n\n              // The set of stats from missions completed while playing co-op. The key is\n              // the difficulty and the value is the playthrough stats for that\n              // difficulty. Empty if there are no finished playthroughs. \n              \"CoopStats\": {\n\n                // The difficulty the mission was played at. Options are:\n                //   Easy = 0,\n                //   Normal = 1,\n                //   Heroic = 2,\n                //   Legendary = 3\n                \"int\": {\n\n                  // The highest score achieved by the player on this difficulty.\n                  \"HighestScore\": \"int\",\n\n                  // The fastest completion time by the player on this difficulty.\n                  \"FastestCompletionTime\": \"string\",\n\n                  // The aggregate set of skulls the player managed to finish this\n                  // mission on this difficulty. Not most in a single run, but which have\n                  // been completed overall.\n                  \"Skulls\": [\n                    \"int\"\n                  ],\n\n                  // The number of times this mission was completed by the player on this\n                  // difficulty.\n                  \"TotalTimesCompleted\": \"int\",\n\n                  // True if the mission was completed with all of the skulls on in one\n                  // playthrough for this difficulty. False otherwise.This field is\n                  // provided to disambiguate the case where the Skulls set contains all\n                  // the Skulls but the player played through the mission multiple times,\n                  // each with a different Skull (as opposed to playing through the\n                  // mission with ALL the skulls enabled).\n                  \"AllSkullsOn\": \"bool\"\n                }\n              },\n\n              // The set of stats from missions completed while playing solo. The key is\n              // the difficulty and the value is the playthrough stats for that\n              // difficulty. Empty if there are no finished playthroughs. \n              \"SoloStats\": {\n\n                // The difficulty the mission was played at. Options are:\n                //   Easy = 0,\n                //   Normal = 1,\n                //   Heroic = 2,\n                //   Legendary = 3\n                \"int\": {\n\n                  // The highest score achieved by the player on this difficulty.\n                  \"HighestScore\": \"int\",\n\n                  // The fastest completion time by the player on this difficulty.\n                  \"FastestCompletionTime\": \"string\",\n\n                  // The aggregate set of skulls the player managed to finish this\n                  // mission on this difficulty. Not most in a single run, but which have\n                  // been completed overall.\n                  \"Skulls\": [\n                    \"int\"\n                  ],\n\n                  // The number of times this mission was completed by the player on this\n                  // difficulty.\n                  \"TotalTimesCompleted\": \"int\",\n\n                  // True if the mission was completed with all of the skulls on in one\n                  // playthrough for this difficulty. False otherwise. This field is\n                  // provided to disambiguate the case where the Skulls set contains all\n                  // the Skulls but the player played through the mission multiple times,\n                  // each with a different Skull (as opposed to playing through the\n                  // mission with ALL the skulls enabled).\n                  \"AllSkullsOn\": \"bool\"\n                }\n              },\n\n              // The mission ID that pertains to this mission. Can be found in metadata.\n              \"MissionId\": \"guid\",\n\n              // Total number of kills done by the player. This includes melee kills,\n              // shoulder bash kills and Spartan charge kills, all power weapons, AI\n              // kills and vehicle destructions. \n              \"TotalKills\": \"int\",\n\n              // Total number of headshots done by the player.\n              \"TotalHeadshots\": \"int\",\n\n              // Total weapon damage dealt by the player.\n              \"TotalWeaponDamage\": \"double\",\n\n              // Total number of shots fired by the player.\n              \"TotalShotsFired\": \"int\",\n\n              // Total number of shots landed by the player.\n              \"TotalShotsLanded\": \"int\",\n\n              // The weapon the player used to get the most kills.\n              \"WeaponWithMostKills\": {\n\n                \"WeaponId\": {\n\n                  // The ID of the weapon. Weapons are available via the Metadata API.\n                  \"StockId\": \"int\",\n\n                  // Any attachments the weapon had.\n                  \"Attachments\": [\n                    \"int\"\n                  ]\n                },\n\n                // The number of shots fired for this weapon.\n                \"TotalShotsFired\": \"int\",\n\n                // The number of shots landed for this weapon.\n                \"TotalShotsLanded\": \"int\",\n\n                // The number of headshots for this weapon.\n                \"TotalHeadshots\": \"int\",\n\n                // The number of kills for this weapon.\n                \"TotalKills\": \"int\",\n\n                // The total damage dealt for this weapon.\n                \"TotalDamageDealt\": \"double\",\n\n                // The total possession time for this weapon. This is expressed as an ISO\n                // 8601 Duration.\n                \"TotalPossessionTime\": \"string\"\n              },\n\n              // Total number of melee kills by the player.\n              \"TotalMeleeKills\": \"int\",\n\n              // Total melee damage dealt by the player.\n              \"TotalMeleeDamage\": \"double\",\n\n              // Total number of assassinations by the player.\n              \"TotalAssassinations\": \"int\",\n\n              // Total number of ground pound kills by the player.\n              \"TotalGroundPoundKills\": \"int\",\n\n              // Total ground pound damage dealt by the player.\n              \"TotalGroundPoundDamage\": \"double\",\n\n              // Total number of shoulder bash kills by the player.\n              \"TotalShoulderBashKills\": \"int\",\n\n              // Total shoulder bash damage dealt by the player.\n              \"TotalShoulderBashDamage\": \"double\",\n\n              // Total grenade damage dealt by the player.\n              \"TotalGrenadeDamage\": \"double\",\n\n              // Total number of power weapon kills by the player.\n              \"TotalPowerWeaponKills\": \"int\",\n\n              // Total power weapon damage dealt by the player.\n              \"TotalPowerWeaponDamage\": \"double\",\n\n              // Total number of power weapon grabs by the player.\n              \"TotalPowerWeaponGrabs\": \"int\",\n\n              // Total power weapon possession by the player. This is expressed as an ISO\n              // 8601 Duration.\n              \"TotalPowerWeaponPossessionTime\": \"string\",\n\n              // Total number of deaths by the player.\n              \"TotalDeaths\": \"int\",\n\n              // Total number of assists by the player.\n              \"TotalAssists\": \"int\",\n\n              // Total number of games the player has completed. Note that for Campaign,\n              // this does not mean that the mission was completed. Mission completion\n              // counts are tracked in SoloStats and CoopStats.\n              \"TotalGamesCompleted\": \"int\",\n\n              // Total number of games won by the player. Not used for Campaign.\n              \"TotalGamesWon\": \"int\",\n\n              // Total number of games lost by the player. Not used for Campaign.\n              \"TotalGamesLost\": \"int\",\n\n              // Total number of games tied by the player. Not used for Campaign.\n              \"TotalGamesTied\": \"int\",\n\n              // Total timed played by the player.\n              \"TotalTimePlayed\": \"string\",\n\n              // Total number of grenade kills by the player.\n              \"TotalGrenadeKills\": \"int\",\n\n              // The set of Medals earned by the player.\n              \"MedalAwards\": [\n                {\n                  // The ID of the Medal. Medals are available via the Metadata API.\n                  \"MedalId\": \"int\",\n\n                  // The number of times the Medal was earned.\n                  \"Count\": \"int\"\n                }\n              ], \n\n              // List of enemy vehicles destroyed. Vehicles are available via the\n              // Metadata API. Note: this stat measures enemy vehicles, not any vehicle\n              // destruction.\n              \"DestroyedEnemyVehicles\": [\n                {\n                  // The enemy this entry references\n                  \"Enemy\": {\n\n                    // The Base ID for the enemy.\n                    \"BaseId\": \"int\",\n\n                    // The attachments (variants) for the enemy.\n                    \"Attachments\": [\n                      \"int\"\n                    ]\n                  },\n\n                  // Total number of kills on the enemy by the player\n                  \"TotalKills\": \"int\"\n                }\n              ],\n\n              // List of enemies killed, per enemy type. Enemies are available via the\n              // Metadata API.\n              \"EnemyKills\": [\n                {\n                  // The enemy this entry references\n                  \"Enemy\": {\n\n                    // The Base ID for the enemy.\n                    \"BaseId\": \"int\",\n\n                    // The attachments (variants) for the enemy.\n                    \"Attachments\": [\n                      \"int\"\n                    ]\n                  },\n\n                  // Total number of kills on the enemy by the player\n                  \"TotalKills\": \"int\"\n                }\n              ],\n\n              // The set of weapons (weapons and vehicles included) used by the player.\n              \"WeaponStats\": [\n                {\n                  \"WeaponId\": {\n\n                    // The ID of the weapon. Weapons are available via the Metadata API.\n                    \"StockId\": \"int\",\n\n                    // Any attachments the weapon had.\n                    \"Attachments\": [ \n                      \"int\" \n                    ]\n                  },\n\n                  // The number of shots fired for this weapon.\n                  \"TotalShotsFired\": \"int\",\n\n                  // The number of shots landed for this weapon.\n                  \"TotalShotsLanded\": \"int\",\n\n                  // The number of headshots for this weapon.\n                  \"TotalHeadshots\": \"int\",\n\n                  // The number of kills for this weapon.\n                  \"TotalKills\": \"int\",\n\n                  // The total damage dealt for this weapon.\n                  \"TotalDamageDealt\": \"double\",\n\n                  // The total possession time for this weapon. This is expressed as an\n                  // ISO 8601 Duration.\n                  \"TotalPossessionTime\": \"string\"\n                }\n              ],\n\n              // The set of Impulses (invisible Medals) earned by the player.\n              \"Impulses\": [\n                {\n                  // The ID of the Impulse. Impulses are available via the Metadata API.\n                  \"Id\": \"int\",\n\n                  // The number of times the Impulse was earned.\n                  \"Count\": \"int\"\n                }\n              ],\n\n              // Total number of Spartan kills by the player.\n              \"TotalSpartanKills\": \"int\"\n            }\n          ],\n\n          // Total number of kills done by the player. This includes melee kills,\n          // shoulder bash kills and Spartan charge kills, all power weapons, AI kills\n          // and vehicle destructions. \n          \"TotalKills\": \"int\",\n\n          // Total number of headshots done by the player.\n          \"TotalHeadshots\": \"int\",\n\n          // Total weapon damage dealt by the player.\n          \"TotalWeaponDamage\": \"double\",\n\n          // Total number of shots fired by the player.\n          \"TotalShotsFired\": \"int\",\n\n          // Total number of shots landed by the player.\n          \"TotalShotsLanded\": \"int\",\n\n          // The weapon the player used to get the most kills.\n          \"WeaponWithMostKills\": {\n\n            \"WeaponId\": {\n\n              // The ID of the weapon. Weapons are available via the Metadata API.\n              \"StockId\": \"int\",\n\n              // Any attachments the weapon had.\n              \"Attachments\": [\n                \"int\"\n              ]\n            },\n\n            // The number of shots fired for this weapon.\n            \"TotalShotsFired\": \"int\",\n\n            // The number of shots landed for this weapon.\n            \"TotalShotsLanded\": \"int\",\n\n            // The number of headshots for this weapon.\n            \"TotalHeadshots\": \"int\",\n\n            // The number of kills for this weapon.\n            \"TotalKills\": \"int\",\n\n            // The total damage dealt for this weapon.\n            \"TotalDamageDealt\": \"double\",\n\n            // The total possession time for this weapon. This is expressed as an ISO\n            // 8601 Duration.\n            \"TotalPossessionTime\": \"string\"\n          },\n\n          // Total number of melee kills by the player.\n          \"TotalMeleeKills\": \"int\",\n\n          // Total melee damage dealt by the player.\n          \"TotalMeleeDamage\": \"double\",\n\n          // Total number of assassinations by the player.\n          \"TotalAssassinations\": \"int\",\n\n          // Total number of ground pound kills by the player.\n          \"TotalGroundPoundKills\": \"int\",\n\n          // Total ground pound damage dealt by the player.\n          \"TotalGroundPoundDamage\": \"double\",\n\n          // Total number of shoulder bash kills by the player.\n          \"TotalShoulderBashKills\": \"int\",\n\n          // Total shoulder bash damage dealt by the player.\n          \"TotalShoulderBashDamage\": \"double\",\n\n          // Total grenade damage dealt by the player.\n          \"TotalGrenadeDamage\": \"double\",\n\n          // Total number of power weapon kills by the player.\n          \"TotalPowerWeaponKills\": \"int\",\n\n          // Total power weapon damage dealt by the player.\n          \"TotalPowerWeaponDamage\": \"double\",\n\n          // Total number of power weapon grabs by the player.\n          \"TotalPowerWeaponGrabs\": \"int\",\n\n          // Total power weapon possession by the player. This is expressed as an ISO\n          // 8601 Duration.\n          \"TotalPowerWeaponPossessionTime\": \"string\",\n\n          // Total number of deaths by the player.\n          \"TotalDeaths\": \"int\",\n\n          // Total number of assists by the player.\n          \"TotalAssists\": \"int\",\n\n          // Total number of games the player has completed. Note that for Campaign, this\n          // does not mean that the mission was completed. Mission completion counts are\n          // tracked in SoloStats and CoopStats.\n          \"TotalGamesCompleted\": \"int\",\n\n          // Total number of games won by the player. Not used for Campaign.\n          \"TotalGamesWon\": \"int\",\n\n          // Total number of games lost by the player. Not used for Campaign.\n          \"TotalGamesLost\": \"int\",\n\n          // Total number of games tied by the player. Not used for Campaign.\n          \"TotalGamesTied\": \"int\",\n\n          \"TotalTimePlayed\": \"string\",\n\n          // Total number of grenade kills by the player.\n          \"TotalGrenadeKills\": \"int\",\n\n          // The set of Medals earned by the player.\n          \"MedalAwards\": [\n            {\n              // The ID of the Medal. Medals are available via the Metadata API.\n              \"MedalId\": \"int\",\n\n              // The number of times the Medal was earned.\n              \"Count\": \"int\"\n            }\n          ], \n\n          // List of enemy vehicles destroyed. Vehicles are available via the Metadata\n          // API. Note: this stat measures enemy vehicles, not any vehicle destruction.\n          \"DestroyedEnemyVehicles\": [\n            {\n              // The enemy this entry references\n              \"Enemy\": {\n\n                // The Base ID for the enemy.\n                \"BaseId\": \"int\",\n\n                // The attachments (variants) for the enemy.\n                \"Attachments\": [\n                  \"int\"\n                ]\n              },\n\n              // Total number of kills on the enemy by the player\n              \"TotalKills\": \"int\"\n            }\n          ],\n\n          // List of enemies killed, per enemy type. Enemies are available via the\n          // Metadata API.\n          \"EnemyKills\": [\n            {\n              // The enemy this entry references\n              \"Enemy\": {\n\n                // The Base ID for the enemy.\n                \"BaseId\": \"int\",\n\n                // The attachments (variants) for the enemy.\n                \"Attachments\": [\n                  \"int\"\n                ]\n              },\n\n              // Total number of kills on the enemy by the player\n              \"TotalKills\": \"int\"\n            }\n          ],\n\n          // The set of weapons (weapons and vehicles included) used by the player.\n          \"WeaponStats\": [\n            {\n              \"WeaponId\": {\n\n                // The ID of the weapon. Weapons are available via the Metadata API.\n                \"StockId\": \"int\",\n\n                // Any attachments the weapon had.\n                \"Attachments\": [ \n                  \"int\" \n                ]\n              },\n\n              // The number of shots fired for this weapon.\n              \"TotalShotsFired\": \"int\",\n\n              // The number of shots landed for this weapon.\n              \"TotalShotsLanded\": \"int\",\n\n              // The number of headshots for this weapon.\n              \"TotalHeadshots\": \"int\",\n\n              // The number of kills for this weapon.\n              \"TotalKills\": \"int\",\n\n              // The total damage dealt for this weapon.\n              \"TotalDamageDealt\": \"double\",\n\n              // The total possession time for this weapon. This is expressed as an ISO\n              // 8601 Duration.\n              \"TotalPossessionTime\": \"string\"\n            }\n          ],\n\n          // The set of Impulses (invisible Medals) earned by the player.\n          \"Impulses\": [\n            {\n              // The ID of the Impulse. Impulses are available via the Metadata API.\n              \"Id\": \"int\",\n\n              // The number of times the Impulse was earned.\n              \"Count\": \"int\"\n            }\n          ],\n\n          // Total number of Spartan kills by the player.\n          \"TotalSpartanKills\": \"int\"\n        },\n\n        // Information about the player for whom this data was returned.\n        \"PlayerId\": {\n\n          // The gamertag of the player queried.\n          \"GamerTag\": \"string\",\n\n          // Internal use only. This will always be null.\n          \"Xuid\": null\n        },\n\n        // The player's Spartan Rank. Zero for campaign.\n        \"SpartanRank\": \"int\",\n\n        // The player's XP. Zero for campaign.\n        \"Xp\": \"int\"\n      }\n    }\n  ],\n\n  // Internal use only. A set of related resource links.\n  \"Links\": null\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "722051cb-b5e9-39ec-8900-e76aa2a7d8b9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Campaign"
        }
      }
    },
    "insertionIndex" : 65
  }, {
    "id" : "0c2ea60e-2ae6-3da7-a800-e6019d6645e8",
    "name" : "Halo 5 - Player Service Records - Arena - 503",
    "request" : {
      "urlPath" : "/h5/servicerecords/arena",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "2m5pl7aa5g3tiw3nmoqsndj9d8l5rkfmum1pjhnatw4bu9wk4nyqdk55kx7vbckqyxilt5q33rf2v0bo7zd452awac1zrg3eq7p3diniafl0m55"
        }
      }
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "0c2ea60e-2ae6-3da7-a800-e6019d6645e8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Arena"
        }
      }
    },
    "insertionIndex" : 66
  }, {
    "id" : "cc3fd702-cfa4-34b9-9039-3298fb3bf0e6",
    "name" : "Halo 5 - Player Service Records - Arena - 500",
    "request" : {
      "urlPath" : "/h5/servicerecords/arena",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "liwq6nrxpx80br4wli737c8e22smsiu47n56ezuso3cufhajwqwvnouel3782p9dpwzmuz4i8hqcgtg2qok3zmir"
        }
      }
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "cc3fd702-cfa4-34b9-9039-3298fb3bf0e6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Arena"
        }
      }
    },
    "insertionIndex" : 67
  }, {
    "id" : "56874029-e522-32c8-a715-fb197b1f13ba",
    "name" : "Halo 5 - Player Service Records - Arena - 404",
    "request" : {
      "urlPath" : "/h5/servicerecords/arena",
      "method" : "GET",
      "queryParameters" : {
        "players" : {
          "equalTo" : "h011t3dbxixshgzulvh"
        }
      }
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "56874029-e522-32c8-a715-fb197b1f13ba",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Arena"
        }
      }
    },
    "insertionIndex" : 68
  }, {
    "id" : "6143142e-5ee9-336c-99d2-5156f78832aa",
    "name" : "Halo 5 - Player Service Records - Arena (application/json)",
    "request" : {
      "urlPath" : "/h5/servicerecords/arena",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      },
      "queryParameters" : {
        "players" : {
          "equalTo" : "30zpci90w12hiqd2r7vgz5gqnrbj9xt5r7bsul1n7cvunyndtfali5l9d9o99gda6uypoy0r879h3xyycxau0cripfv70s4zmwg77hj69nf"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // Set of responses. One per user queried.\n  \"Results\": [\n    {\n      // The player's gamertag.\n      \"Id\": \"string\",\n\n      // The result of the query for the player. One of the following:\n      //   Success = 0,\n      //   NotFound = 1,\n      //   ServiceFailure = 2,\n      //   ServiceUnavailable = 3\n      // It is possible for different requests from the batch to succeed and fail\n      // independently.\n      \"ResultCode\": \"int\",\n\n      // The Service Record result for the player. Only set if ResultCode is Success.\n      \"Result\": {\n\n        // Arena stats data.\n        \"ArenaStats\": {\n\n          // List of arena stats by playlist. This is the ONLY set of stats in the\n          // response that respects the Season ID request parameter. If no Season ID was\n          // specified, these will be the stats for the current season. If an invalid\n          // Season ID was specified, this will be empty.\n          \"ArenaPlaylistStats\": [\n            {\n              // The playlist ID. Playlists are available via the Metadata API.\n              \"PlaylistId\": \"guid\",\n\n              // The player's measurement matches left. If this field is greater than\n              // zero, then the player will not have a CSR yet.\n              \"MeasurementMatchesLeft\": \"int\",\n\n              // The highest Competitive Skill Ranking (CSR) achieved by the player. This\n              // is included because a player's CSR can drop based on performance.\n              \"HighestCsr\": {\n\n                // The CSR tier. CSR Tiers are designation-specific and are available via\n                // the Metadata API.\n                \"Tier\": \"int\",\n\n                // The Designation of the CSR. CSR Designations are available via the\n                // Metadata API.\n                \"DesignationId\": \"int\",\n\n                // The CSR value. Zero for normal (Diamond and below) designations.\n                \"Csr\": \"int\",\n\n                // The percentage of progress towards the next CSR tier.\n                \"PercentToNextTier\": \"int\",\n\n                // If the CSR is Onyx or Champion, the player's leaderboard ranking. Null\n                // otherwise.\n                \"Rank\": \"int\"\n              },\n\n              // The current Competitive Skill Ranking (CSR) of the player.\n              \"Csr\": {\n\n                // The CSR tier. CSR Tiers are designation-specific and are available via\n                // the Metadata API.\n                \"Tier\": \"int\",\n\n                // The Designation of the CSR. CSR Designations are available via the\n                // Metadata API.\n                \"DesignationId\": \"int\",\n\n                // The CSR value. Zero for normal (Diamond and below) designations.\n                \"Csr\": \"int\",\n\n                // The percentage of progress towards the next CSR tier.\n                \"PercentToNextTier\": \"int\",\n\n                // If the CSR is Onyx or Champion, the player's leaderboard ranking. Null\n                // otherwise.\n                \"Rank\": \"int\"\n              },\n\n              // Number represents within what percent of the top players the user is\n              // (top 2 percent for example). Can be null if list is not ranked or if\n              // player has not completed their measurement matches. Does not work for\n              // pre-season.\n              \"CsrPercentile\": \"int\"\n              // Total number of kills done by the player. This includes melee kills,\n              // shoulder bash kills and Spartan charge kills, all power weapons, AI\n              // kills and vehicle destructions. \n              \"TotalKills\": \"int\",\n\n              // Total number of headshots done by the player.\n              \"TotalHeadshots\": \"int\",\n\n              // Total weapon damage dealt by the player.\n              \"TotalWeaponDamage\": \"double\",\n\n              // Total number of shots fired by the player.\n              \"TotalShotsFired\": \"int\",\n\n              // Total number of shots landed by the player.\n              \"TotalShotsLanded\": \"int\",\n\n              // The weapon the player used to get the most kills.\n              \"WeaponWithMostKills\": {\n\n                \"WeaponId\": {\n\n                  // The ID of the weapon. Weapons are available via the Metadata API.\n                  \"StockId\": \"int\",\n\n                  // Any attachments the weapon had.\n                  \"Attachments\": [ \n                    \"int\" \n                  ]\n                },\n\n                // The number of shots fired for this weapon.\n                \"TotalShotsFired\": \"int\",\n\n                // The number of shots landed for this weapon.\n                \"TotalShotsLanded\": \"int\",\n\n                // The number of headshots for this weapon.\n                \"TotalHeadshots\": \"int\",\n\n                // The number of kills for this weapon.\n                \"TotalKills\": \"int\",\n\n                // The total damage dealt for this weapon.\n                \"TotalDamageDealt\": \"double\",\n\n                // The total possession time for this weapon. This is expressed as an ISO\n                // 8601 Duration.\n                \"TotalPossessionTime\": \"string\"\n              },\n\n              // Total number of melee kills by the player.\n              \"TotalMeleeKills\": \"int\",\n\n              // Total melee damage dealt by the player.\n              \"TotalMeleeDamage\": \"double\",\n\n              // Total number of assassinations by the player.\n              \"TotalAssassinations\": \"int\",\n\n              // Total number of ground pound kills by the player.\n              \"TotalGroundPoundKills\": \"int\",\n\n              // Total ground pound damage dealt by the player.\n              \"TotalGroundPoundDamage\": \"double\",\n\n              // Total number of shoulder bash kills by the player.\n              \"TotalShoulderBashKills\": \"int\",\n\n              // Total shoulder bash damage dealt by the player.\n              \"TotalShoulderBashDamage\": \"double\",\n\n              // Total grenade damage dealt by the player.\n              \"TotalGrenadeDamage\": \"double\",\n\n              // Total number of power weapon kills by the player.\n              \"TotalPowerWeaponKills\": \"int\",\n\n              // Total power weapon damage dealt by the player.\n              \"TotalPowerWeaponDamage\": \"double\",\n\n              // Total number of power weapon grabs by the player.\n              \"TotalPowerWeaponGrabs\": \"int\",\n\n              // Total power weapon possession by the player. This is expressed as an ISO\n              // 8601 Duration.\n              \"TotalPowerWeaponPossessionTime\": \"string\",\n\n              // Total number of deaths by the player.\n              \"TotalDeaths\": \"int\",\n\n              // Total number of assists by the player.\n              \"TotalAssists\": \"int\",\n\n              // Total number of games the player has completed.\n              \"TotalGamesCompleted\": \"int\",\n\n              // Total number of games won by the player.\n              \"TotalGamesWon\": \"int\",\n\n              // Total number of games lost by the player.\n              \"TotalGamesLost\": \"int\",\n\n              // Total number of games tied by the player.\n              \"TotalGamesTied\": \"int\",\n\n              // Total timed played by the player.\n              \"TotalTimePlayed\": \"string\",\n\n              // Total number of grenade kills by the player.\n              \"TotalGrenadeKills\": \"int\",\n\n              // The set of Medals earned by the player.\n              \"MedalAwards\": [\n                {\n                  // The ID of the Medal. Medals are available via the Metadata API.\n                  \"MedalId\": \"int\",\n\n                  // The number of times the Medal was earned.\n                  \"Count\": \"int\"\n                }\n              ], \n\n              // List of enemy vehicles destroyed. Vehicles are available via the\n              // Metadata API. Note: this stat measures enemy vehicles, not any vehicle\n              // destruction.\n              \"DestroyedEnemyVehicles\": [\n                {\n                  // The enemy this entry references\n                  \"Enemy\": {\n\n                    // The Base ID for the enemy.\n                    \"BaseId\": \"int\",\n\n                    // The attachments (variants) for the enemy.\n                    \"Attachments\": [\n                      \"int\"\n                    ]\n                  },\n\n                  // Total number of kills on the enemy by the player\n                  \"TotalKills\": \"int\"\n                }\n              ],\n\n              // List of enemies killed, per enemy type. Enemies are available via the\n              // Metadata API.\n              \"EnemyKills\": [\n                {\n                  // The enemy this entry references\n                  \"Enemy\": {\n\n                    // The Base ID for the enemy.\n                    \"BaseId\": \"int\",\n\n                    // The attachments (variants) for the enemy.\n                    \"Attachments\": [\n                      \"int\"\n                    ]\n                  },\n\n                  // Total number of kills on the enemy by the player\n                  \"TotalKills\": \"int\"\n                }\n              ],\n\n              // The set of weapons (weapons and vehicles included) used by the player.\n              \"WeaponStats\": [\n                {\n                  \"WeaponId\": {\n\n                    // The ID of the weapon. Weapons are available via the Metadata API.\n                    \"StockId\": \"int\",\n\n                    // Any attachments the weapon had.\n                    \"Attachments\": [ \n                      \"int\" \n                    ]\n                  },\n\n                  // The number of shots fired for this weapon.\n                  \"TotalShotsFired\": \"int\",\n\n                  // The number of shots landed for this weapon.\n                  \"TotalShotsLanded\": \"int\",\n\n                  // The number of headshots for this weapon.\n                  \"TotalHeadshots\": \"int\",\n\n                  // The number of kills for this weapon.\n                  \"TotalKills\": \"int\",\n\n                  // The total damage dealt for this weapon.\n                  \"TotalDamageDealt\": \"double\",\n\n                  // The total possession time for this weapon. This is expressed as an\n                  // ISO 8601 Duration.\n                  \"TotalPossessionTime\": \"string\"\n                }\n              ],\n\n              // The set of Impulses (invisible Medals) earned by the player.\n              \"Impulses\": [\n                {\n                  // The ID of the Impulse. Impulses are available via the Metadata API.\n                  \"Id\": \"int\",\n\n                  // The number of times the Impulse was earned.\n                  \"Count\": \"int\"\n                }\n              ],\n\n              // Total number of Spartan kills by the player.\n              \"TotalSpartanKills\": \"int\"\n            }\n          ],\n\n          // The highest obtained CSR by the player in arena across all seasons. If the\n          // player hasn't finished measurement matches yet for any playlist, this value\n          // is null.\n          \"HighestCsrAttained\": {\n\n            // The CSR tier. CSR Tiers are designation-specific and are available via the\n            // Metadata API.\n            \"Tier\": \"int\",\n\n            // The Designation of the CSR. CSR Designations are available via the\n            // Metadata API.\n            \"DesignationId\": \"int\",\n\n            // The CSR value. Zero for normal (Diamond and below) designations.\n            \"Csr\": \"int\",\n\n            // The percentage of progress towards the next CSR tier.\n            \"PercentToNextTier\": \"int\",\n\n            // If the CSR is Onyx or Champion, the player's leaderboard ranking. Null\n            // otherwise.\n            \"Rank\": \"int\"\n          },\n\n          // List of arena stats by GameBaseVariant across all seasons.\n          \"ArenaGameBaseVariantStats\": [\n            {\n              // The game base variant specific stats. Flexible stats are available via\n              // the Metadata API.\n              \"FlexibleStats\": {\n\n                // The set of flexible stats that are derived from medal events.\n                \"MedalStatCounts\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The number of times this flexible stat was earned.\n                    \"Count\": \"int\"\n                  }\n                ],\n\n                // The set of flexible stats that are derived from impulse events.\n                \"ImpulseStatCounts\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The number of times this flexible stat was earned.\n                    \"Count\": \"int\"\n                  }\n                ],\n\n                // The set of flexible stats that are derived from medal time lapses.\n                \"MedalTimelapses\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The amount of time the flexible stat was earned for. This is\n                    // expressed as an ISO 8601 Duration.\n                    \"Timelapse\": \"string\"\n                  }\n                ],    \n\n                // The set of flexible stats that are derived from impulse time lapses.\n                \"ImpulseTimelapses\": [\n                  {\n                    // The ID of the flexible stat.\n                    \"Id\": \"guid\",\n\n                    // The amount of time the flexible stat was earned for. This is\n                    // expressed as an ISO 8601 Duration.\n                    \"Timelapse\": \"string\"\n                  }\n                ]\n              },\n\n              // The ID of the game base variant. Game base variants are available via\n              // the Metadata API.\n              \"GameBaseVariantId\": \"guid\",\n\n              // Total number of kills done by the player. This includes melee kills,\n              // shoulder bash kills and Spartan charge kills, all power weapons, AI\n              // kills and vehicle destructions. \n              \"TotalKills\": \"int\",\n\n              // Total number of headshots done by the player.\n              \"TotalHeadshots\": \"int\",\n\n              // Total weapon damage dealt by the player.\n              \"TotalWeaponDamage\": \"double\",\n\n              // Total number of shots fired by the player.\n              \"TotalShotsFired\": \"int\",\n\n              // Total number of shots landed by the player.\n              \"TotalShotsLanded\": \"int\",\n\n              // The weapon the player used to get the most kills.\n              \"WeaponWithMostKills\": {\n\n                \"WeaponId\": {\n\n                  // The ID of the weapon. Weapons are available via the Metadata API.\n                  \"StockId\": \"int\",\n\n                  // Any attachments the weapon had.\n                  \"Attachments\": [ \n                    \"int\" \n                  ]\n                },\n\n                // The number of shots fired for this weapon.\n                \"TotalShotsFired\": \"int\",\n\n                // The number of shots landed for this weapon.\n                \"TotalShotsLanded\": \"int\",\n\n                // The number of headshots for this weapon.\n                \"TotalHeadshots\": \"int\",\n\n                // The number of kills for this weapon.\n                \"TotalKills\": \"int\",\n\n                // The total damage dealt for this weapon.\n                \"TotalDamageDealt\": \"double\",\n\n                // The total possession time for this weapon. This is expressed as an ISO\n                // 8601 Duration.\n                \"TotalPossessionTime\": \"string\"\n              },\n\n              // Total number of melee kills by the player.\n              \"TotalMeleeKills\": \"int\",\n\n              // Total melee damage dealt by the player.\n              \"TotalMeleeDamage\": \"double\",\n\n              // Total number of assassinations by the player.\n              \"TotalAssassinations\": \"int\",\n\n              // Total number of ground pound kills by the player.\n              \"TotalGroundPoundKills\": \"int\",\n\n              // Total ground pound damage dealt by the player.\n              \"TotalGroundPoundDamage\": \"double\",\n\n              // Total number of shoulder bash kills by the player.\n              \"TotalShoulderBashKills\": \"int\",\n\n              // Total shoulder bash damage dealt by the player.\n              \"TotalShoulderBashDamage\": \"double\",\n\n              // Total grenade damage dealt by the player.\n              \"TotalGrenadeDamage\": \"double\",\n\n              // Total number of power weapon kills by the player.\n              \"TotalPowerWeaponKills\": \"int\",\n\n              // Total power weapon damage dealt by the player.\n              \"TotalPowerWeaponDamage\": \"double\",\n\n              // Total number of power weapon grabs by the player.\n              \"TotalPowerWeaponGrabs\": \"int\",\n\n              // Total power weapon possession by the player. This is expressed as an ISO\n              // 8601 Duration.\n              \"TotalPowerWeaponPossessionTime\": \"string\",\n\n              // Total number of deaths by the player.\n              \"TotalDeaths\": \"int\",\n\n              // Total number of assists by the player.\n              \"TotalAssists\": \"int\",\n\n              // Total number of games the player has completed.\n              \"TotalGamesCompleted\": \"int\",\n\n              // Total number of games won by the player.\n              \"TotalGamesWon\": \"int\",\n\n              // Total number of games lost by the player.\n              \"TotalGamesLost\": \"int\",\n\n              // Total number of games tied by the player.\n              \"TotalGamesTied\": \"int\",\n\n              // Total timed played by the player.\n              \"TotalTimePlayed\": \"string\",\n\n              // Total number of grenade kills by the player.\n              \"TotalGrenadeKills\": \"int\",\n\n              // The set of Medals earned by the player.\n              \"MedalAwards\": [\n                {\n                  // The ID of the Medal. Medals are available via the Metadata API.\n                  \"MedalId\": \"int\",\n\n                  // The number of times the Medal was earned.\n                  \"Count\": \"int\"\n                }\n              ], \n\n              // List of enemy vehicles destroyed. Vehicles are available via the\n              // Metadata API. Note: this stat measures enemy vehicles, not any vehicle\n              // destruction.\n              \"DestroyedEnemyVehicles\": [\n                {\n                  // The enemy this entry references\n                  \"Enemy\": {\n\n                    // The Base ID for the enemy.\n                    \"BaseId\": \"int\",\n\n                    // The attachments (variants) for the enemy.\n                    \"Attachments\": [\n                      \"int\"\n                    ]\n                  },\n\n                  // Total number of kills on the enemy by the player\n                  \"TotalKills\": \"int\"\n                }\n              ],\n\n              // List of enemies killed, per enemy type. Enemies are available via the\n              // Metadata API.\n              \"EnemyKills\": [\n                {\n                  // The enemy this entry references\n                  \"Enemy\": {\n\n                    // The Base ID for the enemy.\n                    \"BaseId\": \"int\",\n\n                    // The attachments (variants) for the enemy.\n                    \"Attachments\": [\n                      \"int\"\n                    ]\n                  },\n\n                  // Total number of kills on the enemy by the player\n                  \"TotalKills\": \"int\"\n                }\n              ],\n\n              // The set of weapons (weapons and vehicles included) used by the player.\n              \"WeaponStats\": [\n                {\n                  \"WeaponId\": {\n\n                    // The ID of the weapon. Weapons are available via the Metadata API.\n                    \"StockId\": \"int\",\n\n                    // Any attachments the weapon had.\n                    \"Attachments\": [ \n                      \"int\" \n                    ]\n                  },\n\n                  // The number of shots fired for this weapon.\n                  \"TotalShotsFired\": \"int\",\n\n                  // The number of shots landed for this weapon.\n                  \"TotalShotsLanded\": \"int\",\n\n                  // The number of headshots for this weapon.\n                  \"TotalHeadshots\": \"int\",\n\n                  // The number of kills for this weapon.\n                  \"TotalKills\": \"int\",\n\n                  // The total damage dealt for this weapon.\n                  \"TotalDamageDealt\": \"double\",\n\n                  // The total possession time for this weapon. This is expressed as an\n                  // ISO 8601 Duration.\n                  \"TotalPossessionTime\": \"string\"\n                }\n              ],\n\n              // The set of Impulses (invisible Medals) earned by the player.\n              \"Impulses\": [\n                {\n                  // The ID of the Impulse. Impulses are available via the Metadata API.\n                  \"Id\": \"int\",\n\n                  // The number of times the Impulse was earned.\n                  \"Count\": \"int\"\n                }\n              ],\n\n              // Total number of Spartan kills by the player.\n              \"TotalSpartanKills\": \"int\"\n            }\n          ],\n\n          // A list of up to three game base variants with the highest win rate across\n          // all seasons by the user. If there is a tie, the game base variant with more\n          // completed games is higher. If there's still a tie, the game base variant IDs\n          // are sorted and selected.\n          \"TopGameBaseVariants\": [\n            {\n              // Rank between 1-3\n              \"GameBaseVariantRank\": \"int\",\n\n              // Number of games played in game base variant\n              \"NumberOfMatchesCompleted\": \"int\",\n\n              // Id of the game base variant\n              \"GameBaseVariantId\": \"guid\",\n\n              // Number of matches won on game base variant\n              \"NumberOfMatchesWon\": \"int\"\n            }\n          ],\n\n          // The ID for the playlist that pertains to the highest obtained CSR field\n          // across all seasons. If the CSR is null, so is this field. \n          \"HighestCsrPlaylistId\": \"guid\",\n\n          // The ID for the season that pertains to the highest obtained CSR field across\n          // all seasons. If the CSR is null, so is this field.\n          \"HighestCsrSeasonId\": \"guid\",\n\n          // The ID for the Season of the stats in ArenaPlaylistStats. If no Season ID\n          // was specified on the request, then this is the ID of the current season.\n          \"ArenaPlaylistStatsSeasonId\": \"guid\",\n\n          // Total number of kills done by the player. This includes melee kills,\n          // shoulder bash kills and Spartan charge kills, all power weapons, AI kills\n          // and vehicle destructions. \n          \"TotalKills\": \"int\",\n\n          // Total number of headshots done by the player.\n          \"TotalHeadshots\": \"int\",\n\n          // Total weapon damage dealt by the player.\n          \"TotalWeaponDamage\": \"double\",\n\n          // Total number of shots fired by the player.\n          \"TotalShotsFired\": \"int\",\n\n          // Total number of shots landed by the player.\n          \"TotalShotsLanded\": \"int\",\n\n          // The weapon the player used to get the most kills.\n          \"WeaponWithMostKills\": {\n\n            \"WeaponId\": {\n\n              // The ID of the weapon. Weapons are available via the Metadata API.\n              \"StockId\": \"int\",\n\n              // Any attachments the weapon had.\n              \"Attachments\": [ \n                \"int\" \n              ]\n            },\n\n            // The number of shots fired for this weapon.\n            \"TotalShotsFired\": \"int\",\n\n            // The number of shots landed for this weapon.\n            \"TotalShotsLanded\": \"int\",\n\n            // The number of headshots for this weapon.\n            \"TotalHeadshots\": \"int\",\n\n            // The number of kills for this weapon.\n            \"TotalKills\": \"int\",\n\n            // The total damage dealt for this weapon.\n            \"TotalDamageDealt\": \"double\",\n\n            // The total possession time for this weapon. This is expressed as an ISO\n            // 8601 Duration.\n            \"TotalPossessionTime\": \"string\"\n          },\n\n          // Total number of melee kills by the player.\n          \"TotalMeleeKills\": \"int\",\n\n          // Total melee damage dealt by the player.\n          \"TotalMeleeDamage\": \"double\",\n\n          // Total number of assassinations by the player.\n          \"TotalAssassinations\": \"int\",\n\n          // Total number of ground pound kills by the player.\n          \"TotalGroundPoundKills\": \"int\",\n\n          // Total ground pound damage dealt by the player.\n          \"TotalGroundPoundDamage\": \"double\",\n\n          // Total number of shoulder bash kills by the player.\n          \"TotalShoulderBashKills\": \"int\",\n\n          // Total shoulder bash damage dealt by the player.\n          \"TotalShoulderBashDamage\": \"double\",\n\n          // Total grenade damage dealt by the player.\n          \"TotalGrenadeDamage\": \"double\",\n\n          // Total number of power weapon kills by the player.\n          \"TotalPowerWeaponKills\": \"int\",\n\n          // Total power weapon damage dealt by the player.\n          \"TotalPowerWeaponDamage\": \"double\",\n\n          // Total number of power weapon grabs by the player.\n          \"TotalPowerWeaponGrabs\": \"int\",\n\n          // Total power weapon possession by the player. This is expressed as an ISO\n          // 8601 Duration.\n          \"TotalPowerWeaponPossessionTime\": \"string\",\n\n          // Total number of deaths by the player.\n          \"TotalDeaths\": \"int\",\n\n          // Total number of assists by the player.\n          \"TotalAssists\": \"int\",\n\n          // Total number of games the player has completed.\n          \"TotalGamesCompleted\": \"int\",\n\n          // Total number of games won by the player.\n          \"TotalGamesWon\": \"int\",\n\n          // Total number of games lost by the player.\n          \"TotalGamesLost\": \"int\",\n\n          // Total number of games tied by the player.\n          \"TotalGamesTied\": \"int\",\n\n          // Total timed played by the player.\n          \"TotalTimePlayed\": \"string\",\n\n          // Total number of grenade kills by the player.\n          \"TotalGrenadeKills\": \"int\",\n\n          // The set of Medals earned by the player.\n          \"MedalAwards\": [\n            {\n              // The ID of the Medal. Medals are available via the Metadata API.\n              \"MedalId\": \"int\",\n\n              // The number of times the Medal was earned.\n              \"Count\": \"int\"\n            }\n          ], \n\n          // List of enemy vehicles destroyed. Vehicles are available via the Metadata\n          // API. Note: this stat measures enemy vehicles, not any vehicle destruction.\n          \"DestroyedEnemyVehicles\": [\n            {\n              // The enemy this entry references\n              \"Enemy\": {\n\n                // The Base ID for the enemy.\n                \"BaseId\": \"int\",\n\n                // The attachments (variants) for the enemy.\n                \"Attachments\": [\n                  \"int\"\n                ]\n              },\n\n              // Total number of kills on the enemy by the player\n              \"TotalKills\": \"int\"\n            }\n          ],\n\n          // List of enemies killed, per enemy type. Enemies are available via the\n          // Metadata API.\n          \"EnemyKills\": [\n            {\n              // The enemy this entry references\n              \"Enemy\": {\n\n                // The Base ID for the enemy.\n                \"BaseId\": \"int\",\n\n                // The attachments (variants) for the enemy.\n                \"Attachments\": [\n                  \"int\"\n                ]\n              },\n\n              // Total number of kills on the enemy by the player\n              \"TotalKills\": \"int\"\n            }\n          ],\n\n          // The set of weapons (weapons and vehicles included) used by the player.\n          \"WeaponStats\": [\n            {\n              \"WeaponId\": {\n\n                // The ID of the weapon. Weapons are available via the Metadata API.\n                \"StockId\": \"int\",\n\n                // Any attachments the weapon had.\n                \"Attachments\": [ \n                  \"int\" \n                ]\n              },\n\n              // The number of shots fired for this weapon.\n              \"TotalShotsFired\": \"int\",\n\n              // The number of shots landed for this weapon.\n              \"TotalShotsLanded\": \"int\",\n\n              // The number of headshots for this weapon.\n              \"TotalHeadshots\": \"int\",\n\n              // The number of kills for this weapon.\n              \"TotalKills\": \"int\",\n\n              // The total damage dealt for this weapon.\n              \"TotalDamageDealt\": \"double\",\n\n              // The total possession time for this weapon. This is expressed as an ISO\n              // 8601 Duration.\n              \"TotalPossessionTime\": \"string\"\n            }\n          ],\n\n          // The set of Impulses (invisible Medals) earned by the player.\n          \"Impulses\": [\n            {\n              // The ID of the Impulse. Impulses are available via the Metadata API.\n              \"Id\": \"int\",\n\n              // The number of times the Impulse was earned.\n              \"Count\": \"int\"\n            }\n          ],\n\n          // Total number of Spartan kills by the player.\n          \"TotalSpartanKills\": \"int\"\n        },\n\n        // Information about the player for whom this data was returned.\n        \"PlayerId\": {\n\n          // The gamertag of the player queried.\n          \"GamerTag\": \"string\",\n\n          // Internal use only. This will always be null.\n          \"Xuid\": null\n        },\n\n        // The player's Spartan Rank.\n        \"SpartanRank\": \"int\",\n\n        // The player's XP.\n        \"Xp\": \"int\"\n      }\n    }\n  ],\n\n  // Internal use only. A set of related resource links.\n  \"Links\": null\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6143142e-5ee9-336c-99d2-5156f78832aa",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Player-Service-Records-Arena"
        }
      }
    },
    "insertionIndex" : 69
  }, {
    "id" : "29fc6203-fb7c-35c2-8978-1d7f2f068f26",
    "name" : "Halo 5 - Player Match History - 503",
    "request" : {
      "urlPath" : "/h5/players/nciodg3k9l0b6zfcs4elq5vh8mv0hqv7e4322gygzbyic32lqlnucgwbl7axbvnhbojoub1as8oj8u9tas6iqnm3um4x3t54tvtyvzqfv3tss0k0ul57j20mzw6kjg2tkauci6z64222y1bwtr9f1l02dh3u0lwv0l9qfy343y3pnyiq439gyocnr1kbyih/matches",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "29fc6203-fb7c-35c2-8978-1d7f2f068f26",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Player-Match-History"
        }
      }
    },
    "insertionIndex" : 70
  }, {
    "id" : "ea7fd527-22a2-3c19-92e7-25f1d271ad3d",
    "name" : "Halo 5 - Player Match History - 500",
    "request" : {
      "urlPath" : "/h5/players/a6v0n85n5i6qvdw7qh2bna05zghp59o3cm76jn4x2/matches",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "ea7fd527-22a2-3c19-92e7-25f1d271ad3d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Player-Match-History"
        }
      }
    },
    "insertionIndex" : 71
  }, {
    "id" : "7b0f3fdd-a976-302a-87c4-766a55439f2a",
    "name" : "Halo 5 - Player Match History - 404",
    "request" : {
      "urlPath" : "/h5/players/rza2dfxb7nkx1s5a44to9hdi7upw4ic69iuthr54p6721m1c4kccucat0fwx2p7hwzmvmztz1nc833fl8qycjd2rs8fww6l4kkyboxuer1xdrwm4ymel4i9p100lcgfjlty6wy3i7wsqi5kl7honog21q4mnr1d7subghamgxhhubev0za0iobqtqr67vzbaf04sohdv/matches",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "7b0f3fdd-a976-302a-87c4-766a55439f2a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Player-Match-History"
        }
      }
    },
    "insertionIndex" : 72
  }, {
    "id" : "937dc6df-8475-30e4-8a23-191518229971",
    "name" : "Halo 5 - Player Match History - 400",
    "request" : {
      "urlPath" : "/h5/players/8txne0rw8vbxcubr7v8r2gf7fob5032akme0lg9pdg0o189epjhdhvtga22k18ofpi09ph5b34tk08xulsixfmw9typ56cr5ywcclivj3obbsygm41e5ncuxbj08mp3f4hl72lnwxctaafyrhnyv7958oat13/matches",
      "method" : "GET"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "937dc6df-8475-30e4-8a23-191518229971",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Player-Match-History"
        }
      }
    },
    "insertionIndex" : 73
  }, {
    "id" : "9217b930-6a4b-371e-90f9-2903de1017a4",
    "name" : "Halo 5 - Player Match History (application/json)",
    "request" : {
      "urlPath" : "/h5/players/8cz9bos3dpkkdpc63s2638cj1wfzabfk67197ykebm7ubl4di9dr9zzwwpf1v624zmnsk40jdo16/matches",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // The starting point that was used. When the \"start\" query string parameter is\n  // specified, this value is identical. When \"start\" is omitted, the default value is\n  // returned.\n  \"Start\": \"int\",  \n\n  // The number of results that the service attempted to retrieve to satisfy this\n  // request. Normally this value is equal to the \"count\" parameter. If the client\n  // specified a count parameter greater than the maximum allowed, this value contains\n  // the maximum allowed amount.\n  \"Count\": \"int\",\n\n  // The number of results that are actually being returned in this response. This field\n  // is named \"ResultCount\" to avoid confusion with \"Count\".\n  \"ResultCount\": \"int\",\n\n  // A list of recent matches. Matches are listed in reverse chronological order with the\n  // most recently started match first.\n  \"Results\": [\n    {\n      // Internal use only. A set of related resource links.\n      \"Links\": \"links\",\n\n      \"Id\": {\n\n        // The ID for this match. More match details are available via the applicable\n        // Match Result Endpoint.\n        \"MatchId\": \"guid\",\n\n        // The game mode applicable to this match. Options are: \n        //   Error = 0, \n        //   Arena = 1, \n        //   Campaign = 2, \n        //   Custom = 3, \n        //   Warzone = 4,\n        //   CustomLocal = 6.\n        \"GameMode\": \"int\",\n\n      },\n\n      // The ID of the playlist (aka \"Hopper\") for the match. \n      // Hoppers are used in Arena and Warzone. In Arena, they function just as you would\n      // expect, similar to previous Halo titles. Warzone uses hoppers as well. There\n      // will be multiple Warzone hoppers which contain a rotating playlist of scenarios\n      // to play. \n      // Null for campaign & custom games. \n      // Playlists are available via the Metadata API.\n      \"HopperId\": \"guid\",\n\n      // The ID of the base map for this match. Maps are available via the Metadata API.\n      \"MapId\": \"guid\",\n\n      // The variant of the map for this match. There are two sources of map variants:\n      // official map variants available via the Metadata API and user-generated map\n      // variants which are not available via the APIs currently. This will be null for\n      // campaign games.\n      \"MapVariant\": {\n\n        // The resource type. 3 indicates map variant.\n        \"ResourceType\": 3,\n\n        // The ID of the map variant. Official map variants are available via the\n        // Metadata API.\n        \"ResourceId\": \"guid\",\n\n        // The source of the map variant. Options are:\n        //   Unknown = 0,\n        //   User-generated = 1,\n        //   Official = 3.\n        \"OwnerType\": \"int\",\n\n        // The gamertag of the user that created the map variant if this is a\n        // user-generated map variant, or null otherwise. \n        \"Owner\": \"string\"\n      },\n\n      // The ID of the game base variant for this match. Game base variants are available\n      // via the Metadata API.\n      \"GameBaseVariantId\": \"guid\",\n\n      // The variant of the game for this match. There are two sources of game variants:\n      // official game variants available via the Metadata API and user-generated game\n      // variants which are not available via the APIs currently. This will be null for\n      // campaign games.\n      \"GameVariant\": {\n\n        // The resource type. 2 indicates game variant.\n        \"ResourceType\": 2,\n\n        // The ID of the game variant. Official game variants are available via the\n        // Metadata API.\n        \"ResourceId\": \"guid\",        \n\n        // The source of the game variant. Options are:\n        //   Unknown = 0,\n        //   User-generated = 1,\n        //   Official = 3.\n        \"OwnerType\": \"int\",\n\n        // The gamertag of the user that created the game variant if this is a\n        // user-generated game variant, or null otherwise. \n        \"Owner\": \"string\"\n      },\n\n      // The length of the match. This is expressed as an ISO 8601 Duration.\n      \"MatchDuration\": \"string\",\n\n      // The date and time when the match ended. Note that this is different than the\n      // processing date, once matches end they typically take a small amount of time to\n      // process. The processing date is not available through this API. The time\n      // component of this date is set to \"00:00:00\" unless the \"{include-times}\" request\n      // parameter is set to \"true\". This is expressed as an ISO 8601 combined Date and\n      // Time.\n      \"MatchCompletedDate\": {\n\n        \"ISO8601Date\": \"string\"\n      },\n\n      // Provides team data. This list contains all team that Won or Tied. Losing teams\n      // are not included. This list is empty for campaign games. \n      \"Teams\": [\n        {\n          // The ID for the team. The team's ID dictates the team's color. Team colors\n          // are available via the Metadata API.\n          \"Id\": \"int\",\n\n          // The team's score at the end of the match. The way the score is determined is\n          // based off the game base variant being played: \n          //   Breakout = number of rounds won,\n          //   CTF = number of flag captures,\n          //   Slayer = number of kills,\n          //   Strongholds = number of points,\n          //   Warzone = number of points.\n          // Score can be a negative value. Unfortunately, this value is returned as an\n          // unsigned 32-bit integer. This means that if the score is -1, the score\n          // reported is 4,294,967,295.\n          \"Score\": \"uint32\",\n\n          // The team's rank at the end of the match.\n          \"Rank\": \"int\"\n        }\n      ],\n\n      // This field contains the player's data. This will only contain data for the\n      // player specified in the request.\n      \"Players\": [\n        {          \n          \"Player\": {\n\n            // The player's gamertag.\n            \"Gamertag\": \"string\",\n\n            // Internal use only. This will always be null.\n            \"Xuid\": null\n          },\n\n          // The ID of the team that the player was on when the match ended. Zero for\n          // campaign games.\n          \"TeamId\": \"int\",\n\n          // The player's team-agnostic ranking in this match.\n          \"Rank\": \"int\",\n\n          // Indicates what result the player received at the conclusion of the match.\n          // Options are:\n          //   Did Not Finish = 0, \n          //   Lost = 1, \n          //   Tied = 2, \n          //   Won = 3. \n          // Did Not Finish: The player was not present when the match ended.\n          // Lost: The player was on a team that was assigned a loss, typically this is\n          // when a team does not have rank = 1. \n          // Won: The player was on the team that was assigned the win, typically this is\n          // the team that has rank = 1. \n          // Tied: The player was on the team that was awarded a tie. Typically this is\n          // when the player is on the team with rank = 1, and there is at least one\n          // other team with rank = 1. Ties are only for rank = 1 teams. Consider the\n          // scenario when exactly one team is rank = 1, and two teams are rank = 2.\n          // Players on the rank=1 team will have \"Won\", players on the rank = 2 teams\n          // will have \"Lost\". For ties, this documentation states 'typically' because\n          // the game may have unique rules for multi-team and FFA scenarios, in which\n          // multiple teams are awarded a win.\n          \"Result\": \"int\",\n\n          // The number of enemy kills the player had during this match. This includes\n          // other Spartans and Enemy AI.\n          \"TotalKills\": \"int\",\n\n          // The number of times this player died during the match.\n          \"TotalDeaths\": \"int\",\n\n          // The number of assists credited to the player during the match. This includes\n          // other Spartans and Enemy AI.\n          \"TotalAssists\": \"int\",\n\n          // Internal use only. This will always be null.\n          \"PreMatchRatings\": null,\n\n          // Internal use only. This will always be null.\n          \"PostMatchRatings\": null\n        }\n      ],\n\n      // Whether this was a team-based game or not (e.g. free-for-all).\n      \"IsTeamGame\": \"boolean\",\n\n      // The ID of the season for this match if it was played in a seasonal playlist.\n      // Null if the match was played in a non-seasonal playlist. This will only be set\n      // for Arena matches and will be null for all other game modes.\n      \"SeasonId\": null,\n\n      // Internal use only. Do not use.\n      \"MatchCompletedDateFidelity\": \"int\"\n    }\n  ]\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9217b930-6a4b-371e-90f9-2903de1017a4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Player-Match-History"
        }
      }
    },
    "insertionIndex" : 74
  }, {
    "id" : "61f174b8-5914-3c1f-9c50-d11f4c9c34c5",
    "name" : "Halo 5 - Player Commendations - 503",
    "request" : {
      "urlPath" : "/h5/players/xfj370w17hb754x38pd4yew/commendations",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "61f174b8-5914-3c1f-9c50-d11f4c9c34c5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Player-Commendations"
        }
      }
    },
    "insertionIndex" : 75
  }, {
    "id" : "33df7e11-b2d9-3918-ba1b-79d922a616e9",
    "name" : "Halo 5 - Player Commendations - 500",
    "request" : {
      "urlPath" : "/h5/players/k1klarejgerdw8d7ma9629rsk3fzy7if5kqy02n57yv54g1xw0vswr1r20a481qipvh1/commendations",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "33df7e11-b2d9-3918-ba1b-79d922a616e9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Player-Commendations"
        }
      }
    },
    "insertionIndex" : 76
  }, {
    "id" : "e89ac5ec-db1e-3586-b57b-cd9b444aed86",
    "name" : "Halo 5 - Player Commendations - 404",
    "request" : {
      "urlPath" : "/h5/players/7lt242ig8j8yuspzh700bdbrd0isqfqni67ycw0j334xyrawnf6rpt7ybh2916xsr569xbz41pi6dilhwy7v0vvmumr1l3ua2xa4etwnmpquv3ndy40/commendations",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "e89ac5ec-db1e-3586-b57b-cd9b444aed86",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Player-Commendations"
        }
      }
    },
    "insertionIndex" : 77
  }, {
    "id" : "fcb154da-c864-306b-915c-40f2aaf012c0",
    "name" : "Halo 5 - Player Commendations (application/json)",
    "request" : {
      "urlPath" : "/h5/players/cbgrv0wt7x9ddha0964ttp2rnc1nnsikq4i9nuf4npshx1b244fi1hpj1fw1vv0mojadklenc81d9xj8p1gbzffb6m3wx/commendations",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // Internal use only. A set of related resource links.\n  \"Links\": null,\n\n  // The progress towards each Progressive Commendation. Progressive commendations have a\n  // series of increasingly difficult thresholds (levels) that must crossed to receive\n  // increasingly greater rewards. If no progress has been made for a progressive\n  // commendation, it is omitted from this list.\n  \"ProgressiveCommendations\": [\n    {\n      // The commendation ID. Commendations are available via the Metadata API.\n      \"Id\": \"guid\",\n\n      // The progress that has been made towards the commendation.\n      \"Progress\": \"int\",\n\n      // The levels that have been completed for the commendation.\n      \"CompletedLevels\": [\n        {\n          // The commendation level ID. Commendation Levels area available via the\n          // Metadata API.\n          \"Id\": \"guid\",\n\n          // The date the commendation level was completed. The time component of this\n          // date is always set to \"00:00:00\". This is expressed as an ISO 8601 combined\n          // Date and Time.\n          \"CompletedDateUtc\": {\n\n            \"ISO8601Date\": \"string\"\n          }\n        }\n      ]\n    }\n  ],\n\n  // The progress towards each Meta Commendation. Meta commendations are unlocked when\n  // one or more other commendation levels have been completed. If no progress has been\n  // made for a meta commendation, it is omitted from this list.\n  \"MetaCommendations\": [\n    {\n      // The commendation ID. Commendations are available via the Metadata API.\n      \"Id\": \"guid\",\n\n      // The required commendation IDs that have been completed that are associated with\n      // this meta commendation. In C#, this can be reassembled into a Guid in the\n      // following manner: new Guid((int)Data1, (short)Data2, (short)Data3,\n      // BitConverter.GetBytes((long)Data4)).\n      \"MetRequirements\": [\n        {\n          \"Data1\": \"int\",\n\n          \"Data2\": \"int\",\n\n          \"Data3\": \"int\",\n\n          \"Data4\": \"int\"\n        }\n      ]\n    }\n  ],\n\n  // The date when the commendations progress was last updated. The time component of\n  // this date is always set to \"00:00:00\". This is expressed as an ISO 8601 combined\n  // Date and Time.\n  \"LastUpdatedDateUtc\": {\n\n    \"ISO8601Date\": \"string\"\n  }\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fcb154da-c864-306b-915c-40f2aaf012c0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Player-Commendations"
        }
      }
    },
    "insertionIndex" : 78
  }, {
    "id" : "cd20edc4-e91b-3434-ba49-c9774ea30e47",
    "name" : "Halo 5 - Leaderboard - Player CSR - 503",
    "request" : {
      "urlPath" : "/h5/player-leaderboards/csr/p4np/4441",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "cd20edc4-e91b-3434-ba49-c9774ea30e47",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Leaderboard-Player-CSR"
        }
      }
    },
    "insertionIndex" : 79
  }, {
    "id" : "8aaeb7c0-dab2-3994-b361-861afca7e135",
    "name" : "Halo 5 - Leaderboard - Player CSR - 500",
    "request" : {
      "urlPath" : "/h5/player-leaderboards/csr/0x60/esw6",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "8aaeb7c0-dab2-3994-b361-861afca7e135",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Leaderboard-Player-CSR"
        }
      }
    },
    "insertionIndex" : 80
  }, {
    "id" : "ba87ba4f-9962-3977-b6ac-5079f6da42da",
    "name" : "Halo 5 - Leaderboard - Player CSR - 404",
    "request" : {
      "urlPath" : "/h5/player-leaderboards/csr/d575/q6lm",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "ba87ba4f-9962-3977-b6ac-5079f6da42da",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Leaderboard-Player-CSR"
        }
      }
    },
    "insertionIndex" : 81
  }, {
    "id" : "057a28fd-6990-3d86-991f-dd8058d1784b",
    "name" : "Halo 5 - Leaderboard - Player CSR (application/json)",
    "request" : {
      "urlPath" : "/h5/player-leaderboards/csr/ry0m/m94e",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // The starting point that was used. Will always be 0.\n  \"Start\": \"int\",\n\n  // The number of results that the service attempted to retrieve to satisfy this\n  // request. Normally this value is equal to the \"count\" parameter. If the client\n  // specified a count parameter greater than the maximum allowed, this value contains\n  // the maximum allowed amount.\n  \"Count\": \"int\",\n\n  // The number of results that are actually being returned in this response. This field\n  // is named \"ResultCount\" to avoid confusion with \"Count\".\n  \"ResultCount\": \"int\",\n\n  // Internal use only. A set of related resource links.\n  \"Links\": \"links\",\n\n  // A list of players in the leaderboard. Players are listed in chronological order with\n  // the player with the highest CSR first.\n  \"Results\": [\n    {\n      // Information about the player for whom this data was returned.\n      \"Player\": {\n\n        // The gamertag of the player queried.\n        \"Gamertag\": \"string\",\n\n        // Internal use only. This will always be null.\n        \"Xuid\": null\n      },\n\n      // The player's rank in the leaderboard.\n      \"Rank\": \"int\",\n\n      \"Score\": {\n\n        // The CSR tier. CSR Tiers are designation-specific and are available via the\n        // Metadata API.\n        \"Tier\": \"int\",\n\n        // The Designation of the CSR. CSR Designations are available via the Metadata\n        // API.\n        \"DesignationId\": \"int\",\n\n        // The CSR value. Zero for normal (Diamond and below) designations.\n        \"Csr\": \"int\",\n\n        // The percentage of progress towards the next CSR tier.\n        \"PercentToNextTier\": \"int\",\n\n        // If the CSR is Onyx or Champion, the player's leaderboard ranking. Null\n        // otherwise.\n        \"Rank\": \"int\"\n      }\n    }\n  ]\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "057a28fd-6990-3d86-991f-dd8058d1784b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Leaderboard-Player-CSR"
        }
      }
    },
    "insertionIndex" : 82
  }, {
    "id" : "5240c45c-4d7e-3f02-b32a-6c01dc66d154",
    "name" : "Halo 5 - Match Events - 503",
    "request" : {
      "urlPath" : "/h5/matches/zb7u/events",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "5240c45c-4d7e-3f02-b32a-6c01dc66d154",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Match-Events"
        }
      }
    },
    "insertionIndex" : 83
  }, {
    "id" : "75b40c09-9380-3dc1-9a30-b683da915c18",
    "name" : "Halo 5 - Match Events - 500",
    "request" : {
      "urlPath" : "/h5/matches/739m/events",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "75b40c09-9380-3dc1-9a30-b683da915c18",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Match-Events"
        }
      }
    },
    "insertionIndex" : 84
  }, {
    "id" : "2b142973-bda7-36a1-9ebb-ee864d899d08",
    "name" : "Halo 5 - Match Events - 404",
    "request" : {
      "urlPath" : "/h5/matches/o52o/events",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "2b142973-bda7-36a1-9ebb-ee864d899d08",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Match-Events"
        }
      }
    },
    "insertionIndex" : 85
  }, {
    "id" : "79243248-4a62-3b95-923c-d549f72967bd",
    "name" : "Halo 5 - Match Events (application/json)",
    "request" : {
      "urlPath" : "/h5/matches/m597/events",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // Events that describe a match from start to completion. Events are reported in\n  // chronological order.\n  // Events can come in a variety of types indicated by the \"EventName\" field. Each event\n  // is documented in detail below the documentation for this return contract.\n  // Additional event types may be added in the future.\n  // When deserializing events, it is suggested to use a union of all of the fields\n  // across all of the different event types, shown below.\n  \"GameEvents\": [\n    {\n      \"Assistants\": [\n        {\n          \"Gamertag\": \"string\",\n\n          \"Xuid\": null\n        }\n      ],\n\n      \"DeathDisposition\": \"int\",\n\n      \"ImpulseId\": \"int\",\n\n      \"IsAssassination\": \"boolean\",\n\n      \"IsGroundPound\": \"boolean\",\n\n      \"IsHeadshot\": \"boolean\",\n\n      \"IsMelee\": \"boolean\",\n\n      \"IsShoulderBash\": \"boolean\",\n\n      \"IsWeapon\": \"boolean\",\n\n      \"Killer\": {\n\n        \"Gamertag\": \"string\",\n\n        \"Xuid\": null\n      },\n\n      \"KillerAgent\": \"int\",\n\n      \"KillerWeaponAttachmentIds\": [ \"int\" ],\n\n      \"KillerWeaponStockId\": \"int\",\n\n      \"KillerWorldLocation\": {\n\n        \"x\": \"double\",\n\n        \"y\": \"double\",\n\n        \"z\": \"double\"\n      },\n\n      \"MedalId\": \"int\",\n\n      \"Player\": {\n\n        \"Gamertag\": \"string\",\n\n        \"Xuid\": null\n      },\n\n      \"RoundIndex\": \"int\",\n\n      \"ShotsFired\": \"int\",\n\n      \"ShotsLanded\": \"int\",\n\n      \"TimeWeaponActiveAsPrimary\": \"string\",\n\n      \"Victim\": {\n\n        \"Gamertag\": \"string\",\n\n        \"Xuid\": null\n      },\n\n      \"VictimAgent\": \"int\",\n\n      \"VictimAttachmentIds\": [ \"int\" ],\n\n      \"VictimStockId\": \"int\",\n\n      \"VictimWorldLocation\": {\n\n        \"x\": \"double\",\n\n        \"y\": \"double\",\n\n        \"z\": \"double\"\n      },\n\n      \"WeaponAttachmentIds\": [ \"int\" ],\n\n      \"WeaponStockId\": \"int\",\n\n      // Descriptor to determine what fields will be filled in for the event. This list\n      // will grow over time as more events are exposed. Can be one of the following:\n      //   \"Death\" - An event that is created when a death occurs in the match.\n      //   \"Impulse\" - An event that is created when an impulse (invisible medal) is\n      // triggered in the match.\n      //   \"Medal\" - An event that is created when a medal is awarded in the match.\n      //   \"PlayerSpawn\" - An event that is created when a player spawns in the match.\n      //   \"RoundStart\" - An event that is created when a round starts. In regular\n      // matches, there is typically one round. However, some modes have multiple rounds..\n      //   \"RoundEnd\" - An event that is created when a round ends. In regular matches,\n      // there is typically one round. However, some modes have multiple rounds..\n      //   \"WeaponDrop\" - An event that is created when a player drops a weapon for a new\n      // weapon. This occurs when a player picks up a new weapon and drops their current\n      // one, when a player dies and drops their weapon(s), or at the end of the match\n      // for each player.\n      //   \"WeaponPickup\" - An event that is created when a player picks up a weapon.\n      // This can be when a player spawns, or when a player picks up a new weapon.\n      //   \"WeaponPickupPad\" - An event that is created when a player picks up a weapon\n      // off a pad. This will not be triggered if the weapon was picked up off the ground\n      // after another player who had picked it off a pad.\n      \"EventName\": \"string\",\n\n      // Time passed since the start of the match when the event occurred. This is\n      // expressed as an ISO 8601 Duration.\n      \"TimeSinceStart\": \"string\"\n    }\n  ],\n\n  // As this is an experimental API it has no guarantees around its accuracy. However we\n  // do try our best to ensure all events are valid and accounted for. If they do not\n  // match up to our expectations this field will return as false indicating this may not\n  // be the full set of events that occurred in game.\n  \"IsCompleteSetOfEvents\": \"boolean\",\n\n  // Internal use only. A set of related resource links.\n  \"Links\": null\n}\n\n// Death Event\n{\n  // The gamertags of players who contributed to a kill.\n  \"Assistants\": [\n  {\n    // The player's gamertag.\n    \"Gamertag\": \"string\",\n\n    // Internal use only. This will always be null.\n    \"Xuid\": null\n  }],\n\n  // The disposition of the death. Can be one of the following:\n  //   Friendly = 0,\n  //   Hostile = 1,\n  //   Neutral = 2\n  \"DeathDisposition\": \"int\",\n\n  // Describes if the death was committed by the killer from behind (Assassination or\n  // melee to back).\n  \"IsAssassination\": \"boolean\",\n\n  // Describes if the kill was committed by the killer with a ground pound.\n  \"IsGroundPound\": \"boolean\",\n\n  // Describes if the kill was committed by the killer with a head shot.\n  \"IsHeadshot\": \"boolean\",\n\n  // Describes if the kill was committed by the killer using melee.\n  \"IsMelee\": \"boolean\",\n\n  // Describes if the kill was committed by the killer with a shoulder bash.\n  \"IsShoulderBash\": \"boolean\",\n\n  // Describes if the kill was committed by the killer with a weapon.\n  \"IsWeapon\": \"boolean\",\n\n  // Describes the killer's information. Can be null if killer is not a player in the\n  // game.\n  \"Killer\": {\n\n    // The player's gamertag.\n    \"Gamertag\": \"string\",\n\n    // Internal use only. This will always be null.\n    \"Xuid\": null\n  },\n\n  // The type of killer that caused the death. Can be one of the following:\n  //   None = 0,\n  //   Player = 1,\n  //   AI = 2\n  \"KillerAgent\": \"int\",\n\n  // The IDs of any attachments that were associated with the weapon that was used to\n  // kill the victim.\n  \"KillerWeaponAttachmentIds\": [\"int\"],\n\n  // The ID of the weapon that was used to kill the victim. Depending on the type of the\n  // kill, this could be the ID of an Enemy, Vehicle, or Weapon, all of which are\n  // available via the Metadata APIs. Note that most vehicles are duplicated between both\n  // the Vehicle and Weapon Metadata APIs. If this was a standard kill with an actual\n  // weapon, then this will be the ID of the weapon that killed the victim. If this was a\n  // kill with a vehicle, then this will the ID of the vehicle that killed the victim. If\n  // this was a melee kill, then this will be the ID of the type of the object that\n  // killed the player (which will be either Spartan or the type of the type of the AI\n  // enemy that killed the player). Note that if the victim was killed by a weapon held\n  // by an AI enemy, the type of the AI enemy is unknown.\n  \"KillerWeaponStockId\": \"int\",\n\n  // Object describing the position of the killer on the map when they made the kill.\n  \"KillerWorldLocation\": {\n\n    \"x\": \"double\",\n\n    \"y\": \"double\",\n\n    \"z\": \"double\"\n  },\n\n  // Describes the victim's information. Can be null if victim is not a player in the\n  // game.\n  \"Victim\": {\n\n    // The player's gamertag.\n    \"Gamertag\": \"string\",\n\n    // Internal use only. This will always be null.\n    \"Xuid\": null\n  },\n\n  // The type of victim who was killed. Can be one of the following:\n  //   None = 0,\n  //   Player = 1,\n  //   AI = 2\n  \"VictimAgent\": \"int\",\n\n  // Any variants of the AI enemy, empty otherwise.\n  \"VictimAttachmentIds\": [\"int\"],\n\n  // The ID of the AI Enemy killed, zero otherwise. Enemy IDs are available via the\n  // Metadata API.\n  \"VictimStockId\": \"int\",\n\n  // Object describing the position of the victim on the map when they were killed.\n  \"VictimWorldLocation\": {\n\n    \"x\": \"double\",\n\n    \"y\": \"double\",\n\n    \"z\": \"double\"\n  },\n\n  // Descriptor to determine what fields will be filled in for the event.\n  \"EventName\": \"string\",\n\n  // Time passed since the start of the match when the event occurred. This is expressed\n  // as an ISO 8601 Duration.\n  \"TimeSinceStart\": \"string\"\n}\n\n// Impulse Event\n{\n  // The ID that uniquely identifies this impulse. Impulses are available via the\n  // Metadata API.\n  \"ImpulseId\" : \"int\",\n\n  // The player who received the impulse.\n  \"Player\": {\n\n    // The player's gamertag.\n    \"Gamertag\": \"string\",\n\n    // Internal use only. This will always be null.\n    \"Xuid\": null\n  }\n  // Descriptor to determine what fields will be filled in for the event.\n  \"EventName\": \"Impulse\",\n\n  // Time passed since the start of the match when the event occurred. This is expressed\n  // as an ISO 8601 Duration.\n  \"TimeSinceStart\": \"string\"\n}\n\n// Medal Event\n{\n  // The ID that uniquely identifies this medal. Medals are available via the Metadata\n  // API.\n  \"MedalId\" : \"int\",\n\n  // The player who received the medal.\n  \"Player\": {\n\n    // The player's gamertag.\n    \"Gamertag\": \"string\",\n\n    // Internal use only. This will always be null.\n    \"Xuid\": null\n  },\n\n  // Descriptor to determine what fields will be filled in for the event.\n  \"EventName\": \"Medal\",\n\n  // Time passed since the start of the match when the event occurred. This is expressed\n  // as an ISO 8601 Duration.\n  \"TimeSinceStart\": \"string\"\n}\n\n// PlayerSpawn Event\n{\n  // The player who spawned.\n  \"Player\": {\n\n    // The player's gamertag.\n    \"Gamertag\": \"string\",\n\n    // Internal use only. This will always be null.\n    \"Xuid\": null\n  },\n\n  // Descriptor to determine what fields will be filled in for the event.\n  \"EventName\": \"PlayerSpawn\",\n\n  // Time passed since the start of the match when the event occurred. This is expressed\n  // as an ISO 8601 Duration.\n  \"TimeSinceStart\": \"string\"\n}\n\n// RoundStart Event\n{\n  // The index of the round that started.\n  \"RoundIndex\" : \"int\",\n\n  // Descriptor to determine what fields will be filled in for the event.\n  \"EventName\": \"RoundStart\",\n\n  // Time passed since the start of the match when the event occurred. This is expressed\n  // as an ISO 8601 Duration.\n  \"TimeSinceStart\": \"string\"\n}\n\n// RoundEnd Event\n{\n  // The index of the round that ended.\n  \"RoundIndex\" : \"int\",\n\n  // Descriptor to determine what fields will be filled in for the event.\n  \"EventName\": \"RoundEnd\",\n\n  // Time passed since the start of the match when the event occurred. This is expressed\n  // as an ISO 8601 Duration.\n  \"TimeSinceStart\": \"string\"\n}\n\n// WeaponDrop Event\n{\n  // The player who dropped the weapon.\n  \"Player\": {\n\n    // The player's gamertag.\n    \"Gamertag\": \"string\",\n\n    // Internal use only. This will always be null.\n    \"Xuid\": null\n  },\n\n  // The number of shots fired with the weapon by the player.\n  \"ShotsFired\" : \"int\",\n\n  // The number of shots that hit the target with the weapon by the player.\n  \"ShotsLanded\" : \"int\",\n\n  // The amount of time the weapon was in the active slot of the player. This is\n  // expressed as an ISO 8601 Duration.\n  \"TimeWeaponActiveAsPrimary\": \"string\",\n\n  // The IDs of any attachments that were associated with the weapon that was dropped.\n  \"WeaponAttachmentIds\": [\"int\"],\n\n  // The ID of the weapon that was dropped. Weapons are available via the Metadata API.\n  \"WeaponStockId\": \"int\",\n\n  // Descriptor to determine what fields will be filled in for the event.\n  \"EventName\": \"WeaponDrop\",\n\n  // Time passed since the start of the match when the event occurred. This is expressed\n  // as an ISO 8601 Duration.\n  \"TimeSinceStart\": \"string\"\n}\n\n// WeaponPickup Event\n{\n  // The player who picked up the weapon.\n  \"Player\": {\n\n    // The player's gamertag.\n    \"Gamertag\": \"string\",\n\n    // Internal use only. This will always be null.\n    \"Xuid\": null\n  },\n\n  // The IDs of any attachments that were associated with the weapon that was picked up.\n  \"WeaponAttachmentIds\": [\"int\"],\n\n  // The ID of the weapon that was picked up. Weapons are available via the Metadata API.\n  \"WeaponStockId\": \"int\",\n\n  // Descriptor to determine what fields will be filled in for the event.\n  \"EventName\": \"WeaponPickup\",\n\n  // Time passed since the start of the match when the event occurred. This is expressed\n  // as an ISO 8601 Duration.\n  \"TimeSinceStart\": \"string\"\n}\n\n// WeaponPickupPad Event\n{\n  // The player who picked up the weapon.\n  \"Player\": {\n\n    // The player's gamertag.\n    \"Gamertag\": \"string\",\n\n    // Internal use only. This will always be null.\n    \"Xuid\": null\n  },\n\n  // The IDs of any attachments that were associated with the weapon that was picked up.\n  \"WeaponAttachmentIds\": [\"int\"],\n\n  // The ID of the weapon that was picked up. Weapons are available via the Metadata API.\n  \"WeaponStockId\": \"int\",\n\n  // Descriptor to determine what fields will be filled in for the event.\n  \"EventName\": \"WeaponPickupPad\",\n\n  // Time passed since the start of the match when the event occurred. This is expressed\n  // as an ISO 8601 Duration.\n  \"TimeSinceStart\": \"string\"\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "79243248-4a62-3b95-923c-d549f72967bd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Match-Events"
        }
      }
    },
    "insertionIndex" : 86
  }, {
    "id" : "c9cd6b35-6828-3a9e-a0a1-5f109c6b3260",
    "name" : "Halo 5 - Match Result - Custom Local - 503",
    "request" : {
      "urlPath" : "/h5/customlocal/matches/568f",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "c9cd6b35-6828-3a9e-a0a1-5f109c6b3260",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Custom-Local"
        }
      }
    },
    "insertionIndex" : 87
  }, {
    "id" : "1ac48327-c7ff-33db-b940-4eb24767386d",
    "name" : "Halo 5 - Match Result - Custom Local - 500",
    "request" : {
      "urlPath" : "/h5/customlocal/matches/855n",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "1ac48327-c7ff-33db-b940-4eb24767386d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Custom-Local"
        }
      }
    },
    "insertionIndex" : 88
  }, {
    "id" : "dbcb3b77-b7cd-3f27-a5a4-b34d80fca392",
    "name" : "Halo 5 - Match Result - Custom Local - 404",
    "request" : {
      "urlPath" : "/h5/customlocal/matches/k867",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "dbcb3b77-b7cd-3f27-a5a4-b34d80fca392",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Custom-Local"
        }
      }
    },
    "insertionIndex" : 89
  }, {
    "id" : "83896169-bcc3-3dfc-b3f2-823783081905",
    "name" : "Halo 5 - Match Result - Custom Local (application/json)",
    "request" : {
      "urlPath" : "/h5/customlocal/matches/822h",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // A list of stats for each player who was present in the match.\n  \"PlayerStats\": [\n    {\n      // The number of times the player killed each opponent. If the player did not kill\n      // an opponent, there will be no entry for that opponent.\n      \"KilledOpponentDetails\": [\n        {\n          // The gamertag of the opponent that was killed.\n          \"GamerTag\": \"string\",\n\n          // The number of times that opponent was killed.\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The number of times the player was killed by each opponent. If the player was\n      // not killed by an opponent, there will be no entry for that opponent.\n      \"KilledByOpponentDetails\": [\n        {\n          // The gamertag of the opponent that killed the player.\n          \"GamerTag\": \"string\",\n\n          // The number of times the opponent killed the player.\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The game base variant specific stats for this match. Flexible stats are\n      // available via the Metadata API.\n      \"FlexibleStats\": {\n\n        // The set of flexible stats that are derived from medal events.\n        \"MedalStatCounts\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The number of times this flexible stat was earned.\n            \"Count\": \"int\"\n          }\n        ],\n\n        // The set of flexible stats that are derived from impulse events.\n        \"ImpulseStatCounts\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The number of times this flexible stat was earned.\n            \"Count\": \"int\"\n          }\n        ],\n\n        // The set of flexible stats that are derived from medal time lapses.\n        \"MedalTimelapses\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The amount of time the flexible stat was earned for. This is expressed as\n            // an ISO 8601 Duration.\n            \"Timelapse\": \"string\"\n          }\n        ],        \n\n        // The set of flexible stats that are derived from impulse time lapses.\n        \"ImpulseTimelapses\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The amount of time the flexible stat was earned for. This is expressed as\n            // an ISO 8601 Duration.\n            \"Timelapse\": \"string\"\n          }\n        ]\n      },\n\n      // Internal use only.\n      \"PresentInMatch\": \"boolean\",\n\n      \"Player\": {\n\n         // The player's gamertag.\n        \"Gamertag\": \"string\",\n\n        // Internal use only. This will always be null.\n        \"Xuid\": null\n      },\n\n      // The ID of the team that the player was on when the match ended. \n      \"TeamId\": \"int\",\n\n      // The player's team-agnostic ranking.\n      \"Rank\": \"int\",\n\n      // Indicates whether the player was present in the match when it ended.\n      \"DNF\": \"boolean\",\n\n      // The player's average lifetime.\n      \"AvgLifeTimeOfPlayer\": \"string\",\n\n      // Internal use only. This will always be null.\n      \"PreMatchRatings\": null,\n\n      // Internal use only. This will always be null.\n      \"PostMatchRatings\": null,\n\n      // The Player's Score. This is not used by all Game Variants and may contain null\n      // or invalid data.\n      \"PlayerScore\": \"int\",\n\n      // Total number of kills done by the player. This includes melee kills, shoulder\n      // bash kills and Spartan charge kills, all power weapons, AI kills and vehicle\n      // destructions. \n      \"TotalKills\": \"int\",\n\n      // Total number of headshots done by the player.\n      \"TotalHeadshots\": \"int\",\n\n      // Total weapon damage dealt by the player.\n      \"TotalWeaponDamage\": \"double\",\n\n      // Total number of shots fired by the player.\n      \"TotalShotsFired\": \"int\",\n\n      // Total number of shots landed by the player.\n      \"TotalShotsLanded\": \"int\",\n\n      // The weapon the player used to get the most kills this match.\n      \"WeaponWithMostKills\": {\n\n        \"WeaponId\": {\n\n          // The ID of the weapon. Weapons are available via the Metadata API.\n          \"StockId\": \"int\",\n\n          // Any attachments the weapon had.\n          \"Attachments\": [ \"int\" ]\n        },\n\n        // The number of shots fired for this weapon.\n        \"TotalShotsFired\": \"int\",\n\n        // The number of shots landed for this weapon.\n        \"TotalShotsLanded\": \"int\",\n\n        // The number of headshots for this weapon.\n        \"TotalHeadshots\": \"int\",\n\n        // The number of kills for this weapon.\n        \"TotalKills\": \"int\",\n\n        // The total damage dealt for this weapon.\n        \"TotalDamageDealt\": \"double\",\n\n        // The total possession time for this weapon. This is expressed as an ISO 8601\n        // Duration.\n        \"TotalPossessionTime\": \"string\"\n      },\n\n      // Total number of melee kills by the player.\n      \"TotalMeleeKills\": \"int\",\n\n      // Total melee damage dealt by the player.\n      \"TotalMeleeDamage\": \"double\",\n\n      // Total number of assassinations by the player.\n      \"TotalAssassinations\": \"int\",\n\n      // Total number of ground pound kills by the player.\n      \"TotalGroundPoundKills\": \"int\",\n\n      // Total ground pound damage dealt by the player.\n      \"TotalGroundPoundDamage\": \"double\",\n\n      // Total number of shoulder bash kills by the player.\n      \"TotalShoulderBashKills\": \"int\",\n\n      // Total shoulder bash damage dealt by the player.\n      \"TotalShoulderBashDamage\": \"double\",\n\n      // Total grenade damage dealt by the player.\n      \"TotalGrenadeDamage\": \"double\",\n\n      // Total number of power weapon kills by the player.\n      \"TotalPowerWeaponKills\": \"int\",\n\n      // Total power weapon damage dealt by the player.\n      \"TotalPowerWeaponDamage\": \"double\",\n\n      // Total number of power weapon grabs by the player.\n      \"TotalPowerWeaponGrabs\": \"int\",\n\n      // Total power weapon possession by the player. This is expressed as an ISO 8601\n      // Duration.\n      \"TotalPowerWeaponPossessionTime\": \"string\",\n\n      // Total number of deaths by the player.\n      \"TotalDeaths\": \"int\",\n\n      // Total number of assists by the player.\n      \"TotalAssists\": \"int\",\n\n      // Not used.\n      \"TotalGamesCompleted\": \"int\",\n\n      // Not used.\n      \"TotalGamesWon\": \"int\",\n\n      // Not used.\n      \"TotalGamesLost\": \"int\",\n\n      // Not used.\n      \"TotalGamesTied\": \"int\",\n\n      // Total timed played in this match by the player.\n      \"TotalTimePlayed\": \"string\",\n\n      // Total number of grenade kills by the player.\n      \"TotalGrenadeKills\": \"int\",\n\n      // The set of Medals earned by the player.\n      \"MedalAwards\": [\n        {\n          // The ID of the Medal. Medals are available via the Metadata API.\n          \"MedalId\": \"int\",\n\n          // The number of times the Medal was earned.\n          \"Count\": \"int\"\n        }\n      ], \n\n      // List of enemy vehicles destroyed. Vehicles are available via the Metadata API.\n      // Note: this stat measures enemy vehicles, not any vehicle destruction.\n      \"DestroyedEnemyVehicles\": [\n        {\n          // The enemy this entry references\n          \"Enemy\": {\n\n            // The Base ID for the enemy.\n            \"BaseId\": \"int\",\n\n            // The attachments (variants) for the enemy.\n            \"Attachments\": [\n              \"int\"\n            ]\n          },\n\n          // Total number of kills on the enemy by the player\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // List of enemies killed, per enemy type. Enemies are available via the Metadata\n      // API.\n      \"EnemyKills\": [\n        {\n          // The enemy this entry references\n          \"Enemy\": {\n\n            // The Base ID for the enemy.\n            \"BaseId\": \"int\",\n\n            // The attachments (variants) for the enemy.\n            \"Attachments\": [\n              \"int\"\n            ]\n          },\n\n          // Total number of kills on the enemy by the player\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The set of weapons (weapons and vehicles included) used by the player.\n      \"WeaponStats\": [\n        {\n          \"WeaponId\": {\n\n              // The ID of the weapon. Weapons are available via the Metadata API.\n            \"StockId\": \"int\",\n\n              // Any attachments the weapon had.\n            \"Attachments\": [ \n              \"int\" \n            ]\n          },\n\n            // The number of shots fired for this weapon.\n          \"TotalShotsFired\": \"int\",\n\n            // The number of shots landed for this weapon.\n          \"TotalShotsLanded\": \"int\",\n\n            // The number of headshots for this weapon.\n          \"TotalHeadshots\": \"int\",\n\n            // The number of kills for this weapon.\n          \"TotalKills\": \"int\",\n\n            // The total damage dealt for this weapon.\n          \"TotalDamageDealt\": \"double\",\n\n            // The total possession time for this weapon. This is expressed as an ISO\n            // 8601 Duration.\n          \"TotalPossessionTime\": \"string\"\n        }\n      ],\n\n      // The set of Impulses (invisible Medals) earned by the player.\n      \"Impulses\": [\n        {\n          // The ID of the Impulse. Impulses are available via the Metadata API.\n          \"Id\": \"int\",\n\n          // The number of times the Impulse was earned.\n          \"Count\": \"int\"\n        }\n      ],\n\n      // Total number of Spartan kills by the player.\n      \"TotalSpartanKills\": \"int\"\n    },\n\n  ],\n\n  // A list of stats for each team who in the match. Note that in Free For All modes,\n  // there is an entry for every player.\n  \"TeamStats\": [\n    {\n      // The ID for the team.\n      \"TeamId\": \"int\",\n\n      // The team's score at the end of the match. The way the score is determined is\n      // based off the game base variant being played: \n      //   Breakout = number of rounds won,\n      //   CTF = number of flag captures,\n      //   Slayer = number of kills,\n      //   Strongholds = number of points,\n      //   Warzone = number of points.\n      // Score can be a negative value. Unfortunately, this value is returned as an\n      // unsigned 32-bit integer. This means that if the score is -1, the score reported\n      // is 4,294,967,295.\n      \"Score\": \"uint32\",\n\n      // The team's rank at the end of the match.\n      \"Rank\": \"int\",\n\n      // The set of round stats for the team.\n      \"RoundStats\": [\n        {\n          // The round number this entry pertains to.\n          \"RoundNumber\": \"int\",\n\n          // The end rank for the team this round.\n          \"Rank\": \"int\",\n\n          // The end score for the team this round.\n          // Score can be a negative value. Unfortunately, this value is returned as an\n          // unsigned 32-bit integer. This means that if the score is -1, the score\n          // reported is 4,294,967,295.\n          \"Score\": \"uint32\",\n\n        }\n      ]\n    }\n  ],\n\n  // Indicates if the match is completed or not. Some match details are available while\n  // the match is in-progress, but the behavior for incomplete matches in undefined.\n  \"IsMatchOver\": \"boolean\",\n\n  // The length of the match. This is expressed as an ISO 8601 Duration.\n  \"TotalDuration\": \"string\",\n\n  // The variant of the map for this match. Map variants are available via the Metadata\n  // API. More information is available in MapVariantResourceId.\n  \"MapVariantId\": \"guid\",\n\n  // The variant of the game for this match. Game variants are available via the Metadata\n  // API. More information is available in GameVariantResourceId.\n  \"GameVariantId\": \"guid\",\n\n  // The playlist ID of the match. Playlists are available via the Metadata API.\n  \"PlaylistId\": \"guid\",\n\n  // The ID of the base map for this match. Maps are available via the Metadata API.\n  \"MapId\": \"guid\",\n\n  // The ID of the game base variant for this match. Game base variants are available via\n  // the Metadata API.\n  \"GameBaseVariantId\": \"guid\",\n\n  // Whether this was a team-based game or not.\n  \"IsTeamGame\": \"boolean\",\n\n  // Unused for Custom matches. This will always be null.\n  \"SeasonId\": null,\n\n  // The variant of the game for this match. There are two sources of game variants:\n  // official game variants available via the Metadata API and user-generated game\n  // variants are available via the UGC API.\n  \"GameVariantResourceId\": {\n\n    // The resource type. 2 indicates game variant.\n    \"ResourceType\": 2,\n\n    // The ID of the game variant. Official game variants are available via the Metadata\n    // API.\n    \"ResourceId\": \"guid\",        \n\n    // The source of the game variant. Options are:\n    //   Unknown = 0,\n    //   User-generated = 1,\n    //   Official = 3.\n    \"OwnerType\": \"int\",\n\n    // The gamertag of the user that created the game variant if this is a user-generated\n    // game variant, or null otherwise. \n    \"Owner\": \"string\"\n  },\n\n  // The variant of the map for this match. There are two sources of map variants:\n  // official map variants available via the Metadata API and user-generated map variants\n  // available vai the UGC API.\n  \"MapVariantResourceId\": {\n\n    // The resource type. 3 indicates map variant.\n    \"ResourceType\": 3,\n\n    // The ID of the map variant. Official map variants are available via the Metadata\n    // API.\n    \"ResourceId\": \"guid\",\n\n    // The source of the map variant. Options are:\n    //   Unknown = 0,\n    //   User-generated = 1,\n    //   Official = 3.\n    \"OwnerType\": \"int\",\n\n    // The gamertag of the user that created the map variant if this is a user-generated\n    // map variant, or null otherwise. \n    \"Owner\": \"string\"\n  }\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "83896169-bcc3-3dfc-b3f2-823783081905",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Custom-Local"
        }
      }
    },
    "insertionIndex" : 90
  }, {
    "id" : "3a186033-cda4-3a0f-9e81-5f26025f71a6",
    "name" : "Halo 5 - Match Result - Custom - 503",
    "request" : {
      "urlPath" : "/h5/custom/matches/wjy1",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "3a186033-cda4-3a0f-9e81-5f26025f71a6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Custom"
        }
      }
    },
    "insertionIndex" : 91
  }, {
    "id" : "061d4f57-3040-3ac3-8a73-8347c552f59e",
    "name" : "Halo 5 - Match Result - Custom - 500",
    "request" : {
      "urlPath" : "/h5/custom/matches/xadw",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "061d4f57-3040-3ac3-8a73-8347c552f59e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Custom"
        }
      }
    },
    "insertionIndex" : 92
  }, {
    "id" : "411fa0ae-642d-37de-825b-f3cd9f59e331",
    "name" : "Halo 5 - Match Result - Custom - 404",
    "request" : {
      "urlPath" : "/h5/custom/matches/wj74",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "411fa0ae-642d-37de-825b-f3cd9f59e331",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Custom"
        }
      }
    },
    "insertionIndex" : 93
  }, {
    "id" : "8c3ea365-dcac-331a-89fd-24bc01a39e10",
    "name" : "Halo 5 - Match Result - Custom (application/json)",
    "request" : {
      "urlPath" : "/h5/custom/matches/z2ci",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // A list of stats for each player who was present in the match.\n  \"PlayerStats\": [\n    {\n      // The number of times the player killed each opponent. If the player did not kill\n      // an opponent, there will be no entry for that opponent.\n      \"KilledOpponentDetails\": [\n        {\n          // The gamertag of the opponent that was killed.\n          \"GamerTag\": \"string\",\n\n          // The number of times that opponent was killed.\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The number of times the player was killed by each opponent. If the player was\n      // not killed by an opponent, there will be no entry for that opponent.\n      \"KilledByOpponentDetails\": [\n        {\n          // The gamertag of the opponent that killed the player.\n          \"GamerTag\": \"string\",\n\n          // The number of times the opponent killed the player.\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The game base variant specific stats for this match. Flexible stats are\n      // available via the Metadata API.\n      \"FlexibleStats\": {\n\n        // The set of flexible stats that are derived from medal events.\n        \"MedalStatCounts\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The number of times this flexible stat was earned.\n            \"Count\": \"int\"\n          }\n        ],\n\n        // The set of flexible stats that are derived from impulse events.\n        \"ImpulseStatCounts\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The number of times this flexible stat was earned.\n            \"Count\": \"int\"\n          }\n        ],\n\n        // The set of flexible stats that are derived from medal time lapses.\n        \"MedalTimelapses\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The amount of time the flexible stat was earned for. This is expressed as\n            // an ISO 8601 Duration.\n            \"Timelapse\": \"string\"\n          }\n        ],        \n\n        // The set of flexible stats that are derived from impulse time lapses.\n        \"ImpulseTimelapses\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The amount of time the flexible stat was earned for. This is expressed as\n            // an ISO 8601 Duration.\n            \"Timelapse\": \"string\"\n          }\n        ]\n      },\n\n      // Internal use only.\n      \"PresentInMatch\": \"boolean\",\n\n      \"Player\": {\n\n         // The player's gamertag.\n        \"Gamertag\": \"string\",\n\n        // Internal use only. This will always be null.\n        \"Xuid\": null\n      },\n\n      // The ID of the team that the player was on when the match ended. \n      \"TeamId\": \"int\",\n\n      // The player's team-agnostic ranking.\n      \"Rank\": \"int\",\n\n      // Indicates whether the player was present in the match when it ended.\n      \"DNF\": \"boolean\",\n\n      // The player's average lifetime.\n      \"AvgLifeTimeOfPlayer\": \"string\",\n\n      // Internal use only. This will always be null.\n      \"PreMatchRatings\": null,\n\n      // Internal use only. This will always be null.\n      \"PostMatchRatings\": null,\n\n      // The Player's Score. This is not used by all Game Variants and may contain null\n      // or invalid data.\n      \"PlayerScore\": \"int\",\n\n      // Total number of kills done by the player. This includes melee kills, shoulder\n      // bash kills and Spartan charge kills, all power weapons, AI kills and vehicle\n      // destructions. \n      \"TotalKills\": \"int\",\n\n      // Total number of headshots done by the player.\n      \"TotalHeadshots\": \"int\",\n\n      // Total weapon damage dealt by the player.\n      \"TotalWeaponDamage\": \"double\",\n\n      // Total number of shots fired by the player.\n      \"TotalShotsFired\": \"int\",\n\n      // Total number of shots landed by the player.\n      \"TotalShotsLanded\": \"int\",\n\n      // The weapon the player used to get the most kills this match.\n      \"WeaponWithMostKills\": {\n\n        \"WeaponId\": {\n\n          // The ID of the weapon. Weapons are available via the Metadata API.\n          \"StockId\": \"int\",\n\n          // Any attachments the weapon had.\n          \"Attachments\": [ \"int\" ]\n        },\n\n        // The number of shots fired for this weapon.\n        \"TotalShotsFired\": \"int\",\n\n        // The number of shots landed for this weapon.\n        \"TotalShotsLanded\": \"int\",\n\n        // The number of headshots for this weapon.\n        \"TotalHeadshots\": \"int\",\n\n        // The number of kills for this weapon.\n        \"TotalKills\": \"int\",\n\n        // The total damage dealt for this weapon.\n        \"TotalDamageDealt\": \"double\",\n\n        // The total possession time for this weapon. This is expressed as an ISO 8601\n        // Duration.\n        \"TotalPossessionTime\": \"string\"\n      },\n\n      // Total number of melee kills by the player.\n      \"TotalMeleeKills\": \"int\",\n\n      // Total melee damage dealt by the player.\n      \"TotalMeleeDamage\": \"double\",\n\n      // Total number of assassinations by the player.\n      \"TotalAssassinations\": \"int\",\n\n      // Total number of ground pound kills by the player.\n      \"TotalGroundPoundKills\": \"int\",\n\n      // Total ground pound damage dealt by the player.\n      \"TotalGroundPoundDamage\": \"double\",\n\n      // Total number of shoulder bash kills by the player.\n      \"TotalShoulderBashKills\": \"int\",\n\n      // Total shoulder bash damage dealt by the player.\n      \"TotalShoulderBashDamage\": \"double\",\n\n      // Total grenade damage dealt by the player.\n      \"TotalGrenadeDamage\": \"double\",\n\n      // Total number of power weapon kills by the player.\n      \"TotalPowerWeaponKills\": \"int\",\n\n      // Total power weapon damage dealt by the player.\n      \"TotalPowerWeaponDamage\": \"double\",\n\n      // Total number of power weapon grabs by the player.\n      \"TotalPowerWeaponGrabs\": \"int\",\n\n      // Total power weapon possession by the player. This is expressed as an ISO 8601\n      // Duration.\n      \"TotalPowerWeaponPossessionTime\": \"string\",\n\n      // Total number of deaths by the player.\n      \"TotalDeaths\": \"int\",\n\n      // Total number of assists by the player.\n      \"TotalAssists\": \"int\",\n\n      // Not used.\n      \"TotalGamesCompleted\": \"int\",\n\n      // Not used.\n      \"TotalGamesWon\": \"int\",\n\n      // Not used.\n      \"TotalGamesLost\": \"int\",\n\n      // Not used.\n      \"TotalGamesTied\": \"int\",\n\n      // Total timed played in this match by the player.\n      \"TotalTimePlayed\": \"string\",\n\n      // Total number of grenade kills by the player.\n      \"TotalGrenadeKills\": \"int\",\n\n      // The set of Medals earned by the player.\n      \"MedalAwards\": [\n        {\n          // The ID of the Medal. Medals are available via the Metadata API.\n          \"MedalId\": \"int\",\n\n          // The number of times the Medal was earned.\n          \"Count\": \"int\"\n        }\n      ], \n\n      // List of enemy vehicles destroyed. Vehicles are available via the Metadata API.\n      // Note: this stat measures enemy vehicles, not any vehicle destruction.\n      \"DestroyedEnemyVehicles\": [\n        {\n          // The enemy this entry references\n          \"Enemy\": {\n\n            // The Base ID for the enemy.\n            \"BaseId\": \"int\",\n\n            // The attachments (variants) for the enemy.\n            \"Attachments\": [\n              \"int\"\n            ]\n          },\n\n          // Total number of kills on the enemy by the player\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // List of enemies killed, per enemy type. Enemies are available via the Metadata\n      // API.\n      \"EnemyKills\": [\n        {\n          // The enemy this entry references\n          \"Enemy\": {\n\n            // The Base ID for the enemy.\n            \"BaseId\": \"int\",\n\n            // The attachments (variants) for the enemy.\n            \"Attachments\": [\n              \"int\"\n            ]\n          },\n\n          // Total number of kills on the enemy by the player\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The set of weapons (weapons and vehicles included) used by the player.\n      \"WeaponStats\": [\n        {\n          \"WeaponId\": {\n\n              // The ID of the weapon. Weapons are available via the Metadata API.\n            \"StockId\": \"int\",\n\n              // Any attachments the weapon had.\n            \"Attachments\": [ \n              \"int\" \n            ]\n          },\n\n            // The number of shots fired for this weapon.\n          \"TotalShotsFired\": \"int\",\n\n            // The number of shots landed for this weapon.\n          \"TotalShotsLanded\": \"int\",\n\n            // The number of headshots for this weapon.\n          \"TotalHeadshots\": \"int\",\n\n            // The number of kills for this weapon.\n          \"TotalKills\": \"int\",\n\n            // The total damage dealt for this weapon.\n          \"TotalDamageDealt\": \"double\",\n\n            // The total possession time for this weapon. This is expressed as an ISO\n            // 8601 Duration.\n          \"TotalPossessionTime\": \"string\"\n        }\n      ],\n\n      // The set of Impulses (invisible Medals) earned by the player.\n      \"Impulses\": [\n        {\n          // The ID of the Impulse. Impulses are available via the Metadata API.\n          \"Id\": \"int\",\n\n          // The number of times the Impulse was earned.\n          \"Count\": \"int\"\n        }\n      ],\n\n      // Total number of Spartan kills by the player.\n      \"TotalSpartanKills\": \"int\"\n    },\n\n  ],\n\n  // A list of stats for each team who in the match. Note that in Free For All modes,\n  // there is an entry for every player.\n  \"TeamStats\": [\n    {\n      // The ID for the team.\n      \"TeamId\": \"int\",\n\n      // The team's score at the end of the match. The way the score is determined is\n      // based off the game base variant being played: \n      //   Breakout = number of rounds won,\n      //   CTF = number of flag captures,\n      //   Slayer = number of kills,\n      //   Strongholds = number of points,\n      //   Warzone = number of points.\n      // Score can be a negative value. Unfortunately, this value is returned as an\n      // unsigned 32-bit integer. This means that if the score is -1, the score reported\n      // is 4,294,967,295.\n      \"Score\": \"uint32\",\n\n      // The team's rank at the end of the match.\n      \"Rank\": \"int\",\n\n      // The set of round stats for the team.\n      \"RoundStats\": [\n        {\n          // The round number this entry pertains to.\n          \"RoundNumber\": \"int\",\n\n          // The end rank for the team this round.\n          \"Rank\": \"int\",\n\n          // The end score for the team this round.\n          // Score can be a negative value. Unfortunately, this value is returned as an\n          // unsigned 32-bit integer. This means that if the score is -1, the score\n          // reported is 4,294,967,295.\n          \"Score\": \"uint32\",\n\n        }\n      ]\n    }\n  ],\n\n  // Indicates if the match is completed or not. Some match details are available while\n  // the match is in-progress, but the behavior for incomplete matches in undefined.\n  \"IsMatchOver\": \"boolean\",\n\n  // The length of the match. This is expressed as an ISO 8601 Duration.\n  \"TotalDuration\": \"string\",\n\n  // The variant of the map for this match. Map variants are available via the Metadata\n  // API. More information is available in MapVariantResourceId.\n  \"MapVariantId\": \"guid\",\n\n  // The variant of the game for this match. Game variants are available via the Metadata\n  // API. More information is available in GameVariantResourceId.\n  \"GameVariantId\": \"guid\",\n\n  // The playlist ID of the match. Playlists are available via the Metadata API.\n  \"PlaylistId\": \"guid\",\n\n  // The ID of the base map for this match. Maps are available via the Metadata API.\n  \"MapId\": \"guid\",\n\n  // The ID of the game base variant for this match. Game base variants are available via\n  // the Metadata API.\n  \"GameBaseVariantId\": \"guid\",\n\n  // Whether this was a team-based game or not.\n  \"IsTeamGame\": \"boolean\",\n\n  // Unused for Custom matches. This will always be null.\n  \"SeasonId\": null,\n\n  // The variant of the game for this match. There are two sources of game variants:\n  // official game variants available via the Metadata API and user-generated game\n  // variants are available via the UGC API.\n  \"GameVariantResourceId\": {\n\n    // The resource type. 2 indicates game variant.\n    \"ResourceType\": 2,\n\n    // The ID of the game variant. Official game variants are available via the Metadata\n    // API.\n    \"ResourceId\": \"guid\",        \n\n    // The source of the game variant. Options are:\n    //   Unknown = 0,\n    //   User-generated = 1,\n    //   Official = 3.\n    \"OwnerType\": \"int\",\n\n    // The gamertag of the user that created the game variant if this is a user-generated\n    // game variant, or null otherwise. \n    \"Owner\": \"string\"\n  },\n\n  // The variant of the map for this match. There are two sources of map variants:\n  // official map variants available via the Metadata API and user-generated map variants\n  // available vai the UGC API.\n  \"MapVariantResourceId\": {\n\n    // The resource type. 3 indicates map variant.\n    \"ResourceType\": 3,\n\n    // The ID of the map variant. Official map variants are available via the Metadata\n    // API.\n    \"ResourceId\": \"guid\",\n\n    // The source of the map variant. Options are:\n    //   Unknown = 0,\n    //   User-generated = 1,\n    //   Official = 3.\n    \"OwnerType\": \"int\",\n\n    // The gamertag of the user that created the map variant if this is a user-generated\n    // map variant, or null otherwise. \n    \"Owner\": \"string\"\n  }\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8c3ea365-dcac-331a-89fd-24bc01a39e10",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Custom"
        }
      }
    },
    "insertionIndex" : 94
  }, {
    "id" : "e148c561-a865-3529-b0fd-ac44c7193cdf",
    "name" : "Halo 5 - Company Commendations - 503",
    "request" : {
      "urlPath" : "/h5/companies/eae1/commendations",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "e148c561-a865-3529-b0fd-ac44c7193cdf",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Company-Commendations"
        }
      }
    },
    "insertionIndex" : 95
  }, {
    "id" : "361dd142-f6ab-3e97-849e-42548557a63f",
    "name" : "Halo 5 - Company Commendations - 500",
    "request" : {
      "urlPath" : "/h5/companies/0ea2/commendations",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "361dd142-f6ab-3e97-849e-42548557a63f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Company-Commendations"
        }
      }
    },
    "insertionIndex" : 96
  }, {
    "id" : "6989451b-5718-3904-9cb9-d75056057ab9",
    "name" : "Halo 5 - Company Commendations - 404",
    "request" : {
      "urlPath" : "/h5/companies/u117/commendations",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "6989451b-5718-3904-9cb9-d75056057ab9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Company-Commendations"
        }
      }
    },
    "insertionIndex" : 97
  }, {
    "id" : "4286a857-ec1a-3726-a73e-60b3dfcec505",
    "name" : "Halo 5 - Company Commendations (application/json)",
    "request" : {
      "urlPath" : "/h5/companies/6xdw/commendations",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // Internal use only. A set of related resource links.\n  \"Links\": null,\n\n  // The progress towards each Progressive Commendation. Progressive commendations have a\n  // series of increasingly difficult thresholds (levels) that must crossed to receive\n  // increasingly greater rewards. If no progress has been made for a progressive\n  // commendation, it is omitted from this list.\n  \"ProgressiveCommendations\": [\n    {\n      // The commendation ID. Commendations are available via the Metadata API.\n      \"Id\": \"guid\",\n\n      // The progress that has been made towards the commendation.\n      \"Progress\": \"int\",\n\n      // The levels that have been completed for the commendation.\n      \"CompletedLevels\": [\n        {\n          // The commendation level ID. Commendation Levels area available via the\n          // Metadata API.\n          \"Id\": \"guid\",\n\n          // The date the commendation level was completed. The time component of this\n          // date is always set to \"00:00:00\". This is expressed as an ISO 8601 combined\n          // Date and Time.\n          \"CompletedDateUtc\": {\n\n            \"ISO8601Date\": \"string\"\n          }\n        }\n      ]\n    }\n  ],\n\n  // The progress towards each Meta Commendation. Meta commendations are unlocked when\n  // one or more other commendation levels have been completed. If no progress has been\n  // made for a meta commendation, it is omitted from this list.\n  \"MetaCommendations\": [\n    {\n      // The commendation ID. Commendations are available via the Metadata API.\n      \"Id\": \"guid\",\n\n      // The required commendation IDs that have been completed that are associated with\n      // this meta commendation. In C#, this can be reassembled into a Guid in the\n      // following manner: new Guid((int)Data1, (short)Data2, (short)Data3,\n      // BitConverter.GetBytes((long)Data4)).\n      \"MetRequirements\": [\n        {\n          \"Data1\": \"int\",\n\n          \"Data2\": \"int\",\n\n          \"Data3\": \"int\",\n\n          \"Data4\": \"int\"\n        }\n      ]\n    }\n  ],\n\n  // The date when the commendations progress was last updated. The time component of\n  // this date is always set to \"00:00:00\". This is expressed as an ISO 8601 combined\n  // Date and Time.\n  \"LastUpdatedDateUtc\": {\n\n    \"ISO8601Date\": \"string\"\n  }\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4286a857-ec1a-3726-a73e-60b3dfcec505",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Company-Commendations"
        }
      }
    },
    "insertionIndex" : 98
  }, {
    "id" : "2a81d57e-ca82-32bb-b371-3e99f3e60c81",
    "name" : "Halo 5 - Company - 503",
    "request" : {
      "urlPath" : "/h5/companies/4y2u",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "2a81d57e-ca82-32bb-b371-3e99f3e60c81",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Company"
        }
      }
    },
    "insertionIndex" : 99
  }, {
    "id" : "7a1012ab-1cd6-3297-ad98-bf82b67fcaef",
    "name" : "Halo 5 - Company - 500",
    "request" : {
      "urlPath" : "/h5/companies/3tua",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "7a1012ab-1cd6-3297-ad98-bf82b67fcaef",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Company"
        }
      }
    },
    "insertionIndex" : 100
  }, {
    "id" : "cc8389b6-69cc-350d-b9b9-c025b0345142",
    "name" : "Halo 5 - Company - 404",
    "request" : {
      "urlPath" : "/h5/companies/jytd",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "cc8389b6-69cc-350d-b9b9-c025b0345142",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Company"
        }
      }
    },
    "insertionIndex" : 101
  }, {
    "id" : "c59aaec6-db37-3aa0-94c5-20343633c131",
    "name" : "Halo 5 - Company (application/json)",
    "request" : {
      "urlPath" : "/h5/companies/396e",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // The ID of the company.\n  \"Id\": \"guid\",\n\n  // The name of the company.\n  \"Name\": \"string\",\n\n  // Information about the creator of the company. The creator might not necessarily be a\n  // member of the company.\n  \"Creator\": {\n\n    // The company creator's gamertag.\n    \"Gamertag\": \"string\",\n\n    // Internal use only. This will always be null.\n    \"Xuid\": null\n  },\n\n  // The highest number of users that were (or are) in this company.\n  \"PeakMembershipCount\": \"int\",\n\n  // Indicates the date that the company is suspended until. This is expressed as an ISO\n  // 8601 combined Date and Time.\n  \"SuspendedUntilDate\": {\n\n    \"ISO8601Date\": \"string\"\n  },\n\n  // The current members of the company. If the company does not have any members, this\n  // list will be empty. \n  \"Members\": [\n    {\n       // Information about the member. \n      \"Player\": {\n\n        // The member's gamertag.\n        \"Gamertag\": \"string\",\n\n        // Internal use only. This will always be null.\n        \"Xuid\": null\n      },\n\n      // The role of the member in the company. This field will contain one of the\n      // following values:\n      //   Member = 0,\n      //   Lieutenant = 1,\n      //   Leader = 2\n      \"Role\": \"int\",\n\n      // The date when the member was added to the company. The time component of this\n      // date is always set to \"00:00:00\". This is expressed as an ISO 8601 combined Date\n      // and Time.\n      \"JoinedDate\": {\n\n        \"ISO8601Date\": \"string\"\n      },\n\n      // The date when the member's role was last modified. The time component of this\n      // date is always set to \"00:00:00\". This is expressed as an ISO 8601 combined Date\n      // and Time.\n      \"LastModifiedDate\": {\n\n        \"ISO8601Date\": \"string\"\n    }\n  ],\n\n  // The date when the company was created. The time component of this date is always set\n  // to \"00:00:00\". This is expressed as an ISO 8601 combined Date and Time.\n  \"CreatedDate\": {\n\n    \"ISO8601Date\": \"string\"\n  },\n\n  // The date when the company was last modified. The time component of this date is\n  // always set to \"00:00:00\". This is expressed as an ISO 8601 combined Date and Time.\n  \"LastModifiedDate\": {\n\n    \"ISO8601Date\": \"string\"\n  }\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c59aaec6-db37-3aa0-94c5-20343633c131",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Company"
        }
      }
    },
    "insertionIndex" : 102
  }, {
    "id" : "ac494a62-d867-3800-9d64-4c488b060c4a",
    "name" : "Halo 5 - Match Result - Campaign - 503",
    "request" : {
      "urlPath" : "/h5/campaign/matches/v0nq",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "ac494a62-d867-3800-9d64-4c488b060c4a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Campaign"
        }
      }
    },
    "insertionIndex" : 103
  }, {
    "id" : "82e041f4-8518-33a4-b910-cba80bed6500",
    "name" : "Halo 5 - Match Result - Campaign - 500",
    "request" : {
      "urlPath" : "/h5/campaign/matches/2prz",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "82e041f4-8518-33a4-b910-cba80bed6500",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Campaign"
        }
      }
    },
    "insertionIndex" : 104
  }, {
    "id" : "5a03cd41-c723-332a-8b43-0fe7539c87ae",
    "name" : "Halo 5 - Match Result - Campaign - 404",
    "request" : {
      "urlPath" : "/h5/campaign/matches/l76q",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "5a03cd41-c723-332a-8b43-0fe7539c87ae",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Campaign"
        }
      }
    },
    "insertionIndex" : 105
  }, {
    "id" : "60361bdf-98e2-3a52-afbc-5418b8f77187",
    "name" : "Halo 5 - Match Result - Campaign (application/json)",
    "request" : {
      "urlPath" : "/h5/campaign/matches/y8ny",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // A list of stats for each player who was present in the match.\n  \"PlayerStats\": [\n    {\n      // The player's biggest score due to a kill.\n      \"BiggestKillScore\": \"int\",\n\n      // The game base variant specific stats for this match. Flexible stats are\n      // available via the Metadata API.\n      \"FlexibleStats\": {\n\n        // The set of flexible stats that are derived from medal events.\n        \"MedalStatCounts\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The number of times this flexible stat was earned.\n            \"Count\": \"int\"\n          }\n        ],\n\n        // The set of flexible stats that are derived from impulse events.\n        \"ImpulseStatCounts\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The number of times this flexible stat was earned.\n            \"Count\": \"int\"\n          }\n        ],\n\n        // The set of flexible stats that are derived from medal time lapses.\n        \"MedalTimelapses\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The amount of time the flexible stat was earned for. This is expressed as\n            // an ISO 8601 Duration.\n            \"Timelapse\": \"string\"\n          }\n        ],        \n\n        // The set of flexible stats that are derived from impulse time lapses.\n        \"ImpulseTimelapses\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The amount of time the flexible stat was earned for. This is expressed as\n            // an ISO 8601 Duration.\n            \"Timelapse\": \"string\"\n          }\n        ]\n      },\n\n      // The player's score.\n      // Score can be a negative value. Unfortunately, this value is returned as an\n      // unsigned 32-bit integer. This means that if the score is -1, the score reported\n      // is 4,294,967,295.\n      \"Score\": \"uint32\",\n\n      // Unused.\n      \"CharacterIndex\": null,\n\n      \"Player\": {\n\n         // The player's gamertag.\n        \"Gamertag\": \"string\",\n\n        // Internal use only. This will always be null.\n        \"Xuid\": null\n      },\n\n      // The ID of the team that the player was on when the match ended. This value has\n      // no meaning in Campaign.\n      \"TeamId\": \"int\",\n\n      // The player's team-agnostic ranking.\n      \"Rank\": \"int\",\n\n      // Indicates whether the player was present in the match when it ended. \n      \"DNF\": \"boolean\",\n\n      // The player's average lifetime.\n      \"AvgLifeTimeOfPlayer\": \"string\",\n\n      // Internal use only. This will always be null.\n      \"PreMatchRatings\": null,\n\n      // Internal use only. This will always be null.\n      \"PostMatchRatings\": null,\n\n      // Unused for Campaign matches. This will usually be null or contain invalid data.\n      \"PlayerScore\": null,\n\n      // Total number of kills done by the player. This includes melee kills, shoulder\n      // bash kills and Spartan charge kills, all power weapons, AI kills and vehicle\n      // destructions. \n      \"TotalKills\": \"int\",\n\n      // Total number of headshots done by the player.\n      \"TotalHeadshots\": \"int\",\n\n      // Total weapon damage dealt by the player.\n      \"TotalWeaponDamage\": \"double\",\n\n      // Total number of shots fired by the player.\n      \"TotalShotsFired\": \"int\",\n\n      // Total number of shots landed by the player.\n      \"TotalShotsLanded\": \"int\",\n\n      // The weapon the player used to get the most kills this match.\n      \"WeaponWithMostKills\": {\n\n        \"WeaponId\": {\n\n          // The ID of the weapon. Weapons are available via the Metadata API.\n          \"StockId\": \"int\",\n\n          // Any attachments the weapon had.\n          \"Attachments\": [ \"int\" ]\n        },\n\n        // The number of shots fired for this weapon.\n        \"TotalShotsFired\": \"int\",\n\n        // The number of shots landed for this weapon.\n        \"TotalShotsLanded\": \"int\",\n\n        // The number of headshots for this weapon.\n        \"TotalHeadshots\": \"int\",\n\n        // The number of kills for this weapon.\n        \"TotalKills\": \"int\",\n\n        // The total damage dealt for this weapon.\n        \"TotalDamageDealt\": \"double\",\n\n        // The total possession time for this weapon. This is expressed as an ISO 8601\n        // Duration.\n        \"TotalPossessionTime\": \"string\"\n      },\n\n      // Total number of melee kills by the player.\n      \"TotalMeleeKills\": \"int\",\n\n      // Total melee damage dealt by the player.\n      \"TotalMeleeDamage\": \"double\",\n\n      // Total number of assassinations by the player.\n      \"TotalAssassinations\": \"int\",\n\n      // Total number of ground pound kills by the player.\n      \"TotalGroundPoundKills\": \"int\",\n\n      // Total ground pound damage dealt by the player.\n      \"TotalGroundPoundDamage\": \"double\",\n\n      // Total number of shoulder bash kills by the player.\n      \"TotalShoulderBashKills\": \"int\",\n\n      // Total shoulder bash damage dealt by the player.\n      \"TotalShoulderBashDamage\": \"double\",\n\n      // Total grenade damage dealt by the player.\n      \"TotalGrenadeDamage\": \"double\",\n\n      // Total number of power weapon kills by the player.\n      \"TotalPowerWeaponKills\": \"int\",\n\n      // Total power weapon damage dealt by the player.\n      \"TotalPowerWeaponDamage\": \"double\",\n\n      // Total number of power weapon grabs by the player.\n      \"TotalPowerWeaponGrabs\": \"int\",\n\n      // Total power weapon possession by the player. This is expressed as an ISO 8601\n      // Duration.\n      \"TotalPowerWeaponPossessionTime\": \"string\",\n\n      // Total number of deaths by the player.\n      \"TotalDeaths\": \"int\",\n\n      // Total number of assists by the player.\n      \"TotalAssists\": \"int\",\n\n      // Not used.\n      \"TotalGamesCompleted\": \"int\",\n\n      // Not used.\n      \"TotalGamesWon\": \"int\",\n\n      // Not used.\n      \"TotalGamesLost\": \"int\",\n\n      // Not used.\n      \"TotalGamesTied\": \"int\",\n\n      // Total timed played in this match by the player.\n      \"TotalTimePlayed\": \"string\",\n\n      // Total number of grenade kills by the player.\n      \"TotalGrenadeKills\": \"int\",\n\n      // The set of Medals earned by the player.\n      \"MedalAwards\": [\n        {\n          // The ID of the Medal. Medals are available via the Metadata API.\n          \"MedalId\": \"int\",\n\n          // The number of times the Medal was earned.\n          \"Count\": \"int\"\n        }\n      ], \n\n      // List of enemy vehicles destroyed. Vehicles are available via the Metadata API.\n      // Note: this stat measures enemy vehicles, not any vehicle destruction.\n      \"DestroyedEnemyVehicles\": [\n        {\n          // The enemy this entry references\n          \"Enemy\": {\n\n            // The Base ID for the enemy.\n            \"BaseId\": \"int\",\n\n            // The attachments (variants) for the enemy.\n            \"Attachments\": [\n              \"int\"\n            ]\n          },\n\n          // Total number of kills on the enemy by the player\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // List of enemies killed, per enemy type. Enemies are available via the Metadata\n      // API.\n      \"EnemyKills\": [\n        {\n          // The enemy this entry references\n          \"Enemy\": {\n\n            // The Base ID for the enemy.\n            \"BaseId\": \"int\",\n\n            // The attachments (variants) for the enemy.\n            \"Attachments\": [\n              \"int\"\n            ]\n          },\n\n          // Total number of kills on the enemy by the player\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The set of weapons (weapons and vehicles included) used by the player.\n      \"WeaponStats\": [\n        {\n          \"WeaponId\": {\n\n              // The ID of the weapon. Weapons are available via the Metadata API.\n            \"StockId\": \"int\",\n\n              // Any attachments the weapon had.\n            \"Attachments\": [ \n              \"int\" \n            ]\n          },\n\n            // The number of shots fired for this weapon.\n          \"TotalShotsFired\": \"int\",\n\n            // The number of shots landed for this weapon.\n          \"TotalShotsLanded\": \"int\",\n\n            // The number of headshots for this weapon.\n          \"TotalHeadshots\": \"int\",\n\n            // The number of kills for this weapon.\n          \"TotalKills\": \"int\",\n\n            // The total damage dealt for this weapon.\n          \"TotalDamageDealt\": \"double\",\n\n            // The total possession time for this weapon. This is expressed as an ISO\n            // 8601 Duration.\n          \"TotalPossessionTime\": \"string\"\n        }\n      ],\n\n      // The set of Impulses (invisible Medals) earned by the player.\n      \"Impulses\": [\n        {\n          // The ID of the Impulse. Impulses are available via the Metadata API.\n          \"Id\": \"int\",\n\n          // The number of times the Impulse was earned.\n          \"Count\": \"int\"\n        }\n      ],\n\n      // Total number of Spartan kills by the player.\n      \"TotalSpartanKills\": \"int\"\n    }\n  ],\n\n  // The total playthrough time of the mission as calculated by the game. This value is\n  // persisted in save files.\n  \"TotalMissionPlaythroughTime\": \"string\",\n\n  // The difficulty the mission was played at. Options are:\n  //   Easy = 0,\n  //   Normal = 1,\n  //   Heroic = 2,\n  //   Legendary = 3\n  \"Difficulty\": \"int\",\n\n  // The list of skulls used for the mission. Skulls are available via the Metadata API.\n  \"Skulls\": [\n    \"int\"\n  ],\n\n  // Indicates whether the mission was completed when the match ended.\n  \"MissionCompleted\": \"boolean\",\n\n  // Indicates if the match is completed or not. Some match details are available while\n  // the match is in-progress, but the behavior for incomplete matches in undefined.\n  \"IsMatchOver\": \"boolean\",\n\n  // The length of the match. This is expressed as an ISO 8601 Duration.\n  \"TotalDuration\": \"string\",\n\n  // Unused for Campaign matches. This will always be an empty guid.\n  \"MapVariantId\": \"guid\",\n\n  // Unused for Campaign matches. This will always be empty guid.\n  \"GameVariantId\": \"guid\",\n\n  // The playlist ID of the match. Playlists are available via the Metadata API.\n  \"PlaylistId\": \"guid\",\n\n  // The ID of the Campaign Mission. In Campaign, Map ID is overriden to be the Mission\n  // ID. Missions are available via the Metadata API.\n  \"MapId\": \"guid\",\n\n  // The ID of the game base variant for this match. Game base variants are available via\n  // the Metadata API.\n  \"GameBaseVariantId\": \"guid\",\n\n  // Whether this was a team-based game or not.\n  \"IsTeamGame\": \"boolean\",\n\n  // Unused for Campaign matches. This will always be null.\n  \"SeasonId\": null,\n\n  // Unused for Campaign matches. All fields within this structure will have their\n  // default value.\n  \"GameVariantResourceId\": {\n\n    \"ResourceType\": \"int\",\n\n    \"ResourceId\": \"guid\",\n\n    \"OwnerType\": \"int\",\n\n    \"Owner\": \"string\"\n  },\n\n  // Unused for Campaign matches. All fields within this structure will have their\n  // default value.\n  \"MapVariantResourceId\": {\n\n    \"ResourceType\": \"int\",\n\n    \"ResourceId\": \"guid\",\n\n    \"OwnerType\": \"int\",\n\n    \"Owner\": \"string\"\n  }\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "60361bdf-98e2-3a52-afbc-5418b8f77187",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Campaign"
        }
      }
    },
    "insertionIndex" : 106
  }, {
    "id" : "c4e64891-384c-3b9d-b89c-09900ef60e81",
    "name" : "Halo 5 - Match Result - Arena - 503",
    "request" : {
      "urlPath" : "/h5/arena/matches/fg3t",
      "method" : "GET"
    },
    "response" : {
      "status" : 503
    },
    "uuid" : "c4e64891-384c-3b9d-b89c-09900ef60e81",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Arena"
        }
      }
    },
    "insertionIndex" : 107
  }, {
    "id" : "367b35cb-4282-370b-8210-c46d76aee750",
    "name" : "Halo 5 - Match Result - Arena - 500",
    "request" : {
      "urlPath" : "/h5/arena/matches/0400",
      "method" : "GET"
    },
    "response" : {
      "status" : 500
    },
    "uuid" : "367b35cb-4282-370b-8210-c46d76aee750",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Arena"
        }
      }
    },
    "insertionIndex" : 108
  }, {
    "id" : "9612c126-c0fe-3e5b-ae27-fd9738e0c7e4",
    "name" : "Halo 5 - Match Result - Arena - 404",
    "request" : {
      "urlPath" : "/h5/arena/matches/rb2y",
      "method" : "GET"
    },
    "response" : {
      "status" : 404
    },
    "uuid" : "9612c126-c0fe-3e5b-ae27-fd9738e0c7e4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Arena"
        }
      }
    },
    "insertionIndex" : 109
  }, {
    "id" : "956646b6-0fbb-34e5-a106-32d6498cc434",
    "name" : "Halo 5 - Match Result - Arena (application/json)",
    "request" : {
      "urlPath" : "/h5/arena/matches/9a55",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  // A list of stats for each player who was present in the match.\n  \"PlayerStats\": [\n    {\n      // The experience information for the player in this match.\n      \"XpInfo\": {\n\n        // The player's Spartan Rank before the match started.\n        \"PrevSpartanRank\": \"int\",\n\n        // The player's Spartan Rank after the match ended.\n        \"SpartanRank\": \"int\",\n\n        // The player's XP before the match started.\n        \"PrevTotalXP\": \"int\",\n\n        // The player's XP after the match ended.\n        \"TotalXP\": \"int\",\n\n        // The multiplier on the XP earned this match based on their Spartan Rank when\n        // the match ended.\n        \"SpartanRankMatchXPScalar\": \"double\",\n\n        // The portion of the XP the player earned this match that was based on how much\n        // time was spent in-match.\n        \"PlayerTimePerformanceXPAward\": \"int\",\n\n        // The XP awarded to the player based on how their team ranked when the match\n        // concluded.\n        \"PerformanceXP\": \"int\",\n\n        // The XP awarded to the player for their team-agnostic rank.\n        \"PlayerRankXPAward\": \"int\",\n\n        // The amount of XP the player earned if they played a boost card for this match,\n        // and the boost card criteria was met. This is a fixed amount of XP, not a\n        // multiplier.\n        \"BoostAmount\": \"int\",\n\n        // The amount of XP the player earned for finishing the match quickly.\n        \"MatchSpeedWinAmount\": \"int\",\n\n        // The amount of XP the player earned for completing objectives.\n        \"ObjectivesCompletedAmount\": \"int\"\n      },\n\n      // The Competitive Skill Ranking (CSR) of the player before the match started. If\n      // the player is still in measurement matches, this field is null. If the player\n      // finished the last measurement match this match, this field is still null.\n      \"PreviousCsr\": {\n\n        // The CSR tier. CSR Tiers are designation-specific and are available via the\n        // Metadata API.\n        \"Tier\": \"int\",\n\n        // The Designation of the CSR. CSR Designations are available via the Metadata\n        // API.\n        \"DesignationId\": \"int\",\n\n        // The CSR value. Zero for normal (Diamond and below) designations.\n        \"Csr\": \"int\",\n\n        // The percentage of progress towards the next CSR tier.\n        \"PercentToNextTier\": \"int\",\n\n        // If the CSR is Onyx or Champion, the player's leaderboard ranking. Null\n        // otherwise.\n        \"Rank\": \"int\"\n      },\n\n      // The Competitive Skill Ranking (CSR) of the player after the match ended. If the\n      // player is still in measurement matches, this field is null.\n      \"CurrentCsr\": {\n\n        // The CSR tier. CSR Tiers are designation-specific and are available via the\n        // Metadata API.\n        \"Tier\": \"int\",\n\n        // The Designation of the CSR. CSR Designations are available via the Metadata\n        // API.\n        \"DesignationId\": \"int\",\n\n        // The CSR value. Zero for normal (Diamond and below) designations.\n        \"Csr\": \"int\",\n\n        // The percentage of progress towards the next CSR tier.\n        \"PercentToNextTier\": \"int\",\n\n        // If the CSR is Onyx or Champion, the player's leaderboard ranking. Null\n        // otherwise.\n        \"Rank\": \"int\"\n      },\n\n      // The player's measurement matches left. If this field is greater than zero, then\n      // the player will not have a CSR yet. If the player finished the match, this match\n      // is included in this count.\n      \"MeasurementMatchesLeft\": \"int\",\n\n      // The set of rewards that the player got in this match.\n      \"RewardSets\": [\n        {\n          // The ID of the reward.\n          \"RewardSet\": \"guid\",\n\n          // The source of the reward. Options are:\n          //   None = 0,\n          //   Meta Commendation = 1,\n          //   Progress Commendation = 2,\n          //   Spartan Rank = 3\n          \"RewardSourceType\": \"int\",\n\n          // If the Reward Source is Spartan Rank, this value is set to the Spartan Rank\n          // the player acquired that led to this reward being granted. Note: Unlike the\n          // commendations fields in this structure, this is not the GUID to a Spartan\n          // Rank content item. That's because the Spartan Rank content item itself does\n          // not detail what specific Spartan Rank it pertains to - this information is\n          // derived from the list of Spartan Ranks as a whole. Spartan Ranks are\n          // available via the Metadata API.\n          \"SpartanRankSource\": \"int\",\n\n          // If the Reward Source is a Commendation, this is the ID of the level of the\n          // commendation that earned the reward.\n          \"CommendationLevelId\": \"guid\",\n\n          // If the Reward Source is a Meta Commendation or Progress Commendation, this\n          // is the ID of the Meta Commendation or Progress Commendation, respectively,\n          // that earned the reward. Commendations are available via the Metadata API.\n          \"CommendationSource\": \"guid\"\n        },\n\n      ],\n\n      // The number of times the player killed each opponent. If the player did not kill\n      // an opponent, there will be no entry for that opponent.\n      \"KilledOpponentDetails\": [\n        {\n          // The gamertag of the opponent that was killed.\n          \"GamerTag\": \"string\",\n\n          // The number of times that opponent was killed.\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The number of times the player was killed by each opponent. If the player was\n      // not killed by an opponent, there will be no entry for that opponent.\n      \"KilledByOpponentDetails\": [\n        {\n          // The gamertag of the opponent that killed the player.\n          \"GamerTag\": \"string\",\n\n          // The number of times the opponent killed the player.\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The game base variant specific stats for this match. Flexible stats are\n      // available via the Metadata API.\n      \"FlexibleStats\": {\n\n        // The set of flexible stats that are derived from medal events.\n        \"MedalStatCounts\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The number of times this flexible stat was earned.\n            \"Count\": \"int\"\n          }\n        ],\n\n        // The set of flexible stats that are derived from impulse events.\n        \"ImpulseStatCounts\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The number of times this flexible stat was earned.\n            \"Count\": \"int\"\n          }\n        ],\n\n        // The set of flexible stats that are derived from medal time lapses.\n        \"MedalTimelapses\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The amount of time the flexible stat was earned for. This is expressed as\n            // an ISO 8601 Duration.\n            \"Timelapse\": \"string\"\n          }\n        ],        \n\n        // The set of flexible stats that are derived from impulse time lapses.\n        \"ImpulseTimelapses\": [\n          {\n            // The ID of the flexible stat.\n            \"Id\": \"guid\",\n\n            // The amount of time the flexible stat was earned for. This is expressed as\n            // an ISO 8601 Duration.\n            \"Timelapse\": \"string\"\n          }\n        ]\n      },\n\n      // Details on any credits the player may have earned from playing this match.\n      \"CreditsEarned\": {\n\n        // Indicates how the credits result was arrived at. Options are:\n        //   Credits Disabled In Playlist = 0,\n        //   Player Did Not Finish = 1,\n        //   Credits Earned = 2\n        // Credits Disabled In Playlist: TotalCreditsEarned is zero because this playlist\n        // has credits disabled.\n        // Player Did Not Finish: Credits are enabled in this playlist, but\n        // TotalCreditsEarned is zero because the player did not finish the match.\n        // Credits Earned: Credits are enabled in this playlist and the player completed\n        // the match, so the credits formula was successfully evaluated. The fields below\n        // provide the client with the values used in the formula. Note: That if we used\n        // one or more default values, we still return \"NormalResult\". The fields below\n        // will confirm the actual values used.\n        \"Result\": \"int\",\n\n        // The total number of credits the player earned from playing this match.\n        \"TotalCreditsEarned\": \"int\",\n\n        // The scalar applied to the credits earned based on the player's Spartan Rank.\n        \"SpartanRankModifier\": \"double\",\n\n        // The portion of credits earned due to the player's team-agnostic rank in the\n        // match.\n        \"PlayerRankAmount\": \"int\",\n\n        // The portion of credits earned due to the time the player played in the match.\n        \"TimePlayedAmount\": \"double\",\n\n        // The portion of credits earned due to the boost card the user applied\n        \"BoostAmount\": \"int\"\n      },\n\n      // The player's progress towards meta commendations. Commendations that had no\n      // progress earned this match will not be returned. \n      \"MetaCommendationDeltas\": [\n        {\n          // The commendation ID. Commendations are available via the Metadata API.\n          \"Id\": \"guid\",\n\n          // The progress the player had made towards the commendation level before the\n          // match. In C#, this can be reassembled into a Guid in the following manner:\n          // new Guid((int)Data1, (short)Data2, (short)Data3,\n          // BitConverter.GetBytes((long)Data4)).\n          \"PreviousMetRequirements\": [\n            {\n              \"Data1\": \"int\",\n\n              \"Data2\": \"int\",\n\n              \"Data3\": \"int\",\n\n              \"Data4\": \"int\"\n            }\n          ],\n\n          // The progress the player had made towards the commendation level after the\n          // match. In C#, this can be reassembled into a Guid in the following manner:\n          // new Guid((int)Data1, (short)Data2, (short)Data3,\n          // BitConverter.GetBytes((long)Data4)).\n          \"MetRequirements\": [\n            {\n              \"Data1\": \"int\",\n\n              \"Data2\": \"int\",\n\n              \"Data3\": \"int\",\n\n              \"Data4\": \"int\"\n            }\n          ]\n        }\n      ],\n\n      // The player's progress towards progressive commendations. Commendations that had\n      // no progress earned this match will not be returned.\n      \"ProgressiveCommendationDeltas\": [\n        {\n          // The commendation ID. Commendations are available via the Metadata API.\n          \"Id\": \"guid\",\n\n          // The progress the player had made towards the commendation level before the\n          // match.\n          \"PreviousProgress\": \"int\",\n\n          // The progress the player had made towards the commendation level after the\n          // match.\n          \"Progress\": \"int\"\n        }\n      ],\n\n      // Details on the boost card the user used in this match. If the user did not use a\n      // boost card this field will be null.\n      \"BoostData\": {\n\n        // The identifier of the boost card that was used. Boost cards are available via\n        // the Requisitions Metadata API.\n        \"DefinitionId\": \"guid\",\n\n        // Whether the card was consumed because its conditions were met. If not consumed\n        // the card is returned to the user's inventory.\n        \"CardConsumed\": \"bool\"\n      },\n\n      \"Player\": {\n\n         // The player's gamertag.\n        \"Gamertag\": \"string\",\n\n        // Internal use only. This will always be null.\n        \"Xuid\": null\n      },\n\n      // The ID of the team that the player was on when the match ended. \n      \"TeamId\": \"int\",\n\n      // The player's team-agnostic ranking.\n      \"Rank\": \"int\",\n\n      // Indicates whether the player was present in the match when it ended.\n      \"DNF\": \"boolean\",\n\n      // The player's average lifetime.\n      \"AvgLifeTimeOfPlayer\": \"string\",\n\n      // Internal use only. This will always be null.\n      \"PreMatchRatings\": null,\n\n      // Internal use only. This will always be null.\n      \"PostMatchRatings\": null,\n\n      // The Player's Score. This is not used by all Game Variants and may contain null\n      // or invalid data.\n      \"PlayerScore\": \"int\",\n\n      // Total number of kills done by the player. This includes melee kills, shoulder\n      // bash kills and Spartan charge kills, all power weapons, AI kills and vehicle\n      // destructions.       \n      \"TotalKills\": \"int\",\n\n      // Total number of headshots done by the player.\n      \"TotalHeadshots\": \"int\",\n\n      // Total weapon damage dealt by the player.\n      \"TotalWeaponDamage\": \"double\",\n\n      // Total number of shots fired by the player.\n      \"TotalShotsFired\": \"int\",\n\n      // Total number of shots landed by the player.\n      \"TotalShotsLanded\": \"int\",\n\n      // The weapon the player used to get the most kills this match.\n      \"WeaponWithMostKills\": {\n\n        \"WeaponId\": {\n\n          // The ID of the weapon. Weapons are available via the Metadata API.\n          \"StockId\": \"int\",\n\n          // Any attachments the weapon had.\n          \"Attachments\": [ \"int\" ]\n        },\n\n        // The number of shots fired for this weapon.\n        \"TotalShotsFired\": \"int\",\n\n        // The number of shots landed for this weapon.\n        \"TotalShotsLanded\": \"int\",\n\n        // The number of headshots for this weapon.\n        \"TotalHeadshots\": \"int\",\n\n        // The number of kills for this weapon.\n        \"TotalKills\": \"int\",\n\n        // The total damage dealt for this weapon.\n        \"TotalDamageDealt\": \"double\",\n\n        // The total possession time for this weapon. This is expressed as an ISO 8601\n        // Duration.\n        \"TotalPossessionTime\": \"string\"\n      },\n\n      // Total number of melee kills by the player.\n      \"TotalMeleeKills\": \"int\",\n\n      // Total melee damage dealt by the player.\n      \"TotalMeleeDamage\": \"double\",\n\n      // Total number of assassinations by the player.\n      \"TotalAssassinations\": \"int\",\n\n      // Total number of ground pound kills by the player.\n      \"TotalGroundPoundKills\": \"int\",\n\n      // Total ground pound damage dealt by the player.\n      \"TotalGroundPoundDamage\": \"double\",\n\n      // Total number of shoulder bash kills by the player.\n      \"TotalShoulderBashKills\": \"int\",\n\n      // Total shoulder bash damage dealt by the player.\n      \"TotalShoulderBashDamage\": \"double\",\n\n      // Total grenade damage dealt by the player.\n      \"TotalGrenadeDamage\": \"double\",\n\n      // Total number of power weapon kills by the player.\n      \"TotalPowerWeaponKills\": \"int\",\n\n      // Total power weapon damage dealt by the player.\n      \"TotalPowerWeaponDamage\": \"double\",\n\n      // Total number of power weapon grabs by the player.\n      \"TotalPowerWeaponGrabs\": \"int\",\n\n      // Total power weapon possession by the player. This is expressed as an ISO 8601\n      // Duration.\n      \"TotalPowerWeaponPossessionTime\": \"string\",\n\n      // Total number of deaths by the player.\n      \"TotalDeaths\": \"int\",\n\n      // Total number of assists by the player.\n      \"TotalAssists\": \"int\",\n\n      // Not used.\n      \"TotalGamesCompleted\": \"int\",\n\n      // Not used.\n      \"TotalGamesWon\": \"int\",\n\n      // Not used.\n      \"TotalGamesLost\": \"int\",\n\n      // Not used.\n      \"TotalGamesTied\": \"int\",\n\n      // Total timed played in this match by the player.\n      \"TotalTimePlayed\": \"string\",\n\n      // Total number of grenade kills by the player.\n      \"TotalGrenadeKills\": \"int\",\n\n      // The set of Medals earned by the player.\n      \"MedalAwards\": [\n        {\n          // The ID of the Medal. Medals are available via the Metadata API.\n          \"MedalId\": \"int\",\n\n          // The number of times the Medal was earned.\n          \"Count\": \"int\"\n        }\n      ], \n\n      // List of enemy vehicles destroyed. Vehicles are available via the Metadata API.\n      // Note: this stat measures enemy vehicles, not any vehicle destruction.\n      \"DestroyedEnemyVehicles\": [\n        {\n          // The enemy this entry references\n          \"Enemy\": {\n\n            // The Base ID for the enemy.\n            \"BaseId\": \"int\",\n\n            // The attachments (variants) for the enemy.\n            \"Attachments\": [\n              \"int\"\n            ]\n          },\n\n          // Total number of kills on the enemy by the player\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // List of enemies killed, per enemy type. Enemies are available via the Metadata\n      // API.\n      \"EnemyKills\": [\n        {\n          // The enemy this entry references\n          \"Enemy\": {\n\n            // The Base ID for the enemy.\n            \"BaseId\": \"int\",\n\n            // The attachments (variants) for the enemy.\n            \"Attachments\": [\n              \"int\"\n            ]\n          },\n\n          // Total number of kills on the enemy by the player\n          \"TotalKills\": \"int\"\n        }\n      ],\n\n      // The set of weapons (weapons and vehicles included) used by the player.\n      \"WeaponStats\": [\n        {\n          \"WeaponId\": {\n\n              // The ID of the weapon. Weapons are available via the Metadata API.\n            \"StockId\": \"int\",\n\n              // Any attachments the weapon had.\n            \"Attachments\": [ \n              \"int\" \n            ]\n          },\n\n          // The number of shots fired for this weapon.\n          \"TotalShotsFired\": \"int\",\n\n          // The number of shots landed for this weapon.\n          \"TotalShotsLanded\": \"int\",\n\n          // The number of headshots for this weapon.\n          \"TotalHeadshots\": \"int\",\n\n          // The number of kills for this weapon.\n          \"TotalKills\": \"int\",\n\n          // The total damage dealt for this weapon.\n          \"TotalDamageDealt\": \"double\",\n\n          // The total possession time for this weapon. This is expressed as an ISO 8601\n          // Duration.\n          \"TotalPossessionTime\": \"string\"\n        }\n      ],\n\n      // The set of Impulses (invisible Medals) earned by the player.\n      \"Impulses\": [\n        {\n          // The ID of the Impulse. Impulses are available via the Metadata API.\n          \"Id\": \"int\",\n\n          // The number of times the Impulse was earned.\n          \"Count\": \"int\"\n        }\n      ],\n\n      // Total number of Spartan kills by the player.\n      \"TotalSpartanKills\": \"int\"\n    }\n  ],\n\n  // A list of stats for each team who in the match. Note that in Free For All modes,\n  // there is an entry for every player.\n  \"TeamStats\": [\n    {\n      // The ID for the team.\n      \"TeamId\": \"int\",\n\n      // The team's score at the end of the match. The way the score is determined is\n      // based off the game base variant being played: \n      //   Breakout = number of rounds won,\n      //   CTF = number of flag captures,\n      //   Slayer = number of kills,\n      //   Strongholds = number of points,\n      //   Warzone = number of points.\n      // Score can be a negative value. Unfortunately, this value is returned as an\n      // unsigned 32-bit integer. This means that if the score is -1, the score reported\n      // is 4,294,967,295.\n      \"Score\": \"uint32\",\n\n      // The team's rank at the end of the match.\n      \"Rank\": \"int\",\n\n      // The set of round stats for the team.\n      \"RoundStats\": [\n        {\n          // The round number this entry pertains to.\n          \"RoundNumber\": \"int\",\n\n          // The end rank for the team this round.\n          \"Rank\": \"int\",\n\n          // The end score for the team this round.\n          // Score can be a negative value. Unfortunately, this value is returned as an\n          // unsigned 32-bit integer. This means that if the score is -1, the score\n          // reported is 4,294,967,295.\n          \"Score\": \"uint32\",\n\n        }\n      ]\n    }\n  ],\n\n  // Indicates if the match is completed or not. Some match details are available while\n  // the match is in-progress, but the behavior for incomplete matches in undefined.\n  \"IsMatchOver\": \"boolean\",\n\n  // The length of the match. This is expressed as an ISO 8601 Duration.\n  \"TotalDuration\": \"string\",\n\n  // The variant of the map for this match. Map variants are available via the Metadata\n  // API. More information is available in MapVariantResourceId.\n  \"MapVariantId\": \"guid\",\n\n  // The variant of the game for this match. Game variants are available via the Metadata\n  // API. More information is available in GameVariantResourceId.\n  \"GameVariantId\": \"guid\",\n\n  // The playlist ID of the match. Playlists are available via the Metadata API.\n  \"PlaylistId\": \"guid\",\n\n  // The ID of the base map for this match. Maps are available via the Metadata API.\n  \"MapId\": \"guid\",\n\n  // The ID of the game base variant for this match. Game base variants are available via\n  // the Metadata API.\n  \"GameBaseVariantId\": \"guid\",\n\n  // Whether this was a team-based game or not.\n  \"IsTeamGame\": \"boolean\",\n\n  // The ID of the season for this match if it was played in a seasonal playlist. Null if\n  // the match was played in a non-seasonal playlist.\n  \"SeasonId\": \"guid\",\n\n  // The variant of the game for this match. There are two sources of game variants:\n  // official game variants available via the Metadata API and user-generated game\n  // variants available via the UGC API.\n  \"GameVariantResourceId\": {\n\n    // The resource type. 2 indicates game variant.\n    \"ResourceType\": 2,\n\n    // The ID of the game variant. Official game variants are available via the Metadata\n    // API.\n    \"ResourceId\": \"guid\",        \n\n    // The source of the game variant. Options are:\n    //   Unknown = 0,\n    //   User-generated = 1,\n    //   Official = 3.\n    \"OwnerType\": \"int\",\n\n    // The gamertag of the user that created the game variant if this is a user-generated\n    // game variant, or null otherwise. \n    \"Owner\": \"string\"\n  },\n\n  // The variant of the map for this match. There are two sources of map variants:\n  // official map variants available via the Metadata API and user-generated map variants\n  // available via the UGC API.\n  \"MapVariantResourceId\": {\n\n    // The resource type. 3 indicates map variant.\n    \"ResourceType\": 3,\n\n    // The ID of the map variant. Official map variants are available via the Metadata\n    // API.\n    \"ResourceId\": \"guid\",\n\n    // The source of the map variant. Options are:\n    //   Unknown = 0,\n    //   User-generated = 1,\n    //   Official = 3.\n    \"OwnerType\": \"int\",\n\n    // The gamertag of the user that created the map variant if this is a user-generated\n    // map variant, or null otherwise. \n    \"Owner\": \"string\"\n  }\n}\n",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "956646b6-0fbb-34e5-a106-32d6498cc434",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "Halo-5-Match-Result-Arena"
        }
      }
    },
    "insertionIndex" : 110
  } ]
}