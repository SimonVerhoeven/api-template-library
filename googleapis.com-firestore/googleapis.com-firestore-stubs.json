{
  "mappings" : [ {
    "id" : "f5247df1-0d71-4137-b450-17851312aae5",
    "name" : "Creates a composite index. This returns a google.longrunning.Operation which may...",
    "request" : {
      "urlPath" : "/v1beta2/02okqhjjc4tbe8fyybe1nuet5mv7v2pfdw1k9i8ps1a8ptsojb4m6u2wg9g9gcu2v3xq8s3erkcgy0n1oer3mrdwk11l9elbvbd7irgidpr4sam3o8tcg7xts5bqh8oi5x16dlbtwlfc2uz886za73wj515p7ghfzosob4ojfzzz2ukezjcp9ygilq9plkvmskf4lan/indexes",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Ira Reynolds\",\n  \"error\" : {\n    \"code\" : 1722198426,\n    \"details\" : [ { }, { }, { }, { }, { }, { } ],\n    \"message\" : \"Voluptatum a nam. Consequatur occaecati est vel nesciunt ex. Et nihil quis voluptatibus. Officia eum id laboriosam iure harum est sint. Odio et debitis.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f5247df1-0d71-4137-b450-17851312aae5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:10:51.81694Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.indexes.create",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "8c3c9c4d-ab1d-47f8-9629-ed4995c85890",
    "name" : "Lists composite indexes.",
    "request" : {
      "urlPath" : "/v1beta2/mep59gxr73k4ya2aqsrla0u1vgl1qawpqu15kidv3foswyf62h7hjcj8fb6rjxf06b27kowr0izm0uog8o7p4q4lrjpq8vjtseplay9e3j227nk2uyycs5uoay8hdbt66h3a/indexes",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"indexes\" : [ {\n    \"queryScope\" : \"COLLECTION_GROUP\",\n    \"name\" : \"Rolland Heller\",\n    \"state\" : \"READY\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"3nvsxvuwuhr6bgspwx9go3d9pv34w775aovycbdj9hutuv32p1s3fbfs5mgoiun2wk2n0cqf3xlgjzm8c7kshl84bgnfxwx9w99ka5pe2agvo5vy4b2502anr5g4c2v441a05qmot4san5kaddhhtujz\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"p6qt\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"izbn4xai\",\n      \"order\" : \"ASCENDING\"\n    } ]\n  } ],\n  \"nextPageToken\" : \"u8lgxswhtu0739fid81ts8wj8q2n3opxy0zuw00ogammicsip5abwatzbvrz1y6jwumyxhsl3cyk7hu5u4sqnr87jr817r22ewe8sc8hysdp3dds1mc4eodoys5ze1om2jfsgkbglmqqe2cbg3jnwcsprw6i50pkluqi5tuoslxp3msxsqumqjg\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8c3c9c4d-ab1d-47f8-9629-ed4995c85890",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:10:51.816716Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.indexes.list",
          "schema" : {
            "description" : "The response for FirestoreAdmin.ListIndexes.",
            "properties" : {
              "indexes" : {
                "description" : "The requested indexes.",
                "items" : {
                  "$ref" : "#/components/schemas/GoogleFirestoreAdminV1beta2Index"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "A page token that may be used to request another page of results. If blank, this is the last page.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "9d12b5d3-94b6-41fa-bc7f-8069f00f6c26",
    "name" : "Lists the field configuration and metadata for this database. Currently, Firesto...",
    "request" : {
      "urlPath" : "/v1beta2/g6tx02vf4hx10spoz4vkw64h8zyfg96n6c92uhxbip8z3p3ix6o92ouwbd207skdwf4b5ez5ehmtsapdodndrplgs5duajgf28nvddlqeq60i2x9piusu3zrhjttkk7f7h9/fields",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"nextPageToken\" : \"dxbmpypmgxs89kc7bi3rc55zyaukgyn1xk3q9mu6buplv6pe14zy68tickqnsvcpixj1cjrkhq2m2n4ogmoixcw0jce0b8pqr6zgb19t7f9o2ewpk2cstf5zpi1wgia3vdnydyzfhb5ap4uosjhga1xq8qi2vx2e1svcjkxfukmp9\",\n  \"fields\" : [ {\n    \"name\" : \"Major Goyette\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : false,\n      \"ancestorField\" : \"uenc8rg9rutr4x3a808tws5pu72i987c7k8o3xjpvzae19dey1lrkgnf0801klpx7kco\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Wanetta D'Amore\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Mr. Mattie Nikolaus\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Selma Pouros\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Roman Borer I\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Estela Moen\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Jarvis Hackett\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Morgan Ritchie\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Jack Cassin\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { }, { }, { }, { } ]\n      } ],\n      \"reverting\" : false\n    }\n  }, {\n    \"name\" : \"Melvin Block Jr.\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : true,\n      \"ancestorField\" : \"7hii96jvizv7ozt3ubjn3uwn811x23qthhyp61biowo73q1xaa5smkwy44dm0rjdds319d8p5tjl103zy2a02gb3a0w\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Johnie Rau\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Mrs. Kit Kulas\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Ulrike Dietrich\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Damon Muller DDS\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Edwin Beier\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Donna Klocko\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Johnette Bauch\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Lyle Wunsch\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { } ]\n      } ],\n      \"reverting\" : true\n    }\n  }, {\n    \"name\" : \"Retha Orn\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : false,\n      \"ancestorField\" : \"n30p2vlsxlpl3x9mj1q219oj0l44\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Ms. Rolanda Torphy\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Mr. Eufemia Kihn\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Mr. Robt Jacobs\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Mr. Arron Gutmann\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Jamila Hermann Sr.\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Felipe Spinka V\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n      } ],\n      \"reverting\" : true\n    }\n  }, {\n    \"name\" : \"Lorinda Cummerata\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : false,\n      \"ancestorField\" : \"mrcqbshy8bllw3b5qqjwb2xewe7y8yte18ux8t9m8zbvjpsk\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Nakisha Goyette\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Demetrice Hayes\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Miss Carrol Brown\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Denisse Hahn\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Felicia Kuphal\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Walter Schoen\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Lue Kemmer II\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { }, { }, { }, { } ]\n      } ],\n      \"reverting\" : false\n    }\n  }, {\n    \"name\" : \"Mr. Maren Klein\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : true,\n      \"ancestorField\" : \"gkgh1uqjvamh3fdmlcymiojjkgwl8w27rsn05jyn4beymxjvgktmrhxvv8mcautbasau4l04ipjv4kkw8m1vj0nh00\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Ms. Moses Gorczany\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { } ]\n      } ],\n      \"reverting\" : false\n    }\n  }, {\n    \"name\" : \"Mrs. Chi Konopelski\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : false,\n      \"ancestorField\" : \"zhr36sdrm5w3065ryron5wtaob1bgivzl3qbw07vtelk9tpbl3dw2ehakogslqtdahe9l9uhvnvunjrdx7w2o84f57uo4brduxdvu56h2peohc6vm55dwytr5o39msxtdlple52zozm6nj\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Nicky Stiedemann\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Isaiah Hahn DVM\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Hildegard Zemlak\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Theron Greenfelder PhD\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Armida Predovic\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Ms. Sarita Rice\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Dr. Jodie Hyatt\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Ta Jenkins\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { } ]\n      } ],\n      \"reverting\" : false\n    }\n  }, {\n    \"name\" : \"Stefani Pfannerstill\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : false,\n      \"ancestorField\" : \"dmux36ujvf18hu8f1sb25rvg4m11lnc11afhmrrhuhpz0a9j66iqyz8sjn4w9lwe47hgjxhwl89jy6c3oa7ug8pizyypdaoej\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Reggie Pfeffer DDS\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Korey Breitenberg\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Johnathon Quigley\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Ahmad Barton\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Royal Douglas\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Robert Lakin\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Kathey Kessler IV\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { } ]\n      } ],\n      \"reverting\" : true\n    }\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9d12b5d3-94b6-41fa-bc7f-8069f00f6c26",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:10:51.816436Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.fields.list",
          "schema" : {
            "description" : "The response for FirestoreAdmin.ListFields.",
            "properties" : {
              "fields" : {
                "description" : "The requested fields.",
                "items" : {
                  "$ref" : "#/components/schemas/GoogleFirestoreAdminV1beta2Field"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "A page token that may be used to request another page of results. If blank, this is the last page.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "67f9d0c6-b4b9-4702-8da4-512467b8ec7d",
    "name" : "Imports documents into Google Cloud Firestore. Existing documents with the same ...",
    "request" : {
      "urlPath" : "/v1beta2/Elroy+Christiansen:importDocuments",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Tanner Mosciski\",\n  \"error\" : {\n    \"code\" : 407162328,\n    \"details\" : [ { }, { }, { }, { }, { } ],\n    \"message\" : \"Vero harum libero eaque explicabo corrupti. Quasi eos officiis cum cupiditate. Quae quo sed vitae fugit quis fugit amet.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "67f9d0c6-b4b9-4702-8da4-512467b8ec7d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:10:51.812571Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.importDocuments",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "c0aa3bee-57ff-4f5e-9c5a-abc013463811",
    "name" : "Exports a copy of all or a subset of documents from Google Cloud Firestore to an...",
    "request" : {
      "urlPath" : "/v1beta2/David+Huels:exportDocuments",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Karry MacGyver\",\n  \"error\" : {\n    \"code\" : 1958526670,\n    \"details\" : [ { }, { } ],\n    \"message\" : \"Delectus nostrum magnam et hic. Rerum maxime earum dignissimos ea laudantium qui voluptate. Sit aut aliquam aut quo aspernatur fugit consequatur. Saepe omnis consectetur aut.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c0aa3bee-57ff-4f5e-9c5a-abc013463811",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:10:51.812363Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.exportDocuments",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "e815ede4-9053-4123-9591-bbac073562e0",
    "name" : "Updates a field configuration. Currently, field updates apply only to single fie...",
    "request" : {
      "urlPath" : "/v1beta2/Frieda+Kuphal",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Logan Will\",\n  \"error\" : {\n    \"code\" : 1880720748,\n    \"details\" : [ { }, { }, { } ],\n    \"message\" : \"Tempora est vel sed laboriosam dicta. Laboriosam possimus doloremque quia. Nemo saepe facilis non ut architecto mollitia exercitationem. Repellat quis adipisci sint facilis. Autem enim laboriosam quib\"\n  },\n  \"done\" : true\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e815ede4-9053-4123-9591-bbac073562e0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:10:51.812149Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.fields.patch",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "dd68057f-6e74-44d6-8064-eaea63a0558d",
    "name" : "Gets a composite index.",
    "request" : {
      "urlPath" : "/v1beta2/Chin+Jerde",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"queryScope\" : \"COLLECTION\",\n  \"name\" : \"Stanley Robel\",\n  \"state\" : \"STATE_UNSPECIFIED\",\n  \"fields\" : [ {\n    \"arrayConfig\" : \"CONTAINS\",\n    \"fieldPath\" : \"qcivh3klw0sagh2fzwlq0gqv6a29o1xpaw821r07hdh1o69y773olfg98pdxx07igojocee6h0t3rebesx4a7aja40wmonbqt4wjnz7hx3g9rm5gqxtwfye99do\",\n    \"order\" : \"ORDER_UNSPECIFIED\"\n  }, {\n    \"arrayConfig\" : \"CONTAINS\",\n    \"fieldPath\" : \"041zihn2hh8w54xf589pm6a1t0c26w5yadw59l5sts5o3073vbalvdrwtiro74v38u8l1vxeyygpifl1fy6e7zsb5inwbhd4zhhoiq06tg2dwzhxq5a5is9inn0lvml9bqhiz6o0hdyljhxk2eiwnkm\",\n    \"order\" : \"ASCENDING\"\n  }, {\n    \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n    \"fieldPath\" : \"v0vwpo1i6k7zwsjxvzxqez7z6i7jxizu4z8\",\n    \"order\" : \"DESCENDING\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "dd68057f-6e74-44d6-8064-eaea63a0558d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:10:51.81186Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.indexes.get",
          "schema" : {
            "description" : "Cloud Firestore indexes enable simple and complex queries against documents in a database.",
            "properties" : {
              "fields" : {
                "description" : "The fields supported by this index. For composite indexes, this is always 2 or more fields. The last field entry is always for the field path `__name__`. If, on creation, `__name__` was not specified as the last field, it will be added automatically with the same direction as that of the last field defined. If the final field in a composite index is not directional, the `__name__` will be ordered ASCENDING (unless explicitly specified). For single field indexes, this will always be exactly one entry with a field path equal to the field path of the associated field.",
                "items" : {
                  "$ref" : "#/components/schemas/GoogleFirestoreAdminV1beta2IndexField"
                },
                "type" : "array"
              },
              "name" : {
                "description" : "Output only. A server defined name for this index. The form of this name for composite indexes will be: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{composite_index_id}` For single field indexes, this field will be empty.",
                "type" : "string"
              },
              "queryScope" : {
                "description" : "Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the same collection id. Indexes with a collection group query scope specified allow queries against all collections descended from a specific document, specified at query time, and that have the same collection id as this index.",
                "enum" : [ "QUERY_SCOPE_UNSPECIFIED", "COLLECTION", "COLLECTION_GROUP" ],
                "type" : "string"
              },
              "state" : {
                "description" : "Output only. The serving state of the index.",
                "enum" : [ "STATE_UNSPECIFIED", "CREATING", "READY", "NEEDS_REPAIR" ],
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "3d39ea1d-b44c-43e8-8522-ab4f8656cb86",
    "name" : "Deletes a composite index.",
    "request" : {
      "urlPath" : "/v1beta2/Nena+Wolff+DVM",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3d39ea1d-b44c-43e8-8522-ab4f8656cb86",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:10:51.811474Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.indexes.delete",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    }
  } ]
}