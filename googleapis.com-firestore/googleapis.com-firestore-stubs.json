{
  "mappings" : [ {
    "id" : "df56f798-80ac-3ee3-a3ef-0841f68f499a",
    "name" : "Creates a composite index. This returns a google.longrunning.Operation which may...",
    "request" : {
      "urlPath" : "/v1beta2/jgm0j44imekzhdzj054m2wsoyoz6ckccnfcu8oe2nscgue6kblj9fx2rpo9wfw2h1l445hdek8e1wibfho5ed6i100h1twbm106luiwy3lo7bop/indexes",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Rodrigo Jacobson\",\n  \"error\" : {\n    \"code\" : 1246536040,\n    \"details\" : [ { }, { }, { }, { }, { }, { }, { } ],\n    \"message\" : \"Amet quibusdam tenetur quod corporis saepe. At aut at rerum eum consequatur. Occaecati explicabo voluptatem voluptatem dolorum itaque. Minima pariatur fuga suscipit veritatis voluptate. Distinctio rep\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "df56f798-80ac-3ee3-a3ef-0841f68f499a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.indexes.create",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 0
  }, {
    "id" : "085b3b3f-411a-3ab6-a24d-a6b4b4b1505a",
    "name" : "Lists composite indexes.",
    "request" : {
      "urlPath" : "/v1beta2/s6z2tmml92bpopbp91mz7kfailqimhctm0af2ervvmc9rq9qe26urkflx16pj90z/indexes",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"indexes\" : [ {\n    \"queryScope\" : \"COLLECTION_GROUP\",\n    \"name\" : \"Isidro Schamberger\",\n    \"state\" : \"STATE_UNSPECIFIED\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"vktvu109l9fwok3y8u7qeihf1028933qvt5tfpo5ossjcmtfo79lu9khug05a0fmgwzuq0kwkix7vbk1\",\n      \"order\" : \"ASCENDING\"\n    } ]\n  }, {\n    \"queryScope\" : \"COLLECTION\",\n    \"name\" : \"Vincenzo Metz\",\n    \"state\" : \"CREATING\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"f2r91ho3riqyyuwvay7c0p7u0jrdk3rgskjbaqcjak7te6efbcykrnz7gyrgv3lze1ymsywxni7hc5xinq2i653w3dk2yvycyeswpg6umxb12v45rfm2tv12fu0ejg0t6rcnnv428x2zehbzelnsr6ro0hwyobkp0n3xj9cb41159tugotw8y9\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"8kk5lujy6p4sp43hf5xbe5zl36a3cfn4gwrwsoxw7kdw2t6bitcytqmnzceslezlz163ct67kt6jxa4cjvnuloq4y5ggejdjnifp3mvkasyjxj74mlnz4kwenns1u6id91vu2m27cljzeyyye5gx1xrvj461941oj06y19xzbkrj3cpvr\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"a8kjnzbcqpf9snxmd758tgoigspn7ic13wpfxzo4dqnhlqb5ittnlq8o7g7gn9o85gkask06xz14o7cqdz8bn7oi9vm7at207xt58yt930uf0afeuqvllbcvbzqjp1gwtizq4xgdm\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"orslrtty2v846yxwuzhoiyill297q9ajrgxivnksvl6ds16n72tily2163cxagj90qfgfmbsqiygvl8dnc76ev1ebeybkwk8xqjkm56myqwam3kirb22t8pudhitdenvw0t9tyhlhat6mtc19hvl560yih18d21svk3ff5sjaswwundfvw0ofo0hsutv\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"v6x83ah5o3oyfdeftobkrcyqg744ces1i2ejme9gqlqdwlb8yzwuxv5yy98ui2nka1ndt9caevigxy8thbzhk4qjodhirpoxa7evuxv\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"8zl2fo83o46p8cgenstyy7ld1jkiwu2yhgypllc09wwrbddqusyji7s4yytg93dwj8cyh2ku3zlxbw2j8p6u41x1ef23onasasfy9qjanrz\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"ip8tky4ws3jjn93w6a38o2cr5onx2f97q6mbamb4k2vh5hpyohxxl3i4ogjwwf2s3k8guplxv0ckrijbjbhc3akkgczvjykync0aa9op9gkf903k9lqo031825g0ob7a5x6izwwryefryi2cwqh3vim18u58u4fjxrsvwwvnujrgmyne2e4ayzbe\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    } ]\n  }, {\n    \"queryScope\" : \"COLLECTION\",\n    \"name\" : \"Damien Howe\",\n    \"state\" : \"READY\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"vaad862crbam0yuz1xsqctcajec4552mryunongzwusrvn62uitub40a1s3wgvw0m4p9smzxc8m7rmwg4wkvocf6tgtjdxrz9q5rjbv4pn993gwsrjtyxih2r7z4hw87h39jdtsx9y\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"8xy30tketh3jfak9a0dmg9n2cg7u6lfxcvslmpptk6wi4b01zbbk4jmhw5ggak0zr1mxijlc5wu0clal85yx1rg1x1vyo18z8vb5dt92jkvnwux3qy6tb8omne043o36jjg63axvvtylkg1kn9oolmmd760l9qtnsf4kbvesnd1swnmamboqpqyd\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"sdyo0jkw2zbw4z453x63fjwc6q8wwgclyd3efvwfvp00ey2sez4i1fwu7kdmmusr4cvj7rh\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"jy5dv3g42czq3ooucinu1b510exzmmntz33syz3ehwpgtqwv1jeaxrg2u\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"2n0b9jvffk8gek13e86ryl5yqqrkr81dyxiew0pr8i381xro78efo7qwe6e\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"7jln2ien868495klsjejnks83lu6t82c8r6dw2s9cpqcdo1qo6kx316irwczphw6j2z0mma1nwyjzzpycrtq\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"9ejasnssoy37c6e86pxkofrsuxllst92vjntd5qdi1e\",\n      \"order\" : \"ASCENDING\"\n    } ]\n  }, {\n    \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n    \"name\" : \"Ms. Tona Koepp\",\n    \"state\" : \"STATE_UNSPECIFIED\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"gnyazogcxgzn8fr8zu0ksmd3fkfqul8pznlkrg0xvx83h4nnmxmc77fdazne9c8bra2zc2n9g7txwgrhsdkqs0zzy9xmilm7c0a5f2gfr2xoavnft3aiic8ymep5nflofrd8o1dvxu5zzpz0av24npu1a5\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"tl8dlp5w52hz7b489436w27\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"ixdmc06ax1ze2n2s6xyz842nyu9n0uuzd3sul39qskp1ueqgkcm86hy8vfamvahufsvk0liyy7img8l7qvg0rhkth8lt9b5p818zgl3ocf8shdac29uqjeqtgue8sm5grtxqpwrcif5sf\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"8u4cdnffnu08vegp221sku53370oro94k65rez8n8f68171087d3e7drvzi3pxa2yw53ir804zoc11vpf8\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"mqn80mtza1b9b7gwvov40zidyx4sqdwk2ukvtwim976xnpcbc2mm2zmsq4qbj3pywjph81fp7zzmqjeso771sb5le23utah83obp19du7spq0lqv7tuo0g3yek3w3o56bx9kbs38179u4intd7cs5hfnr9br6z908jbivavkxfma\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"e5bnf19i0twn3vrcijzgwv0cm72mz27h911lyyyiatkd8i4j9ui76wan40vnps62vvz1qkzed7pu1fib8o0adnkx9dghetkm9j6wl65ic03eb16hpqxxpd4ds7p7apfeqsdgtchr8n706oc8jvc7c08fdh27p0ypi65mwqd8\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"flwjez0gze7aunnjnfziq4i1b6wo97o4sscrm1qnnogm592yflx72xzijurvorr79vkcvarv3yhhif6ytk7i9a29dwbn7kl1ewzjks9v9xi7wwvvulku667jmwbjh6l262l06oyjrsoff4ld8gp95zdjv74cvcdvrirr8uyw60uis\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"gcreng90nu283d75swe8lh9hav3qpp0nw2pjfgae33w4i7z7tkhxb5im7ca1dbtt8x96cjbiz924px47kvgk7wn2fd\",\n      \"order\" : \"DESCENDING\"\n    } ]\n  }, {\n    \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n    \"name\" : \"Mr. Israel Howe\",\n    \"state\" : \"READY\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"39ozue18fu5\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"wrk132x1qvrpoi1omk2qnni7m3j2t0h8v3p8jrpp3ugf9x021oqoja3hxp16lbt7xei2k5f644z4ague6hpy9zniu032kwh1qx0dkjizygok41\",\n      \"order\" : \"ASCENDING\"\n    } ]\n  }, {\n    \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n    \"name\" : \"Kevin Erdman\",\n    \"state\" : \"CREATING\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"7wd1w7dnltd2msyvcp855o3qhsz2enozvdebxvmwb4u2s44pj7fs3d5dtw\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"rvgqeffxu80jnl97tclff2skj8cds9fv38c7ymm121wixsjmmqvz5bs6v2svauj81twjchodvqsshsf2czt0bal1xk\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"0zh9zdum7ob1aw83ik1fqlmgtfafvsg8i23wo45wk5r070z3v0taicek10sywws0j4qtwx2jkucr4k90oqyurkmb6nvevt2wencsbxyyz55tqozni2eettq4d2zzwk9b4t7ld7wvucoefrwjlwdekuj8xr7x88p2gn4hvcczhgv2xpclsvlmdz3zvvs\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"19z3ycsg4opllxnv10oxcjzw8q7ihortp2tn4nbgt9fj88fuaahu3rlgbe5jxw6ua911ddl84atsudej0buvbthm7s\",\n      \"order\" : \"ASCENDING\"\n    } ]\n  }, {\n    \"queryScope\" : \"COLLECTION\",\n    \"name\" : \"Rochel Brekke I\",\n    \"state\" : \"NEEDS_REPAIR\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"6gtwmvtlb0vwl0z4hgpqi7jbqgdhck9t6o8ihk994w056couscmreh3d7zk\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"uuqizujoxgf9z2fj2sjkjks6tukwr6as0ev3edpp6qq1vr195ttwdlrt623wfm2bl6k789pe7t1xgulgdh15e5l2xwoywgsyxy0qvpu3p952xe0ffv2jz3b0ea465jaj13nlbmik2mivgvnjyzozc3xsp3i1bg98ozi6tfr14\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"tfrh1m76yqda60l2w16dcilw2z0sl4dkt0nk6e25xtwzs7rttunggosft1p8y70gn\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"jf4rc0e5khtvc2yo65wbsofmqemtcug1eo5rn7zklf4gfgnpz7yaz2ag6buw76vahc17gc8vhtauxqolfrw3276vm3oy4jkp6g82afcn7o859b9oqo\",\n      \"order\" : \"ASCENDING\"\n    } ]\n  } ],\n  \"nextPageToken\" : \"8db5dj7fv5im2fzi810s8j2wtxdiq48gyi35luyt13rinfdrmbr3zu814bp8i9mqmv6ubdh6e20v0q3c98sy2i1kw90d4de78\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "085b3b3f-411a-3ab6-a24d-a6b4b4b1505a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.indexes.list",
          "schema" : {
            "description" : "The response for FirestoreAdmin.ListIndexes.",
            "properties" : {
              "indexes" : {
                "description" : "The requested indexes.",
                "items" : {
                  "$ref" : "#/components/schemas/GoogleFirestoreAdminV1beta2Index"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "A page token that may be used to request another page of results. If blank, this is the last page.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 1
  }, {
    "id" : "24d527f6-2882-3642-925f-d395e8e7a0fb",
    "name" : "Lists the field configuration and metadata for this database. Currently, Firesto...",
    "request" : {
      "urlPath" : "/v1beta2/z48eqz2n5r8d1fbaj8l2xsu3jnji0/fields",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"nextPageToken\" : \"7evstc07ykbd2qqpkimzsopdxgkebqp75u3iaav26cpl93sqf7rafd3u2hlbqz52wt1ofrfdxskq156l684cjvcxm9iwsy9lw2724b6plk6zl61gcb7r4mw7bqwkk3mblu88vyu2n35e2oc6oq31rjxznlkn2yjtqu0iu5zrzf8qfql1kagl31xmoe707whip\",\n  \"fields\" : [ {\n    \"name\" : \"Sean Littel\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : true,\n      \"ancestorField\" : \"0z4zzee4vup4h82oksjbnndf8eevw8yojxc\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Mr. Milan Stoltenberg\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Kristine Mraz\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Ms. Milagro Ritchie\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { } ]\n      } ],\n      \"reverting\" : false\n    }\n  }, {\n    \"name\" : \"Loida Smith\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : true,\n      \"ancestorField\" : \"t8v2em4j1q6us1m0aho6zm2n9ui1g8sy79pm7s2e6wph9\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Clare Emard\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n      } ],\n      \"reverting\" : true\n    }\n  }, {\n    \"name\" : \"Mrs. Delinda Rohan\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : true,\n      \"ancestorField\" : \"bumndfzh0hdylqhj31gap1gr5pniihdvth2cgv5zwvhqhjjos952pxej\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Miss Emily Breitenberg\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Portia Mueller\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Alberto Hoeger\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { } ]\n      } ],\n      \"reverting\" : false\n    }\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "24d527f6-2882-3642-925f-d395e8e7a0fb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.fields.list",
          "schema" : {
            "description" : "The response for FirestoreAdmin.ListFields.",
            "properties" : {
              "fields" : {
                "description" : "The requested fields.",
                "items" : {
                  "$ref" : "#/components/schemas/GoogleFirestoreAdminV1beta2Field"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "A page token that may be used to request another page of results. If blank, this is the last page.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 2
  }, {
    "id" : "234bc9e1-b64b-3e40-90b4-fdf32231ed02",
    "name" : "Imports documents into Google Cloud Firestore. Existing documents with the same ...",
    "request" : {
      "urlPath" : "/v1beta2/Neil+Kreiger:importDocuments",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Jerold Douglas DVM\",\n  \"error\" : {\n    \"code\" : 1907461929,\n    \"details\" : [ { }, { }, { }, { }, { }, { }, { } ],\n    \"message\" : \"Distinctio provident omnis. Exercitationem non odit cum dolores autem. Et cum nemo inventore aut omnis. A voluptate provident qui tempore.\"\n  },\n  \"done\" : true\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "234bc9e1-b64b-3e40-90b4-fdf32231ed02",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "firestore.projects.databases.importDocuments",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 3
  }, {
    "id" : "ed1189df-e8c8-3970-a046-e961c3b35cd0",
    "name" : "Exports a copy of all or a subset of documents from Google Cloud Firestore to an...",
    "request" : {
      "urlPath" : "/v1beta2/Randy+Fadel:exportDocuments",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Ashlyn Gutmann\",\n  \"error\" : {\n    \"code\" : 1823945301,\n    \"details\" : [ { }, { }, { }, { } ],\n    \"message\" : \"Tenetur eveniet neque. Qui recusandae sunt et repellendus eligendi. Nihil voluptatem voluptas. Autem sapiente praesentium molestias natus illum sapiente. Dignissimos dolorem ut praesentium.\"\n  },\n  \"done\" : true\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ed1189df-e8c8-3970-a046-e961c3b35cd0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "firestore.projects.databases.exportDocuments",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 4
  }, {
    "id" : "918e6388-b8f8-3be1-a707-da1a6d65ca16",
    "name" : "Updates a field configuration. Currently, field updates apply only to single fie...",
    "request" : {
      "urlPath" : "/v1beta2/Terence+Smitham",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Janyce McLaughlin\",\n  \"error\" : {\n    \"code\" : 903824212,\n    \"details\" : [ { }, { }, { }, { } ],\n    \"message\" : \"Similique reprehenderit nisi facilis ullam et. Suscipit dicta corporis laudantium atque aut. Perferendis ab qui sequi magnam vero.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "918e6388-b8f8-3be1-a707-da1a6d65ca16",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.fields.patch",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 5
  }, {
    "id" : "867f4cec-45c6-3e79-8c3c-1e1a3e3b1703",
    "name" : "Gets a composite index.",
    "request" : {
      "urlPath" : "/v1beta2/Dr.+Jame+Bashirian",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n  \"name\" : \"Roni Runte\",\n  \"state\" : \"READY\",\n  \"fields\" : [ {\n    \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n    \"fieldPath\" : \"z7kv9mjxpd\",\n    \"order\" : \"DESCENDING\"\n  }, {\n    \"arrayConfig\" : \"CONTAINS\",\n    \"fieldPath\" : \"bv8n0zv4tavg2rmcavoub0gphv6p97967wpsy4di8hf33c4rimv22avg\",\n    \"order\" : \"ASCENDING\"\n  }, {\n    \"arrayConfig\" : \"CONTAINS\",\n    \"fieldPath\" : \"m4lnt6k0s20kq9kcgrbqjuqgk6d46givcb6y7qd8ipvcb6sa7dc2dlmoc684ug2ru4pba27dqwr0l3u9pzpym474tw8yypwv5glg\",\n    \"order\" : \"DESCENDING\"\n  }, {\n    \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n    \"fieldPath\" : \"90omxugjxz8b\",\n    \"order\" : \"DESCENDING\"\n  }, {\n    \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n    \"fieldPath\" : \"mlio8ujywi1ysrdbf76qqn3nqecrmnfa18hal3j493y7w07q78ge0ex0y123qbvubxu2uqkm523yy4wcwlax6u75jmv278in8vqm1nbq0wkrbzs06m9jnh4h2r9qs2ub\",\n    \"order\" : \"ORDER_UNSPECIFIED\"\n  }, {\n    \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n    \"fieldPath\" : \"ismoc0objfzn7usgtyafrlf1udykbz9kgr\",\n    \"order\" : \"DESCENDING\"\n  }, {\n    \"arrayConfig\" : \"CONTAINS\",\n    \"fieldPath\" : \"jyzrboh90hcypucqxb4tjigc7qwcq8sy8soawinviihp8auymn1vp\",\n    \"order\" : \"ASCENDING\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "867f4cec-45c6-3e79-8c3c-1e1a3e3b1703",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.indexes.get",
          "schema" : {
            "description" : "Cloud Firestore indexes enable simple and complex queries against documents in a database.",
            "properties" : {
              "fields" : {
                "description" : "The fields supported by this index. For composite indexes, this is always 2 or more fields. The last field entry is always for the field path `__name__`. If, on creation, `__name__` was not specified as the last field, it will be added automatically with the same direction as that of the last field defined. If the final field in a composite index is not directional, the `__name__` will be ordered ASCENDING (unless explicitly specified). For single field indexes, this will always be exactly one entry with a field path equal to the field path of the associated field.",
                "items" : {
                  "$ref" : "#/components/schemas/GoogleFirestoreAdminV1beta2IndexField"
                },
                "type" : "array"
              },
              "name" : {
                "description" : "Output only. A server defined name for this index. The form of this name for composite indexes will be: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{composite_index_id}` For single field indexes, this field will be empty.",
                "type" : "string"
              },
              "queryScope" : {
                "description" : "Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the same collection id. Indexes with a collection group query scope specified allow queries against all collections descended from a specific document, specified at query time, and that have the same collection id as this index.",
                "enum" : [ "QUERY_SCOPE_UNSPECIFIED", "COLLECTION", "COLLECTION_GROUP" ],
                "type" : "string"
              },
              "state" : {
                "description" : "Output only. The serving state of the index.",
                "enum" : [ "STATE_UNSPECIFIED", "CREATING", "READY", "NEEDS_REPAIR" ],
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 6
  }, {
    "id" : "a2cd30f1-0643-3004-8e31-10465f70c435",
    "name" : "Deletes a composite index.",
    "request" : {
      "urlPath" : "/v1beta2/Carey+Hermann",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a2cd30f1-0643-3004-8e31-10465f70c435",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.indexes.delete",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 7
  } ]
}