{
  "mappings" : [ {
    "id" : "68e1c130-24b9-4b02-b3ea-213a6c7cbbf6",
    "name" : "Creates a composite index. This returns a google.longrunning.Operation which may...",
    "request" : {
      "urlPath" : "/v1beta2/i54z6ccwulkc0fau94xn9ur8db687ixxsu6q6bc9zcpnqi7pxgz2d02feb4urdzqe/indexes",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Giovanni Johnston III\",\n  \"error\" : {\n    \"code\" : 474241607,\n    \"details\" : [ { }, { }, { } ],\n    \"message\" : \"Est quo vitae quo in repudiandae. Architecto deleniti doloremque reprehenderit molestiae. Minus possimus est explicabo. Fugiat sunt et in et fugiat assumenda sed.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "68e1c130-24b9-4b02-b3ea-213a6c7cbbf6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:18:50.701004Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.indexes.create",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "42d35c2b-1dc2-4d88-90ed-41a29539cbcb",
    "name" : "Lists composite indexes.",
    "request" : {
      "urlPath" : "/v1beta2/ofcz5t9t3z8yesk2q04f8j1dqbeb1jaicaxpdbgvvrfuh9l9p3ih1mwd6rtgn9ds7vdwizgj6pm41mfbgypi80ehdpdkcs4645of919w16tf05o3c8l9fbgcxqz4h14tnsuww98uv/indexes",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"indexes\" : [ {\n    \"queryScope\" : \"COLLECTION_GROUP\",\n    \"name\" : \"Belle Satterfield Jr.\",\n    \"state\" : \"STATE_UNSPECIFIED\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"wu20v4do21gu6ovll7u29z7gtdfku7o98det3dg0db2v9zaujton7hqps4hoas23rxiq82tswtlkf7jr50ygt7mc0flr74o9q5p27os3j9gh0w41ptjvamhdjwwwwgg9cd39giprz5jrb4jo11o8zggg9ptbfr\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"paqamzcah4ad6t7vci50f36h0jiu1gpivats8i93prei46fv7rcth8v7m52ojt9igc5t6\",\n      \"order\" : \"DESCENDING\"\n    } ]\n  }, {\n    \"queryScope\" : \"COLLECTION_GROUP\",\n    \"name\" : \"Trena Kub\",\n    \"state\" : \"NEEDS_REPAIR\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"pnyr4m8aurzd1yl65f1ea188npr2b4lt4sf592sqx64tmkdaxgc3fpyasmz9op8bqmlmz4yk5bf39mc7mfmmei46cna30g\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"liy6be1eya2va5vnw70ouxizo1cynfljk3diqokraytfwaoyyjq1lln7oimm9gl0znrlyb7af185zbrkcz2ors\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"76u1vo8f2cajlk41y1l4lizwq52o2q85u3g6jchgjv2d5nowxqcwbvfym68e1bml6pg1znh6aps6wa1if3irige363bn2tjyzl91iw27kzcxpgnzsgnlrqiseh2tfwiol3r3hzzd8jn\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"jxtfuh6y4regnl8fid2hhld4l231jfnm7envu9ef9nkdt2z6ttzjz22jgx7z9hmr6dtsrgp1q2n6lmyz9c7rwcdk7mzoohvrg644oe8a6tc33aa490i4rftj57mrav2use4czfmsuirpnquymg87mr6ww2a98irseosriqrd9v0wh\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"lxiifaysbfvf80g9tl6eqzb20i0bwiir9i32h214r0h5e666df7iyyf3yl8uww8leuha9tfa7q05gkkymqz8jw1eqq1s9s5rxi1v3peho8jfd4o81qks7fpp862q23xl0oncjcx9xacysnq324sn\",\n      \"order\" : \"DESCENDING\"\n    } ]\n  }, {\n    \"queryScope\" : \"COLLECTION\",\n    \"name\" : \"Mr. Darron Ward\",\n    \"state\" : \"NEEDS_REPAIR\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"bnreo0y3gc2yt4ic9r34bqrrkw423exrh0x75an9cljh5m341py79oand306y0uxrzt8qgl46278scqdfndvtn815nmuzr0739plyd5vqubx0ejjtuypibfhltygep2b7mrexhbyv74e090v9avyx0l1qgk6xaa4\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"wjbwnf1ctzgdm9e\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"49vlf1odxlg71c027epcdaouk2i1if04xmw1tewnen0i7ojdz2cs\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"8w695nxsbdjjpvg0zkjvc75u66pdvbhsfdofck0rnjiz00pm2gz8g4g80y1hftopmggfknjpsvsupo6j92v1kxsfs7ilrfak3rc6tvlek1cdh\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"wp5j6qjnu8xx0bycvv06kl3grzh57rw24uo0gqxuieot4fyprmajd4gu11k32kk5\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"iv7gywxh0mow329tahm7n03t4jg8k2mkh86zd6tsgdedsovigczfz1tod6xbfa8ikn98ksnjtqnx6\",\n      \"order\" : \"ASCENDING\"\n    } ]\n  }, {\n    \"queryScope\" : \"COLLECTION_GROUP\",\n    \"name\" : \"Nickie Gutkowski IV\",\n    \"state\" : \"NEEDS_REPAIR\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"a7emdoo6g7afp5j1uyivlbx7ktw1k2djfh8b0xg16ttpm60tsq0wppfpa7ev44223cgg188kaf672qyl8undl22t0dh6pvyw46qk91t6v7vt2lyh2ti05k9q9hlc4c3x8\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"5kow6a209hfb249fdy06kpxm70cip0kn81h2lpyp1uhtwtxapsbbqn16zfa5doael57rcg2adzto45abdq4u4a15gzp1auu1t3xso5hvd3rchiik551\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"q6ohmcjchrk7qxrmxs8oxbkfw673fuqy53r270wze9odkd2dsngsukjto3iklnh5bu9eev99nmf6u1dxazg5kxssc1abwafud78u7b7q9aawjsv9qqo0um05ejoskq8uv9e8juqk4lnqkaqezdxvxcfbf334av6\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"swymjwskdgwdvg78fbvspmy4i0t0ou8kocv0mlotmncisr4opg8qymn0af6bfyn5mk6nsk7xm63h1tqcbbuyeipxqwhyn78gtzctj51vonu4cu3zortspuc6j45vjlk81ugjwtrsc\",\n      \"order\" : \"ASCENDING\"\n    } ]\n  }, {\n    \"queryScope\" : \"COLLECTION_GROUP\",\n    \"name\" : \"Aurore Harber\",\n    \"state\" : \"STATE_UNSPECIFIED\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"d8nfdykx3cn9bgxzuimwt3a23x0ktwvv1devv6j5v29alia5\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"cwys432ws4x0o81dkvf27kfyf86hj5x6isbl80smw5en42e9drvqmsmwjv16vdrdbc\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"6hserzm0uvvwnn\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"1898xf3f8vwe323k4n6k4peyyfgoyiat7n87qce59ng0t8dg1rpvj5y5g5yukog9cy8ne48hy32fa3sdj5ss7bk2xppcwdt8xc6bzlftwfu8mvkgn0iwbmxe9f4xthhcx964u5vnaga30n1ddp8fq8v2jvlambo09yn1fwep\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"btnm0jcqksqcj7tvjbcxo8ojslglsqtiw32k5yhl83b68gatxr9nbx921td23grjcbjvbuzy0lhiasezg8vbk17jtnrulej63e\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"6m87o7mnbg4fl3aow39f8\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"1lk52xcq2nierzj3m5g506l3rgvlai1w36kddvihmwvoh6bih6jf0yu7n9stjzs98bit628xa15svm9nag14nrq35oaly79exgmrlg7uv3zl\",\n      \"order\" : \"ASCENDING\"\n    } ]\n  }, {\n    \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n    \"name\" : \"Luisa Carter Jr.\",\n    \"state\" : \"STATE_UNSPECIFIED\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"cin75j43tk0b2t0qyeomg6j6h85jugk4djefax75bw4pghga15vs1a5sxvsvev2sb4yr3hajwizhq8djw9y7ohm8090nkpc7cmljd9\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"lltaw62r5bsf228w3jpf1h6pye7lj8lfc8w3io8nvek\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"imnf20de26gmlpiv6ogzc7oz1kwk0zfaxhcjuwbvhykjrvrts8l092edco8icn9fbcanx3usgbmjip6203qcweclt353nwj9indjlx3ro9m7bakrmzpe5y5ppq9c\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"5gvvsih40md8lrur0feo6gv24mdb5gglo9ravu7fleae0tzvsla2d2d2bljunu2t2g046b6hnkkjvrip5u58dercxpz2g7s13l5j5rz8x20zj77swv2xzoz\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"t2uc3t9483y5bftb2m8pzwsn0ult7jqvf316lmxufay2usyy56p4mzgrkr44j5t2w66lqg7bypd8uj4pc63xut5b7dkav3qzvk956vssxc\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"7uy784rtaplytx696xe3grktfhl7gtuy0n431mv6wecdyntnb7r\",\n      \"order\" : \"ASCENDING\"\n    } ]\n  } ],\n  \"nextPageToken\" : \"invobry7bx9jwffwxtapj13usyezgo595h4jzfj1a3n1x72yjg2ez7exoc20vic03esksv42gwhqv4b4hcr4uaz4tpmeiy36fmqbybadxtpmz5xezww9zbcp048a09rdt1escqmge6yiknygiapbr27mntoay7uqp2dgvhe5afd045sxc1edmmpk83l8cf5trb\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "42d35c2b-1dc2-4d88-90ed-41a29539cbcb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:18:50.699805Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.indexes.list",
          "schema" : {
            "description" : "The response for FirestoreAdmin.ListIndexes.",
            "properties" : {
              "indexes" : {
                "description" : "The requested indexes.",
                "items" : {
                  "$ref" : "#/components/schemas/GoogleFirestoreAdminV1beta2Index"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "A page token that may be used to request another page of results. If blank, this is the last page.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "e7ef5aa3-f918-410b-b79a-f81017005818",
    "name" : "Lists the field configuration and metadata for this database. Currently, Firesto...",
    "request" : {
      "urlPath" : "/v1beta2/cqrdw5n0rzlsmdfok3s9p8p15exvdwpxxxwqdu3fbgdor/fields",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"nextPageToken\" : \"0toennmik0uanchpxtf2xxoq4zflm3dv9c3sz9tjbfbtd7eovj8bxgmdpknu8ydsdjftwqjf3radwtm0v4pirsjq586m2xa\",\n  \"fields\" : [ {\n    \"name\" : \"Luciana Gutmann\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : true,\n      \"ancestorField\" : \"uwx76p9simrnsa6x1zck3ukuh5h99vijiygz1jy1oa0g1ouftzd6258bold7s0izrk39xrf0xvjpt9s640o5c837rxng2b2n5ujamzo7cen24afsit1pe1\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Denisha Ebert\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Dee Breitenberg Sr.\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Tamica VonRueden\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Dr. Forrest Ryan\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Miss Zachery Collins\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Pete Maggio\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { }, { }, { } ]\n      } ],\n      \"reverting\" : false\n    }\n  }, {\n    \"name\" : \"Albert Aufderhar\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : true,\n      \"ancestorField\" : \"a1ex16ju3ofygq5384gq1halo3knhqmh2c8yerghg6vjwd44g8k3frka7zs55j92717yigdyj8d8scrqrh2iajo52589buau9neoeptzrnh1kdbxlowxva29c\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Larita Baumbach\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Jay Rippin\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Mirna Goldner\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Tiny Jast\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Mr. Junior Hansen\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Lupe Morissette\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { } ]\n      } ],\n      \"reverting\" : false\n    }\n  }, {\n    \"name\" : \"Hermelinda Fay\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : true,\n      \"ancestorField\" : \"hz2nzberb61fhesxt37bvl4zs9pwbmpm2fy0wng0986buw1vcaxz8y0f8dcy4ca1vuglr53c82cklmq14b7mk34ce77zqbji46ju9ygi721ieoh2ju4bmkb5ztagakcthib3g1qgv3s2zhew6fkibnusziekquzmpq3p7fmsgho326e5oveg62kfe3d\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Barbera Batz\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { }, { }, { } ]\n      } ],\n      \"reverting\" : true\n    }\n  }, {\n    \"name\" : \"Jestine Stark MD\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : true,\n      \"ancestorField\" : \"jctpt0ejtjenxe031dxnwb98m2oa039qezfrkwldzv8kc2qbcvq8b7z1jzs68k6vmuhtr30nckaheakhevpova91k9t2eccvzjx3ple9atw09n0wjz0h0h\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Louis Goyette\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Marjorie Schneider V\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Mrs. Shana Ryan\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Lou Rippin\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { } ]\n      } ],\n      \"reverting\" : true\n    }\n  }, {\n    \"name\" : \"Thanh Hand\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : false,\n      \"ancestorField\" : \"qyf2sbzw5ktprhyz11mvc3q5s129dy6x8q1ke57x1p05p0ivle0eerlr75kjjp6ogtqwl7mc3xenl12\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Madelyn Kilback\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Sonya Frami Jr.\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Ms. Adriane Berge\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { } ]\n      } ],\n      \"reverting\" : true\n    }\n  }, {\n    \"name\" : \"Ollie Huels\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : false,\n      \"ancestorField\" : \"rvj8lindl31vpi3prn5c1yrkiv718ynplp871wulqt8b3605vks72egk930ov9zukrq32e6984193dcc57mckyh07y1yoibt255fvy07vwzkk064913klnhuc4rjto8i4bwr99oxrhgpuzaj2\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Malissa Wolff\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Stacee Skiles\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"King Hammes\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Virgil Lehner\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Seymour Schoen\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Heriberto Watsica PhD\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Annmarie Morar\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Rufina Nader\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { }, { } ]\n      } ],\n      \"reverting\" : false\n    }\n  }, {\n    \"name\" : \"Mitchell Ledner\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : false,\n      \"ancestorField\" : \"1g5lqxcer9js6en73chxqa4atq11l6ae609wsmumcl810h4cssv4u3s0xhjuexcx853e2\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Ashlea Bartell Sr.\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Ricarda Hilll\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Loralee Simonis\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Derrick Gusikowski\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Annetta Kozey\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { } ]\n      } ],\n      \"reverting\" : true\n    }\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e7ef5aa3-f918-410b-b79a-f81017005818",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:18:50.685718Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.fields.list",
          "schema" : {
            "description" : "The response for FirestoreAdmin.ListFields.",
            "properties" : {
              "fields" : {
                "description" : "The requested fields.",
                "items" : {
                  "$ref" : "#/components/schemas/GoogleFirestoreAdminV1beta2Field"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "A page token that may be used to request another page of results. If blank, this is the last page.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "9d39fb03-34fb-45e5-85fb-34089baebaaa",
    "name" : "Imports documents into Google Cloud Firestore. Existing documents with the same ...",
    "request" : {
      "urlPath" : "/v1beta2/Miles+Fritsch:importDocuments",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Lamar Gerhold III\",\n  \"error\" : {\n    \"code\" : 1574458765,\n    \"details\" : [ { }, { }, { }, { } ],\n    \"message\" : \"Voluptatem qui officia voluptatem corrupti eos vero saepe. Ratione quidem ipsa totam rerum id. Nisi assumenda voluptatibus ea similique. Qui accusantium veniam mollitia ut. Quas qui aliquid iusto exce\"\n  },\n  \"done\" : true\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9d39fb03-34fb-45e5-85fb-34089baebaaa",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:18:50.632987Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.importDocuments",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "17202293-6e8d-4ddd-97b9-01e4da36bc12",
    "name" : "Exports a copy of all or a subset of documents from Google Cloud Firestore to an...",
    "request" : {
      "urlPath" : "/v1beta2/Larry+Kertzmann:exportDocuments",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Leon Funk\",\n  \"error\" : {\n    \"code\" : 1033167264,\n    \"details\" : [ { }, { } ],\n    \"message\" : \"Quis qui et reprehenderit voluptatum. Ipsa natus quidem rerum. Consequatur vel quisquam repudiandae facere praesentium quod tempora. Provident ut rerum.\"\n  },\n  \"done\" : true\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "17202293-6e8d-4ddd-97b9-01e4da36bc12",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:18:50.63089Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.exportDocuments",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "3f9d72f1-ef23-4d90-b601-633ca7b7230d",
    "name" : "Updates a field configuration. Currently, field updates apply only to single fie...",
    "request" : {
      "urlPath" : "/v1beta2/Anton+Walter+IV",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Leslie Schaden\",\n  \"error\" : {\n    \"code\" : 1807638862,\n    \"details\" : [ { }, { } ],\n    \"message\" : \"Dolor et at odit beatae. Vero earum sunt eos ut esse temporibus accusantium. Eveniet numquam sunt placeat. Ipsum doloribus sed magni. Omnis aut porro alias alias deleniti.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3f9d72f1-ef23-4d90-b601-633ca7b7230d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:18:50.629006Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.fields.patch",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "b51199d8-cc67-493d-9e23-77102532fc4e",
    "name" : "Gets a composite index.",
    "request" : {
      "urlPath" : "/v1beta2/Jody+Emard",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n  \"name\" : \"Mr. Theodore Balistreri\",\n  \"state\" : \"NEEDS_REPAIR\",\n  \"fields\" : [ {\n    \"arrayConfig\" : \"CONTAINS\",\n    \"fieldPath\" : \"euk360owc6m777hqml6n0f60ltd9xu2pnh36gmdfszxfq7ywboaicq0jxc9oa2welogm77xa4u667llcbhmpvrvkos1c4a7l0hggncrp7b3rarxgymy692yen87n57sfg\",\n    \"order\" : \"DESCENDING\"\n  }, {\n    \"arrayConfig\" : \"CONTAINS\",\n    \"fieldPath\" : \"gk0tb3pc1743ujw5qkpd2ijhqihmtzje2pyu5gvswvvukleid2m91i7vwb50m5ild7jaryqh1ha5esukv6vvzqdvivmhyfcnvu97igt1ton9dyzj8gs7vtex4iw1yh9duld\",\n    \"order\" : \"ASCENDING\"\n  }, {\n    \"arrayConfig\" : \"CONTAINS\",\n    \"fieldPath\" : \"mmpg1r1geigfqj8sp9ej2k7oqha8fmakxhb2ch3hqpb8juc3rrw57ce042fr5u21c2vygjv3i6g9bk97e9upvoelfxwof4gdg2zv9rrl67bf4na5tvqzetf4455rw8wtjwwe3m6vknr5bhfrplom37lla2ypqmz7d85i63tgj6o\",\n    \"order\" : \"DESCENDING\"\n  }, {\n    \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n    \"fieldPath\" : \"k5brss25vrasb284ambfnasjzbdg5janll037bftqu290v995ri6s4guv4ine45b0la1anjgxa4s3ayx1400cjq5\",\n    \"order\" : \"DESCENDING\"\n  }, {\n    \"arrayConfig\" : \"CONTAINS\",\n    \"fieldPath\" : \"o28nifeml5qth7gsr07zza41hk8lyw8dimfcnuj5yxsypj2rtbizp88hcbk192kbp8itnwrs4ssk4pocqdfe3e91\",\n    \"order\" : \"ASCENDING\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b51199d8-cc67-493d-9e23-77102532fc4e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:18:50.625855Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.indexes.get",
          "schema" : {
            "description" : "Cloud Firestore indexes enable simple and complex queries against documents in a database.",
            "properties" : {
              "fields" : {
                "description" : "The fields supported by this index. For composite indexes, this is always 2 or more fields. The last field entry is always for the field path `__name__`. If, on creation, `__name__` was not specified as the last field, it will be added automatically with the same direction as that of the last field defined. If the final field in a composite index is not directional, the `__name__` will be ordered ASCENDING (unless explicitly specified). For single field indexes, this will always be exactly one entry with a field path equal to the field path of the associated field.",
                "items" : {
                  "$ref" : "#/components/schemas/GoogleFirestoreAdminV1beta2IndexField"
                },
                "type" : "array"
              },
              "name" : {
                "description" : "Output only. A server defined name for this index. The form of this name for composite indexes will be: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{composite_index_id}` For single field indexes, this field will be empty.",
                "type" : "string"
              },
              "queryScope" : {
                "description" : "Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the same collection id. Indexes with a collection group query scope specified allow queries against all collections descended from a specific document, specified at query time, and that have the same collection id as this index.",
                "enum" : [ "QUERY_SCOPE_UNSPECIFIED", "COLLECTION", "COLLECTION_GROUP" ],
                "type" : "string"
              },
              "state" : {
                "description" : "Output only. The serving state of the index.",
                "enum" : [ "STATE_UNSPECIFIED", "CREATING", "READY", "NEEDS_REPAIR" ],
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "7f00f29e-60e8-4307-a881-7f94d7389933",
    "name" : "Deletes a composite index.",
    "request" : {
      "urlPath" : "/v1beta2/Miss+Clementine+Herman",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7f00f29e-60e8-4307-a881-7f94d7389933",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:18:50.61855Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.indexes.delete",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    }
  } ]
}