{
  "mappings" : [ {
    "id" : "61e18ecd-c8e9-46d2-8e31-d8b89938f6c4",
    "name" : "Creates a composite index. This returns a google.longrunning.Operation which may...",
    "request" : {
      "urlPath" : "/v1beta2/fk4kkd5pbkjc8sd3sgwziv26s51rjgefn237hk1rswomm7tvo5hku7whhnt9c7q2x0gbwdnr2ps48/indexes",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Dominick Hackett DDS\",\n  \"error\" : {\n    \"code\" : 604568458,\n    \"details\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n    \"message\" : \"Eum quos at nulla. Illum odit est. Sed nobis et et modi quos.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "61e18ecd-c8e9-46d2-8e31-d8b89938f6c4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:04.170198Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.indexes.create",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "5cd81659-ff27-49eb-9bc1-c0589b1ab0d4",
    "name" : "Lists composite indexes.",
    "request" : {
      "urlPath" : "/v1beta2/ev9axin9r1ecurj0hdca6p303kdzbny0t78wgq3tk2ri611q3ndqq0ymq2wqrnzyufkft6dpil6q803lf02hte1hdwpd4e6v717zg6ucq3dp04457fj83dhar5jhhc6eukz5ztu08mrv30l1hroq5tp1avmpe0/indexes",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"indexes\" : [ {\n    \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n    \"name\" : \"Vaughn Wisozk DVM\",\n    \"state\" : \"READY\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"b93k1bh8wlmov717bw72kukpu3x36m8wxj7ir44dez\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"9cbsl1inwldyqln0jy3gppg3cjo474dqjsqd3e45qpk12ccc69jqfpexs8tnod0w1a6iyjcdq4b4cscicgda45t0cry34fr4jz8l5iuvvbgzrz4vcs7yv3rpnjsq8wnb\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"o471kagup0o4f5nifil4szr7lzwnp3aq58f0g8lvhookvonr5rghixi8ivpxo2rllg1x18y82097k2ji1hr6ujqzjkfrldnwluv7yheq4lj5vbsyqt4e19ggvp05zhaqhgsj8dusnm46czqnaafr7bz42wz9\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"p4ylylxs6t0oqn2mcjn9z1b537m3174jqxe9afjgk3ax61dgq632o5s432\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"0uxqzqsbcs9qmaltfq76sxu2u8kbqvl7wr9\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    } ]\n  }, {\n    \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n    \"name\" : \"Yuette Mueller DDS\",\n    \"state\" : \"CREATING\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"m7qt8mga0nq9omgv5j5yoyoelyuncyrobmxc12p85a4xs2x82twcc9vquymt75yt6rbyxnyrtsewc4zyfvhuo4z9t3njkbfqiz7mvcmfzxsjzwhvwl24xlt3slbjmtrv80n8bqv00empdxzxk3d7\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    } ]\n  }, {\n    \"queryScope\" : \"COLLECTION_GROUP\",\n    \"name\" : \"Mrs. Ethan Herzog\",\n    \"state\" : \"NEEDS_REPAIR\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"ecnuawpwxa2uwv83q8yl1zafjvzjizsgflvx2xmlco44r0m3v5kzmryedr43rgl1ww9ougqk0tlifff95beiiyrt3m5oz27d5y\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    } ]\n  }, {\n    \"queryScope\" : \"COLLECTION_GROUP\",\n    \"name\" : \"Cleotilde Hoppe\",\n    \"state\" : \"READY\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"uem86f3qz7sm7kmo36vlwchy9b6oqja4mim71ypoo7rbz273edqjribdbcwgwh9kra7m8569s\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"chh48hsvibuc\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"uq34ak8avy9nqxpatdzxeprnp3xvurr94g78fnjld5soh7bek9ay48so3dwil80plp72q3bsd3pgukrjfdlapepmelomuhx0ru0mf9t30xclafx0xm2h784eiezn37qlalyyu40x1vth98eaj0tz49b32iin5dnxnfco78cjppf\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"eovkzvbbxp6zi2g7iw90rsb9zpb2wzbluibqc6qaa1xjnrqryq36fhut43shvqxpj8behz\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"prrj48oaviplpuh98q8xdq2y1hpjwume4ifoftw93goq4pf77q6vehfc7mw2jfz7s808uunn3ncsnthmtkz28ixkg\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"z8cd9ighvowy6ldv7y60qx7c00yn9sl9g6auzvdyycsczdha4g87inkhba18bmn5ati8d3yg\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"9r9y84hr50r2o6ihzev18tyglozhisur88d4xhbb5bp1s7lwusn20h6gnhjwj9ivzwynxmm8uv15ng2yhj3n8z8ckodrp05y18x6m2h7zndn5u8h3jimvf9i6xvlgevqyvhu1fbew7jrm932pdxjv1nz3duv0nw6nh3u\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"gill3m17cvxbpojbxabib0yyf21x52b6lkua4m0vpp9wycupmjoijnvg4lzw1w01c5ek8yzjlvaoutq074v97ty435mju1kjcsxiiaaws3qg90eagpndod2nvro8k7ihv4zlqw8bt7if847adnwhx0nhzdsr0w2bf\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    } ]\n  }, {\n    \"queryScope\" : \"COLLECTION_GROUP\",\n    \"name\" : \"Juli Wilkinson\",\n    \"state\" : \"READY\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"0bs8e8chb9e7oum496\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"f62biip4nv3totfzekd7f0ko8rgdgvs7v4w05hupd3yamubnbgwklh1iidnpnq3plqgd6dg5cn6jkc\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"pn7y13g3u6zeluqfitgrckm8v1p56fc6sjuumv05e5lsnhmc5dx38j1ntyt5957en0jcdx8bb8jzg8sbhcrs8mokufq7tlh0qzy93tashh4islf5nctz0dlv694jbu280kwy38jtz149cmc9sbaqhg8fk4nyywwjf2vx9d\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"lvt50tecqsxz98a5tmfz\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"ri45b56voov5kfqgtp2s23xb6nwvh9yvqhzm4lhy6nmx7aqbq6wvj2v7yi2ru61xiqs5foz4xw8rhf12lv1almewtm5see9f20zd83oiyj98lzfiosj59dp8pqdpzlvfjv8r9lyg9plfs5lwxj4y80ty4m63sqj6p0basc4um19govji0x\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"zkrvvb3ujjun04owru0q1mdb35b0kqj8kuqd8nlxxamy5si6xlbp8\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"xzoxno7ovgyv33j1y0bzu467y0jg6v6dhrl4x7yvgzvn8odayezjsc30787grslz2tx74ilhyd41jukas9d6pjibr5m0p5p6vhe7hap1u62zou42l4l751zezmcmqlz4wjyumaxvb9p33waqkiamsc\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"68gbshqttxkl4nmcaegusmrua6evm8wfdg3wt3izdqcgxu2htbze1qaika8q7qla90fusi1elmq0uhlgr0cajiql4eqgltwp1mi7m68xvr9qv9sgur8zypg3wafe550s15fqfhl2uvd1ntbevearyb63\",\n      \"order\" : \"DESCENDING\"\n    } ]\n  } ],\n  \"nextPageToken\" : \"aj003a2yyeahbgaqri8bfdc12mk5s5x8uooo0zakdos7h9jmvm70eu0kz3i7sii7vg286qu4jcq2q\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5cd81659-ff27-49eb-9bc1-c0589b1ab0d4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:04.169963Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.indexes.list",
          "schema" : {
            "description" : "The response for FirestoreAdmin.ListIndexes.",
            "properties" : {
              "indexes" : {
                "description" : "The requested indexes.",
                "items" : {
                  "$ref" : "#/components/schemas/GoogleFirestoreAdminV1beta2Index"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "A page token that may be used to request another page of results. If blank, this is the last page.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "1398efb6-93d0-4350-a2bd-63e5c6e234f1",
    "name" : "Lists the field configuration and metadata for this database. Currently, Firesto...",
    "request" : {
      "urlPath" : "/v1beta2/273xmhilzhc7lr9xrh2qae3t0fz6v3g1lui2c6q6adgcvb6u29gbjgqp80d8fcidn3wlxedeyswg03yqs0gkobt9hq/fields",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"nextPageToken\" : \"6671\",\n  \"fields\" : [ {\n    \"name\" : \"Donya Trantow\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : false,\n      \"ancestorField\" : \"ilwfifv9fi06f7dqj64ee90hy6ouko39o124z7rqaknb4pmvny6dc528deihx69cz3y5ff8ob29oxbex7ge2z9o1wvej01oz44evzhom90k3bdh5hyycgbimrekvh7cpdctcenpde5ev9c7vqoslam346ahb\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Moses Baumbach\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Ms. King Turner\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Teressa Harber\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Earnest Powlowski\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Dallas Rosenbaum\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { } ]\n      } ],\n      \"reverting\" : false\n    }\n  }, {\n    \"name\" : \"Kristy Pagac\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : true,\n      \"ancestorField\" : \"spoqektpskly7f4dedo0zg6g156c804uhthwlne9t0zmj6xlg3yjq7uedj45zop8kzyw005l4pu5lz9h5payi6qoddk3og\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Ramon Mueller\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Mack Pacocha\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Miss Charleen Boyle\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { }, { } ]\n      } ],\n      \"reverting\" : true\n    }\n  }, {\n    \"name\" : \"Hassan Glover\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : true,\n      \"ancestorField\" : \"13dwymncjqfpw7bicoxsl1fwlu8ornpj2pd02d6w9piwmzwnea9uv0dpazmi8s70edqiq666yr89wmxav14fysyl7cw0kbca6j181ypmtos925r0ckb4fxxmsyfa678hn71cgt0sxhvm1k2lfyxc5ih2alugzh08yx6\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Mrs. Elliott VonRueden\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Shanell Wolff\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Estrella Nikolaus\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Marcelle Ernser Sr.\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Gisele Bashirian\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Ms. Adena Fisher\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { }, { }, { } ]\n      } ],\n      \"reverting\" : false\n    }\n  }, {\n    \"name\" : \"Annabell Walter MD\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : false,\n      \"ancestorField\" : \"b6uc7wn1zd0kz2fs352ktxze9s61khswg7c657bfw20e5zb2n46ap3igxi4dwgb4tev93297hp9at1e514s4uko14clek2mgd3a3ohnifsst5cmm8vdap2whhbysir174ht26gvakd4jixh8ph07ancq5b3fr84h6x1crbgn642cg25cagmdhy\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Haywood Welch\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Ms. Michael Gutmann\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Miss Lorilee Reilly\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Barbara Torphy\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { }, { } ]\n      } ],\n      \"reverting\" : true\n    }\n  }, {\n    \"name\" : \"Gavin Lowe\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : true,\n      \"ancestorField\" : \"h2826pw031zdzwaltp1iiweplgddmrsfsm4onnnwuo5zwthd8o1qftypw9q8621q62rol8xh28ycxyxg3ndk6rzlavh9aigl4wtsz8i7vjgmc78lgwyv0ntoesas\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Pamela Bergnaum\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Abdul Beatty\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Colton Anderson MD\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Malik Greenholt V\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Lakeisha Schimmel\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Parker Lesch\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { } ]\n      } ],\n      \"reverting\" : false\n    }\n  }, {\n    \"name\" : \"Donald Dare\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : false,\n      \"ancestorField\" : \"89xa0560y50tvim7wn18uo5k240kdfcnmat5phsx9of0plklvhqqmm3rqd8hkqn8j2ifm1jf7ooj9x5rrjgv0hwwof7yh4iwg30ma4eoyg2tdi3rx0i1kybvl56h\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Raina Jacobs\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Mason Zieme\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { }, { } ]\n      } ],\n      \"reverting\" : false\n    }\n  }, {\n    \"name\" : \"Felicitas Rosenbaum\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : false,\n      \"ancestorField\" : \"njs32ewvv81mu7ro7xcv5tezlt4ec8ll61mwbuhf8tmifqv10qkx47salc4asn5fvei5xcgrru583rc25cbb3sl89kfb5f1ola6wqrrb9jmsuakzuz9gzalrin6wy3a7\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Marivel Koelpin\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Nena McCullough\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { } ]\n      } ],\n      \"reverting\" : false\n    }\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1398efb6-93d0-4350-a2bd-63e5c6e234f1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:04.168811Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.fields.list",
          "schema" : {
            "description" : "The response for FirestoreAdmin.ListFields.",
            "properties" : {
              "fields" : {
                "description" : "The requested fields.",
                "items" : {
                  "$ref" : "#/components/schemas/GoogleFirestoreAdminV1beta2Field"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "A page token that may be used to request another page of results. If blank, this is the last page.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "4810f593-624d-48b9-8861-aee7fa13d617",
    "name" : "Imports documents into Google Cloud Firestore. Existing documents with the same ...",
    "request" : {
      "urlPath" : "/v1beta2/Malisa+Tillman+DVM:importDocuments",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Vanetta Renner DDS\",\n  \"error\" : {\n    \"code\" : 312862622,\n    \"details\" : [ { }, { }, { }, { }, { } ],\n    \"message\" : \"Incidunt ratione harum laudantium dolores non. Quasi vel veniam eius autem doloremque dignissimos. Dolorem rerum cumque quis esse.\"\n  },\n  \"done\" : true\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4810f593-624d-48b9-8861-aee7fa13d617",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:04.165837Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.importDocuments",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "72486c84-4eb5-40db-89d9-2fbec3966954",
    "name" : "Exports a copy of all or a subset of documents from Google Cloud Firestore to an...",
    "request" : {
      "urlPath" : "/v1beta2/Jammie+Gutmann+DDS:exportDocuments",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Herman Gleichner\",\n  \"error\" : {\n    \"code\" : 712566746,\n    \"details\" : [ { }, { }, { }, { } ],\n    \"message\" : \"Omnis et aspernatur. Molestiae et et sunt architecto. Et et sit possimus. Enim molestiae nam.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "72486c84-4eb5-40db-89d9-2fbec3966954",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:04.165617Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.exportDocuments",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "807811a4-57a3-425f-8ddf-92e4bd7e1b47",
    "name" : "Updates a field configuration. Currently, field updates apply only to single fie...",
    "request" : {
      "urlPath" : "/v1beta2/Lin+Cummings+MD",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Houston Ryan IV\",\n  \"error\" : {\n    \"code\" : 1149961600,\n    \"details\" : [ { }, { }, { }, { }, { } ],\n    \"message\" : \"Aut sapiente dolores nulla adipisci. Nihil et necessitatibus sunt adipisci autem. Ut ut provident. Natus odio excepturi voluptatem. Cum sapiente molestias.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "807811a4-57a3-425f-8ddf-92e4bd7e1b47",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:04.165398Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.fields.patch",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "c7583147-79c4-4eb8-a35c-10d101285dd8",
    "name" : "Gets a composite index.",
    "request" : {
      "urlPath" : "/v1beta2/Tod+Keeling",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"queryScope\" : \"COLLECTION\",\n  \"name\" : \"Miss Carmen Kiehn\",\n  \"state\" : \"READY\",\n  \"fields\" : [ {\n    \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n    \"fieldPath\" : \"nqbboto5ob28hcjuqvdjafbta5mqvg0jgqjw3n4o39qf7zdjee3gf5p4t4hgah9510kbaq94blcoqbd4\",\n    \"order\" : \"ORDER_UNSPECIFIED\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c7583147-79c4-4eb8-a35c-10d101285dd8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:04.165104Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.indexes.get",
          "schema" : {
            "description" : "Cloud Firestore indexes enable simple and complex queries against documents in a database.",
            "properties" : {
              "fields" : {
                "description" : "The fields supported by this index. For composite indexes, this is always 2 or more fields. The last field entry is always for the field path `__name__`. If, on creation, `__name__` was not specified as the last field, it will be added automatically with the same direction as that of the last field defined. If the final field in a composite index is not directional, the `__name__` will be ordered ASCENDING (unless explicitly specified). For single field indexes, this will always be exactly one entry with a field path equal to the field path of the associated field.",
                "items" : {
                  "$ref" : "#/components/schemas/GoogleFirestoreAdminV1beta2IndexField"
                },
                "type" : "array"
              },
              "name" : {
                "description" : "Output only. A server defined name for this index. The form of this name for composite indexes will be: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{composite_index_id}` For single field indexes, this field will be empty.",
                "type" : "string"
              },
              "queryScope" : {
                "description" : "Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the same collection id. Indexes with a collection group query scope specified allow queries against all collections descended from a specific document, specified at query time, and that have the same collection id as this index.",
                "enum" : [ "QUERY_SCOPE_UNSPECIFIED", "COLLECTION", "COLLECTION_GROUP" ],
                "type" : "string"
              },
              "state" : {
                "description" : "Output only. The serving state of the index.",
                "enum" : [ "STATE_UNSPECIFIED", "CREATING", "READY", "NEEDS_REPAIR" ],
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "03f54e8f-6b6e-4c3c-9694-3fee43cda458",
    "name" : "Deletes a composite index.",
    "request" : {
      "urlPath" : "/v1beta2/Barton+Rosenbaum",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "03f54e8f-6b6e-4c3c-9694-3fee43cda458",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:04.164831Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.indexes.delete",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    }
  } ]
}