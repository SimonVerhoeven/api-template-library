{
  "mappings" : [ {
    "id" : "008719f9-b8d1-45cf-be0f-323ec99ab7e9",
    "name" : "Creates a composite index. This returns a google.longrunning.Operation which may...",
    "request" : {
      "urlPath" : "/v1beta2/0xm2kcxcytw198iugpppfdfjzgalw84bwnvsnet4d8cpmm99e8et66i771xynpyaplujip1kixrh0iiicq3njtc4sjty1lbxs7ixp960b7ay0wfb5a1zt3h8t7/indexes",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Jules Rolfson\",\n  \"error\" : {\n    \"code\" : 1783140136,\n    \"details\" : [ { } ],\n    \"message\" : \"Ad ipsum possimus neque qui corrupti id neque. Voluptas molestias aut. In aut laudantium possimus.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "008719f9-b8d1-45cf-be0f-323ec99ab7e9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:02.586314Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.indexes.create",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 0
  }, {
    "id" : "475399a1-ed2c-4b60-b6f1-9c78b672ca54",
    "name" : "Lists composite indexes.",
    "request" : {
      "urlPath" : "/v1beta2/citl6m7kxc6nb0uoo1fuattzcwsxj7xmapy5g25a8j455ho4cudn0vuxc0m9rzqehsppifr0q6mxtx8p8/indexes",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"indexes\" : [ {\n    \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n    \"name\" : \"Otha Waelchi\",\n    \"state\" : \"NEEDS_REPAIR\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"sob9u3e6cb4m41px9r7i5pzibuwuas62g9qdti46sy50sp0ztb54f94zwb1v5j0n9a0960xc6u27b5uc1e8nw2205jfc5c4pg64ox4dhbffutj5w86bjhj5\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    } ]\n  }, {\n    \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n    \"name\" : \"Temeka Becker\",\n    \"state\" : \"READY\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"yfd72rsbxoe6vjcorqwh9yszh5qp94lovldbxet26q7bydq4p8ghsb23hvdnfwet7fj92y13a1273uh4000iv89z0wxf99jgaj2xcg5rrq47z4o73b33a0bsgyxrzee5vrebcvxi4tjh95cykdpb0fipyndwiczjsr7okjc3whhql4osqyukphnn24p\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"jhy09xofrfugp3e4hhz84bwhn05gtpmufoxazpy7ov7a2v6hu5nfcsecgf3wp9mlll2275iri5imhtgv9watzj2i1ptldlkyfzlz7o5raykt377afl6aynd5dg0rtjonme2eh7fackiejqcecz23oh2myjlopnhnea6m8t\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"t4ooxtufuj4kox36sl1sarpk6ux7cz23g5oghp9\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"crrvl3hr9w7qy4v50p01p6yf1mgxm4r7tf72d05zd2knq26avlkqg4ucrzsjdt2p2kb2kwuua3m7q5rp7h2npohkiwt6vexu2zw9bloyqaq6q56y0oik46799352gypeajxd6evvnofwcavv\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"y8vg58fsormx3ygyvv5b8786fha39joevnrge5dhokogymd4ua7oltu365bqd3cz6vuuimbzj8nntci0m5f5f2tj2urqv3nj7io330cthv9mj3k2hgke6mp5ehh42rknxioajzd86xr0gwayc\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"aiv4qd0l2zty0box8llsipc12o0pbgj1fk27ofzbee6xjycwnxxa8w92y1gom8gbtz0pc42p2bdxawerrppdbgd6os0ce1ccuxwmf83uzcgohqxrqomtmkzepvanccoob4musxsjdb\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"hc7j14a3r96jdd6q0dsst8zwir778a0fotss67wjlcmg2wka5xxe2rtc2wks1rr9o578ji7w5iw5p6q7xi25a1b7mu1imho34cz32g166dyu9t6ffg7pcu1e5dvvmvu2xdlqpikewnajfvupvij2l2n8v3m1zmgtdh4ft96jfgscfndidouopexp9yt1ngsk6nl\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"it845vz9iqvsc39ny1x9ehucqr9x1roanf5j59l64tf08jqw43lm1qji52v4277ckpyb42jts04fwg4566dkl1et305xinx9vnor74gsptsiw726ebvebe71t07vcttopk32oad64t9l9m4s82o252cim2pc827115b79bdgpj4ktmzyuakix7olvni26zo1hhk\",\n      \"order\" : \"DESCENDING\"\n    } ]\n  }, {\n    \"queryScope\" : \"COLLECTION_GROUP\",\n    \"name\" : \"Betsey Cremin Jr.\",\n    \"state\" : \"STATE_UNSPECIFIED\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"j7qeiyzcy63ledjt9ogbziq25qew07wqxba14s97f8mctpszxscat2t91s4ji5xqjso670ygnrvhrehw5r8evi2priuogg42vh3x8xo8btm1vmw570fts5hqvg7hbum13s3ei7\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"eauxf1vdge0v43hgtm3vt9sw211eu41xg4qyn8rv5qhzffsogozyd61f9k\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"369e6a3581fx2of2w9zzmn7b8vgggz737pq2i8821ibifd0pjfgkitzvi8ja88i2jzrq03br9k572rdd8bnzfh6eihcjx117my0kcejk6jqsljwput2bfgxuggzealtcsg4nm5a5vjg5akn3\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"0v9kimgemb3rv2hxnbgm91bsy1sgh7xivn3k93f99tl417wigikwjk2msclm55ehfiet75w7ayiw2v6vgiyyd71ma4tkvcme9gxk6xet6nse95mh8zre7x4vcfmmtvb64lt\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"ktokf703yr073b9o7xk7zll0hs13frcrgu7yvc0zqwchmi2n0c6aet7n8riw2htb4cxopkp3tbvtahwpyqc0ghgqobeoohazyfyvsdn5w0v7\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"0jy094wjbbf8olb0ch6ljoq4cbgc2ta41187qpk5zkfrur0wlas647k4qsga998za2hwez1hcf8kjycrv5o319hg8glcbxuvbgc25xj7ri811otx9zswm9pl54xfq98k1ayhzxqjj7brbvx24akzdlk9t7i6b5i6osuzk97\",\n      \"order\" : \"DESCENDING\"\n    } ]\n  }, {\n    \"queryScope\" : \"COLLECTION_GROUP\",\n    \"name\" : \"Titus Wunsch\",\n    \"state\" : \"READY\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"9xe3fk3pjt0uwspemjz7fy1dxpbs9tj3944lqccp5gnq6wq586al0mmihq8aavkdu1mrqx2cwtyfvcwco1opggdk5gnvff053749yyzd56veau4\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    } ]\n  }, {\n    \"queryScope\" : \"COLLECTION\",\n    \"name\" : \"Tameka Bernhard\",\n    \"state\" : \"CREATING\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"8rq32pb5g2yfuzjanz0qmpkm87smc1zxrh5ejo45yxuyrx7b8fscz6ehguxru8s363ychkz495hzi2r\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"ep8ecpxeb7xye7i1bg1gk46a5zas7m5shbgkvw2irif450qzkw4dflqvrbbvaxkm1a2wb6iq9sghu95isr6wytum9jtu6aoz26p0484iwnosezzuipcb3ibgb3kaeqifz3rirag2pdruflpy0rjpwh4j8vsbywhytivq\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"idhxma6i575wilii8dw1k5qjb3oun5h8gvhi3wnlbsux0ne9lo6pmcgj7ie5wd80ls7ueipq5pu1\",\n      \"order\" : \"DESCENDING\"\n    } ]\n  }, {\n    \"queryScope\" : \"COLLECTION_GROUP\",\n    \"name\" : \"Dan Schinner\",\n    \"state\" : \"NEEDS_REPAIR\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"t4kisbjsk6ruix5vytuxisqd7yvy6ew6ouulp4cb097tk8ocs5e2j0mpqymyobuvtlta0cbe2ftfs4bmowy38ui0h2pbnyqbi5yws0hxj2v32kdh76y\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"gfxxcowk1keiji6v21w3xthe0ro1wbm0x9c5hx5srwfsg10r7sqaoe5oqupy28j03d42xv0x7vyodpdg\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"3o984g1bxgbhjke75ilelwygmk1b80zh0qaw0y118wp5yms4sh1awkdpkwxw8o656fml28o2fr4kxgldpg32qstuyz81\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"ao6ko0xdy36w9yh0ooi5r7w8uj05gkue412vnnkpk9y0mznbsuhkn67k031y8hu2eiho5v4340xy3eymqndbogt\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"d78wtfgrl0as57ofy6ez09m2ug44kn37cp1se5f0rdmuxlb5oe1txs00kt2jxp63f47u0mqbq78roi3dlcyl5414x94w2kpcrewww2m3rmyct817i5mpixeof4oj81bpxij865v4m2a9kq5zt882pe0f5j4jqwea769y1zlmrgzem3mmb\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"gjiony0dij2vt7p4nwv73h1ddh04egjbso65d0afr4p59oc5o70bgoi41k\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"g55owp6fr01ylkcnwq4dl64w4oeptdg5bal5gn2fuptkjyvmbmmxrwxrk1gcj2g4gx94169xj9pt92eiaeg9lc3cghv1m6kn6j4mxlfbwo926geh0i8ak03cyplue2pi2ilmr5luba56ir35b2gr3y0n4ik2nuux882hnq7a1wlpygk3peiwii7heleiqdh\",\n      \"order\" : \"ASCENDING\"\n    } ]\n  }, {\n    \"queryScope\" : \"COLLECTION\",\n    \"name\" : \"Miss Clifford Oberbrunner\",\n    \"state\" : \"CREATING\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"52cft64w4zeoztzqu0bw6lfte9se0khwngz5j4de1owhg0p3qpfr0413e2fbqhp4qu0iqftacgtzsxj30bu391m9sua27ulw9qehdcuzgfoo17nqx2gf898qeb2v9zqh8cd89lpptziqkkvuguut2l2enunqytlbglqtmkjwbey\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"jk4fes8d7kdrirzielgb9lj2cm1x4dc8c5gb7zerdmvzqcr1fcdw6o0h4enbi2t1y7ai4z3od3m6n8zgvvni4utpl0slbhvgtbtkshuovpuxk25o6dnh01niydn16c2tlsz895i30uu3n7i716s0qrcgon17x8jw\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"kulupzv6hqaghaayw3u6agu0kmsh1hv4tp8v7rqf4flp3c0xfbphmhlbcox5bqj2n9nut7zyimte29cc69p9fmlkxyw7gg17zvt4z6qhi8xuptgj0jeiyj46xw3qojg1sifscyzflcula7z2lcmvzc8ln3jnn23226d3y1\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"h6k05zgbh7mlf8mdvcoc192dnudiajp9zcr50dzkxsql97gvuo7oqgygn8xaq9bxr6kt9j8aehvua4qm524d759ptlco1ap0r16dfdfba74vientem3c3\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"20h9zpg9zmvgmawrhjf054ui7yitqh0uof02st1x9xrdpzrhnbwrahvm6xsnpesia2wyfrghuppd24kxfhj406cku322h90fa5ggw4zjxqndaysjrm1lk43u5133xt873p4oa47laxzgci8num929f9z4eja6cngdpcsu\",\n      \"order\" : \"ASCENDING\"\n    } ]\n  } ],\n  \"nextPageToken\" : \"hpe7df37xgzrdhlkkakjc4wq9i0xqv6ytrmukguc007jnswvb3k5ttmi8b5mdyqu48ukry96f3pr9a1eqh9g62v5gqkyb8xr2wypk20bmfbj737fvg48pme46w386wj2\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "475399a1-ed2c-4b60-b6f1-9c78b672ca54",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:02.586104Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.indexes.list",
          "schema" : {
            "description" : "The response for FirestoreAdmin.ListIndexes.",
            "properties" : {
              "indexes" : {
                "description" : "The requested indexes.",
                "items" : {
                  "$ref" : "#/components/schemas/GoogleFirestoreAdminV1beta2Index"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "A page token that may be used to request another page of results. If blank, this is the last page.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 1
  }, {
    "id" : "b279a9d6-8e86-4d74-a459-5d662ea7f48f",
    "name" : "Lists the field configuration and metadata for this database. Currently, Firesto...",
    "request" : {
      "urlPath" : "/v1beta2/boz2vx8zr6wghc59rkx600rfxfa91kyxy85hisevsji2py7w5dubee08ncqtua6q26mvclcahqrhwz6o6930kgkvgaarxclehalow1m57c44bsfhlykabyyfk9zvx4stwod/fields",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"nextPageToken\" : \"q1ylt26y4nyxjhd9kf8ic5c4yivnhststlaj5s7yob36h0hyuqshyoyxr1ydvg10qgcgmx0eqli05ea9fhjtjkm9l9dbu\",\n  \"fields\" : [ {\n    \"name\" : \"Albina Rohan\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : false,\n      \"ancestorField\" : \"mbttwvxi2po8oe5et3emstdw85f8\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Meg Wolff\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Miss Adolfo Bartoletti\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Jeanmarie Armstrong DDS\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Jewell Cormier\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Miss Glynis Stiedemann\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n      } ],\n      \"reverting\" : false\n    }\n  }, {\n    \"name\" : \"Wilma Mosciski\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : true,\n      \"ancestorField\" : \"wsigigiu3t40dnp3eui504fdvjxdnfi2i2msmpyaczduw6yzt5tb5efwiwmr51q5zj91e9teqxra5051yat5h0u694xeq4w2d0zojiszi78szt0stffe42y2ii2pyce77ksloxunyuq2j5h32z\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Lois Rogahn\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Shantay Collier\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Dominique Jast\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Lucile Hyatt\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Dominic Pacocha\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Ronald Renner\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Mrs. Dennis Bogisich\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { } ]\n      } ],\n      \"reverting\" : true\n    }\n  }, {\n    \"name\" : \"Ms. Willian Gusikowski\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : true,\n      \"ancestorField\" : \"of2wzh1jbkhkpsul7s6b4ua0fxdwrj6o09qxwnjeps9xqr0jx2b4p8c522w6rfisiskjnbvemcdgqqobpgtsifmdrwx3rcrprx2yylgff90t8zy91hnf2dz1x7cckiwuz3f6jpmuoag7837ellbsk4codix95967hf2ndjyqkgrvv66165vhi6guye4\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Kareen Torphy I\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Anderson Mosciski\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { } ]\n      } ],\n      \"reverting\" : false\n    }\n  }, {\n    \"name\" : \"Eldon Howell\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : false,\n      \"ancestorField\" : \"449uv32dxj4brbvppxpdp45zp3ekza2rbhr7ehlauklr51rigknitcv212txc4\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Alonzo Yundt Sr.\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Ms. Leon Bartell\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Mrs. Jewell Yundt\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Allena Hermann\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Carmel Orn\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Dr. Alicia Dooley\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Chuck Batz\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Fannie Hagenes\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { } ]\n      } ],\n      \"reverting\" : true\n    }\n  }, {\n    \"name\" : \"Christoper Mohr\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : false,\n      \"ancestorField\" : \"07b1c82c2wagg7c6w58vqb2f00txsnufmetnf0v5mlp0f6ssicef1thfiy3cch7fh2aeqh5xj4n6lvnd6uaydufbnfbveq4t86x3vngytjxf7q319daexe07z6cfxnhk\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Mrs. Eloy Jacobson\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Miss Edwardo Stiedemann\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Rodrigo Barrows\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Dr. Jin Runte\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n      } ],\n      \"reverting\" : false\n    }\n  }, {\n    \"name\" : \"Tamatha Daniel V\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : true,\n      \"ancestorField\" : \"y57bsv3dx1p4bujm81pwi7v6ccam9fwnwoxttwfcbludfbtsp6hr6drb9k6ycv3ms8x6yk9zc5e1yjioadhuov86k3rcalwk\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Mrs. Miquel Walter\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Mrs. Freida Mayer\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Kathaleen Block\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Catherin Crooks\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Mr. Ramonita O'Hara\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Pete Rath\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { } ]\n      } ],\n      \"reverting\" : true\n    }\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b279a9d6-8e86-4d74-a459-5d662ea7f48f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:02.584651Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.fields.list",
          "schema" : {
            "description" : "The response for FirestoreAdmin.ListFields.",
            "properties" : {
              "fields" : {
                "description" : "The requested fields.",
                "items" : {
                  "$ref" : "#/components/schemas/GoogleFirestoreAdminV1beta2Field"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "A page token that may be used to request another page of results. If blank, this is the last page.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 2
  }, {
    "id" : "591cab13-92d4-44fa-8fd3-52c0776803cb",
    "name" : "Imports documents into Google Cloud Firestore. Existing documents with the same ...",
    "request" : {
      "urlPath" : "/v1beta2/Jin+Borer:importDocuments",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Lavern Gaylord DVM\",\n  \"error\" : {\n    \"code\" : 591651948,\n    \"details\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n    \"message\" : \"Eligendi delectus optio eius quas. Ex quae iure. Et eveniet officiis quis numquam. Aut ut dicta natus voluptatem incidunt. Iure commodi quibusdam et fugit voluptatem totam.\"\n  },\n  \"done\" : true\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "591cab13-92d4-44fa-8fd3-52c0776803cb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:02.581591Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.importDocuments",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 3
  }, {
    "id" : "75af067e-6b93-4e97-b26e-081a21648a4e",
    "name" : "Exports a copy of all or a subset of documents from Google Cloud Firestore to an...",
    "request" : {
      "urlPath" : "/v1beta2/Mrs.+Valarie+Towne:exportDocuments",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Barney Kemmer\",\n  \"error\" : {\n    \"code\" : 545802870,\n    \"details\" : [ { }, { }, { }, { }, { }, { }, { } ],\n    \"message\" : \"Ad incidunt illo sed excepturi non. Nesciunt assumenda impedit vero quidem qui. Quia cum ipsum. Eos vero dignissimos.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "75af067e-6b93-4e97-b26e-081a21648a4e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:02.581328Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.exportDocuments",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 4
  }, {
    "id" : "a88e1da8-c73b-4bfd-b148-79859ea72012",
    "name" : "Updates a field configuration. Currently, field updates apply only to single fie...",
    "request" : {
      "urlPath" : "/v1beta2/Scarlet+Schoen",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Leonard Feil\",\n  \"error\" : {\n    \"code\" : 177547359,\n    \"details\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n    \"message\" : \"Aut amet accusamus molestiae. Vel natus commodi aliquid tempora magni id. Asperiores ipsum quas maiores id consequatur veritatis.\"\n  },\n  \"done\" : true\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a88e1da8-c73b-4bfd-b148-79859ea72012",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:02.581073Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.fields.patch",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 5
  }, {
    "id" : "02b1107b-351b-472e-95f3-9c75b835db02",
    "name" : "Gets a composite index.",
    "request" : {
      "urlPath" : "/v1beta2/Christoper+Rippin",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n  \"name\" : \"Florencio Kilback\",\n  \"state\" : \"NEEDS_REPAIR\",\n  \"fields\" : [ {\n    \"arrayConfig\" : \"CONTAINS\",\n    \"fieldPath\" : \"7q1t\",\n    \"order\" : \"ORDER_UNSPECIFIED\"\n  }, {\n    \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n    \"fieldPath\" : \"glcz2jl03zwgrt7y77t3efuvzudoljci6y0ixegsjnln1q\",\n    \"order\" : \"DESCENDING\"\n  }, {\n    \"arrayConfig\" : \"CONTAINS\",\n    \"fieldPath\" : \"2me\",\n    \"order\" : \"ASCENDING\"\n  }, {\n    \"arrayConfig\" : \"CONTAINS\",\n    \"fieldPath\" : \"hqvlwdb1vkn54bg2w8k2ny8u2ddc5rjoltycmzjdflqcjn6e43y03770axftisg5umb65v1dhqrggh3sr3332m1l649gv0yaz61y5b10bm4ny5b5z8rm0xs1pcc98hxjwg5eeh3ory3bn\",\n    \"order\" : \"ORDER_UNSPECIFIED\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "02b1107b-351b-472e-95f3-9c75b835db02",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:02.580744Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.indexes.get",
          "schema" : {
            "description" : "Cloud Firestore indexes enable simple and complex queries against documents in a database.",
            "properties" : {
              "fields" : {
                "description" : "The fields supported by this index. For composite indexes, this is always 2 or more fields. The last field entry is always for the field path `__name__`. If, on creation, `__name__` was not specified as the last field, it will be added automatically with the same direction as that of the last field defined. If the final field in a composite index is not directional, the `__name__` will be ordered ASCENDING (unless explicitly specified). For single field indexes, this will always be exactly one entry with a field path equal to the field path of the associated field.",
                "items" : {
                  "$ref" : "#/components/schemas/GoogleFirestoreAdminV1beta2IndexField"
                },
                "type" : "array"
              },
              "name" : {
                "description" : "Output only. A server defined name for this index. The form of this name for composite indexes will be: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{composite_index_id}` For single field indexes, this field will be empty.",
                "type" : "string"
              },
              "queryScope" : {
                "description" : "Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the same collection id. Indexes with a collection group query scope specified allow queries against all collections descended from a specific document, specified at query time, and that have the same collection id as this index.",
                "enum" : [ "QUERY_SCOPE_UNSPECIFIED", "COLLECTION", "COLLECTION_GROUP" ],
                "type" : "string"
              },
              "state" : {
                "description" : "Output only. The serving state of the index.",
                "enum" : [ "STATE_UNSPECIFIED", "CREATING", "READY", "NEEDS_REPAIR" ],
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 6
  }, {
    "id" : "6ecd4701-f27d-449d-b13c-d70e26805f5a",
    "name" : "Deletes a composite index.",
    "request" : {
      "urlPath" : "/v1beta2/Felica+Wintheiser+V",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6ecd4701-f27d-449d-b13c-d70e26805f5a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:02.580329Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.indexes.delete",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 7
  } ]
}