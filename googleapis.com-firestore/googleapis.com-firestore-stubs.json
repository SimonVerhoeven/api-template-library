{
  "mappings" : [ {
    "id" : "b5e9c2e5-ac86-4cdb-ad73-3ff44d18b1a5",
    "name" : "Creates a composite index. This returns a google.longrunning.Operation which may...",
    "request" : {
      "urlPath" : "/v1beta2/uydb3hnvmo63oczirppisxl32jlm0pfnyoeaz63bz32xc3vynro634t0l3rayki4qkxoldkqdwy4gyldwdoa603vnmykt0c3y5nxq211wfh20h5igcw89sx707ugihmh5peldebwgq81jmibx90jlcc1cwsiw0bmhagsrb2yt7xn17h4c/indexes",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Lexie Mayert\",\n  \"error\" : {\n    \"code\" : 1423782645,\n    \"details\" : [ { }, { }, { }, { }, { }, { }, { } ],\n    \"message\" : \"Blanditiis distinctio quod repellendus. Ratione possimus aut aliquam ab eius dolores officia. Aut consequuntur debitis quis quidem hic in. Nostrum accusamus voluptatum maiores quasi. Quis rerum sed de\"\n  },\n  \"done\" : true\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b5e9c2e5-ac86-4cdb-ad73-3ff44d18b1a5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:43.731226Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.indexes.create",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 0
  }, {
    "id" : "feea00d3-08d6-45d6-8498-d44f25222161",
    "name" : "Lists composite indexes.",
    "request" : {
      "urlPath" : "/v1beta2/kxv5i0iwb9hb3twf8rmnwnjn421r6v6pjvlsciicqms7gpy69e1dzhi9wwf4bnd7z46ocowcn6/indexes",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"indexes\" : [ {\n    \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n    \"name\" : \"Greta VonRueden\",\n    \"state\" : \"READY\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"bkqa1jwggztixi16t5btfsz7ib17xtl6wmogtz7n3holm72if9qy7xsxh13kh3mq5pg9myvq6jd3ybgi7clg4jcdiz2wn37r1ae0\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"v9aeo041dlp0vgb0wo6ubv93fb2ck16npyvxdc4sh7r1jlxyud2mpbbpx16nj2tev8k7kd5r5uenezqac4ojqihixzcsrudrsi8tt616yfhx8jiawl7uvb783zlkfjerc0baromgvoknjxdr1prh8y8vgmkusm0ubhiegitm4fopeoj\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"mks2zos1fnfosu9ok4zg8m7hxzv883kbsfroc2vda87wg6cwx6ek0tgs6s9rat3a2m00k8cnz9qfwwlzlrq86jxurgiy\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"uxg68o2098lftyluurw0upzst7crqqzai0ynrlozno7iaj0b6wc6\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"fjh4km3kdqf8u86e959ykgmi2f0jffw0zlmqt1cntrqln9igaoyc6rh0euq33dhlqv94tfmyepo2rysuars3wbyc5a2ehtl5q4itzm8sgrmnzegsf2lvj4qdzyfas6t426t0wkbdqc3kup1jmtfz7s5wg0ddd8l09n6f7gr3yvvllrwbrshhmd39zegae3wclxx1\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"ojuhxgwfd9dn4tq8tq82bg6hxw3qdwbxu0gbyyuazfb2ajpnufexbezoz12mv1d6b30m3aud9xhzgr8fglhshbo33cftjx29jhql7u1mj25yflvarcgxpw6k8hwcx1gyppjpzvkb6fdqaklaj2flivaak33fq1clj7aaelxfovo82yox4h7z5599q2jx2x5egovbp\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"srijbp53nmk01nzcncq9h4kfa3hwsfp1k20qsdrnbdoihgu08b37rjfe2netjnvhs3i4dzgqt3o7tw0ppye6o1n3zb3g\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"76gyl8sc1dgx493vqp1az7mfml4i8zkarjrbg6aes2sroas4sfmmk1nfbplrtfijdeyjc5soc6c3xirlpcgo5u3vjed3na\",\n      \"order\" : \"ASCENDING\"\n    } ]\n  }, {\n    \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n    \"name\" : \"Jacquelynn Crooks II\",\n    \"state\" : \"STATE_UNSPECIFIED\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"o6ywrgwpdaewfipdes7m5znif9b9vxqdqc4468dfpyqsyi0jy1xsg75ptfs5mcxag2vka1tgnyxknt28s7yuqa3j32u35n6balvib4jlqyz1pynr86n2etptlb43c7wllcxvwfvszdjhm5j5y9nu9ez\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"13e77g7ylr5sfzejm7d4p6gpcf9sogyzuv6nagij2q46zgb5so5kqvylo4mihb54riacibvmn90izpwvpqenj0\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"yxpj6jlsfawuyw5qohhp8qbx4pz54qj0\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"e6mu4t9r9gpu4hc50c04q06a963jvx44db2bqewh859mx295qgwnehu662mdcoaxau7olyi34xfkbzbxck2rd83j8acj94\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"vlylyzh5hz9zwcmcmnwl63wejiq5d8sqjug7aijdgh6wfls4ky24jtvrd1falyyhy7bumz3kop156u3g1jyiv75wrjol9u8fh96xiwpi4xls3h6kjmq31a7jgrtx8z42oevwninn6f0xhprz4gtypa8jn7mbj6z77g\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    } ]\n  }, {\n    \"queryScope\" : \"COLLECTION\",\n    \"name\" : \"Erwin Welch\",\n    \"state\" : \"NEEDS_REPAIR\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"8dnrzbz7nmmm16fff1gz2vf0uj7frfqul9odxawarj6b0mr0ymm6b96gbgysyk9et0ly6q1r30kxkx\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"xc0wb6au\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"u4txsg08n5bfx781tgcvd2g8wgqquvgmmzhxch83wkgcfdimytq20tlo11e2puoe6rdvfrrax00dgb6t00dyz7xrop9lohuo4qkda9fg3dafwnmgsx9zdrujxk6ud79lxu3b0s9f03rg25t0kwn1naa8jq5xptph6thn7oh1uuq6q4m1qp79s3z49zbfb\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"r997bhexp7ep3enaizfn86ngzh41gk7jzm1wscm6v2ce53gwa38fks47ug7eynvlxttkjcm50n9xrumgqmqwgaz2p5gx5rsn06j2h0xoz4rgw7lyuma5cuffqv7hdhhqth0zlhfd5c02k90922uil81zj2k7iw8w0zkyk\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    } ]\n  }, {\n    \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n    \"name\" : \"Galen Tillman\",\n    \"state\" : \"STATE_UNSPECIFIED\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"529patqyexzunla7a4qrc6x7b8s6582yor11nyir81l6zg69mkzujky1otptmhdhil4l1j5wyxzu9kh37xtnx2\",\n      \"order\" : \"DESCENDING\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"5v4h5x1u5qf3c6t27qr6y9r69v8i3qex281ogk8g70th5w1meyzqe1ym2e3vjd8zg1r6uaga9nnoxa90i01tazv1iavidfstgw4qu17asf21oxvw470ee3mb0xcafc805z5m\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"6aego492jcrw7cbnbhxksz6ogmj5ow1lm0xdt9xznvt7h0141vwnhcyr80rsaur39nu7av1jre4zjyb51d81\",\n      \"order\" : \"ASCENDING\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"s8erifggqghj9qui0xyes3smka6tcwmow5ey3dvty2ed9x2707rds64mgmpufqsvo85eaq9x7ej2o5me6scf2r9jkrh32c35ash32op9fhu982alccppoqyno091ugkmouzyblktk112nf91kry6e2j0367vqnqy7skqhylwbgrq5\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n      \"fieldPath\" : \"dpkc3feos8c5rtnwskh1rob53p3q2mxk9dq6ssxv1fr9nzhyr7b7menqln0kyp3f0z5\",\n      \"order\" : \"ORDER_UNSPECIFIED\"\n    }, {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"52ekw6nb\",\n      \"order\" : \"DESCENDING\"\n    } ]\n  }, {\n    \"queryScope\" : \"COLLECTION_GROUP\",\n    \"name\" : \"Jonah Morar I\",\n    \"state\" : \"READY\",\n    \"fields\" : [ {\n      \"arrayConfig\" : \"CONTAINS\",\n      \"fieldPath\" : \"0ywov7nop34mo7h8ty0b7yshdf2ppwhssaqagx0c9mbdjfcr5rvm8q2404ypw6jns9kbfksf3qtjjkjab2tufgdsegerm7skt4fraezhjbsxn6jqp6aif7eesm2mdjz8z7zx1oez4nabf1vug7yk958h9jurzu8iy5fqu7dcvx94rtfz3rx\",\n      \"order\" : \"DESCENDING\"\n    } ]\n  } ],\n  \"nextPageToken\" : \"hpbiosenqm6wqm3xzyxh84zyxmolan56rnnewdbt4tns6tn7zletna0sq8\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "feea00d3-08d6-45d6-8498-d44f25222161",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:43.730798Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.indexes.list",
          "schema" : {
            "description" : "The response for FirestoreAdmin.ListIndexes.",
            "properties" : {
              "indexes" : {
                "description" : "The requested indexes.",
                "items" : {
                  "$ref" : "#/components/schemas/GoogleFirestoreAdminV1beta2Index"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "A page token that may be used to request another page of results. If blank, this is the last page.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 1
  }, {
    "id" : "b2f33444-2d54-4fe5-bc92-9f3af8dd1f5a",
    "name" : "Lists the field configuration and metadata for this database. Currently, Firesto...",
    "request" : {
      "urlPath" : "/v1beta2/9sf3lrgh61f6mqsz84inh98zzkyzv775ad9cgfpbeuixz0tk9472isfsyc2s805bx4r2hyc512dwtpd48rqsieihzs5k5y0t8d39y2kd04o2ad46/fields",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"nextPageToken\" : \"qa8okntszy3vaylxo4m1olkqjzijl44y9hmx72ylgx7d8d7vh8hm4589tqc3lmdd8o3s1gmwpxvmv8x1vjxpunl4udriczhpy83ngp5gm4bnk7o065twvyvqe8\",\n  \"fields\" : [ {\n    \"name\" : \"Elmer Lehner I\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : false,\n      \"ancestorField\" : \"rhwt4edfpfa5l700cdsp6al1pxfc050mq62eeo079ievybgmzfet9gu2xgrlez64r3dr6wbi7p3gf99ee23xb22pjgrnhjd5hexh86p5o8nzau92wzrracppcz7s1yvdg49tcsn3g3ccgtryqjt9xxj2m37y3yqzlliuvx2tyqbjqr4rn1amb\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Drew Ferry\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Deirdre Lueilwitz\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Sylvester Dibbert MD\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Miss Trudy Little\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { }, { } ]\n      } ],\n      \"reverting\" : true\n    }\n  }, {\n    \"name\" : \"Marva Beer\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : false,\n      \"ancestorField\" : \"xqz2n5bnjcalqxvxq506vthtvaz20ipw5qv1ouryorn68ehbnamdaghu7bbenei4h1zk2gd95zsjd16x9tlw02ioefyt7xcajpbimei\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Sal Cormier\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Odilia Bartell\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Cody Stiedemann\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Jammie McGlynn II\",\n        \"state\" : \"CREATING\",\n        \"fields\" : [ { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Kenton Cormier III\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { } ]\n      } ],\n      \"reverting\" : false\n    }\n  }, {\n    \"name\" : \"Mac Kovacek\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : true,\n      \"ancestorField\" : \"25dar6ysddfagwz8rzgp2zpooscx3gt5we52sy9n2r0tkzgcred1iuz43u5pefw7kwn6s3ich2isvmbygkha3aowj9nkj4sjjg\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Neil Nicolas\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Tamar Williamson\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Jere Doyle DVM\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Esteban Schaden MD\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Mr. Terra Cummings\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { } ]\n      } ],\n      \"reverting\" : true\n    }\n  }, {\n    \"name\" : \"Mrs. Neville Nikolaus\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : false,\n      \"ancestorField\" : \"otqd887lfcwsie58adyk1l1fmu8hnsy8kf96y\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Tosha Mosciski I\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Vance Thompson\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Mellie Rice\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Dr. Sanjuanita Welch\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Cary Boyer\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Ms. Ignacio Kreiger\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { } ]\n      } ],\n      \"reverting\" : false\n    }\n  }, {\n    \"name\" : \"Pat Stracke\",\n    \"indexConfig\" : {\n      \"usesAncestorConfig\" : false,\n      \"ancestorField\" : \"rf1xrmxi0o5dzvsfcu3eaf9z0vcmxvk1tyc6d2cb554j8lzj90tu2rgzhlvm8w0y1wiyn73m5y85pz556vtjznlmne939az7gtt5p3jee3abzyki8jfuhe5tbkmn4dytqtzwtrwly4wyllkv7d7a11ggplv66kxprhaah\",\n      \"indexes\" : [ {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Arnoldo O'Hara\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"QUERY_SCOPE_UNSPECIFIED\",\n        \"name\" : \"Noelle Witting\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Suzy O'Keefe\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Alethia Beahan II\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Logan VonRueden\",\n        \"state\" : \"STATE_UNSPECIFIED\",\n        \"fields\" : [ { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION_GROUP\",\n        \"name\" : \"Olevia Gerlach III\",\n        \"state\" : \"NEEDS_REPAIR\",\n        \"fields\" : [ { }, { }, { }, { }, { }, { } ]\n      }, {\n        \"queryScope\" : \"COLLECTION\",\n        \"name\" : \"Beula Kessler\",\n        \"state\" : \"READY\",\n        \"fields\" : [ { }, { } ]\n      } ],\n      \"reverting\" : false\n    }\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b2f33444-2d54-4fe5-bc92-9f3af8dd1f5a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:43.728694Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.fields.list",
          "schema" : {
            "description" : "The response for FirestoreAdmin.ListFields.",
            "properties" : {
              "fields" : {
                "description" : "The requested fields.",
                "items" : {
                  "$ref" : "#/components/schemas/GoogleFirestoreAdminV1beta2Field"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "A page token that may be used to request another page of results. If blank, this is the last page.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 2
  }, {
    "id" : "604ba22f-68d6-4888-978e-8a2b0e6a420f",
    "name" : "Imports documents into Google Cloud Firestore. Existing documents with the same ...",
    "request" : {
      "urlPath" : "/v1beta2/Novella+Wiza:importDocuments",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Miss Renea Hansen\",\n  \"error\" : {\n    \"code\" : 1886575188,\n    \"details\" : [ { }, { } ],\n    \"message\" : \"Autem vero laudantium ratione nihil alias occaecati ut. Eveniet sed sit dolor reiciendis et. Sequi qui perferendis et. Officiis omnis excepturi. Quia omnis exercitationem est rem laudantium est praese\"\n  },\n  \"done\" : true\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "604ba22f-68d6-4888-978e-8a2b0e6a420f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:43.724336Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.importDocuments",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 3
  }, {
    "id" : "8c983310-153e-48ec-823d-52bd159bc039",
    "name" : "Exports a copy of all or a subset of documents from Google Cloud Firestore to an...",
    "request" : {
      "urlPath" : "/v1beta2/Celestina+Schuster:exportDocuments",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Jackqueline Ernser\",\n  \"error\" : {\n    \"code\" : 639719473,\n    \"details\" : [ { }, { }, { }, { }, { }, { } ],\n    \"message\" : \"Delectus modi odio cumque qui non. Nihil sed voluptatibus vel ut. Quos autem aut. Optio voluptate molestiae beatae consectetur et.\"\n  },\n  \"done\" : true\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8c983310-153e-48ec-823d-52bd159bc039",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:43.724038Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.exportDocuments",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 4
  }, {
    "id" : "50abac46-7f8c-4f99-8d78-10a3ced37383",
    "name" : "Updates a field configuration. Currently, field updates apply only to single fie...",
    "request" : {
      "urlPath" : "/v1beta2/Jenny+Kohler",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Latoria Lehner III\",\n  \"error\" : {\n    \"code\" : 1058004015,\n    \"details\" : [ { } ],\n    \"message\" : \"Aliquam voluptas id eos fugiat aut. Quaerat quia autem cum. Est id doloribus est et consequuntur recusandae autem. Totam in et nihil error modi praesentium.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "50abac46-7f8c-4f99-8d78-10a3ced37383",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:43.723759Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.fields.patch",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 5
  }, {
    "id" : "b27b00a3-6e34-42f5-a1c6-28ed1f1f842d",
    "name" : "Gets a composite index.",
    "request" : {
      "urlPath" : "/v1beta2/Hyun+Hansen",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"queryScope\" : \"COLLECTION\",\n  \"name\" : \"Tyrone White\",\n  \"state\" : \"NEEDS_REPAIR\",\n  \"fields\" : [ {\n    \"arrayConfig\" : \"CONTAINS\",\n    \"fieldPath\" : \"thrrg2fv9marjjdvu09ur6iogw5i4jovpqmh77566jmfi1f0nblyj4btmaj19kqpgwjfn0hbkyr3myakp8tbm0kz8zzb9nzbfyjsq09ai3vrrc169h2drxjsg8huo926tuqxtrc\",\n    \"order\" : \"ASCENDING\"\n  }, {\n    \"arrayConfig\" : \"CONTAINS\",\n    \"fieldPath\" : \"3emm9vmye1jj4ay20wopubq35gxbl5vom60i6kww8s584p5bj3nur8fmolxn58ep6epwks12okofpidd4w82uk6oxowbdoo269mjyhipggkdw6u9732ecoygt21w8x0dl87w517n5t7qhxjyc\",\n    \"order\" : \"DESCENDING\"\n  }, {\n    \"arrayConfig\" : \"CONTAINS\",\n    \"fieldPath\" : \"g4je3r4zwzehg3i5hc1oo3byx9pb97tfr2o2h7mt5l9s990p6jvmujgbdq6\",\n    \"order\" : \"ASCENDING\"\n  }, {\n    \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n    \"fieldPath\" : \"sl8xnhkzjfwyn8f0tncrq9vgs6kqp9huwwiimig63xzey4hvzg5797l01ig1aqvypunh9x0f1c2mj0xa5dv72i1k6wqqvzm4dgfjd52fj74hphjx4khnpbl9dx5c3980jkk79c0afidz8fn32rzk31vnp3inz2imwwspi6r0v9m0ip0hd0y9\",\n    \"order\" : \"ORDER_UNSPECIFIED\"\n  }, {\n    \"arrayConfig\" : \"CONTAINS\",\n    \"fieldPath\" : \"3dedy753594l4havrlgp0j65u3r2evhi2r6xabgyayk7lo8ysd778p7u6g391cz\",\n    \"order\" : \"DESCENDING\"\n  }, {\n    \"arrayConfig\" : \"CONTAINS\",\n    \"fieldPath\" : \"lr78p5obflnnq82nsnj549q4clvpqiocwarglzf3ztw\",\n    \"order\" : \"ASCENDING\"\n  }, {\n    \"arrayConfig\" : \"ARRAY_CONFIG_UNSPECIFIED\",\n    \"fieldPath\" : \"byn1utizjnp8gcs0kcnepl2nbcda7c0hsooeflbddhqbjrec5z5rtffmojhhvy5zvec4peqaqjofccrp4scd8z86b2oi\",\n    \"order\" : \"DESCENDING\"\n  }, {\n    \"arrayConfig\" : \"CONTAINS\",\n    \"fieldPath\" : \"6v1w5edq8jonzs4cjes94qutgn8drk8ciexqz1a2fwf5zeu56xz3ffty20\",\n    \"order\" : \"ASCENDING\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b27b00a3-6e34-42f5-a1c6-28ed1f1f842d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:43.723427Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.indexes.get",
          "schema" : {
            "description" : "Cloud Firestore indexes enable simple and complex queries against documents in a database.",
            "properties" : {
              "fields" : {
                "description" : "The fields supported by this index. For composite indexes, this is always 2 or more fields. The last field entry is always for the field path `__name__`. If, on creation, `__name__` was not specified as the last field, it will be added automatically with the same direction as that of the last field defined. If the final field in a composite index is not directional, the `__name__` will be ordered ASCENDING (unless explicitly specified). For single field indexes, this will always be exactly one entry with a field path equal to the field path of the associated field.",
                "items" : {
                  "$ref" : "#/components/schemas/GoogleFirestoreAdminV1beta2IndexField"
                },
                "type" : "array"
              },
              "name" : {
                "description" : "Output only. A server defined name for this index. The form of this name for composite indexes will be: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{composite_index_id}` For single field indexes, this field will be empty.",
                "type" : "string"
              },
              "queryScope" : {
                "description" : "Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the same collection id. Indexes with a collection group query scope specified allow queries against all collections descended from a specific document, specified at query time, and that have the same collection id as this index.",
                "enum" : [ "QUERY_SCOPE_UNSPECIFIED", "COLLECTION", "COLLECTION_GROUP" ],
                "type" : "string"
              },
              "state" : {
                "description" : "Output only. The serving state of the index.",
                "enum" : [ "STATE_UNSPECIFIED", "CREATING", "READY", "NEEDS_REPAIR" ],
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 6
  }, {
    "id" : "aafef352-d017-44b5-bdc3-5f9a65342473",
    "name" : "Deletes a composite index.",
    "request" : {
      "urlPath" : "/v1beta2/Mr.+Merle+Dickens",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "aafef352-d017-44b5-bdc3-5f9a65342473",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:43.722804Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "firestore.projects.databases.collectionGroups.indexes.delete",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 7
  } ]
}