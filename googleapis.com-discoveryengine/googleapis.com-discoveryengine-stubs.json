{
  "mappings" : [ {
    "id" : "bb4e6cb5-f83c-4e5b-b414-1523280b6ccb",
    "name" : "Makes a recommendation, which requires a contextual user event.",
    "request" : {
      "urlPath" : "/v1beta/fijff1hol4f6bhwpz8sc85lutlctq5u9817xj3yyyg2280ogu7pzio5dbt0tjyw5ajf9415m2pjju0kmhztk2e:recommend",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"validateOnly\" : false,\n  \"attributionToken\" : \"hf5urz2ticc9jckulawdbsuit71hmxaiaqhkbqulyif9mzkrw2mh5vxntj8zo8vtwvdfnt8kjovl5zm6y19rwzjm9caw1xsw3uslf4c9rfj7wr4qj\",\n  \"missingIds\" : [ \"vh2abgjkg6tag2ltgmq87ln0229j07g9511x55wi0z4xcf4krgxhuaex6ajtrd87vm166fbbd624c7dzt2wk1o\", \"i6vcbwkq21wo6rcxaw0bz35bs1ko5ustasfrsvvd6uoo9lul6o8dq1t3o7gq0r0fsnh53mhspyjj0mpc6ouj2au2qajwg4uo35fho\" ],\n  \"results\" : [ {\n    \"metadata\" : { },\n    \"document\" : {\n      \"jsonData\" : \"cihdcdy2rgh0f58svcido0jz7tci4s79xwcsfpy5uqvw9fi7c2rea8avn5ua6t5zsp4koqd60xt\",\n      \"schemaId\" : \"575q\",\n      \"name\" : \"Winford Pfeffer DDS\",\n      \"id\" : \"m0tp\",\n      \"parentDocumentId\" : \"oiu7\",\n      \"structData\" : { }\n    },\n    \"id\" : \"8b2i\"\n  }, {\n    \"metadata\" : { },\n    \"document\" : {\n      \"jsonData\" : \"q119iobbt3xhd4mrmf6il44k1kb4y3vxrnsxj82y8tzxhgucz3k9vui6ipro2lokgf61rh0v5aeu16tm6717q7tm7ym3nkjbic2xakkcvh3g9r12be04mc5e775emg45o152otgz2p8ck3g\",\n      \"schemaId\" : \"t46w\",\n      \"name\" : \"Monty Konopelski I\",\n      \"id\" : \"gjzd\",\n      \"parentDocumentId\" : \"8944\",\n      \"structData\" : { }\n    },\n    \"id\" : \"7708\"\n  }, {\n    \"metadata\" : { },\n    \"document\" : {\n      \"jsonData\" : \"mrw4b2537vtlmotofvvj8abvo8zcw2n2ef6fld19x62uaaxk1sqwbhueve4qr84j314au7bbhq4b2lvpi1buf4cse5n8xdtgdqx0id76s5ip6gs7qfl2dpyxlphkdcnpzqp7myoh8d0xj0zr4q4g4n30bs0kvtd2zxge5eetekyt4c\",\n      \"schemaId\" : \"4o56\",\n      \"name\" : \"Tiffani Farrell\",\n      \"id\" : \"qf5t\",\n      \"parentDocumentId\" : \"8am8\",\n      \"structData\" : { }\n    },\n    \"id\" : \"379o\"\n  }, {\n    \"metadata\" : { },\n    \"document\" : {\n      \"jsonData\" : \"8bhll1nito\",\n      \"schemaId\" : \"7rm7\",\n      \"name\" : \"Mr. Louis Ebert\",\n      \"id\" : \"0v8y\",\n      \"parentDocumentId\" : \"u40c\",\n      \"structData\" : { }\n    },\n    \"id\" : \"lwj1\"\n  }, {\n    \"metadata\" : { },\n    \"document\" : {\n      \"jsonData\" : \"mryqqvwii4lb6n2mtwthdz13kojx77rstnij16cptyz8vrff2y2hqucje9njzy0ct6tb15o7qnqlqhyv5vh36b90e3u5ubd5tmdsmpok4bb078miscqvxuh2768it01ka9stwxpg3r7susr\",\n      \"schemaId\" : \"4oze\",\n      \"name\" : \"Miss Kaley Jacobi\",\n      \"id\" : \"3duv\",\n      \"parentDocumentId\" : \"130z\",\n      \"structData\" : { }\n    },\n    \"id\" : \"yd40\"\n  }, {\n    \"metadata\" : { },\n    \"document\" : {\n      \"jsonData\" : \"r4xzr3eizj6wy34k1xa0emkajmqh8pxon1ij4luu89akonm47glqmi85wrx9xqkmws0tkc35xgz5kibp1grkidwip93mrzrbvpz71cuh07vp8vluqdglm8jledtidd2i7mzz1z2o9mh3zrqgfb0k2y\",\n      \"schemaId\" : \"j49y\",\n      \"name\" : \"Miss Leroy Skiles\",\n      \"id\" : \"0gc6\",\n      \"parentDocumentId\" : \"ds2f\",\n      \"structData\" : { }\n    },\n    \"id\" : \"80k9\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "bb4e6cb5-f83c-4e5b-b414-1523280b6ccb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:19.658065Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "discoveryengine.projects.locations.dataStores.servingConfigs.recommend",
          "schema" : {
            "description" : "Response message for Recommend method.",
            "properties" : {
              "attributionToken" : {
                "description" : "A unique attribution token. This should be included in the UserEvent logs resulting from this recommendation, which enables accurate attribution of recommendation model performance.",
                "type" : "string"
              },
              "missingIds" : {
                "description" : "IDs of documents in the request that were missing from the default Branch associated with the requested ServingConfig.",
                "items" : {
                  "type" : "string"
                },
                "type" : "array"
              },
              "results" : {
                "description" : "A list of recommended Documents. The order represents the ranking (from the most relevant Document to the least).",
                "items" : {
                  "$ref" : "#/components/schemas/GoogleCloudDiscoveryengineV1betaRecommendResponseRecommendationResult"
                },
                "type" : "array"
              },
              "validateOnly" : {
                "description" : "True if RecommendRequest.validate_only was set.",
                "type" : "boolean"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "d40a8a27-d0a6-4efe-af9b-870bdf70004c",
    "name" : "Writes a single user event.",
    "request" : {
      "urlPath" : "/v1beta/mmec5lgvtaqpmgw9syf7rbvtdbh7x1qbr0ykcn328knfgoown6celixo2jazel1p9v8zqlwq1x9xmt866h0u4wunxysph4h1ikbuj7b5isqx3r6f5xn98jcmtaqatqyx8ukhf4syiiion/userEvents:write",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"userInfo\" : {\n    \"userAgent\" : \"swxertr7kz5j724u6k8k2x4mbjkx0f7k\",\n    \"userId\" : \"0zsl\"\n  },\n  \"documents\" : [ {\n    \"quantity\" : 1551777640,\n    \"name\" : \"Marvin Wuckert\",\n    \"promotionIds\" : [ \"nr3234nu4xdndsmxya9wsctqw4kb5qt104wey8i85scb9s4eahij6ly1w405weq9b7imkwu0d21s4l89ts7odpjbdl3i15nm8qhh9n4ewfot\", \"r1wrqfrogfz7igc7ebw82ugr29i5wy5sheih3emfdpc64o4k40rwi4th267aj8dkg0k5nv545j2fi2rkdov93093pbqw9rulcu83i4ishzaavifgg1o153wocv6y8xzwjluyr9gh7of4tk6axxa04wayyj81dzo3kkkz0sggz\", \"0l3csdy29q\", \"ig6zkin9nu28d5ojl3ntyzox5og1kn2vi47p2ion7xh3a3flqckxyrruakn1o3sbq7wgc7p5fm115z84hz6h4r4a29k6vod7pigxy3q4gu8uheu9mj1wkri8eejr5ic\", \"077berr9tbidn2pcng5gh7wrvo8lvmpjgn225cd01wymm4az1e31yo8q5tk2snzct4gioa7bqt2dypgkhquill2ris2ck\", \"dml6ewg5reqhzwk6kqfg\", \"53adbv0u6r4ecza3medp6hpv8wzknj72w9t8spak81yufs7andmdo2hji75riftk09kz8h128jhsepf4rgo4cgcp8o61v2nu51jyoptx14cm2\", \"ev785xhxffe17wzdxb4q4j49iuq77zul4izm\" ],\n    \"id\" : \"5683\"\n  }, {\n    \"quantity\" : 1591377895,\n    \"name\" : \"Mia Swift V\",\n    \"promotionIds\" : [ \"md5ysk1bcylrdyf175cfnkim8fgbi0x30jijr4uyhe6fsrm3eulwio89ihev2rtcm1xmrdqayyxwwhw0koizgsawcsbsdemp8wmwrrg4xya0j29rwvzahmo2mtik410frnkeljkfihy475coiegy8caz2kk2e975icri7rhoj0d\", \"t3tre9iwn1ih7dzp0fdfzm1bkg8rg7qmcdboz7otf51sl82g3er6s0fyvett420gtjim0hkwzashoh4aezfgvnapsvlqo9zyv04hib70\" ],\n    \"id\" : \"b5ll\"\n  }, {\n    \"quantity\" : 1467428959,\n    \"name\" : \"Diego Hand\",\n    \"promotionIds\" : [ \"1bo8ls7j4l3sxqmh755kzfei4banogkl5n1glbubow78lcya4h10zx13zvtwap7k73mhfsc1ju6sngy71fdkbxv4oikv9exo9po8txtbm1f2vnf74\", \"sllfh8npy5bodgtedu7jsxjy85p4l8b14hfnn6bv1mtit7xwjtbx5nd2666v54bzyb3otdei2ca2qep48f32mu9sffouxwwhk34ylnbc156dym4o0ovuu4o8g4z5xd61izk22wyqd386cfr2ntv6hvp6ht39eua9iwe7cpo0os2xsslk\", \"5fnrr4m7z4lenyhlo7tjozoyqpuxhk8jw4747wbj7cx807rkc4wdo3ykvgp37bqr1aa9l8ug7fjj0if27t6p5psap377vhxt0uh1ygnkpgvegduf7kcnf1tgxn6bhn131rqmxc22\", \"2ztckshpucdrho2a4einz00pq4d2bs8vg5bouiyv37liz5u1bddejcyl3ltkl7f8xb4itq1wgju1nzakovuurznuiifprpwbqlxwuaa2ixbopzkg1q4jux4x\", \"frb2m0864rbotnmhj2q\" ],\n    \"id\" : \"1i00\"\n  } ],\n  \"attributionToken\" : \"lxbulv2xgz4t0hf03jg8hzalfonaid8lchk2q6oynpmv5mowitl02cbnspo0qsiz32padu98wpumaplu7yweocd9t2jh\",\n  \"tagIds\" : [ \"i2z87qedo261dtvfmfcnh98akapbmuy55bgtfkdqe6ygof7djl5z23j7mryct0cwhcgv5n1h9ndirrsin2qobg9og0kguqew26ja37mxu53370gad5bb2039d8\", \"b84b2lc0kuuukp4uzllz0n854b81shqq3njig59k4pty8g210xl0ggxqosygkqv\", \"5wgl9f0n293hsfzwsnwco791eq91wr3dx2j22808x6a2bt50hpohwfdvh9aeorxqakdxj8o523xycqb5rflirvy8sr1fvjphvtqag9rmglxp6\", \"yqq1ach9n5zu72u1c4m3zvj30x8c88ta4yx2gyd9fv2aa11oloicpxvld9r5gs33q3b7\", \"nn7yov3mvin42n1uginnhmmxjnljfi2z961ts5mo6nyrsf1psz4is7idzbdmzy2l3i9a4hs8f3fk73rn6sglm\", \"vzegltt3o5j8cj4zfhx80l0\", \"84fa39kobm6vb387rx69vderi4mgs8iyigbcfj9c4bumhedrcau8qh0bgw55ctt3ycmmuyz5d2xd0ynxgybxfcr2nnh0nh360p2bq36e07b9cc30od4cubtnf6ha1a1hfiwk6wh019bad44gvuwtw46is0jmqjeo8gklurg65cjfbby9med38k5jl2eebk\" ],\n  \"userPseudoId\" : \"0lw5\",\n  \"pageInfo\" : {\n    \"referrerUri\" : \"https://web.example.mocklab.io/419009\",\n    \"pageCategory\" : \"tjgti3ulhxbzm2wei8llkj7n6c6nmh0vqvqp6mcpsibmyb0z0igegn0kgn\",\n    \"uri\" : \"https://web.example.mocklab.io/195853\",\n    \"pageviewId\" : \"30t9\"\n  },\n  \"promotionIds\" : [ \"q1hpkrcwq59u0sc3rk2l909q5o0pqtul0umzm4h3a7the4udn3vj9irjnpaq9e4iwpgr9klei02wynksg7njcx65a3nl00bx6qeg9eg9todgw2a9ladhtgederkqex98f9xzlcqf8sloo5163ei4mh3wcz1jsfd9y\" ],\n  \"eventType\" : \"rlli38ud0hebejkwbdg5kpphv7zwm3zd538b2mdgam5jdpvobraah969jx6e4359wkbubydouglifc1mxmncyz2hbc0jiiji8jrgwe1k3ba06vwrv8ezyuc\",\n  \"sessionId\" : \"d29p\",\n  \"transactionInfo\" : {\n    \"cost\" : 3.2089244325852097E37,\n    \"currency\" : \"MWK\",\n    \"tax\" : 2.4270789526264206E38,\n    \"discountValue\" : 2.6297689087900812E38,\n    \"value\" : 1.2729532662427081E38,\n    \"transactionId\" : \"p94p\"\n  },\n  \"filter\" : \"j1h3k7ykose1daqmbyq0p165ird4t2h8ss7ht2e7853vd1u4y4sntoukkermesvxliuyiigrxlm9fye0zqt346rete0d2a6m3uemzfg479b3jmd369ek5bnr5bnmmwyvdyg9a\",\n  \"directUserRequest\" : true,\n  \"searchInfo\" : {\n    \"offset\" : 1292433871,\n    \"searchQuery\" : \"ca61ryxdblupo0bjubcslxzai7bf37x546diy7ufqicovaiouoio66l147h4e3l5srrnsw1b92fk7pa0nf16qcsslzlrjy4dr9076kcddztkkod3qp9p0rkihfrgkfx3644u\",\n    \"orderBy\" : \"c8vcn5ktjt8an8yxjny573xvfhz375np6m1t88755hluw6sx\"\n  },\n  \"eventTime\" : \"2022-05-17T13:42:19.655321Z\",\n  \"completionInfo\" : {\n    \"selectedSuggestion\" : \"sunlki6doov5nmdungrfjewq8i5yzt11yytgbmn2ywui9p3wzgtzqba462zgja7crfx6brrhk2fudqlh7vvvw1e51y07dks4n5iqslk6e9yhc1tqopofdt3ojiqre57uyzowv1wanf4jh2duypl8i5brm6loco\",\n    \"selectedPosition\" : 1834563544\n  },\n  \"attributes\" : { },\n  \"panel\" : {\n    \"panelPosition\" : 700962903,\n    \"panelId\" : \"k9wo\",\n    \"displayName\" : \"Jacob Kunde\",\n    \"totalPanels\" : 403077446\n  },\n  \"mediaInfo\" : {\n    \"mediaProgressPercentage\" : 2.070850911312085E38,\n    \"mediaProgressDuration\" : \"gb9yt8sehta66ildfg06jctx9xwv0tmq6okd5m4pto2ifh6l0fe23tq1s8nac4on6ch6xdr8goi5wr5a0fre3gzkgiv5inn20dky37ogjk3v4d8pix0qsf1mqq87v4ryh6ln8438iys8p2r\"\n  }\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d40a8a27-d0a6-4efe-af9b-870bdf70004c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:19.655778Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "discoveryengine.projects.locations.dataStores.userEvents.write",
          "schema" : {
            "description" : "UserEvent captures all metadata information Discovery Engine API needs to know about how end users interact with customers' website.",
            "properties" : {
              "attributes" : {
                "additionalProperties" : {
                  "$ref" : "#/components/schemas/GoogleCloudDiscoveryengineV1betaCustomAttribute"
                },
                "description" : "Extra user event features to include in the recommendation model. These attributes must NOT contain data that needs to be parsed or processed further, e.g. JSON or other encodings. If you provide custom attributes for ingested user events, also include them in the user events that you associate with prediction requests. Custom attribute formatting must be consistent between imported events and events provided with prediction requests. This lets the Discovery Engine API use those custom attributes when training models and serving predictions, which helps improve recommendation quality. This field needs to pass all below criteria, otherwise an INVALID_ARGUMENT error is returned: * The key must be a UTF-8 encoded string with a length limit of 5,000 characters. * For text attributes, at most 400 values are allowed. Empty values are not allowed. Each value must be a UTF-8 encoded string with a length limit of 256 characters. * For number attributes, at most 400 values are allowed. For product recommendations, an example of extra user information is traffic_channel, which is how a user arrives at the site. Users can arrive at the site by coming to the site directly, coming through Google search, or in other ways.",
                "type" : "object"
              },
              "attributionToken" : {
                "description" : "Token to attribute an API response to user action(s) to trigger the event. Highly recommended for user events that are the result of PredictionService.Predict. This field enables accurate attribution of recommendation model performance. The value must be one of: * PredictResponse.attribution_token for events that are the result of PredictionService.Predict. * SearchResponse.attribution_token for events that are the result of SearchService.Search. * CompleteQueryResponse.attribution_token for events that are the result of SearchService.CompleteQuery. This token enables us to accurately attribute page view or conversion completion back to the event and the particular predict response containing this clicked/purchased product. If user clicks on product K in the recommendation results, pass PredictResponse.attribution_token as a URL parameter to product K's page. When recording events on product K's page, log the PredictResponse.attribution_token to this field.",
                "type" : "string"
              },
              "completionInfo" : {
                "$ref" : "#/components/schemas/GoogleCloudDiscoveryengineV1betaCompletionInfo"
              },
              "directUserRequest" : {
                "description" : "Should set to true if the request is made directly from the end user, in which case the UserEvent.user_info.user_agent can be populated from the HTTP request. This flag should be set only if the API request is made directly from the end user such as a mobile app (and not if a gateway or a server is processing and pushing the user events). This should not be set when using the JavaScript tag in UserEventService.CollectUserEvent.",
                "type" : "boolean"
              },
              "documents" : {
                "description" : "List of Documents associated with this user event. This field is optional except for the following event types: * `view-item` * `add-to-cart` * `purchase` * `media-play` * `media-complete` In a `search` event, this field represents the documents returned to the end user on the current page (the end user may have not finished browsing the whole page yet). When a new page is returned to the end user, after pagination/filtering/ordering even for the same query, a new `search` event with different UserEvent.documents is desired.",
                "items" : {
                  "$ref" : "#/components/schemas/GoogleCloudDiscoveryengineV1betaDocumentInfo"
                },
                "type" : "array"
              },
              "eventTime" : {
                "description" : "Only required for UserEventService.ImportUserEvents method. Timestamp of when the user event happened.",
                "format" : "google-datetime",
                "type" : "string"
              },
              "eventType" : {
                "description" : "Required. User event type. Allowed values are: Generic values: * `search`: Search for Documents. * `view-item`: Detailed page view of a Document. * `view-item-list`: View of a panel or ordered list of Documents. * `view-home-page`: View of the home page. * `view-category-page`: View of a category page, e.g. Home > Men > Jeans Retail-related values: * `add-to-cart`: Add an item(s) to cart, e.g. in Retail online shopping * `purchase`: Purchase an item(s) Media-related values: * `media-play`: Start/resume watching a video, playing a song, etc. * `media-complete`: Finished or stopped midway through a video, song, etc.",
                "type" : "string"
              },
              "filter" : {
                "description" : "The filter syntax consists of an expression language for constructing a predicate from one or more fields of the documents being filtered. One example is for `search` events, the associated SearchService.SearchRequest may contain a filter expression in SearchService.SearchRequest.filter conforming to https://google.aip.dev/160#filtering. Similarly, for `view-item-list` events that are generated from a PredictionService.PredictRequest, this field may be populated directly from PredictionService.PredictRequest.filter conforming to https://google.aip.dev/160#filtering. The value must be a UTF-8 encoded string with a length limit of 1,000 characters. Otherwise, an INVALID_ARGUMENT error is returned.",
                "type" : "string"
              },
              "mediaInfo" : {
                "$ref" : "#/components/schemas/GoogleCloudDiscoveryengineV1betaMediaInfo"
              },
              "pageInfo" : {
                "$ref" : "#/components/schemas/GoogleCloudDiscoveryengineV1betaPageInfo"
              },
              "panel" : {
                "$ref" : "#/components/schemas/GoogleCloudDiscoveryengineV1betaPanelInfo"
              },
              "promotionIds" : {
                "description" : "The promotion IDs if this is an event associated with promotions. Currently, this field is restricted to at most one ID.",
                "items" : {
                  "type" : "string"
                },
                "type" : "array"
              },
              "searchInfo" : {
                "$ref" : "#/components/schemas/GoogleCloudDiscoveryengineV1betaSearchInfo"
              },
              "sessionId" : {
                "description" : "A unique identifier for tracking a visitor session with a length limit of 128 bytes. A session is an aggregation of an end user behavior in a time span. A general guideline to populate the session_id: 1. If user has no activity for 30 min, a new session_id should be assigned. 2. The session_id should be unique across users, suggest use uuid or add UserEvent.user_pseudo_id as prefix.",
                "type" : "string"
              },
              "tagIds" : {
                "description" : "A list of identifiers for the independent experiment groups this user event belongs to. This is used to distinguish between user events associated with different experiment setups on the customer end.",
                "items" : {
                  "type" : "string"
                },
                "type" : "array"
              },
              "transactionInfo" : {
                "$ref" : "#/components/schemas/GoogleCloudDiscoveryengineV1betaTransactionInfo"
              },
              "userInfo" : {
                "$ref" : "#/components/schemas/GoogleCloudDiscoveryengineV1betaUserInfo"
              },
              "userPseudoId" : {
                "description" : "Required. A unique identifier for tracking visitors. For example, this could be implemented with an HTTP cookie, which should be able to uniquely identify a visitor on a single device. This unique identifier should not change if the visitor log in/out of the website. Do not set the field to the same fixed ID for different users. This mixes the event history of those users together, which results in degraded model quality. The field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. The field should not contain PII or user-data. We recommend to use Google Analytics [Client ID](https://developers.google.com/analytics/devguides/collection/analyticsjs/field-reference#clientId) for this field.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "1e8bef42-7073-4abf-96a0-46dbf7dec846",
    "name" : "Bulk import of User events. Request processing might be synchronous. Events that...",
    "request" : {
      "urlPath" : "/v1beta/uq4g92w3v4oqtmy84qc5mfgx11p3je2t2drtk9gsfjebuttpo54tbihc6i898vbak74scwnfyu4kb69fk3lw8znvw3mpmsq2nvd1bo2n70ycrwx7kq6lmbv522l35pkbsqhx810805go7o2xgtlxctg/userEvents:import",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Mrs. Ming Bruen\",\n  \"error\" : {\n    \"code\" : 829890792,\n    \"details\" : [ { }, { }, { }, { } ],\n    \"message\" : \"Nisi repudiandae dolores nemo dolorem possimus molestiae. Eum sit molestiae at officiis eaque et voluptatem. Perspiciatis magni est nobis quos. Rem voluptates repellendus est.\"\n  },\n  \"done\" : true\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1e8bef42-7073-4abf-96a0-46dbf7dec846",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:19.654055Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "discoveryengine.projects.locations.dataStores.userEvents.import",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/GoogleRpcStatus"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "b1abd8d9-4e79-42c9-b99d-0e755ce20700",
    "name" : "Writes a single user event from the browser. This uses a GET request to due to b...",
    "request" : {
      "urlPath" : "/v1beta/zvf7exhnvseptno2dgodb9y737ohbf91tdoxzgacy4o7omyk45it1axziehzpg3imyo2vibciq2pz5qic1gv8ym5w9cm921qvgedlylgrja7pcvcfm29f7msptzguevoro9/userEvents:collect",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"extensions\" : [ { }, { } ],\n  \"data\" : \"40hk6q8nvgu6d8yayle0rpkvn5nwt8ynwefx5fatnblhuagl46aj4huw2xgbl2gsa8ird5129umt220l6wh5pjznhg9ayoz09bquox9fm9cndke60fevrhk7xwa9gb63yymalez0q44orkv4wbqnk6wtyabwra6c8szfw520o2ubgny\",\n  \"contentType\" : \"ep32krmf5t7nsiwor8h1nfhmlaxzgnx3hhcrtwvw0wyiaeyrknbddv5blrezsk3o8pw3h3bmysps1cktpd4pc3dvn\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b1abd8d9-4e79-42c9-b99d-0e755ce20700",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:19.653855Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "discoveryengine.projects.locations.dataStores.userEvents.collect",
          "schema" : {
            "description" : "Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged.",
            "properties" : {
              "contentType" : {
                "description" : "The HTTP Content-Type header value specifying the content type of the body.",
                "type" : "string"
              },
              "data" : {
                "description" : "The HTTP request/response body as raw binary.",
                "format" : "byte",
                "type" : "string"
              },
              "extensions" : {
                "description" : "Application specific response metadata. Must be set in the first response for streaming APIs.",
                "items" : {
                  "additionalProperties" : {
                    "description" : "Properties of the object. Contains field @type with type URL."
                  },
                  "type" : "object"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "529ce4b0-ec0e-4665-8c4f-15c75f4e08ae",
    "name" : "Bulk import of multiple Documents. Request processing may be synchronous. Non-ex...",
    "request" : {
      "urlPath" : "/v1beta/t8gont7wry583sjej/documents:import",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Miss Mindi Metz\",\n  \"error\" : {\n    \"code\" : 994587388,\n    \"details\" : [ { }, { }, { } ],\n    \"message\" : \"Tenetur possimus ut aut vel ea. Quis placeat nihil quasi et earum. Quia eos neque et est voluptate.\"\n  },\n  \"done\" : true\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "529ce4b0-ec0e-4665-8c4f-15c75f4e08ae",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:19.653709Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "discoveryengine.projects.locations.dataStores.branches.documents.import",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/GoogleRpcStatus"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "924b7922-afbd-4b44-b98b-51e49878dfbe",
    "name" : "Creates a Document.",
    "request" : {
      "urlPath" : "/v1beta/1tcg259za8tuoda9rrcd7w50sx6t4wiye7unn9fqirzedxvpeim8wus1asuv6p13o4mm2nsbomevt8os0/documents",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"jsonData\" : \"2ucn06so7d47907jvxap74vqhuk6u7inasyil87yjgzr22cipnfiu2ro8tjgcqz3ibpexn6h7x7dmftrpg5pjv9kb4hm7ad7r3pujznc5v8fqjaijcmv0430cvjqxeiuj40uglb48obfaxnj7f2rlc2at7cr0f8ykekev525w3v9tuwu5pb9cw\",\n  \"schemaId\" : \"14al\",\n  \"name\" : \"Seth Gusikowski\",\n  \"id\" : \"axr6\",\n  \"parentDocumentId\" : \"0jix\",\n  \"structData\" : { }\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "924b7922-afbd-4b44-b98b-51e49878dfbe",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:19.653494Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "discoveryengine.projects.locations.dataStores.branches.documents.create",
          "schema" : {
            "description" : "Document captures all raw metadata information of items to be recommended or searched.",
            "properties" : {
              "id" : {
                "description" : "Immutable. The identifier of the document. Id should conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters.",
                "type" : "string"
              },
              "jsonData" : {
                "description" : "The JSON string representation of the document. It should conform to the registered schema or an INVALID_ARGUMENT error is thrown.",
                "type" : "string"
              },
              "name" : {
                "description" : "Immutable. The full resource name of the document. Format: `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document_id}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.",
                "type" : "string"
              },
              "parentDocumentId" : {
                "description" : "The identifier of the parent document. Currently supports at most two level document hierarchy. Id should conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters.",
                "type" : "string"
              },
              "schemaId" : {
                "description" : "Required. The identifier of the schema located in the same data store.",
                "type" : "string"
              },
              "structData" : {
                "additionalProperties" : {
                  "description" : "Properties of the object."
                },
                "description" : "The structured JSON data for the document. It should conform to the registered schema or an INVALID_ARGUMENT error is thrown.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "d6a00371-a0c6-4e5a-b4cf-6dea6780a6b5",
    "name" : "Gets a list of Documents.",
    "request" : {
      "urlPath" : "/v1beta/4zmmny9msb5ta3fkzcwyyqqdgs26y2etnr3cr0lukcuccfpigi9d8hrlw71343n5nosgfomchunaaii83iazm6yi4elzz81ufdny5cx8vaonsmp1lp8996x6uswhlky/documents",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"documents\" : [ {\n    \"jsonData\" : \"1ve1ifk7c6x7aclh8kl2knwbto24gdmk\",\n    \"schemaId\" : \"j5v0\",\n    \"name\" : \"Dion Rolfson\",\n    \"id\" : \"1j76\",\n    \"parentDocumentId\" : \"60i7\",\n    \"structData\" : { }\n  }, {\n    \"jsonData\" : \"lx9gciggmmfh36388s32tnzgfwx2sa6w8fe5pjfx3i3ypuz75zf6z0o4ibo8gtkko8a8t1elx68dd9f34vk9kxz7c57iwxx5r01wj2dmsz9senxsphfgvmbnxlz1wy44qo4j1k8fgsqs50nik4ezxylmtoeoavb62j2bnkzxp\",\n    \"schemaId\" : \"8675\",\n    \"name\" : \"Garth Wuckert MD\",\n    \"id\" : \"ibh4\",\n    \"parentDocumentId\" : \"0irv\",\n    \"structData\" : { }\n  }, {\n    \"jsonData\" : \"xfbjrne0wctcpyzhxfh5guz9je2pm4als6kpc0a099545v5mf03v7rxof34zznftvmo8du3ka8zmpu54ntw9j2yqq5yqravb51aitv41fyqjeuygcynj9z673gbm2kbha0ot6dbape2bgbupmqg5sr9yqbsj05sbqueyqzz4zxl6\",\n    \"schemaId\" : \"n8m3\",\n    \"name\" : \"Leontine Beahan\",\n    \"id\" : \"o4b3\",\n    \"parentDocumentId\" : \"7v46\",\n    \"structData\" : { }\n  }, {\n    \"jsonData\" : \"n2eviscst18hbatw52maiqb10ik6lrh1vfuc25ms7looro9kadxx8tseildrgabni6kqpecpppqwuuulca7ydt4zpbifowwpgx40xnumkhri494pk4lylbpzovo3lutv7gheo7c53ib5txouqg7gmfldwebv7e8pwh8xc0q427a2lukyw8chr5z7syeum4vcp6h\",\n    \"schemaId\" : \"v2eq\",\n    \"name\" : \"Nathanial Ritchie Sr.\",\n    \"id\" : \"p01n\",\n    \"parentDocumentId\" : \"o155\",\n    \"structData\" : { }\n  }, {\n    \"jsonData\" : \"su04ibi3lt1smb2ljtig1d42shbtvklfcxdf2do3niugkk4efs7p79wtk6gx4viitc0v08baawk7befphxutfn3j7jvoiepjusnombz6iv95mvxbqdppk5qamq8pdpb8g8cb6cdc08yhght5du1sdhnx0hmefbtu24zcuhntfiaked7p3udzvc4cpzpbvmkiw91\",\n    \"schemaId\" : \"go89\",\n    \"name\" : \"Courtney Balistreri\",\n    \"id\" : \"78hy\",\n    \"parentDocumentId\" : \"k8kv\",\n    \"structData\" : { }\n  } ],\n  \"nextPageToken\" : \"n6zj414a0v61iwc9p0qn67m1ctkarlqidjksmpo9yfvqpfh52c2dhoh64te9xt0ui85huvvak47gac5h0vwcvfga98mi747kv6ewzw4oyitmqr9jwgchxgw39ypiq78hjntzjbii11awtn35l71jb8vqc3zgmx955kgp\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d6a00371-a0c6-4e5a-b4cf-6dea6780a6b5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:19.653138Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "discoveryengine.projects.locations.dataStores.branches.documents.list",
          "schema" : {
            "description" : "Response message for DocumentService.ListDocuments method.",
            "properties" : {
              "documents" : {
                "description" : "The Documents.",
                "items" : {
                  "$ref" : "#/components/schemas/GoogleCloudDiscoveryengineV1betaDocument"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "A token that can be sent as ListDocumentsRequest.page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "5659aef5-7fb5-4cc4-9a1e-c4a0b0e44593",
    "name" : "Lists operations that match the specified filter in the request. If the server d...",
    "request" : {
      "urlPath" : "/v1beta/Pandora+Gibson+Sr./operations",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"operations\" : [ {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Scotty Wiegand\",\n    \"error\" : {\n      \"code\" : 1328355255,\n      \"details\" : [ { }, { }, { }, { }, { }, { } ],\n      \"message\" : \"Qui omnis libero numquam quo maxime asperiores. Pariatur aperiam id repellat qui accusantium exercitationem quo. Veniam voluptatibus temporibus eos. Vel unde qui non unde.\"\n    },\n    \"done\" : true\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Ariel Auer MD\",\n    \"error\" : {\n      \"code\" : 1686426110,\n      \"details\" : [ { }, { }, { }, { } ],\n      \"message\" : \"Quo fuga quisquam necessitatibus et aut impedit rerum. Exercitationem rerum omnis et sit. Culpa facilis asperiores ut vitae similique. Omnis velit amet qui. Voluptatum beatae numquam rerum.\"\n    },\n    \"done\" : true\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Calvin Blick\",\n    \"error\" : {\n      \"code\" : 1902003007,\n      \"details\" : [ { }, { }, { }, { }, { }, { } ],\n      \"message\" : \"Aut earum assumenda quas. Et consequuntur molestiae ut. Sunt nam natus velit. Non in id id est consectetur odit.\"\n    },\n    \"done\" : false\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Mrs. Jesusita Lueilwitz\",\n    \"error\" : {\n      \"code\" : 905507952,\n      \"details\" : [ { }, { }, { }, { }, { } ],\n      \"message\" : \"Voluptatem non dolorem minima repellendus beatae iste aut. Et rem tempore enim dolores et eius. Ut quam sed quae et facilis autem in. Ex minus et provident saepe.\"\n    },\n    \"done\" : true\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Franklyn Schaefer\",\n    \"error\" : {\n      \"code\" : 1719774365,\n      \"details\" : [ { }, { }, { }, { }, { }, { } ],\n      \"message\" : \"Officia distinctio non eum provident. Ipsa et nam aut et maiores voluptatibus adipisci. Quas sit voluptate eum.\"\n    },\n    \"done\" : true\n  } ],\n  \"nextPageToken\" : \"7i8eb7xaw3peghp5aj613s67vf57xcezp3116ln6t3ae1vsirun8u4vx1tbbyhi6vwe1r80uqq8a632g73aayf8xfkd6s9f8mn46qdfrxa746dskpcoe2iz\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5659aef5-7fb5-4cc4-9a1e-c4a0b0e44593",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:19.651683Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "discoveryengine.projects.operations.list",
          "schema" : {
            "description" : "The response message for Operations.ListOperations.",
            "properties" : {
              "nextPageToken" : {
                "description" : "The standard List next-page token.",
                "type" : "string"
              },
              "operations" : {
                "description" : "A list of operations that matches the specified filter in the request.",
                "items" : {
                  "$ref" : "#/components/schemas/GoogleLongrunningOperation"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "13c2ee7b-bdbb-4381-9c8a-7aabed38ded4",
    "name" : "Updates a Document.",
    "request" : {
      "urlPath" : "/v1beta/Bree+McClure+I",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"jsonData\" : \"rxi3g5niaal4sf60zhlfmn3vj1xdbrocx3val72do67mxmbuijvzkr1g9pihfy6cs6bod8j8c\",\n  \"schemaId\" : \"s2fv\",\n  \"name\" : \"Bernie Vandervort\",\n  \"id\" : \"4fv2\",\n  \"parentDocumentId\" : \"86sx\",\n  \"structData\" : { }\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "13c2ee7b-bdbb-4381-9c8a-7aabed38ded4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:19.650941Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "discoveryengine.projects.locations.dataStores.branches.documents.patch",
          "schema" : {
            "description" : "Document captures all raw metadata information of items to be recommended or searched.",
            "properties" : {
              "id" : {
                "description" : "Immutable. The identifier of the document. Id should conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters.",
                "type" : "string"
              },
              "jsonData" : {
                "description" : "The JSON string representation of the document. It should conform to the registered schema or an INVALID_ARGUMENT error is thrown.",
                "type" : "string"
              },
              "name" : {
                "description" : "Immutable. The full resource name of the document. Format: `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document_id}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.",
                "type" : "string"
              },
              "parentDocumentId" : {
                "description" : "The identifier of the parent document. Currently supports at most two level document hierarchy. Id should conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters.",
                "type" : "string"
              },
              "schemaId" : {
                "description" : "Required. The identifier of the schema located in the same data store.",
                "type" : "string"
              },
              "structData" : {
                "additionalProperties" : {
                  "description" : "Properties of the object."
                },
                "description" : "The structured JSON data for the document. It should conform to the registered schema or an INVALID_ARGUMENT error is thrown.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "f12e3d14-031c-46e2-b726-26cdc086c065",
    "name" : "Gets the latest state of a long-running operation. Clients can use this method t...",
    "request" : {
      "urlPath" : "/v1beta/Jermaine+Smith",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Efren Koss MD\",\n  \"error\" : {\n    \"code\" : 1304357117,\n    \"details\" : [ { } ],\n    \"message\" : \"Et repellendus distinctio quia est sit qui. Dolorem non tempore ut dolores voluptas sit et. Aperiam tenetur commodi dolorem est. Magni nam non nihil consequatur necessitatibus perspiciatis quisquam.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f12e3d14-031c-46e2-b726-26cdc086c065",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:19.650458Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "discoveryengine.projects.operations.get",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/GoogleRpcStatus"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "03697ce4-4d34-4d70-9cc0-ab4ecc38aee4",
    "name" : "Deletes a Document.",
    "request" : {
      "urlPath" : "/v1beta/Mel+Heathcote",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "03697ce4-4d34-4d70-9cc0-ab4ecc38aee4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:19.650157Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "discoveryengine.projects.locations.dataStores.branches.documents.delete",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    }
  } ]
}