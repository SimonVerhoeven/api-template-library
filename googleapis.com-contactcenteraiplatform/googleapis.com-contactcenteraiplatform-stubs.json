{
  "mappings" : [ {
    "id" : "2cabb4ee-5656-4201-89c1-5ef3aeb1c494",
    "name" : "Queries the contact center quota, an aggregation over all the projects, that bel...",
    "request" : {
      "urlPath" : "/v1alpha1/7cd9e9v1wyl98qrmjquu4p1tg9bjy4scfszs6bwrimuofuwxwn6vo29jctjiktsq6rkbjzryl3d4l9keyiv95ub5t85ok6jkvtahexezb4kow6ort968sufalwy0qg68g3cjod9e4itd7uuq0tsdcyjgmbbinrl5v3qoeqtye322ytql0fjj9usdpoijiraqdbcwvo:queryContactCenterQuota",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"contactCenterCountLimit\" : 1469763810,\n  \"contactCenterCountSum\" : 2012940349\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2cabb4ee-5656-4201-89c1-5ef3aeb1c494",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:11:10.747858Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.queryContactCenterQuota",
          "schema" : {
            "description" : "Represents a quota for contact centers.",
            "properties" : {
              "contactCenterCountLimit" : {
                "description" : "Reflects the count limit of contact centers on a billing account.",
                "format" : "int32",
                "type" : "integer"
              },
              "contactCenterCountSum" : {
                "description" : "Reflects the count sum of contact centers on a billing account.",
                "format" : "int32",
                "type" : "integer"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "ee0092d3-de2f-4227-9868-3071f885b646",
    "name" : "Creates a new ContactCenter in a given project and location.",
    "request" : {
      "urlPath" : "/v1alpha1/yojy1d77agpowio7s1exihk298b2m12l1q8turumrzen7m3v0w18um6t07ag4iw8avpzr0q64qg22hw14cem8fxos3s1ts1wjn7cr5fosp7lauufq6lw73fua6dsoal96zwtq9ckdpnd9e6sw8a8sb4penp9hh92c5ux42tqpg4ddl3v/contactCenters",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Quincy Gutmann DDS\",\n  \"error\" : {\n    \"code\" : 1173549592,\n    \"details\" : [ { }, { } ],\n    \"message\" : \"Sapiente repudiandae doloremque doloremque saepe dolor maxime rerum. Reprehenderit laudantium nesciunt sed ipsa veniam labore assumenda. Aut est natus at.\"\n  },\n  \"done\" : true\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ee0092d3-de2f-4227-9868-3071f885b646",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:11:10.747753Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.contactCenters.create",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "7ef72884-f93d-4608-8402-a75a961f04c2",
    "name" : "Lists ContactCenters in a given project and location.",
    "request" : {
      "urlPath" : "/v1alpha1/ot3nx8sx78wj9mv8h8zpvpav2zn7nh4ct7nr8/contactCenters",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"contactCenters\" : [ {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Vanda Brown DDS\",\n    \"updateTime\" : \"2022-08-19T17:54:10.741907Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_3XLARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"9jjrr2z9i0hjupakdd8j\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/613967\",\n      \"entityId\" : \"j71r\",\n      \"userEmail\" : \"wcqwjljqdkkyt34kg35o39ccvv93x3cqeree43vnoki8uhjnr4hmuyf030ur23ivjvaefwm6tu7rsz2jy\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/309373\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/172642\",\n      \"rootUri\" : \"https://web.example.mocklab.io/974138\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/026518\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Lueilwitz\",\n      \"givenName\" : \"Hermina\"\n    },\n    \"createTime\" : \"2022-06-03T16:33:10.742493Z\",\n    \"name\" : \"Mr. Cecille Nienow\",\n    \"userEmail\" : \"vf6i789gypm3ysx\",\n    \"state\" : \"STATE_TERMINATING_FAILED\",\n    \"customerDomainPrefix\" : \"c2xixhx8tn9y42519kzjchs0d3c01cz38ufhqfz1s471q6nfe56gsy7\"\n  }, {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Lester Bashirian\",\n    \"updateTime\" : \"2023-01-02T16:18:10.742648Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_3XLARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"ml1qml8g88et75ewv95024c912fqqzcx5ssq1ulp1mmmcwvnae09l1ht5q1e0u53mk068gslkhaelh0pl5qie44c\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/587839\",\n      \"entityId\" : \"737g\",\n      \"userEmail\" : \"9vpiou4xz6d4ni3x3f2ksraxgkiq0r1mbw76pb3v9uaf9zchklvw5qnkt6ylv0xcgrs43h8y50m6f9drkaw0fbmxam750doehlosowi2g2e84\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/962018\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/513912\",\n      \"rootUri\" : \"https://web.example.mocklab.io/963145\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/825599\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Christiansen\",\n      \"givenName\" : \"Tanya\"\n    },\n    \"createTime\" : \"2022-06-01T14:22:10.74317Z\",\n    \"name\" : \"Anthony Morar DVM\",\n    \"userEmail\" : \"w7t1bdivj91faewbtgboh8c2d56y3rbjouaaikeh144riytiwt1notgbg2ow8e2evx6st32buoa8ipjr78\",\n    \"state\" : \"STATE_UNSPECIFIED\",\n    \"customerDomainPrefix\" : \"61bvuj8gr1f2k9h1a8fkscjbgn4du1gq10016nfwhgjh4v8jjdi296bwsr4y8vk3btj86rgi0fn9cnuh8yerca35ql1fwq63lchkllpr7duv5\"\n  }, {\n    \"ccaipManagedUsers\" : true,\n    \"displayName\" : \"Sherron Klein\",\n    \"updateTime\" : \"2022-11-01T17:07:10.743324Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_3XLARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"1yn3opqwcptdw9zwmqkp2aapnhji5mpxvpkdfnikp399119sqd0w4lw3osxrzvgopac5xcol399z5cq0a1mytdf1zt5kua9d6q82c8odtind4wznl62jveabpo1uubrvv4l1p3n3onp1mnkmlzr1t\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/585743\",\n      \"entityId\" : \"bdt3\",\n      \"userEmail\" : \"vv9vw57g6foru5xvql962mkyp62r0ec90zy9mjk58f7ig3r15miu15chpbb604u8wr5fw9x8r8iqfx224vci7xyc4jd3ng7cw4cjulwov40hfoxulqc0vftf1j1e1i2prihfhhjie5utbrdkk8zblqd9wzqwm3bamhs67xyu3xhd\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/833075\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/595244\",\n      \"rootUri\" : \"https://web.example.mocklab.io/132149\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/614459\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Ledner\",\n      \"givenName\" : \"Clifton\"\n    },\n    \"createTime\" : \"2022-06-18T17:58:10.743852Z\",\n    \"name\" : \"Berry Kuhlman\",\n    \"userEmail\" : \"8ux1z84rbq0dhcsykm2o9pqkyp0z8emuwh9ginvem2p6dv75of98wlvatydtke0mx60qy2ury0jxnsgnu1i2ecttvj91h0c0ytf1omtow2e5bxmivawajlqsl6\",\n    \"state\" : \"STATE_FAILED\",\n    \"customerDomainPrefix\" : \"yznxsfxolo27gzlynh7z0sf5uywt1ju67ki32l1zefgdgqr29vbtdiv1p5begw0a1so22bpm4hltbf2qymdtpqdjvkkq6\"\n  }, {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Mrs. Lynna Harber\",\n    \"updateTime\" : \"2022-11-12T14:45:10.744012Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_XLARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"dwmhkoo51ovec32ikjuyzh63tew1d4cmd5mgpea58shw3nj1rvh9aojr23ezpaty8anhvvvyny4088e27p57j1xrvariosxeh28q9d31gg06ziyem5gck4kqts4ljw9akj64832eov\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/833216\",\n      \"entityId\" : \"63y3\",\n      \"userEmail\" : \"j6ve3mogno3w2zsdw5zonjd6zcfr3fv6u17txjldqo13tfxinx\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/279813\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/002959\",\n      \"rootUri\" : \"https://web.example.mocklab.io/480379\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/978193\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Rice\",\n      \"givenName\" : \"Stefani\"\n    },\n    \"createTime\" : \"2023-01-20T17:04:10.744514Z\",\n    \"name\" : \"Renda Zboncak PhD\",\n    \"userEmail\" : \"rmrwg7fht6fzy9jx171eukmkt1g8qytv0ta1q6lmytl2ovd\",\n    \"state\" : \"STATE_FAILED\",\n    \"customerDomainPrefix\" : \"kuy6bhpjffrj2vmcenzsaw5it3cf3qs8wyu2bhhv4x1girep5f0cvh8a71agzc5i2fdjrdwwzwpnbhlcb1rfjhkdpqkeyy4gi21dbth7iseg6ggi60515qw0hdhblzljsydgkxmzvsk72kf2k5w6eb5n1sh5o3vy\"\n  }, {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Armando Johnston MD\",\n    \"updateTime\" : \"2022-03-16T15:26:10.744665Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"INSTANCE_SIZE_UNSPECIFIED\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"bohzuoah8c5e2r3qpz639r6kzg3uypaih0w8y3f02l4rkubg3kvo0d6bzauxf25axcaq\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/026980\",\n      \"entityId\" : \"kdp5\",\n      \"userEmail\" : \"93w7f1admja3yj5kcho9jg3tuqp4dw86d1i77mbml477k3g2a5h6bfn6cudvs1z3e6ryhgr8jtr79asr7ko3sc8y247wcd4065fohevvfh0ell89t4bt5ln1xvfy6hsxj7jng6yza49gd71lz8jcy0kftbu6dh3x96dpxxx4ouee4qubw4lm\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/663759\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/762913\",\n      \"rootUri\" : \"https://web.example.mocklab.io/234520\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/099564\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Gottlieb\",\n      \"givenName\" : \"Patria\"\n    },\n    \"createTime\" : \"2022-05-17T18:05:10.745174Z\",\n    \"name\" : \"Royal Macejkovic\",\n    \"userEmail\" : \"clwvqz9oj7eohxdqdo4zh25yn7djsvwh2wpn3r2gsaov7ftqu0lvx93ayghqrkde0qo0zzbo2a0g416dh\",\n    \"state\" : \"STATE_TERMINATED\",\n    \"customerDomainPrefix\" : \"qmglos0pyufu7a1e1izxqkrlab7ehc9mdgh5ftnj3t3f9mbs601wgxykj2m22o5my6r\"\n  }, {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Scot Langosh\",\n    \"updateTime\" : \"2022-06-21T14:59:10.745327Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_XLARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"gf3vlbdn3qe5do5awmph1lpunz01nmjbjzt4b42uab91kjnwqghhcblxr8xbz16v680br8n63159q64jo0bh6msfjkuq\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/984395\",\n      \"entityId\" : \"4b29\",\n      \"userEmail\" : \"20xox1ao00yjexo444el6tp3430dqnqoio1w9fqipji3uf4xj8dygu95bklmkgwe11ccr3aujqm79jyr0ow1vrzlw9n2itarxp5m3e6bdfgb4f1l3g\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/110454\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/574401\",\n      \"rootUri\" : \"https://web.example.mocklab.io/200082\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/996758\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Nitzsche\",\n      \"givenName\" : \"Lola\"\n    },\n    \"createTime\" : \"2022-06-02T16:34:10.745848Z\",\n    \"name\" : \"Randolph Ebert\",\n    \"userEmail\" : \"ycsksw88bzf6nsw4ulo7ckdfg0c443faipeavlrcc7spvg9brbngabh45vpfhybi1qf3vu08htyl6fp6ek\",\n    \"state\" : \"STATE_DEPLOYING\",\n    \"customerDomainPrefix\" : \"gph0ru1ncc6x0lzq7olqxgpuaj9huuc3suufkvql4ddv4x8sz2psy9z0bamd6krlc9ec10j9ak3udqya0u5i4fanutyftlsfn80\"\n  }, {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Ernie Grant\",\n    \"updateTime\" : \"2022-05-06T15:30:10.74602Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_XLARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"vg3i3etbhy6yvcdolfcuk5vu8hf2l8y4stp9e4a4h93gc6z2ulg9vnf\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/002453\",\n      \"entityId\" : \"hwkz\",\n      \"userEmail\" : \"7ys5vavosn4r91n5g241qb3buxlf2j2jkmumn81cymqpil16f46qit6ya5wpwatbac85bn29lh3rpo6h0r7woytd1g0km90jfht\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/941020\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/745965\",\n      \"rootUri\" : \"https://web.example.mocklab.io/900278\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/415061\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Bergstrom\",\n      \"givenName\" : \"Kelvin\"\n    },\n    \"createTime\" : \"2022-08-26T15:49:10.746523Z\",\n    \"name\" : \"Barney Dietrich\",\n    \"userEmail\" : \"ypm\",\n    \"state\" : \"STATE_DEPLOYED\",\n    \"customerDomainPrefix\" : \"1b546l805w0bmiy06z13fl9z89e35b6w1783ht2dvyemnh9s2swhw4pwk86fsb11yehem0839o20op1qzuw3a9io6qo\"\n  }, {\n    \"ccaipManagedUsers\" : true,\n    \"displayName\" : \"Sharita Williamson\",\n    \"updateTime\" : \"2022-12-27T17:23:10.746672Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"INSTANCE_SIZE_UNSPECIFIED\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"3l65kq2wov0r66862irnl42u2hu28cwzuf1ivqa754tk7sjkcwryg0hgb9t79ozqoue39fxaex1257v5uun0jfdgdu8z9g8rsxuabdnrzdx98ky72tf0ppy4i21fbzq24tsphcj8wc0vbb9gzwcfwl769mffsjabr0oh27ikx73u3ojygodo0xlt18ji3ucvxt2tn0sz\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/773732\",\n      \"entityId\" : \"pwi1\",\n      \"userEmail\" : \"xaksd8siwit2f9uqw7lkv9f0krwu4u0hniinzcw5avpwqn96h2gjlj2hetaqneb20x3fdlkh98poehmoo6c69dj9r9ireidyejblohclt5azshno1zh8czmyg8hloz\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/092295\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/925094\",\n      \"rootUri\" : \"https://web.example.mocklab.io/744953\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/298327\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Weber\",\n      \"givenName\" : \"Stephane\"\n    },\n    \"createTime\" : \"2022-12-24T15:15:10.747187Z\",\n    \"name\" : \"Mr. Hettie Kirlin\",\n    \"userEmail\" : \"8ncgupf07q4cdze0id6fgadnlbz553y0idt2ivob9z5j2u1f7j1o1q1o3zmdgzkswavvja0\",\n    \"state\" : \"STATE_TERMINATING_FAILED\",\n    \"customerDomainPrefix\" : \"kz110pqkervay2q5wy5ai07adefdem0re8n6d6wn5zkqvjm\"\n  } ],\n  \"unreachable\" : [ \"iykymr80ac7vhehan88yhlxsjvm6vxt3okggh79d85cyo0ryrba6t1hvitfqm78tz90vn3b2991dni8k6yc0qu30xdqavj8wf0u6d3fovpn9z5s48fwklpmr4azo21ppkjcc21dy84knz\", \"str99cedrvg5cg7fgp6hymx6yj81jbor565yzylkr16t6bbp3ot78wl6ozvx6klw71eha6mhksmm6gem00zuiic115ej8l7y8fb4m6l7ylduors2jdd29uw\" ],\n  \"nextPageToken\" : \"xs9aayhy6rrhf9iccrto8yy7yf8j2g7v0hqmvlwfcfnj6bfnopcn6ow80o4pzulxuezpy3adfr16zdg2sshwnarv7bwexxmvuc\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7ef72884-f93d-4608-8402-a75a961f04c2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:11:10.747488Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.contactCenters.list",
          "schema" : {
            "description" : "Message for response to listing ContactCenters",
            "properties" : {
              "contactCenters" : {
                "description" : "The list of ContactCenter",
                "items" : {
                  "$ref" : "#/components/schemas/ContactCenter"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "A token identifying a page of results the server should return.",
                "type" : "string"
              },
              "unreachable" : {
                "description" : "Locations that could not be reached.",
                "items" : {
                  "type" : "string"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "1c4a9388-63a6-47ee-89b5-a40bfadbd74c",
    "name" : "Starts asynchronous cancellation on a long-running operation. The server makes a...",
    "request" : {
      "urlPath" : "/v1alpha1/Johnetta+Keeling:cancel",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1c4a9388-63a6-47ee-89b5-a40bfadbd74c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:11:10.741802Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.cancel",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "b46607dc-4501-4b30-821d-b6a11e79253c",
    "name" : "Lists operations that match the specified filter in the request. If the server d...",
    "request" : {
      "urlPath" : "/v1alpha1/Peter+Kessler/operations",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"operations\" : [ {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Grady Corkery\",\n    \"error\" : {\n      \"code\" : 877349847,\n      \"details\" : [ { } ],\n      \"message\" : \"Eos quia qui eos eos autem est aut. Et facere et pariatur a reiciendis ipsum non. Laborum labore laudantium dolorem sit aspernatur velit.\"\n    },\n    \"done\" : false\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Dr. Romona Johns\",\n    \"error\" : {\n      \"code\" : 35909911,\n      \"details\" : [ { }, { }, { }, { }, { } ],\n      \"message\" : \"Mollitia praesentium harum qui id quaerat exercitationem. Voluptate odio dolore quia itaque. Ullam qui exercitationem excepturi est. Pariatur laboriosam ullam.\"\n    },\n    \"done\" : true\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Ms. Christian Dicki\",\n    \"error\" : {\n      \"code\" : 1706927884,\n      \"details\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"message\" : \"Voluptatem dignissimos rem officia. Modi sunt optio numquam adipisci sint. Eveniet ea aut quas qui.\"\n    },\n    \"done\" : true\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Marcellus Grant\",\n    \"error\" : {\n      \"code\" : 273443818,\n      \"details\" : [ { }, { }, { }, { }, { } ],\n      \"message\" : \"Odio et asperiores. Nesciunt iste autem qui maiores voluptatibus. Voluptas voluptatem cumque ducimus.\"\n    },\n    \"done\" : false\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Corey Padberg IV\",\n    \"error\" : {\n      \"code\" : 1503623858,\n      \"details\" : [ { }, { } ],\n      \"message\" : \"Eius et doloremque laborum rerum sed at. Magni qui qui eveniet consequatur. Nam rerum cupiditate. Minus aliquam illum sunt. Explicabo ut quo odit et ad amet debitis.\"\n    },\n    \"done\" : false\n  } ],\n  \"nextPageToken\" : \"287q1og3csx9nna6eoqk8lkhw3rkivjaab8342bgbsnumm5wazchhc7poarszxkmrb8llz7kduxheaojgeyeao7fggzo8ayd8duezczdkuii5er3i0kmubvbcf5c2qifa4pnqtd5aleu72d7656am341b6wcctozqozei1\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b46607dc-4501-4b30-821d-b6a11e79253c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:11:10.741723Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.list",
          "schema" : {
            "description" : "The response message for Operations.ListOperations.",
            "properties" : {
              "nextPageToken" : {
                "description" : "The standard List next-page token.",
                "type" : "string"
              },
              "operations" : {
                "description" : "A list of operations that matches the specified filter in the request.",
                "items" : {
                  "$ref" : "#/components/schemas/Operation"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "1252b1c4-12b2-46ed-9c56-17dc8f6b1575",
    "name" : "Lists information about the supported locations for this service.",
    "request" : {
      "urlPath" : "/v1alpha1/Dovie+Nienow/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"nextPageToken\" : \"p9arin4sydqq5jp8hfj1sgskes9u6m3ohf8s5bpz1pjd6csgdo32gsozo5h8px1nhba3ng4zboqbw2xeygt4mnut87g7rjapl1lc5m7jqpjjitlaps12pngoa5byb5wvb4hjv7gwthl7q9if1c\",\n  \"locations\" : [ {\n    \"metadata\" : { },\n    \"displayName\" : \"Krystal Strosin\",\n    \"locationId\" : \"5p34\",\n    \"name\" : \"Mrs. Suanne Schuster\",\n    \"labels\" : { }\n  }, {\n    \"metadata\" : { },\n    \"displayName\" : \"Eusebio Gulgowski\",\n    \"locationId\" : \"fs2u\",\n    \"name\" : \"Loriann Rempel V\",\n    \"labels\" : { }\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1252b1c4-12b2-46ed-9c56-17dc8f6b1575",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:11:10.741054Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.list",
          "schema" : {
            "description" : "The response message for Locations.ListLocations.",
            "properties" : {
              "locations" : {
                "description" : "A list of locations that matches the specified filter in the request.",
                "items" : {
                  "$ref" : "#/components/schemas/Location"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "The standard List next-page token.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "924b3521-8922-4aaa-8eca-f9928e236dd3",
    "name" : "Updates the parameters of a single ContactCenter.",
    "request" : {
      "urlPath" : "/v1alpha1/Randal+Keeling",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Renato Hills V\",\n  \"error\" : {\n    \"code\" : 792559224,\n    \"details\" : [ { }, { }, { }, { } ],\n    \"message\" : \"Nihil asperiores vel dolor in est qui omnis. Reprehenderit rerum qui ea omnis est illo recusandae. Omnis ut eligendi explicabo.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "924b3521-8922-4aaa-8eca-f9928e236dd3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:11:10.74056Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.contactCenters.patch",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "fb7b86f5-aa3f-4849-8a28-79fdc90713df",
    "name" : "Gets the latest state of a long-running operation. Clients can use this method t...",
    "request" : {
      "urlPath" : "/v1alpha1/Reed+Reilly",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Ronnie Parisian\",\n  \"error\" : {\n    \"code\" : 528747617,\n    \"details\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n    \"message\" : \"Laboriosam nam pariatur qui officia pariatur. Iste esse qui suscipit quod eaque et ut. Maxime eveniet magni ut modi perferendis voluptatum rerum.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fb7b86f5-aa3f-4849-8a28-79fdc90713df",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:11:10.740332Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.get",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "1fefcebd-c8b5-4b53-9361-8314e8ddfd7b",
    "name" : "Deletes a long-running operation. This method indicates that the client is no lo...",
    "request" : {
      "urlPath" : "/v1alpha1/Mr.+Lilliam+Kling",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1fefcebd-c8b5-4b53-9361-8314e8ddfd7b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:11:10.740022Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.delete",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    }
  } ]
}