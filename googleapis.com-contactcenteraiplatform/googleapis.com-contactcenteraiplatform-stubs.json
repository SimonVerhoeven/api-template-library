{
  "mappings" : [ {
    "id" : "30ecc2a4-aab5-3832-862f-8982d83d37c1",
    "name" : "Queries the contact center quota, an aggregation over all the projects, that bel...",
    "request" : {
      "urlPath" : "/v1alpha1/hmqrvx3ibmm23vffdqphn3vtq1i9exl5xwln4xlaesfryxe524bbipn0qc7be93xo7xtlaxa1y6c1fg07vpa1vougr9nw92tld2:queryContactCenterQuota",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"contactCenterCountLimit\" : 905723259,\n  \"contactCenterCountSum\" : 831984508\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "30ecc2a4-aab5-3832-862f-8982d83d37c1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.queryContactCenterQuota",
          "schema" : {
            "description" : "Represents a quota for contact centers.",
            "properties" : {
              "contactCenterCountLimit" : {
                "description" : "Reflects the count limit of contact centers on a billing account.",
                "format" : "int32",
                "type" : "integer"
              },
              "contactCenterCountSum" : {
                "description" : "Reflects the count sum of contact centers on a billing account.",
                "format" : "int32",
                "type" : "integer"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 0
  }, {
    "id" : "9391ccce-798a-312d-aa44-ea42a1f1b70b",
    "name" : "Creates a new ContactCenter in a given project and location.",
    "request" : {
      "urlPath" : "/v1alpha1/2czndmwh0r5ili2ut4gi/contactCenters",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Marilu Schamberger PhD\",\n  \"error\" : {\n    \"code\" : 257709512,\n    \"details\" : [ { }, { }, { } ],\n    \"message\" : \"Placeat distinctio pariatur. Consequatur quia esse odio. Amet sed nesciunt ullam aut recusandae in autem. Dolorem id sint veritatis et et exercitationem omnis.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9391ccce-798a-312d-aa44-ea42a1f1b70b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.contactCenters.create",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 1
  }, {
    "id" : "b9eccf43-dd1d-36a8-9165-9a82cedbaa16",
    "name" : "Lists ContactCenters in a given project and location.",
    "request" : {
      "urlPath" : "/v1alpha1/dvsoe7favlmxbu1z9jxy71vtk11375gj8havq9vzn1mvvvo9jgvaz6y3wejkkrocbzideaajsgu4lfcscnnylb7rf6z50eupf0f43gu8igifxihwfb5xu8i113twsu2h6cekthth95blu8eh4hbod5yaajxfnni4h81q7bg/contactCenters",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"contactCenters\" : [ {\n    \"ccaipManagedUsers\" : true,\n    \"displayName\" : \"Miss Eugene Hauck\",\n    \"updateTime\" : \"2022-06-17T15:27:52.051089Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_SMALL\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"kiw5id5bpspynu4mzags39qoc36tr4t0ljb3zwl5ogl6v945dqim4wiy8u0yvnw8a2saqsu5pu5toy7yyjszfi19esv41q3tz0kelpsu65d3\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/016688\",\n      \"entityId\" : \"6i8t\",\n      \"userEmail\" : \"ue9a392cj2qua4ubc3uhz8lq0qyg3813w17xyqoor\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/681814\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/174400\",\n      \"rootUri\" : \"https://web.example.mocklab.io/804069\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/444739\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Windler\",\n      \"givenName\" : \"Tim\"\n    },\n    \"createTime\" : \"2022-05-27T13:23:52.051655Z\",\n    \"name\" : \"Christi Mayert\",\n    \"userEmail\" : \"cryyt5ia8vcu633g2m8a8r4nvc\",\n    \"state\" : \"STATE_FAILED\",\n    \"customerDomainPrefix\" : \"ungjzi7qf4whxa25t1qww2tbqd2gu93fas7n5ib02w188g6v0cvccpf5l9xundi7d1f8syj36zjmczs29ij45386ebchv8cvrhb0q2hnewjv43wnusp31uk5pxm1tqrlpm4hweg36w9vms9xh663uc3ibbgqygx0ih6\"\n  }, {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Nelson Balistreri\",\n    \"updateTime\" : \"2022-10-14T15:40:52.051812Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_MEDIUM\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"jkvgm3d9p6k50cig1bwa9ptsrh22scm19t6c45leebmy68n0v3qaohfzx3o1rhk9dcr5en9qa440omrwfac9d39i2b281hwb9p7ffjjuv0wcn6ck7mm2gxsnwcm2y2qnvphaw\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/049473\",\n      \"entityId\" : \"a696\",\n      \"userEmail\" : \"wtbjkn9sbusuu1k44bbnj3ttrbn9br2o7el1gno3vmjtdr79bw30nij3utaoew7qr\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/313737\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/083821\",\n      \"rootUri\" : \"https://web.example.mocklab.io/461777\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/440432\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Muller\",\n      \"givenName\" : \"Mallory\"\n    },\n    \"createTime\" : \"2022-05-09T14:52:52.052308Z\",\n    \"name\" : \"Mr. Fernando Bahringer\",\n    \"userEmail\" : \"ckwgrlrd2gq5spzqxn2siupogsi53g3vwx32p27prygtj68cm74wmwot5xz9chbgftt0l1moe25ig3sdvpmh62cqvw5cnvlvi91umjsx4y18xg8ee0h8es909y1i6b0f7k4f1j1xomlv0r\",\n    \"state\" : \"STATE_FAILED\",\n    \"customerDomainPrefix\" : \"sapaqpgejb7tsejbvajk1laseb1x4xj4gq98owwkf9s6m4z\"\n  }, {\n    \"ccaipManagedUsers\" : true,\n    \"displayName\" : \"Miles Bashirian\",\n    \"updateTime\" : \"2022-09-14T15:39:52.052459Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_3XLARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"lul7u833q3aiw8jfaq6dqiyn908dt3ovnk\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/802312\",\n      \"entityId\" : \"pb33\",\n      \"userEmail\" : \"2a1cca87lgrh3ka1mohcq9\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/024898\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/473039\",\n      \"rootUri\" : \"https://web.example.mocklab.io/546458\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/608417\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Schowalter\",\n      \"givenName\" : \"Darron\"\n    },\n    \"createTime\" : \"2022-04-21T14:05:52.05295Z\",\n    \"name\" : \"Despina Bergstrom\",\n    \"userEmail\" : \"immbtpaysq924i7vwm44bb524atusn8aajrxcydmpvbhlf49q8z98uhcot65ta4v18g2sjetvkh9wpso453c1jh27iaaj4x1\",\n    \"state\" : \"STATE_TERMINATING\",\n    \"customerDomainPrefix\" : \"srnndyc1kkdto2ciweovup2as2qdbrxtmktglu7ad18l3are\"\n  }, {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Larae Walsh\",\n    \"updateTime\" : \"2022-07-25T13:38:52.0531Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"INSTANCE_SIZE_UNSPECIFIED\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"jdboojhjbtg6suvqfi2z2g88nz3glmrm07ruzlxjyflylhuhgvl6lh7bgdhumdix9o6n7sjvaayv1hfqam1y8u9gju9qibjfhigcxrzb6i7rwfojtvawalrrpfsggywo90ynhv8mq81l1fbdab925e10heqt6rmorhn2\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/225526\",\n      \"entityId\" : \"49y8\",\n      \"userEmail\" : \"dq2l6b5au9i\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/811588\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/547186\",\n      \"rootUri\" : \"https://web.example.mocklab.io/438456\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/727734\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Langosh\",\n      \"givenName\" : \"Sydney\"\n    },\n    \"createTime\" : \"2023-01-05T14:02:52.053591Z\",\n    \"name\" : \"Vance Nicolas\",\n    \"userEmail\" : \"qqmm\",\n    \"state\" : \"STATE_FAILED\",\n    \"customerDomainPrefix\" : \"2l4rxfyhva45cxgaeeas6mej52u9xws0z3uhecj61edb7zpagyns5ggcd6v7akvm36nx08z4orrwcv2j8gp9buwgoxafvhwbvn3um53qcl9zq2dpyuxtnw55iqb3079fssjatgzgpv31afs8auewqpdt7anrcmwy8ku79l3ajllhrwdo\"\n  }, {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Dennis Smitham\",\n    \"updateTime\" : \"2022-12-08T14:36:52.053738Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_2XLARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"i6jpz9xonmp9nehj221h52qqx10vdfpw7\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/835256\",\n      \"entityId\" : \"p339\",\n      \"userEmail\" : \"wmtqsitj0pswrmon0ucafkca\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/863902\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/457352\",\n      \"rootUri\" : \"https://web.example.mocklab.io/792816\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/157650\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Huel\",\n      \"givenName\" : \"Amado\"\n    },\n    \"createTime\" : \"2022-03-19T16:00:52.054223Z\",\n    \"name\" : \"Randolph O'Reilly\",\n    \"userEmail\" : \"gf5vva4g2sumia2wqfr2qfvnxdwq9g5gg1k4fncv8cmz5kqz1xv4waxvucywdyvjisytzcluwubm0rnakp1qmux5cuvlwydwnfw4awms9yhfr6te4ski6n74r0yi4wtjera3zne9wb3yalsuoid5qhj1fxsoaxoq8vfbjq3ymymugstvc63sj8p7x2dt9g26bp\",\n    \"state\" : \"STATE_DEPLOYED\",\n    \"customerDomainPrefix\" : \"fhgeov7j1yo2pentpdef88py4xkho1n59z1m6o26pm8h7zu70oon1f2qjmftdt10eekrk2hv9o72ovw9koxaup4i0u69vm6t1ywasdgjkc7zo18e50tmiivbjihnp31sgr6jqhqystiuqmgvyz1qan1kcuc1g4fcy44js377rcr0i01nto7exu8a\"\n  }, {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Mr. Kandi Weber\",\n    \"updateTime\" : \"2022-03-17T15:02:52.054376Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_3XLARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"6yn37cb\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/302350\",\n      \"entityId\" : \"5e4a\",\n      \"userEmail\" : \"ob89xhvf6opll94qwsd2jmn4jn9yk4klgtoa9p8u1h4zkl4zbbkqg8l63jib82bxid7ds3747f9j977opolunr7ob0ehq1r4hiej7bl06omw681titnzgltonip8cc492wkjzdp49vbfpjm7j67ozjf5wg7tg9n70f3qigz7ps2\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/464517\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/300299\",\n      \"rootUri\" : \"https://web.example.mocklab.io/892899\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/241900\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Williamson\",\n      \"givenName\" : \"John\"\n    },\n    \"createTime\" : \"2022-09-27T15:07:52.054879Z\",\n    \"name\" : \"Tiffanie Krajcik\",\n    \"userEmail\" : \"i9hjsbgjngshj2asmp4rcwvj36v1tum3ss1r21vn7zz9lt17794kda7x026a26s15in1xl8kfs2rhrqs185nv5au3\",\n    \"state\" : \"STATE_TERMINATING\",\n    \"customerDomainPrefix\" : \"y7ljfk6u6gt5tym9xgpi5iz3hl9tu031x3j83e9y7g7f0aabbmk6911gx9st4w2hebvbuvi1cuc\"\n  }, {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Giovanni Reichel\",\n    \"updateTime\" : \"2022-06-02T14:52:52.055024Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_MEDIUM\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"tamxfu\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/767684\",\n      \"entityId\" : \"14t1\",\n      \"userEmail\" : \"s7i8orjz2nfydtneu6c725u7d85dmggg21cb7iv9q7yexkpgrjb8hr6xszlox69vw9tvksuhfar8gnmpjg8ltys48kkzsvfzi4763df79yhl5uzioe3ydxxvgb5npur1r9k6tse8v4fxnhjhig0m1er6qbu8o60skpu3g\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/802787\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/190272\",\n      \"rootUri\" : \"https://web.example.mocklab.io/270857\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/002777\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Runolfsdottir\",\n      \"givenName\" : \"Johnette\"\n    },\n    \"createTime\" : \"2022-05-09T15:49:52.055477Z\",\n    \"name\" : \"Janelle Stroman\",\n    \"userEmail\" : \"ch56jg1eaf6em4dbdj3rctxlc6vpvdnllsupbvlsvh90yazk8c4hqxe6tnuiijq9msxkmk1hphkuyiotkdq9slm5al2yjr8c7n29wkh6lda7hiay\",\n    \"state\" : \"STATE_TERMINATED\",\n    \"customerDomainPrefix\" : \"02wzpcggdgc8mjl9tjsxrh9dhn9sbivhs43c3zzr9yw63utmdt37dnedvp3bvjnfbnza64e1c2h7fyiin69g380ewbtvkci3obtnri1efn1nx9wa5izls0cjvtcs1qjo8bzutajxen\"\n  }, {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Chad Keeling DVM\",\n    \"updateTime\" : \"2022-07-13T16:24:52.055623Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_MEDIUM\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"xwp0f29uuqs9scgsboqr6rchiti4a6jdir4h58n6ikev5tmh09rv\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/988303\",\n      \"entityId\" : \"2qma\",\n      \"userEmail\" : \"3z4ggzk85oih3fritsy4j17vaidq9bs2hgb1ai3ypu15egtxbuidczoljfmmvx9x4omwfvai\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/842685\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/897977\",\n      \"rootUri\" : \"https://web.example.mocklab.io/037784\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/516655\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Carter\",\n      \"givenName\" : \"Chastity\"\n    },\n    \"createTime\" : \"2023-02-20T15:08:52.056101Z\",\n    \"name\" : \"Micah Daugherty\",\n    \"userEmail\" : \"ufxd9wt0psu5hn1aw9y0opvv0tfvvh6xjxeph9clewdje15ptztmza9k6zgtrd9zqjgazw6ol13nm54vmuc6x0omkgsrsjenx16iedjerfkwphbhtfkoj1k5i0dndy9nei1bj8nim555ewz28dd8\",\n    \"state\" : \"STATE_DEPLOYING\",\n    \"customerDomainPrefix\" : \"rc4iuf33u\"\n  } ],\n  \"unreachable\" : [ \"c7kqm\", \"eguvxpn1l0czl3aaedr5lyshq7uemk8g4ch97bsmsk0p2if1tavey25xd86cdazzxyomu0lrszpw9tlakeepn8bo2mld9u4qcufjhb906tssasjoczrazyqt41p5ogkwh94wmlct4rp89et3w8rfxxazv6\", \"xqbjvwgmgmsbnv5h4hl9ckqlm5xk39bjkj8ii6ulj4198p1b8s50u10czfipjos3akli1zg420ru1vjdoljaurj01tqq\", \"0ildklg7yr77pb8dful94cirw0smvbrj8cc4k3czgk0phvlplzqavw6jd6rklrsyyd3sdq88447i4adbnclylvs0ma7b5sbv5sfthyu0jdgwyqb5k7e2rp2484y3mehj57szfw1jltapv53f5yvwtvvpy7dikcgxf81ve3qeh1zkavhj5eyef5gn11ch72fu\", \"3nag1rbs7klzbnbxejsst62tqfl8rpufxsaeabe6v3s10wnyh6hiam9v17d14w7bfsovnx2uth6eq7injr5yyuwxjhu49nsw1evvqg5bw7i87cbdj84j4hcugc7t2jnlsrkl9zl14tda1nk2le4xib77klx0rbvvaufbpws9xyqrl10hlkerak2fscvxr\", \"2760ciqsytqr9oigu77p5qearru5rccr9nyhzj5kbwcf59ibis45zb9n97q5lpqr0cjhcnggbs0zion519n2mxxajk7zqmny8sejtguf8c9nv38lm8d3ma6awlzmo92b43xpdxslrphjooi87luhb8tnlnrnx0jehu\", \"lgw4nw3oq94f99r872yxnyj3zbq6lhfnyxs2rqsj762ezyxol7tpyakoy7xiubpnezg6r9xgdu2oppcys0ni3d4c3g7nfcb32nxcfwccjgnpsd6twgw26lba7pwga09io9uoujwlt\", \"pbveynluit6wkhwb80nbktaqko8xwuju4sv8xa1rr9qeb5gj2phxz07dig8zuraty2b6hbfhofn50k3dxhjx1soz2hi0c1h0b69xezjkgwrqwegd8xe4yg89s7himgxjv0u9wo4l4zr963zg09fh3jvqclr\" ],\n  \"nextPageToken\" : \"k0899bx1g767ok0b8pr6k1crx9rejffc7aoo\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b9eccf43-dd1d-36a8-9165-9a82cedbaa16",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.contactCenters.list",
          "schema" : {
            "description" : "Message for response to listing ContactCenters",
            "properties" : {
              "contactCenters" : {
                "description" : "The list of ContactCenter",
                "items" : {
                  "$ref" : "#/components/schemas/ContactCenter"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "A token identifying a page of results the server should return.",
                "type" : "string"
              },
              "unreachable" : {
                "description" : "Locations that could not be reached.",
                "items" : {
                  "type" : "string"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 2
  }, {
    "id" : "590465d2-f292-31e9-81d6-15c22fdde466",
    "name" : "Starts asynchronous cancellation on a long-running operation. The server makes a...",
    "request" : {
      "urlPath" : "/v1alpha1/Dick+Conn:cancel",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "590465d2-f292-31e9-81d6-15c22fdde466",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.cancel",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 3
  }, {
    "id" : "de6217bd-1800-38fa-8304-7b32e29b4ce7",
    "name" : "Lists operations that match the specified filter in the request. If the server d...",
    "request" : {
      "urlPath" : "/v1alpha1/Wilbert+Romaguera/operations",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"operations\" : [ {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Cole Trantow\",\n    \"error\" : {\n      \"code\" : 1547903473,\n      \"details\" : [ { }, { }, { }, { }, { }, { } ],\n      \"message\" : \"Vel consequuntur in et est sed cumque et. Occaecati vitae rerum pariatur. Natus culpa est enim.\"\n    },\n    \"done\" : true\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Mrs. Ray Kovacek\",\n    \"error\" : {\n      \"code\" : 644509418,\n      \"details\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"message\" : \"Ab neque voluptatem. Itaque dolores voluptas sed enim ea consequatur eum. Ut autem omnis maiores quaerat. Vel eaque aut non esse illum omnis. Nemo quis aut pariatur blanditiis.\"\n    },\n    \"done\" : true\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Jeffery Marks IV\",\n    \"error\" : {\n      \"code\" : 1504783970,\n      \"details\" : [ { }, { }, { }, { }, { }, { } ],\n      \"message\" : \"Et voluptatum et. Sint quos ratione ipsam in incidunt. Dolores molestias sed illo ratione quo.\"\n    },\n    \"done\" : true\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Dong Tromp MD\",\n    \"error\" : {\n      \"code\" : 225215817,\n      \"details\" : [ { }, { } ],\n      \"message\" : \"Et expedita rerum dolore et velit. Aut porro qui esse sunt. Ut voluptatem aperiam at quibusdam.\"\n    },\n    \"done\" : false\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Aubrey Tromp\",\n    \"error\" : {\n      \"code\" : 1988936585,\n      \"details\" : [ { }, { }, { }, { }, { }, { } ],\n      \"message\" : \"Soluta possimus placeat pariatur a consequatur debitis est. Tempora aliquid dolor illo. Alias ullam repellat quod repellendus sunt ipsum.\"\n    },\n    \"done\" : false\n  } ],\n  \"nextPageToken\" : \"1psgll15l7nczemojfcd6qjfojdk3lxaj19oywghdml2gfq1fcleubibhsi810fkap08uovxj3qmhl08z7udorfsqtkzr3450xcr3hzx0lq\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "de6217bd-1800-38fa-8304-7b32e29b4ce7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.list",
          "schema" : {
            "description" : "The response message for Operations.ListOperations.",
            "properties" : {
              "nextPageToken" : {
                "description" : "The standard List next-page token.",
                "type" : "string"
              },
              "operations" : {
                "description" : "A list of operations that matches the specified filter in the request.",
                "items" : {
                  "$ref" : "#/components/schemas/Operation"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 4
  }, {
    "id" : "d78552bc-6262-31af-8486-e01669a77703",
    "name" : "Lists information about the supported locations for this service.",
    "request" : {
      "urlPath" : "/v1alpha1/Charlie+Daniel+III/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"nextPageToken\" : \"0q7x7q8ur2ub3kbci0rg8arcnm4cndz7z4jr7arsncpnchghec3eekvwry7vln325ru1c7kinzt7\",\n  \"locations\" : [ {\n    \"metadata\" : { },\n    \"displayName\" : \"Karine Sanford Sr.\",\n    \"locationId\" : \"7ao6\",\n    \"name\" : \"Oren Boyer MD\",\n    \"labels\" : { }\n  }, {\n    \"metadata\" : { },\n    \"displayName\" : \"Dr. Mack Stroman\",\n    \"locationId\" : \"w6bt\",\n    \"name\" : \"Elnora Kutch\",\n    \"labels\" : { }\n  }, {\n    \"metadata\" : { },\n    \"displayName\" : \"Paris Turcotte\",\n    \"locationId\" : \"qxjb\",\n    \"name\" : \"Cinthia Cassin II\",\n    \"labels\" : { }\n  }, {\n    \"metadata\" : { },\n    \"displayName\" : \"Felisa Langworth\",\n    \"locationId\" : \"6e3o\",\n    \"name\" : \"Simon Prosacco PhD\",\n    \"labels\" : { }\n  }, {\n    \"metadata\" : { },\n    \"displayName\" : \"Newton Lind\",\n    \"locationId\" : \"6n0h\",\n    \"name\" : \"Jc Beier\",\n    \"labels\" : { }\n  }, {\n    \"metadata\" : { },\n    \"displayName\" : \"Tiesha Okuneva\",\n    \"locationId\" : \"5504\",\n    \"name\" : \"Micheline Smith\",\n    \"labels\" : { }\n  }, {\n    \"metadata\" : { },\n    \"displayName\" : \"Edwardo Lueilwitz\",\n    \"locationId\" : \"484u\",\n    \"name\" : \"Gail Hickle Sr.\",\n    \"labels\" : { }\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d78552bc-6262-31af-8486-e01669a77703",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.list",
          "schema" : {
            "description" : "The response message for Locations.ListLocations.",
            "properties" : {
              "locations" : {
                "description" : "A list of locations that matches the specified filter in the request.",
                "items" : {
                  "$ref" : "#/components/schemas/Location"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "The standard List next-page token.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 5
  }, {
    "id" : "e58a499a-f5e1-31ff-9e9f-b8de692f56be",
    "name" : "Updates the parameters of a single ContactCenter.",
    "request" : {
      "urlPath" : "/v1alpha1/Martina+Abernathy+DDS",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Ray Bergnaum\",\n  \"error\" : {\n    \"code\" : 1672512931,\n    \"details\" : [ { }, { }, { } ],\n    \"message\" : \"Nihil nam quis autem sit provident. Est eligendi quo doloremque minus tempore. Fuga culpa quisquam accusamus et minus.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e58a499a-f5e1-31ff-9e9f-b8de692f56be",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.contactCenters.patch",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 6
  }, {
    "id" : "8ea9828e-93e7-3004-b17e-8a4da6eac7ec",
    "name" : "Gets the latest state of a long-running operation. Clients can use this method t...",
    "request" : {
      "urlPath" : "/v1alpha1/Miss+Lindsy+Cassin",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Andree Pollich II\",\n  \"error\" : {\n    \"code\" : 959104608,\n    \"details\" : [ { }, { }, { }, { }, { } ],\n    \"message\" : \"Quis quia necessitatibus officia minus aut. Iste deserunt id ipsum. Et dolorem quis animi dignissimos tenetur doloremque. Aut illo laudantium amet.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8ea9828e-93e7-3004-b17e-8a4da6eac7ec",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.get",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 7
  }, {
    "id" : "5016751a-ca4a-306b-a496-1d47f556041c",
    "name" : "Deletes a long-running operation. This method indicates that the client is no lo...",
    "request" : {
      "urlPath" : "/v1alpha1/Cristal+Moore+IV",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5016751a-ca4a-306b-a496-1d47f556041c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.delete",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 8
  } ]
}