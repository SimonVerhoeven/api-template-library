{
  "mappings" : [ {
    "id" : "f817ca34-bc28-4562-b6ba-11c61ad717b8",
    "name" : "Queries the contact center quota, an aggregation over all the projects, that bel...",
    "request" : {
      "urlPath" : "/v1alpha1/1gd96wz9jy7s2s79fxtxrjg40xe14a76ohlp6ebli:queryContactCenterQuota",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"contactCenterCountLimit\" : 1295928236,\n  \"contactCenterCountSum\" : 496446053\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f817ca34-bc28-4562-b6ba-11c61ad717b8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:55:25.122905Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.queryContactCenterQuota",
          "schema" : {
            "description" : "Represents a quota for contact centers.",
            "properties" : {
              "contactCenterCountLimit" : {
                "description" : "Reflects the count limit of contact centers on a billing account.",
                "format" : "int32",
                "type" : "integer"
              },
              "contactCenterCountSum" : {
                "description" : "Reflects the count sum of contact centers on a billing account.",
                "format" : "int32",
                "type" : "integer"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "f55a3c64-ecff-4936-afc2-b8958897c6cf",
    "name" : "Creates a new ContactCenter in a given project and location.",
    "request" : {
      "urlPath" : "/v1alpha1/q88hfxz6f7/contactCenters",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Ahmad Crooks\",\n  \"error\" : {\n    \"code\" : 1623359961,\n    \"details\" : [ { }, { }, { }, { }, { }, { } ],\n    \"message\" : \"Ut quaerat expedita ipsam illum quis saepe et. Earum et dolore expedita sed. Quia mollitia dolor alias expedita ut. Occaecati voluptas perspiciatis et corrupti modi et corporis. Amet libero dolorum si\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f55a3c64-ecff-4936-afc2-b8958897c6cf",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:55:25.122828Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.contactCenters.create",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "7a92a848-e4a1-4e96-ac0f-3330d7d88c40",
    "name" : "Lists ContactCenters in a given project and location.",
    "request" : {
      "urlPath" : "/v1alpha1/04t9dnsb1heyyp6tlismonphqfshhhq3cnv23iv6vynd7clw0ucmubd/contactCenters",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"contactCenters\" : [ {\n    \"ccaipManagedUsers\" : true,\n    \"displayName\" : \"Jack Connelly\",\n    \"updateTime\" : \"2022-06-04T16:59:25.119868Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"INSTANCE_SIZE_UNSPECIFIED\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"98kd21vsbv0j8s2ql356gj\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/020278\",\n      \"entityId\" : \"h2pk\",\n      \"userEmail\" : \"5atsxse86qv3g6mxcrnnyuu3g6ev5bvvkos7jdif3cbm7jyq924adr2sa46e2m6nqsjz330rvn23ckce4w6c34qo9rjlkqs3q6d3nc787uyhfot4re84zm9r3yechfggp5a0d64qzjpx1j0c3nkkrjwlmd3afc3tittjkjl5iqxb\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/710244\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/110490\",\n      \"rootUri\" : \"https://web.example.mocklab.io/714344\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/599446\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Crist\",\n      \"givenName\" : \"Diego\"\n    },\n    \"createTime\" : \"2023-01-06T17:08:25.120401Z\",\n    \"name\" : \"Chu Macejkovic\",\n    \"userEmail\" : \"22ggut6bufhk5fjkky9fji0jakom2vf7iovvrlo5bajdponr7jlea6hwjd9hzq2g4syfcm3u41bstmpqjf4hqcwz6mxhgc4k7u5\",\n    \"state\" : \"STATE_FAILED\",\n    \"customerDomainPrefix\" : \"31gfz5gnypg8gju61usca2c430bb5gn0zouruubaalhc5h6nzx4okqu0dr765830g49ojvd0jwvuho8izwyqcxmpa7cn9zel16rw4gs52em8qszmmy\"\n  }, {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Pricilla Waelchi V\",\n    \"updateTime\" : \"2022-04-14T15:10:25.12056Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_3XLARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"szm3ch3k6mc7tuv58x4pweugfeqhxffn1km02mqpp71g63xyqttlu64xflsj715ehod8qoba66o83kuskze9i5uvk02uwpbx31lmyefg8hbgvsr8fjetipw9v1h3iarnsdficdd2p\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/424220\",\n      \"entityId\" : \"3k9u\",\n      \"userEmail\" : \"98z0jopfki5vw9x0rev03qf7x35t97lp70p68m7a274ilw40kynk8o56bdsuououihklcludy63vatjbmhhvd1ggkq1j46kvlza4zedyq2kcnhi33v6ji6gsdjj\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/567049\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/617878\",\n      \"rootUri\" : \"https://web.example.mocklab.io/277007\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/503457\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Pollich\",\n      \"givenName\" : \"Ronald\"\n    },\n    \"createTime\" : \"2022-12-01T16:04:25.121052Z\",\n    \"name\" : \"Epifania Abbott\",\n    \"userEmail\" : \"tpuujxqlt6ks3f5osq2j\",\n    \"state\" : \"STATE_TERMINATING_FAILED\",\n    \"customerDomainPrefix\" : \"rv8ouo4att36ah217k3u6tvs50elsozcu5sfeolcpwu2u1w1z0gmkzzc3nqpdgt5k43uqshfu4pzeirb83qszeg83e376fettw57islczjrv0saz7xtyl73n\"\n  }, {\n    \"ccaipManagedUsers\" : true,\n    \"displayName\" : \"Johnny Bernhard\",\n    \"updateTime\" : \"2022-12-26T18:47:25.121201Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_SMALL\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"hb0cqdn86k9wq36xfu62vcurhjj566gx1w7hil3emq9tv4ur46x4tsyvtwqszzyjj0b96aka2spqei3edcom9ah023fgoarbbs\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/769421\",\n      \"entityId\" : \"3iw4\",\n      \"userEmail\" : \"i33m8x0lskbd6e5ybzx7zp0wp83saxh76809705luyskcmafgsmxa3kcwotouetpphub8ts5fxvyqxediyvmfdgng8bxfgdgea2ulleb72mzoscl070dck0giabzjwz\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/304784\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/897527\",\n      \"rootUri\" : \"https://web.example.mocklab.io/058563\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/832539\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Schamberger\",\n      \"givenName\" : \"Adolfo\"\n    },\n    \"createTime\" : \"2022-04-04T18:16:25.121691Z\",\n    \"name\" : \"Gianna Kuphal III\",\n    \"userEmail\" : \"s4mzfabernmosarti37y4gvq2ge1h7dtf8g3grnefmqfrm7p3jmp8u8ausmusb\",\n    \"state\" : \"STATE_TERMINATING\",\n    \"customerDomainPrefix\" : \"blhodajb927ne8xlu9p9e7veffztok4p0f4qvgyv1bv2bodeug2secd7ploitbnktwwzvcpehmyt6yzcxzvsnty1mbe9oftyp63fdjk1fkolewnzxeo5gvxm9qe2tgomuu8u60kvqqm4dtdy78lfuojj\"\n  }, {\n    \"ccaipManagedUsers\" : true,\n    \"displayName\" : \"Marlin Ullrich\",\n    \"updateTime\" : \"2022-08-12T18:22:25.121844Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"INSTANCE_SIZE_UNSPECIFIED\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"tlwleoowo3qukobncpynqkjwd3pdyc0oczh5oj96vfydtjec00xp4d291ru8f4dc9gn96kih98q8bwmog8zgeebvvdegrw5llo\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/604648\",\n      \"entityId\" : \"cags\",\n      \"userEmail\" : \"jkkbggiaf640vqmfcwuri10ecmdjm4g0kpoir0t6qlp670z3ica9f8gk4u0igoj5jgmcjvou8jesyf017gg8w5nkgzgr5n4e3e8x7sek98r94cqp40iruuawq96i6eje2q440p8fk97aia4zd9umg1n\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/212284\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/485668\",\n      \"rootUri\" : \"https://web.example.mocklab.io/462874\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/025773\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Hettinger\",\n      \"givenName\" : \"Abdul\"\n    },\n    \"createTime\" : \"2022-07-23T18:44:25.122333Z\",\n    \"name\" : \"Mrs. Mario Gusikowski\",\n    \"userEmail\" : \"85axhhd8psjtjb8s0j9r9rukidid3mn4dxrjiak3388azfau8kd2plfs3hp5ie2apwbsjdvqwo7aqc7qhjdy7bocik6uoj60k0wyu7zbl6\",\n    \"state\" : \"STATE_TERMINATED\",\n    \"customerDomainPrefix\" : \"td028h68vua1q0fbc7qeqmuy6pn722kq2ohihzxagf8x1zpob5kwzy\"\n  } ],\n  \"unreachable\" : [ \"hruhc6m0vsy9heib04198test5oa5ixhg41ro0\", \"6cv025l9n93nfdma9t2l45zh7a0hliloas6qsyh8w1lomzq6s0tyvn7jcvuzdj1wkv5bxaeuhgstggv5rgp\", \"f04gaeuilelrlvk8ag2u1a0hy5ycukqbdcn8t0fdlyhbaceslqnrn0notvcn7ox3lhlgmpeu9kd69w32c7mcoxnkbmnux90sssaq8f7lltg6qriq4wyj4qla6mg13a31p5hcb8tosho4\", \"vowhneltez463jnp4lwznt7k0ffc27dw55tc3rkj7d77l5lr9r838hukp9kl6v0aae33vulppoxp9bie0\", \"lqxlymftsjpihcwz\", \"ng7qn91k667msmonr1uuklptx9lovfrap6v3m49514ykvs3gnyex6opngw36gxopbk0e0vhhtjsiq3bel1pa1wpyfo5p2a3u25icyaggojjb6q3nm1379bkvqgmi711ai2p5apav4z5x5vz\", \"o82lz6a7n2o5l70txmsffeqse7lk4jxozi4ak4w07v7v7v6cc5e6zbxf9i128bvt4sboai8ub4a8brwd72yguqneljlrwtm821hrrgquduz3k9q9ul45rc74jvkgz4rnjmkrpjkcit9o2hz89awprlnq9aiy6ht6pkj4oa8nedwjid0lks3cl\", \"na5dkm7kr10bz63lkjy1vk7ofltlkz4ivfl3a6z6qxs0fcw7fq1pn0i5ngyptmif6dn2pnryx225mho4n8mtncrqeiyjbhauk8dsm2mlwauxrfe1cprle6qcak32h0li14pbsilm2b83b806ioid8lm28un1783gt82t8noqpj4xw\" ],\n  \"nextPageToken\" : \"qn8fkbux0evqaly8hdi87z77t\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7a92a848-e4a1-4e96-ac0f-3330d7d88c40",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:55:25.12261Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.contactCenters.list",
          "schema" : {
            "description" : "Message for response to listing ContactCenters",
            "properties" : {
              "contactCenters" : {
                "description" : "The list of ContactCenter",
                "items" : {
                  "$ref" : "#/components/schemas/ContactCenter"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "A token identifying a page of results the server should return.",
                "type" : "string"
              },
              "unreachable" : {
                "description" : "Locations that could not be reached.",
                "items" : {
                  "type" : "string"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "765374e2-86a5-40d3-bbdd-e1ebb47e0e71",
    "name" : "Starts asynchronous cancellation on a long-running operation. The server makes a...",
    "request" : {
      "urlPath" : "/v1alpha1/Beverly+Mohr:cancel",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "765374e2-86a5-40d3-bbdd-e1ebb47e0e71",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:55:25.119776Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.cancel",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "eeef73b9-cad6-43dd-b0bc-065b7efa6123",
    "name" : "Lists operations that match the specified filter in the request. If the server d...",
    "request" : {
      "urlPath" : "/v1alpha1/Millard+Kilback/operations",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"operations\" : [ {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Shelly Bailey\",\n    \"error\" : {\n      \"code\" : 695408446,\n      \"details\" : [ { } ],\n      \"message\" : \"Doloribus rem maiores autem aut sit praesentium quidem. Iure rem quis facilis omnis. Consequatur beatae omnis magnam sunt mollitia asperiores. Velit magnam minus possimus rem velit. Accusantium qui se\"\n    },\n    \"done\" : true\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Gracia Metz\",\n    \"error\" : {\n      \"code\" : 1108808217,\n      \"details\" : [ { }, { }, { }, { }, { } ],\n      \"message\" : \"Eum aut maiores consequatur. Sed officiis architecto veritatis maiores sunt. Voluptatem harum ea.\"\n    },\n    \"done\" : false\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Emily Goyette\",\n    \"error\" : {\n      \"code\" : 2042178147,\n      \"details\" : [ { }, { }, { } ],\n      \"message\" : \"Sit voluptas quae non corporis autem odit quidem. Sint voluptatem quis. Nisi laboriosam aliquam incidunt ut impedit quo cupiditate.\"\n    },\n    \"done\" : true\n  } ],\n  \"nextPageToken\" : \"brxv09iwhkxv765o0rwv9qfxcpw07k1amsx13s57xptxassqvh2umgqlubl7kime53byty59exoatv5132hlg\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "eeef73b9-cad6-43dd-b0bc-065b7efa6123",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:55:25.119706Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.list",
          "schema" : {
            "description" : "The response message for Operations.ListOperations.",
            "properties" : {
              "nextPageToken" : {
                "description" : "The standard List next-page token.",
                "type" : "string"
              },
              "operations" : {
                "description" : "A list of operations that matches the specified filter in the request.",
                "items" : {
                  "$ref" : "#/components/schemas/Operation"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "f7ed94f1-7dac-4082-a78d-2dd2eccabf68",
    "name" : "Lists information about the supported locations for this service.",
    "request" : {
      "urlPath" : "/v1alpha1/Melda+Pollich+V/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"nextPageToken\" : \"0gkf3d6t62ok6v2zpdfnfrw85r0nvoye5pzy6k4hgml7gr4f02b8gf8p39iufkq5sfeulirnq7t4dffroygcl06jm632s1pn2q0jafpirm3bjszzlpou0ieamnui7xfjm9d9eccoz2pkscks9ios7aozn8s9ond94hm71rad30rz2xili97l6b0m21o52zx6dizjja\",\n  \"locations\" : [ {\n    \"metadata\" : { },\n    \"displayName\" : \"Avery Wintheiser\",\n    \"locationId\" : \"0168\",\n    \"name\" : \"Kendall Armstrong\",\n    \"labels\" : { }\n  }, {\n    \"metadata\" : { },\n    \"displayName\" : \"Zachariah Sipes\",\n    \"locationId\" : \"eft0\",\n    \"name\" : \"Yi Bradtke DVM\",\n    \"labels\" : { }\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f7ed94f1-7dac-4082-a78d-2dd2eccabf68",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:55:25.11928Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.list",
          "schema" : {
            "description" : "The response message for Locations.ListLocations.",
            "properties" : {
              "locations" : {
                "description" : "A list of locations that matches the specified filter in the request.",
                "items" : {
                  "$ref" : "#/components/schemas/Location"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "The standard List next-page token.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "f791d4ec-2c23-49d6-80da-e0ce4d85e320",
    "name" : "Updates the parameters of a single ContactCenter.",
    "request" : {
      "urlPath" : "/v1alpha1/Leanna+Kovacek",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Mirta Schinner\",\n  \"error\" : {\n    \"code\" : 140551911,\n    \"details\" : [ { }, { }, { }, { }, { } ],\n    \"message\" : \"Sed beatae laboriosam dolorem vel qui accusantium voluptatem. Illum voluptas natus recusandae deleniti alias. Sunt rerum commodi laborum. At at aut eius aspernatur.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f791d4ec-2c23-49d6-80da-e0ce4d85e320",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:55:25.118837Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.contactCenters.patch",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "525ba57f-5466-4b09-b632-0ff6fb23a6ae",
    "name" : "Gets the latest state of a long-running operation. Clients can use this method t...",
    "request" : {
      "urlPath" : "/v1alpha1/Clay+Considine",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Treva Koch\",\n  \"error\" : {\n    \"code\" : 66305514,\n    \"details\" : [ { }, { }, { } ],\n    \"message\" : \"Quo doloribus eaque maxime quas sit quos soluta. Quae voluptatem adipisci fugiat minima voluptates laborum. Dolore itaque omnis voluptas. Et sunt rem et est ipsam ipsa et.\"\n  },\n  \"done\" : true\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "525ba57f-5466-4b09-b632-0ff6fb23a6ae",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:55:25.118629Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.get",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "44cbc329-38f8-4c1a-8662-94e5fae94104",
    "name" : "Deletes a long-running operation. This method indicates that the client is no lo...",
    "request" : {
      "urlPath" : "/v1alpha1/Bennie+Lakin",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "44cbc329-38f8-4c1a-8662-94e5fae94104",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:55:25.118381Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.delete",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    }
  } ]
}