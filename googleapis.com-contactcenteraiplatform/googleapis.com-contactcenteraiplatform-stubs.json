{
  "mappings" : [ {
    "id" : "4d7937be-ed1c-418d-8d5c-8b3d3204e309",
    "name" : "Queries the contact center quota, an aggregation over all the projects, that bel...",
    "request" : {
      "urlPath" : "/v1alpha1/6tbipybiiozboopd5pq4848ikvn:queryContactCenterQuota",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"contactCenterCountLimit\" : 21496203,\n  \"contactCenterCountSum\" : 1433810284\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4d7937be-ed1c-418d-8d5c-8b3d3204e309",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T12:20:00.766152Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.queryContactCenterQuota",
          "schema" : {
            "description" : "Represents a quota for contact centers.",
            "properties" : {
              "contactCenterCountLimit" : {
                "description" : "Reflects the count limit of contact centers on a billing account.",
                "format" : "int32",
                "type" : "integer"
              },
              "contactCenterCountSum" : {
                "description" : "Reflects the count sum of contact centers on a billing account.",
                "format" : "int32",
                "type" : "integer"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 0
  }, {
    "id" : "2fdbde77-9162-405f-b58f-719b0e06902f",
    "name" : "Creates a new ContactCenter in a given project and location.",
    "request" : {
      "urlPath" : "/v1alpha1/pbdo3x14nf7mkxzmj14kitcmuufobjfwsg78jsu9aqn621668giv6in04d0qwmpvd9yf3g44cr26yugtiissuxhabpxma5cfbhnmxvne9j7vunhvjwpu3qjgfybtxivks55/contactCenters",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"David Volkman\",\n  \"error\" : {\n    \"code\" : 2040272467,\n    \"details\" : [ { }, { }, { }, { }, { } ],\n    \"message\" : \"Molestias amet blanditiis rerum enim exercitationem. Voluptas consequatur corrupti saepe. Neque non necessitatibus. Neque laboriosam magnam qui eveniet. Est quidem voluptatem iure et iure.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2fdbde77-9162-405f-b58f-719b0e06902f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T12:20:00.766058Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.contactCenters.create",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 1
  }, {
    "id" : "a8f2c909-e5d7-468d-a042-c9da586393eb",
    "name" : "Lists ContactCenters in a given project and location.",
    "request" : {
      "urlPath" : "/v1alpha1/w20m2u3do2ljja7mg3701c5aotb2fs9pvp3q1rwreubif9h9ervm16ldlioby815uuo330szjhojfgjuoux3q5rv2c6lcubk316i5alhafkio2n1lm8gq0zxsn07dl1po2hp7olkbol3yf0w8t9nf1pfu3vtce5rrdqqkje6mcq3s8xyft6app1lsg9v/contactCenters",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"contactCenters\" : [ {\n    \"ccaipManagedUsers\" : true,\n    \"displayName\" : \"Junko Brekke\",\n    \"updateTime\" : \"2022-06-08T11:39:00.763696Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_LARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"yrq3tdaboqsy3y5xdn4f2vf518l7bnul3qdvxd021s2ld0p7c3k7uamitqtg22nsxpbefw571nsoeppwitgszpm0u66gyrawsvzqi02z7u1xmx8kfplnf0cq3epqqsshkdd5krxkc7ubslk3caisq32dwo9s8qnc63nx7c81eju19vcqnp4ri7u0dsa\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/714358\",\n      \"entityId\" : \"104r\",\n      \"userEmail\" : \"7pth5rvxwc6is8mpkgs0pq2cdzih2xmbqwmpixhh7jjexakoglffxz6bh2tamxyri9f7mnfb14w6dmb1vvbep3rlaratrpo31c3g\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/421539\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/235969\",\n      \"rootUri\" : \"https://web.example.mocklab.io/052031\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/940834\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"VonRueden\",\n      \"givenName\" : \"Collen\"\n    },\n    \"createTime\" : \"2022-09-16T11:21:00.764271Z\",\n    \"name\" : \"Mrs. Jeannine Douglas\",\n    \"userEmail\" : \"3p7w6yyp52hsiv\",\n    \"state\" : \"STATE_DEPLOYED\",\n    \"customerDomainPrefix\" : \"u4tyzk3n7kxy41sy6am09ah80v5ip096r1e31s2h1noht714ronp07zrbphrbls3ad85qlnix6cfmro5obvp\"\n  }, {\n    \"ccaipManagedUsers\" : true,\n    \"displayName\" : \"Sherwood Cronin\",\n    \"updateTime\" : \"2023-01-25T08:21:00.76443Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_MEDIUM\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"x6ipeewjosv17ris\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/614383\",\n      \"entityId\" : \"17pi\",\n      \"userEmail\" : \"zkg71nlzcwieluq6zytj50fnf9zlv90feacn9g5cdhqan5uwtuo7rdz7ipk9zdqcje6yerd4ico2gf3sjxt69m0bywoyiezqb29btftuvlw9oygxmv6xauz8xrtkm2ea2a1mm0ces8uzhdvxmc6lyqjld6q3nrob8wibvfvlpwz8ed2crb2wuk97z1fzkstl5bk\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/695354\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/310241\",\n      \"rootUri\" : \"https://web.example.mocklab.io/325148\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/118463\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Gislason\",\n      \"givenName\" : \"Royce\"\n    },\n    \"createTime\" : \"2022-06-23T12:03:00.76493Z\",\n    \"name\" : \"Garland Kilback\",\n    \"userEmail\" : \"bmj8zea8ubwsxcrhxcb02drwmcx5x1m53o98gxwj5kc1w2d7mm12gjs03jy3l0wmmyxalbw0kbzqjskrrdohk6ke5xs3w98i79i\",\n    \"state\" : \"STATE_DEPLOYING\",\n    \"customerDomainPrefix\" : \"waeyr5xz\"\n  }, {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Charley Shields\",\n    \"updateTime\" : \"2023-01-29T10:07:00.765077Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"INSTANCE_SIZE_UNSPECIFIED\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"yic76kvdgvjyiaovw7z1tqgoufuov1bop7u8m96mogplpmfbh4m6yaeiof25l31jk20dahduyb9qyq33wqfcjw75r8dmqsrx0ndao\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/088174\",\n      \"entityId\" : \"zeki\",\n      \"userEmail\" : \"itkymsos5db51jj6bdarhdqdi152jv8q3xvum7gw2ywlryajcwxs7bf86cpj5qfea08of2tuqez11zg46k5gozuboeeyagpkze8p4kko6yzz\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/069716\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/349543\",\n      \"rootUri\" : \"https://web.example.mocklab.io/458193\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/960205\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Hammes\",\n      \"givenName\" : \"Burt\"\n    },\n    \"createTime\" : \"2023-02-19T08:27:00.765583Z\",\n    \"name\" : \"Keira Franecki\",\n    \"userEmail\" : \"k14a7s0i83lxhktq01j9rsqymmeocaq6o7cutrnuqsrx0ue2v6hfzt59wosgp9fvms9b9grtv1oe1ypudfd5c7f2dg1ow41gqzb6kn5pvlaimt3bryldh3\",\n    \"state\" : \"STATE_DEPLOYED\",\n    \"customerDomainPrefix\" : \"0h7qwf16pq2b2zn4zuhtbc1wu15bc7i8lz0vci9qzzqbpclyem7h82ezveedb2i4j9w4ikl07le06k700vqow9xiz2q2olnt6v6o2zw5dguyef5iue1oxbldspnus2f8n0r1wppsizltsarmvv9ql5ld2qp1u7p8xxiuntyepfn5i09\"\n  } ],\n  \"unreachable\" : [ \"pjqv0dljjyegvfw4mznqe4cpap9jwz1ptyue6p0bkj1ruc0jeygfa9fxyzv4waoeu47a08ksimzn3x6ihufgvig1xht96ul7xrmkep7cvdfmziwrk2q8m8n1wx0mes6lssi3vpqgiumz1porp69zrbgw8lwwqbtc980bc\" ],\n  \"nextPageToken\" : \"hxdokgoqa5oq2roddqbil7y17036fy66evvbw77pwm4ul7xvq1vqyzun73zvag7f8w5xzh6ffgytoceqe9dyxpcibwz5q4e3vx4up70ggi20v6k5tz6o8gb2ukf95sn\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a8f2c909-e5d7-468d-a042-c9da586393eb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T12:20:00.76583Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.contactCenters.list",
          "schema" : {
            "description" : "Message for response to listing ContactCenters",
            "properties" : {
              "contactCenters" : {
                "description" : "The list of ContactCenter",
                "items" : {
                  "$ref" : "#/components/schemas/ContactCenter"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "A token identifying a page of results the server should return.",
                "type" : "string"
              },
              "unreachable" : {
                "description" : "Locations that could not be reached.",
                "items" : {
                  "type" : "string"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 2
  }, {
    "id" : "1d9e829d-4558-4774-9f65-a50e338696d8",
    "name" : "Starts asynchronous cancellation on a long-running operation. The server makes a...",
    "request" : {
      "urlPath" : "/v1alpha1/Scot+Abshire+MD:cancel",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1d9e829d-4558-4774-9f65-a50e338696d8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T12:20:00.763595Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.cancel",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 3
  }, {
    "id" : "52d28cb3-f4e7-40c7-8b84-fcb1589b8e8a",
    "name" : "Lists operations that match the specified filter in the request. If the server d...",
    "request" : {
      "urlPath" : "/v1alpha1/Emil+Marks/operations",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"operations\" : [ {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Reuben Glover V\",\n    \"error\" : {\n      \"code\" : 1065067793,\n      \"details\" : [ { }, { }, { }, { }, { } ],\n      \"message\" : \"Aut sit qui aliquam exercitationem. Quia mollitia vitae cupiditate error velit. Officiis aut aliquam.\"\n    },\n    \"done\" : false\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Danna Schamberger\",\n    \"error\" : {\n      \"code\" : 673860794,\n      \"details\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"message\" : \"Eum omnis soluta voluptatibus explicabo. Excepturi qui qui ut nisi. Sit reprehenderit accusantium aliquam soluta facilis ducimus. Nihil sunt id voluptas rerum. Maxime repellendus quaerat dolores.\"\n    },\n    \"done\" : true\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Tobias Nitzsche\",\n    \"error\" : {\n      \"code\" : 29992388,\n      \"details\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"message\" : \"Numquam animi ipsum nulla nam eveniet nihil eum. Tenetur dolorum sapiente enim nobis. Illum beatae adipisci exercitationem ipsa sint doloremque. Odit sed necessitatibus id qui. Perspiciatis dolorum be\"\n    },\n    \"done\" : false\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Darius Wilderman Sr.\",\n    \"error\" : {\n      \"code\" : 1227029073,\n      \"details\" : [ { }, { }, { }, { }, { } ],\n      \"message\" : \"Eligendi nihil iusto earum odio fugiat placeat recusandae. Voluptatem distinctio repellat quo molestiae et. Sunt voluptatem aut ducimus et quae qui odit. Temporibus vero dolores tenetur blanditiis lau\"\n    },\n    \"done\" : false\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Lesli Schimmel\",\n    \"error\" : {\n      \"code\" : 1271516231,\n      \"details\" : [ { }, { }, { }, { }, { } ],\n      \"message\" : \"Placeat alias repudiandae dolorum cupiditate. Repellat totam officia ut perspiciatis illum quibusdam nobis. Quidem dolorem minima nostrum eum molestiae.\"\n    },\n    \"done\" : true\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Katia Macejkovic\",\n    \"error\" : {\n      \"code\" : 706461986,\n      \"details\" : [ { }, { }, { }, { }, { }, { } ],\n      \"message\" : \"Est vero quis molestiae rerum ipsum quia. Rerum suscipit consequatur. Nostrum est pariatur nesciunt aut expedita itaque. Quos harum delectus et non. Quis debitis aliquid fugiat similique molestiae in.\"\n    },\n    \"done\" : true\n  } ],\n  \"nextPageToken\" : \"j176i6komi25l7vlobjd4g\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "52d28cb3-f4e7-40c7-8b84-fcb1589b8e8a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T12:20:00.763505Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.list",
          "schema" : {
            "description" : "The response message for Operations.ListOperations.",
            "properties" : {
              "nextPageToken" : {
                "description" : "The standard List next-page token.",
                "type" : "string"
              },
              "operations" : {
                "description" : "A list of operations that matches the specified filter in the request.",
                "items" : {
                  "$ref" : "#/components/schemas/Operation"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 4
  }, {
    "id" : "0e9f0365-a9f5-42e3-ac1b-f0665f5efdc8",
    "name" : "Lists information about the supported locations for this service.",
    "request" : {
      "urlPath" : "/v1alpha1/Diego+D%27Amore/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"nextPageToken\" : \"2ebp1xf4cemx2727a\",\n  \"locations\" : [ {\n    \"metadata\" : { },\n    \"displayName\" : \"Sarah Bauch\",\n    \"locationId\" : \"383j\",\n    \"name\" : \"Darius Lebsack\",\n    \"labels\" : { }\n  }, {\n    \"metadata\" : { },\n    \"displayName\" : \"Kendal Schuppe\",\n    \"locationId\" : \"ddip\",\n    \"name\" : \"Emanuel Davis\",\n    \"labels\" : { }\n  }, {\n    \"metadata\" : { },\n    \"displayName\" : \"Stanton Ankunding MD\",\n    \"locationId\" : \"r20s\",\n    \"name\" : \"Donny Kerluke\",\n    \"labels\" : { }\n  }, {\n    \"metadata\" : { },\n    \"displayName\" : \"Demetrius Lowe IV\",\n    \"locationId\" : \"pv4t\",\n    \"name\" : \"Kathi Kuhic\",\n    \"labels\" : { }\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0e9f0365-a9f5-42e3-ac1b-f0665f5efdc8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T12:20:00.762676Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.list",
          "schema" : {
            "description" : "The response message for Locations.ListLocations.",
            "properties" : {
              "locations" : {
                "description" : "A list of locations that matches the specified filter in the request.",
                "items" : {
                  "$ref" : "#/components/schemas/Location"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "The standard List next-page token.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 5
  }, {
    "id" : "61a508b1-5758-460c-8b9e-97819b0d728e",
    "name" : "Updates the parameters of a single ContactCenter.",
    "request" : {
      "urlPath" : "/v1alpha1/Kathrine+Towne",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Benjamin Green\",\n  \"error\" : {\n    \"code\" : 1385420707,\n    \"details\" : [ { }, { }, { }, { }, { }, { }, { } ],\n    \"message\" : \"Architecto aut explicabo qui. Sint voluptatem dolores. Qui quia cumque cumque laborum molestiae qui.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "61a508b1-5758-460c-8b9e-97819b0d728e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T12:20:00.761528Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.contactCenters.patch",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 6
  }, {
    "id" : "f2917b65-c87c-4e32-93e8-2dccc5f567b0",
    "name" : "Gets the latest state of a long-running operation. Clients can use this method t...",
    "request" : {
      "urlPath" : "/v1alpha1/Merle+Kihn+DVM",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Lowell Nikolaus\",\n  \"error\" : {\n    \"code\" : 1306996239,\n    \"details\" : [ { }, { }, { }, { }, { } ],\n    \"message\" : \"Similique pariatur facere omnis. Adipisci eos aut doloribus blanditiis quidem. Saepe commodi non.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f2917b65-c87c-4e32-93e8-2dccc5f567b0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T12:20:00.761277Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.get",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 7
  }, {
    "id" : "c3c586c3-7529-4762-98e7-0151a1299a83",
    "name" : "Deletes a long-running operation. This method indicates that the client is no lo...",
    "request" : {
      "urlPath" : "/v1alpha1/Fernando+Ward",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c3c586c3-7529-4762-98e7-0151a1299a83",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T12:20:00.760942Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.delete",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 8
  } ]
}