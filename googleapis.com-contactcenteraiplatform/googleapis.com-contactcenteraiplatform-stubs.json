{
  "mappings" : [ {
    "id" : "543b0354-52e5-4ac2-8c3c-51ab17e87851",
    "name" : "Queries the contact center quota, an aggregation over all the projects, that bel...",
    "request" : {
      "urlPath" : "/v1alpha1/2bd8g5bbz7hsk9xwp:queryContactCenterQuota",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"contactCenterCountLimit\" : 23222421,\n  \"contactCenterCountSum\" : 1579888832\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "543b0354-52e5-4ac2-8c3c-51ab17e87851",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:19:32.82878Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.queryContactCenterQuota",
          "schema" : {
            "description" : "Represents a quota for contact centers.",
            "properties" : {
              "contactCenterCountLimit" : {
                "description" : "Reflects the count limit of contact centers on a billing account.",
                "format" : "int32",
                "type" : "integer"
              },
              "contactCenterCountSum" : {
                "description" : "Reflects the count sum of contact centers on a billing account.",
                "format" : "int32",
                "type" : "integer"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "a0e099ed-0ff7-48f5-9dc9-242ed2eb70bd",
    "name" : "Creates a new ContactCenter in a given project and location.",
    "request" : {
      "urlPath" : "/v1alpha1/a4z9iz2e6v8c5iz5kdx01wwp5r8b25z98bf8g7sk03hl2qdd8/contactCenters",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Victor Weimann\",\n  \"error\" : {\n    \"code\" : 41036400,\n    \"details\" : [ { }, { }, { }, { }, { } ],\n    \"message\" : \"Nisi aliquid odit eveniet neque ut. Cupiditate mollitia doloribus quas et. Recusandae accusantium error atque enim facilis tempora commodi. Optio libero ut omnis placeat explicabo molestiae. Harum ape\"\n  },\n  \"done\" : true\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a0e099ed-0ff7-48f5-9dc9-242ed2eb70bd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:19:32.828687Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.contactCenters.create",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "b1bb1745-fdb7-4dba-a4a2-9abe0eaa5de0",
    "name" : "Lists ContactCenters in a given project and location.",
    "request" : {
      "urlPath" : "/v1alpha1/01pwv2ldibfwwozikmk1o56ouss5czla2kx3r82x8sod8jbpirfc8hn9r77i4hfnhc9ipayysbifcx7l2w5dls86qvl2hoisre6i9rpzdwu2wyzvobhsnjm1lnb9wj3o6ojatpz1yfv3r12fw1cq510zzehkc33htvcujc0chs6/contactCenters",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"contactCenters\" : [ {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Charles Nikolaus\",\n    \"updateTime\" : \"2022-09-13T11:38:32.823651Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_2XLARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"q2vj9ft1d0uxzspb0pi4b5p3xl0ulrb8zcqrsgyj0yol9drmoplwj9anihdib3f50qaz633x1uouf99m3gqi0frebtplhj5y96dc3r\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/456766\",\n      \"entityId\" : \"055c\",\n      \"userEmail\" : \"qm81t914mkuhk99rnflfx88dtf0au2t3eh2padocr487b20dyxgupafbct9xoz5jsz83xqxbqwkby4ivg428ozu004dgo8lpcjr6787mzoa5fttm2wj9o04mw5qzoyy917f2u8acnf1av5\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/357997\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/224710\",\n      \"rootUri\" : \"https://web.example.mocklab.io/845553\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/253546\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Mohr\",\n      \"givenName\" : \"Hong\"\n    },\n    \"createTime\" : \"2023-01-06T12:32:32.824228Z\",\n    \"name\" : \"Nigel McKenzie\",\n    \"userEmail\" : \"9l4j1ey7p73ckgjrehl3m3ho05zoh2ljogf80v82k9\",\n    \"state\" : \"STATE_TERMINATING_FAILED\",\n    \"customerDomainPrefix\" : \"mccgxx3u04gqonasnviaxnk06bsx348vrqxx7gh2u1luhq3hfjncxjit9f4fsxleqajh2aelvd0779gjnvyw8f6vdtfwlgvgk8p1ivec44gdk4tqbwstit3sfzajm8k5k14cfa9cwj7ma3m60pp0zvmr231w7mqx3b33ht\"\n  }, {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Alfred Borer\",\n    \"updateTime\" : \"2022-04-29T13:35:32.824391Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_MEDIUM\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"3yfgkgk451ne3hdixewkykmqodxsriolhyrf6eius6g6pofoinf80r7w20h41t6ddcfgtj3u3xd6d0uobn8wep6q2lzxt7b2z0l8vase0gdiih953kxohpe6ue07f1iqzm3en98coq2x9llxfwkt80wl6xm\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/051623\",\n      \"entityId\" : \"878w\",\n      \"userEmail\" : \"tiqmpth1ommx9o0ldtzez5xxat1b3cuj2huc9tvt71k1gw2zy59b976fp4e5os8e33w553s6\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/279422\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/176403\",\n      \"rootUri\" : \"https://web.example.mocklab.io/271924\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/212169\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Kihn\",\n      \"givenName\" : \"Edgar\"\n    },\n    \"createTime\" : \"2022-03-25T11:24:32.8249Z\",\n    \"name\" : \"Rueben Moen\",\n    \"userEmail\" : \"3jfnsqish3c4gmsrsp35qsskzh5w74bv87i0f9vvxwbz2l1txchps0em\",\n    \"state\" : \"STATE_TERMINATING_FAILED\",\n    \"customerDomainPrefix\" : \"6ks9qk7vxqlgxqet2dymnr7onmrnut26n3vm88lucjcscqyqwrap1k7ne9m40e6e880973g50inhiq3y08pmsh2b8pu6kdmkgbob1jokpst2cdbcuip7jic9tmzmdq1p18xxm207m0bvxjn26r9tugshor2czjgl96tx9wq45wr\"\n  }, {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Alix Mann\",\n    \"updateTime\" : \"2022-09-28T11:19:32.82505Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"INSTANCE_SIZE_UNSPECIFIED\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"12fzzbg\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/559576\",\n      \"entityId\" : \"5f7e\",\n      \"userEmail\" : \"vro505csklj5czonp0nf2crs434t2htbbdebp\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/562597\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/666577\",\n      \"rootUri\" : \"https://web.example.mocklab.io/537614\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/133624\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Rowe\",\n      \"givenName\" : \"Alesha\"\n    },\n    \"createTime\" : \"2022-06-21T13:04:32.82554Z\",\n    \"name\" : \"Kirstie Cole\",\n    \"userEmail\" : \"0efxn2wu2x4u2i7e312n1quv9bh4cu7cve4qods39k5sdzds53nm92n3hfaaofwo6s23q48y2trk7xdmaytep9v74vej8gcl6n7gx7w88e2871e0hwy50mpnz444obb4axo94fhwc91lha8druc6y6lp5rinsza5r5wblkar6fyswwc\",\n    \"state\" : \"STATE_UNSPECIFIED\",\n    \"customerDomainPrefix\" : \"oo76fj63j4zi4wlwjnmuvc1rxyoelq13scul62h1ht3yhguhg2f1igiwh0fdylt9g0t02d6btrqsg0quvova4pzjge6qbehaj9y03psnt5brojg305190r7qm7dw7xmoyagkn5o22tarhzkwvn33u1zur75kv2zcqn31srpkfef1g\"\n  }, {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Vincenzo Welch\",\n    \"updateTime\" : \"2022-10-03T12:34:32.825686Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_SMALL\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"4asvibj2wvym2vkczvzh8qb86ysl2pv3egmo85lfyeqjx5qnz2221y01fmtor0c61yihknqif4l5bo2i817oyfcjljaefxlifmve853nztqk8o5gk30wcrgl040uf1rrn75ydvnvqrprh1nxsdhmvs8r0p9ph09t1aw2tdtgk9avxrrx9uc\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/222388\",\n      \"entityId\" : \"z7r8\",\n      \"userEmail\" : \"ak2kzq6ibxjpvuk1bgh1edce0tmk2mijyhjw1qwyy0ih8w9i57zs7v3kb2df0jva93471fxja0u88fq0bgv9yohg4mv0vz1osw4my9bf55yobdqefrxaqvbhjlq0myvs\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/747580\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/452974\",\n      \"rootUri\" : \"https://web.example.mocklab.io/786260\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/697717\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Keebler\",\n      \"givenName\" : \"Aura\"\n    },\n    \"createTime\" : \"2022-10-11T14:01:32.826184Z\",\n    \"name\" : \"Nida Schumm\",\n    \"userEmail\" : \"gbx6aewugupvs7vecvgp19c8nbd4p9eypja8p9oidxkyt11l0gfe7xt2bzb7hv6d0i0njen2u2ym63vt0nhslhuup5u8cem0u9jl7eg\",\n    \"state\" : \"STATE_DEPLOYING\",\n    \"customerDomainPrefix\" : \"yg7z55odlldddily35haeixw2dyjvg00rb0k5u7i1npk0gkw2s68wimf51f25win1yt82iycz73crutxzxca6vlpw1nv42w67yf6tmqnwbmjzg14kwx5n176vcmdw9l13mlbpnfwmefqri10k65pc8s3mjh5saikfqjebw\"\n  }, {\n    \"ccaipManagedUsers\" : true,\n    \"displayName\" : \"Cinda Krajcik DVM\",\n    \"updateTime\" : \"2022-11-15T13:35:32.826329Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_XLARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"av93h3u5kbvdsnr3f1dubiwto0i9jawfzlu82rzeyyqv90gk2mrnpssevyabstmu6iyavsqoemn3z3l9pp7fqd\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/242147\",\n      \"entityId\" : \"rxtn\",\n      \"userEmail\" : \"aausyppb6qpp057hpp3q6tbnybclbretvhgd1p078ohtg4qhj0et7mfs8ps7wrxm09pren71vsaqst9fsqge19lfpo0swvmulq8sllk7ju41j9x3ajcqgk7116idg4cb29r2su8uhactu\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/679099\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/249853\",\n      \"rootUri\" : \"https://web.example.mocklab.io/288562\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/195452\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Nader\",\n      \"givenName\" : \"Wyatt\"\n    },\n    \"createTime\" : \"2022-09-29T13:26:32.826835Z\",\n    \"name\" : \"Caroline Bosco\",\n    \"userEmail\" : \"ita8r9yzulkoy5z30c2aqdy0khmmpjubfkwzpug473c02id3512e8zjefm53vx941rm0cw9geecfumjzdtv180gx2ujhvs1g894nepoijpsaoovn542qp1atmrbpujruef99wvlsmlq4uq7ssy\",\n    \"state\" : \"STATE_UNSPECIFIED\",\n    \"customerDomainPrefix\" : \"js7lx0pafg52rq7ji6ywewx7tgv0m0gpq9uiy4xecwj5g4we66xlxfshiw4onic7bq39wbpdd4xki3e55wdnj4ydkpbys7rg71yjnae7146qi7389ipl720irk8scieqsgkzyt9bccn7w7dn5qysvus77aeh8g5uo9hlizcingf7bbaxijf6krn9hpx\"\n  }, {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Robin Muller\",\n    \"updateTime\" : \"2022-04-21T12:47:32.826991Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"INSTANCE_SIZE_UNSPECIFIED\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"cb36nbrmpc9c93tlvzcui7j7vhp1k7c00zaf0ca52zospg3uqlm821c8ajpz8uhvnpovqk452u0pzqhwp8fcwtxz1je0cj1hoygzy79tyvi76zzztvyptsfl2se7ka32roobqxd4d4dd4oprt240l9r0tmapgymz59xe3l5\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/588668\",\n      \"entityId\" : \"7fyh\",\n      \"userEmail\" : \"uut3yja3y98xv3imtfg4soo1rsfko42bk3njh4f7qsemqrqxxgtkwvqkggnceadqv55qvvj7kphmxa9jc44zuuo8xjdt0i5yn9ecan9phsceuff2zws0utz2r7u4x26cxxiokphbgm057nd9la21jshs1o2tsj\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/649150\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/465590\",\n      \"rootUri\" : \"https://web.example.mocklab.io/628674\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/533047\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"O'Reilly\",\n      \"givenName\" : \"Harvey\"\n    },\n    \"createTime\" : \"2022-04-21T12:35:32.82748Z\",\n    \"name\" : \"Susy Strosin\",\n    \"userEmail\" : \"gd5aljrbhijdh4jrpnvpn52bdzfk6azg5e087opxv018hsuokxyt1ccuo410a2v66lswxe0j5l46t27kjyfi9hhsqlakoy68hqkuvvg53ohqzxmdwf\",\n    \"state\" : \"STATE_TERMINATING_FAILED\",\n    \"customerDomainPrefix\" : \"z3syqt53u2c4l4ml38jcb4qjccj85n9i6vgqtcj2uxqz3y7h0lzznouwopgmf6ufi895bey\"\n  }, {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Marci Kessler\",\n    \"updateTime\" : \"2022-05-20T14:17:32.827627Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_2XLARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"0tt0rtl4dc89ih5lpnt05tl4y2832lp88i8d0kyejuncvpyt874cyabtrg5igb29gaiplixdgty4fl7cyw7qcvwyoocwg77ad1ce5g9oy3p68pikzqgifmpdx5hhn8p27\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/787707\",\n      \"entityId\" : \"rv08\",\n      \"userEmail\" : \"jg059u7at3whxw6tb9rrf0vrkr9l0iau3w5ay8t74zafet6elqlrkcd6ufhtd488tvxi88xpugoqeyvbfsw1hcpqoq2k04k432znwd8bdqqxkd0r4hzdm1dye80xnsj9nkzbi57avt22dgpewaubq17ml8shfujwdi7becl1rkbv966pbm\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/414369\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/998762\",\n      \"rootUri\" : \"https://web.example.mocklab.io/444011\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/068676\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Schmidt\",\n      \"givenName\" : \"Forrest\"\n    },\n    \"createTime\" : \"2022-12-03T13:00:32.828109Z\",\n    \"name\" : \"Marcellus Stanton\",\n    \"userEmail\" : \"lat3kblsdn3pr1mnqif5fypwm4brieucrsz8uw43m8ebq56k13p0d5m6dn8u27en8aamakpyrf4lp49usvq8164nd55expae703fmhspo5lxwqc640nj6myvfy6cld449xdup2yu8hdl7w28\",\n    \"state\" : \"STATE_TERMINATED\",\n    \"customerDomainPrefix\" : \"sn4f5bp9v1yvoyuaex0rn0gf11qlnvr5aboha2u9148cu0a1cni0yf3n3uu9fb26skwsre7y7nbo1fhmjlf2iosdb3e6ta6wpk5lchujaggusnph3jxvh7hets9kaotwhdvoltidprq48c4ltcbp159elfgiqlkct\"\n  } ],\n  \"unreachable\" : [ \"h3x8u5lvrvlvi6xial9cljo2ukrvoevfiwpy7svaguk5mdumqqczvoqiantt1982mrpb3s1y4pb7dpsp6c4rxjq0q3xnf4jtvgramonbqr5s3vypilxvsqfovn37jql86j006egtnfkc1al7h\", \"7e5es6xyanj1bz2d1bqtq7alktadr2ofjszjoq68dtfpc1zmngq64zdzf4pg263yalet0ywj4mod5h9dzp1z3lbfk36hjm2lk3dug6eewe37wda1x1io8pz5bkoessmrmm9l4z61k40gjb5m7hqqon3u1x\", \"lrdroh87vfe8ouqbogugnxxo4s2ziw0w5r3ka2skdzq8lclp3h0yxuggaejfyx75olal037wvat6agxkv6yvcxgh6f4n59c31a87xyxcpsbl8qgoo083w04v34zvf5a0e9o6adyy8awqe23vthfey96zn4463xuvafa1u\", \"o9zbsomktgb0dggfd4datw5f0me3q5jt2rllb6j1ef4n8zskuzcx\", \"uesaxvqs0png0kw0vu163vo46h1mezhd76pba3aj34fzvp3gcr\", \"f796yfk0jtzaxxxaty46j1\", \"mu5czsm4rzs081z87frl6m4e8iywrfluxo4d9h60ekl8fo7jdfjvqbae28hcb8qkgfvsvmi9107gyxssxvbg3yi07r0k358pxpzdxkbqk3ju6yjyyygti3ituqh9d0qav7nkixirk8okjlp6kuc7yeocb2foxfwhrg40nbudko3s51wnks7stby1bbgn5x6tneubg\", \"pvqk47hsbmrm65mrzarqnlf2ina7x3oaazk3bil22gp616ybok5ma1hbt3kj0kh0o1qucdijx9sf90ebka48dzdt3jd6rsm7r0oo1gj7u2z5\" ],\n  \"nextPageToken\" : \"9lwp8a26qgtpvowke2jouvhf0gy044kyqpgv0uxhixgoxo2boz7bt\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b1bb1745-fdb7-4dba-a4a2-9abe0eaa5de0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:19:32.828416Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.contactCenters.list",
          "schema" : {
            "description" : "Message for response to listing ContactCenters",
            "properties" : {
              "contactCenters" : {
                "description" : "The list of ContactCenter",
                "items" : {
                  "$ref" : "#/components/schemas/ContactCenter"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "A token identifying a page of results the server should return.",
                "type" : "string"
              },
              "unreachable" : {
                "description" : "Locations that could not be reached.",
                "items" : {
                  "type" : "string"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "aca3d556-1046-4e86-83d2-e9dd5efa3fed",
    "name" : "Starts asynchronous cancellation on a long-running operation. The server makes a...",
    "request" : {
      "urlPath" : "/v1alpha1/Tenisha+Bergstrom:cancel",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "aca3d556-1046-4e86-83d2-e9dd5efa3fed",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:19:32.823549Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.cancel",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "dafc1b3f-06ba-4731-8482-52fd7cd48703",
    "name" : "Lists operations that match the specified filter in the request. If the server d...",
    "request" : {
      "urlPath" : "/v1alpha1/Jaleesa+Jerde/operations",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"operations\" : [ {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Antonio Daniel\",\n    \"error\" : {\n      \"code\" : 49114396,\n      \"details\" : [ { }, { }, { }, { }, { } ],\n      \"message\" : \"Rerum cum modi. Aperiam eveniet est aliquid rem aut facere. Magnam et tenetur ipsa quo eos necessitatibus.\"\n    },\n    \"done\" : false\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Perry Upton V\",\n    \"error\" : {\n      \"code\" : 1025621025,\n      \"details\" : [ { }, { }, { }, { }, { } ],\n      \"message\" : \"Autem et qui deleniti eligendi id temporibus. Nihil vel ipsa porro ipsum. Reprehenderit quo molestias corporis. Eos ut et. Omnis ea omnis quis deserunt eaque.\"\n    },\n    \"done\" : false\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Annika Lowe\",\n    \"error\" : {\n      \"code\" : 729377018,\n      \"details\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"message\" : \"Rerum itaque quasi error id et qui soluta. Nostrum et totam qui. Qui sit voluptas exercitationem ipsam dignissimos iste.\"\n    },\n    \"done\" : false\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Aura Runte Jr.\",\n    \"error\" : {\n      \"code\" : 1980995221,\n      \"details\" : [ { }, { }, { }, { }, { } ],\n      \"message\" : \"Corrupti sit voluptatum. Quo sunt non ipsa repellendus nam. Voluptas quos officia minima quia. Odio soluta voluptatibus eos et rerum. Temporibus quisquam explicabo sit ex sed.\"\n    },\n    \"done\" : false\n  } ],\n  \"nextPageToken\" : \"tm0wsivcddjdt5lvoi71r6ukr0adoi3ipcp\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "dafc1b3f-06ba-4731-8482-52fd7cd48703",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:19:32.823458Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.list",
          "schema" : {
            "description" : "The response message for Operations.ListOperations.",
            "properties" : {
              "nextPageToken" : {
                "description" : "The standard List next-page token.",
                "type" : "string"
              },
              "operations" : {
                "description" : "A list of operations that matches the specified filter in the request.",
                "items" : {
                  "$ref" : "#/components/schemas/Operation"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "d41d1a04-fedd-45db-9d6a-74477e9bd8f1",
    "name" : "Lists information about the supported locations for this service.",
    "request" : {
      "urlPath" : "/v1alpha1/Miss+Lakeshia+Sporer/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"nextPageToken\" : \"34aaqpzup2h6tgovk0rjmo9ixse1uz3clttozx7gz4r1m5nq4onicqb4ge0s7qog85w00t\",\n  \"locations\" : [ {\n    \"metadata\" : { },\n    \"displayName\" : \"Leesa Ernser\",\n    \"locationId\" : \"oa85\",\n    \"name\" : \"Kandis Boehm\",\n    \"labels\" : { }\n  }, {\n    \"metadata\" : { },\n    \"displayName\" : \"Sheryll Aufderhar Jr.\",\n    \"locationId\" : \"7n52\",\n    \"name\" : \"Samual Dicki\",\n    \"labels\" : { }\n  }, {\n    \"metadata\" : { },\n    \"displayName\" : \"Isabel Zieme\",\n    \"locationId\" : \"c248\",\n    \"name\" : \"David Mayer\",\n    \"labels\" : { }\n  }, {\n    \"metadata\" : { },\n    \"displayName\" : \"Kristie Kessler\",\n    \"locationId\" : \"5bx8\",\n    \"name\" : \"Wally Schaden\",\n    \"labels\" : { }\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d41d1a04-fedd-45db-9d6a-74477e9bd8f1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:19:32.8228Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.list",
          "schema" : {
            "description" : "The response message for Locations.ListLocations.",
            "properties" : {
              "locations" : {
                "description" : "A list of locations that matches the specified filter in the request.",
                "items" : {
                  "$ref" : "#/components/schemas/Location"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "The standard List next-page token.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "2a6de7a8-bc2f-4a2a-8c2f-851bb0a9b5de",
    "name" : "Updates the parameters of a single ContactCenter.",
    "request" : {
      "urlPath" : "/v1alpha1/Dulce+Ondricka",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Dominique Bogan\",\n  \"error\" : {\n    \"code\" : 1762446965,\n    \"details\" : [ { }, { }, { }, { }, { } ],\n    \"message\" : \"Enim aut nihil rerum non dignissimos qui. Consequatur doloribus est voluptas doloribus praesentium qui eum. Officiis illo pariatur amet rem at. Ut non qui officiis molestiae et. Consequuntur alias cul\"\n  },\n  \"done\" : true\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2a6de7a8-bc2f-4a2a-8c2f-851bb0a9b5de",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:19:32.821597Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.contactCenters.patch",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "2aa15cf7-57c9-428d-b815-d973dd7c7a5d",
    "name" : "Gets the latest state of a long-running operation. Clients can use this method t...",
    "request" : {
      "urlPath" : "/v1alpha1/Asia+Ferry",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Waylon Boyle\",\n  \"error\" : {\n    \"code\" : 1214519868,\n    \"details\" : [ { }, { }, { }, { }, { } ],\n    \"message\" : \"Cumque ab iste voluptatem pariatur. Excepturi officia ad aut dolor aliquam. Minus veritatis qui reiciendis minima. Cum animi deleniti.\"\n  },\n  \"done\" : true\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2aa15cf7-57c9-428d-b815-d973dd7c7a5d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:19:32.821257Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.get",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "40c21cce-85e9-451c-8891-3addbe154850",
    "name" : "Deletes a long-running operation. This method indicates that the client is no lo...",
    "request" : {
      "urlPath" : "/v1alpha1/Frieda+Hills+Jr.",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "40c21cce-85e9-451c-8891-3addbe154850",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:19:32.820964Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.delete",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    }
  } ]
}