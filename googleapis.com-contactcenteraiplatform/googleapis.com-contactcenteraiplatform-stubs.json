{
  "mappings" : [ {
    "id" : "f1ff6584-45c5-41cd-969f-61cf426a707e",
    "name" : "Queries the contact center quota, an aggregation over all the projects, that bel...",
    "request" : {
      "urlPath" : "/v1alpha1/uafeyf2s43hhpujwpt7ker29u9cxp0poib30t16swwzvrgy4tr7:queryContactCenterQuota",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"contactCenterCountLimit\" : 2015159483,\n  \"contactCenterCountSum\" : 291843954\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f1ff6584-45c5-41cd-969f-61cf426a707e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:26.771853Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.queryContactCenterQuota",
          "schema" : {
            "description" : "Represents a quota for contact centers.",
            "properties" : {
              "contactCenterCountLimit" : {
                "description" : "Reflects the count limit of contact centers on a billing account.",
                "format" : "int32",
                "type" : "integer"
              },
              "contactCenterCountSum" : {
                "description" : "Reflects the count sum of contact centers on a billing account.",
                "format" : "int32",
                "type" : "integer"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 0
  }, {
    "id" : "8ddefe49-7902-42b9-a612-95daa9f7641f",
    "name" : "Creates a new ContactCenter in a given project and location.",
    "request" : {
      "urlPath" : "/v1alpha1/9xxaxk7rlckky154jau4qamwszxvkfba5k14nb3v9ya5e4f5ay1advh9ewzsiymm7dkfc7/contactCenters",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Eugenia Cartwright\",\n  \"error\" : {\n    \"code\" : 280911093,\n    \"details\" : [ { }, { }, { }, { }, { }, { }, { } ],\n    \"message\" : \"Deleniti ut enim neque quia deleniti omnis. Itaque nobis voluptate molestiae unde. Corporis modi voluptatem facere omnis. Adipisci culpa laborum molestias fugiat alias sed.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8ddefe49-7902-42b9-a612-95daa9f7641f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:26.771761Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.contactCenters.create",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 1
  }, {
    "id" : "82b3dcaa-7a66-4f1f-85aa-311f7c4a0d71",
    "name" : "Lists ContactCenters in a given project and location.",
    "request" : {
      "urlPath" : "/v1alpha1/9aeun3rrby0pxu6yvwxhhkqs7niefkuc1cf5ptjrtmqys9f7fsn3au/contactCenters",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"contactCenters\" : [ {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Jackeline Pagac I\",\n    \"updateTime\" : \"2022-11-25T10:37:26.765789Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_XLARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"qjjalhud8c8ikg6uv9c4r0z4arynhvgqco\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/135334\",\n      \"entityId\" : \"g4o1\",\n      \"userEmail\" : \"of99vn642zd4f48q\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/576337\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/018161\",\n      \"rootUri\" : \"https://web.example.mocklab.io/604895\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/484033\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Terry\",\n      \"givenName\" : \"Melida\"\n    },\n    \"createTime\" : \"2022-04-19T10:01:26.766381Z\",\n    \"name\" : \"Mrs. Elroy Sanford\",\n    \"userEmail\" : \"tositjani7rootfk2noe1tb5p8jiv1702pkog8tzismisihpetvr4b0258i2ocktc5kz9rtbgdrq3ugybk1cnc85qr9v2\",\n    \"state\" : \"STATE_TERMINATING\",\n    \"customerDomainPrefix\" : \"xog5ckt1l8q54d1rp1z83waa6hfcfyoqrleqpvdq8ew160pei8vy9wsrzp9xp705g2sap2lvlu14j32t585lkbz1pc0nwe6632ww8\"\n  }, {\n    \"ccaipManagedUsers\" : true,\n    \"displayName\" : \"Marco Baumbach\",\n    \"updateTime\" : \"2022-11-27T11:04:26.766562Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_XLARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"bnwnjuln89xjta6qmluvtxc147wcn8gbjs3n0nyw8g7vw1pw0nvz8bov2l87ol7tr4m7ulbo8ytd1dxyst9t\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/722450\",\n      \"entityId\" : \"gt34\",\n      \"userEmail\" : \"a05x4b9si2ahnas51jw1usolznjt2efo6cpf5isealbep05ngjbabk1gg3pt26pjh688zs0r9c77cf997pmb79hziac7hcv0ds4all627bnrkiym68q5tc8v2q9ag9tr4lgjsu8wgiq239yo5b2fi828axvrj0b4tsdbcr7d1twhv1jt0\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/788168\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/898858\",\n      \"rootUri\" : \"https://web.example.mocklab.io/168258\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/379045\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Luettgen\",\n      \"givenName\" : \"Corey\"\n    },\n    \"createTime\" : \"2022-05-18T10:55:26.767086Z\",\n    \"name\" : \"Akiko Batz\",\n    \"userEmail\" : \"0c4rpg8po5sfve2uh1w3t3d22iy43r8dfhj8po\",\n    \"state\" : \"STATE_TERMINATING_FAILED\",\n    \"customerDomainPrefix\" : \"c6251kbph\"\n  }, {\n    \"ccaipManagedUsers\" : true,\n    \"displayName\" : \"Tammy Cummings\",\n    \"updateTime\" : \"2022-11-16T09:35:26.767252Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_3XLARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"dmhfa60b5bzxrou6n759zb03io11l2rorhglkw4ft4p6tlbuz1l9kkca1b0bqop6v3bcv5t3kqs2ydzvjr18swfb1kch0q7ego7cd2j61ohw6z582jfj48t11738z92p77gq51mht9kwxztqhoko5raetsvev4p7vaud7xr3\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/134370\",\n      \"entityId\" : \"b37f\",\n      \"userEmail\" : \"gtyplr9xx3cn4j3zezg0u82fnb4ae6rdmgafyeatp7jk0sqlnwhaimld5engs4785117uippihakozzf998d8xkwvlk0wirmp281ug2sqaq0x1sthd8sf40fq0str1x6ftyv\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/697140\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/394784\",\n      \"rootUri\" : \"https://web.example.mocklab.io/293109\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/426492\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Greenfelder\",\n      \"givenName\" : \"George\"\n    },\n    \"createTime\" : \"2022-04-25T10:36:26.767765Z\",\n    \"name\" : \"Ellan Hackett\",\n    \"userEmail\" : \"qx6khz77jur5zmosqdehg9xv2gpq3j5sws5y55b8m66iyie6cbzn8s498ncsw4tcf1dmlem8r8d23q85dbxup3ww6qd8wn5ak6o0h8rzvlp60cknarm5l5b0p10lryzh9tei9k2xas2xi1s5aao9ukj5wlj8iemrdiw9dt4mmpvkl4fcpkn656b\",\n    \"state\" : \"STATE_TERMINATED\",\n    \"customerDomainPrefix\" : \"x6zcicw19fxpnm24z7eny85knb2slmtzq1lslj2pkf5m9yxffz6piotx75scpws3eqteuxhg3jl2cn920zfwshgfhoztlcvosvkbuu9ac3pmpgc4gtl74s2uba44grmc0jh1w7ujxjcg4\"\n  }, {\n    \"ccaipManagedUsers\" : true,\n    \"displayName\" : \"Mr. Samual Witting\",\n    \"updateTime\" : \"2023-02-14T10:03:26.767941Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_2XLARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"7gryhmit92h479aufq1ulzp6kgd1oupoanl01ks4c1plkcr3vcc4\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/512332\",\n      \"entityId\" : \"6r42\",\n      \"userEmail\" : \"8uaop2njkw51ooesttp1bar944stngl0erk2nph\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/898225\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/822831\",\n      \"rootUri\" : \"https://web.example.mocklab.io/569744\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/258921\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Gusikowski\",\n      \"givenName\" : \"Virgilio\"\n    },\n    \"createTime\" : \"2022-04-16T10:59:26.768451Z\",\n    \"name\" : \"Jazmine Pollich\",\n    \"userEmail\" : \"k0vwa78r71fhbdjjznxd9z6r04bpx5j7522wosji3uuwnvkyptg66xzk4jvpm5utpuezh4ku0bidyax5p09broc5qenx0ztldl1bzz71xz6ev4ljyo\",\n    \"state\" : \"STATE_TERMINATED\",\n    \"customerDomainPrefix\" : \"286rx46bypxzrdmzqk4z6cq1no2fokvw3estvw84u2xph939tum00dqw92ysgdorq2yhewzkin895x5\"\n  }, {\n    \"ccaipManagedUsers\" : true,\n    \"displayName\" : \"Patrick Torphy\",\n    \"updateTime\" : \"2023-02-05T08:19:26.768615Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_SMALL\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"5ybslqxvd3iuc9xeabu6ii9p1sjgd7uckjdgyezwo4cuavh29melf7baupc6b86qw0qf0ttiunbamw6rnbvx4lj2mq7per6kxawdzzdxmngq06m7kvbecryl7rim1kyyz0rihkpi4sed6kfdoldjvnk8r6txxn1xuzdtfsajg\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/808178\",\n      \"entityId\" : \"1g19\",\n      \"userEmail\" : \"dy8hc\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/804086\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/924747\",\n      \"rootUri\" : \"https://web.example.mocklab.io/290168\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/579541\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Brakus\",\n      \"givenName\" : \"Monroe\"\n    },\n    \"createTime\" : \"2022-08-29T09:27:26.769116Z\",\n    \"name\" : \"Gayla Nicolas\",\n    \"userEmail\" : \"o9hu7m6vyuvsf5e7gmi1wyfne5dxnibqozbxm25hygtch462et1t8ff128yewgvaczymrj71ngasqhe09a2wih0g0ms8yl903vjodhxsjalme9ritefbhlz8w8xwcjmjsvdp4xux86u3\",\n    \"state\" : \"STATE_TERMINATING_FAILED\",\n    \"customerDomainPrefix\" : \"w5txxbiub9hxe004wndtyo2mzw974mewgbct77e4qxrl60mmzesmzyxdjqalqonu2tsxosib1y7eiaaq1cblerjlhrsqirzw1sakabere03k\"\n  }, {\n    \"ccaipManagedUsers\" : true,\n    \"displayName\" : \"Chrissy Altenwerth\",\n    \"updateTime\" : \"2022-06-20T09:41:26.769281Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_2XLARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"vkdrqyrqjursfssv2uljqex3fx9hfhul3fjj9bm3plv7qap0pk2dyj02g1hdg1bfipod6p6di0sl1qhgxvdp6454i84by2x27yebv965qfu4w1xvtniyw80fyw6bnwei7izwav2gbad73izxqp1srdj6onbu6iq2uq0diffsn2p73qrt0bakftr40sk0zpycc\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/558119\",\n      \"entityId\" : \"cfx7\",\n      \"userEmail\" : \"1nf4fp93dn8wiup3gku2pika5rixppdian9nvpw1dvclvb5djub1tyt7davefwsf0lhng87m0a08gnp1p1n3m1kk6qh702nkrxiwfticsh1p2ungmn6w5lhpvnrhs9sevzhjvd6wfu5slltened\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/147816\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/451800\",\n      \"rootUri\" : \"https://web.example.mocklab.io/656895\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/563362\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Quitzon\",\n      \"givenName\" : \"Hank\"\n    },\n    \"createTime\" : \"2022-09-19T11:48:26.769778Z\",\n    \"name\" : \"Josh Smith\",\n    \"userEmail\" : \"md0qea063mrl2strrn239gs13dt1ihm1tfwmoojomotyyluuqcbbzvbtsoiuxj1in5bi7dsrlpjp5qtjth91o2z8qg64s7p88ipz0vezoox692zy560ypdlji4fpzjqy8jqppw69j6n1ccb4de4p4kflkkaavlrwireg4nz8x\",\n    \"state\" : \"STATE_DEPLOYED\",\n    \"customerDomainPrefix\" : \"spr95cqe69as4gjqutl19pn6xha3bci1vm64r623nbye993ap3605d1em71jmim2v52byu8uxs1pjx70yxu8zcwly5plx8aras7d5u9vt57vgn59p8ao96r4mudd4m8d6xvp\"\n  }, {\n    \"ccaipManagedUsers\" : true,\n    \"displayName\" : \"Dr. Shana Buckridge\",\n    \"updateTime\" : \"2022-11-17T09:17:26.769948Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_XLARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"yr9wsje0oi50cjhs7dlpjo6ere91ba4eicohnk0sopdfcaajefja3jbk5330znaveli3xq1ddh6fb72b49o589xtqw4ib5akqbt8h91evzgoq6fq35ie9nv8es5g\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/451709\",\n      \"entityId\" : \"7008\",\n      \"userEmail\" : \"2maenp7h99tu0i6z61043eyc0c8p4rqgqzbilrpnh90mapfiwxgge48g8ugvw9rzkesvar4ni2kip6ivvtmd27h9u6u2yzs4ld066dntuqqmnbmrbnvwr1g928c0ijot9vxdtlr4qj9nmq0noux4mnaxst0lc28zog2vkigma4cw\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/817637\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/429672\",\n      \"rootUri\" : \"https://web.example.mocklab.io/604909\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/641368\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Schuster\",\n      \"givenName\" : \"Rhiannon\"\n    },\n    \"createTime\" : \"2023-02-13T09:03:26.770447Z\",\n    \"name\" : \"Mr. Moises Kunde\",\n    \"userEmail\" : \"8es5ajf1gtfjlm1gb7mjz4v8imla3d2nz2gdl0je7\",\n    \"state\" : \"STATE_TERMINATING\",\n    \"customerDomainPrefix\" : \"iar10ut2pz4kg1qhon9m5qgzhv5d0gw5cx68mh01ecr69lp7edjh2noi1v9fvmifjboszcp5tom1np3u7ouelhm8t9fhghtt3o9og2392h4\"\n  }, {\n    \"ccaipManagedUsers\" : true,\n    \"displayName\" : \"Chad Schmitt\",\n    \"updateTime\" : \"2022-12-27T08:16:26.770615Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_XLARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"pl3f7w4c9xli85alu2xr8imv56d5m62jma6qnrygc\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/153586\",\n      \"entityId\" : \"y22x\",\n      \"userEmail\" : \"yax3o6s46d6jtf3ugw9hcz37i14qhzxb9cxf09m34a2teyahl88coe4gem35ckvm42jx5oj6vxiimaslwyzx7uqy5c34y7qgpmr0vjj0hqs5ki6ya0da1wkvhm5w1yzxi3\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/942148\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/534516\",\n      \"rootUri\" : \"https://web.example.mocklab.io/274167\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/566272\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Ferry\",\n      \"givenName\" : \"Murray\"\n    },\n    \"createTime\" : \"2022-10-27T09:03:26.771122Z\",\n    \"name\" : \"Lazaro Kuvalis\",\n    \"userEmail\" : \"uon4vxorh04ezs3wmmamfjwi4ai8z42n4wnd17650o6uua9xkekov5u9hn2iy9m2uuoxtcw6tfkq03xjrf57w6rax939sjbooif48j7nmh1bx7mp5f37egasso5\",\n    \"state\" : \"STATE_TERMINATING_FAILED\",\n    \"customerDomainPrefix\" : \"41q3b6dp75wg5h6b7povm85gknuv9znmvhdetg84xzyo5wjib1culxrjhfth7cvlp3vegyv9kjsk690xmtuv05ors83hu97hl2294hepluvya3rgnh222o3gw7khcpe7h4shhsuvw4jxkigy6t08bp8p7ews\"\n  } ],\n  \"unreachable\" : [ \"u80f5ue9jyl6gvucijak5ex6o5jrkuwi0l81a44ahtwfu02xhsouqjeqtlv5kraj4k4s8xp32r9pudqk0uca6k5pcbek9x2vjqu2a0mg6tk74af3s47v82wt81dqx10b\", \"cagkeixkec862re830qcbbxo5ig9ksnvtb4q3raxtkjsjah1ng0lbuu830hngkfxwzc6exokr0cgjwadutto60ydy7utpxe9tm6z4xb03se2zk1r\", \"ou1is0215l1npevj7opio9daoawe2om3h9pu5cr9xpklqupuy60igb405dwgdfghbaz39y1bkz2dkpskojeiiyxmfwkzegw7ei7q1ejy411vqsv06dg01e4swhd6ua0bmfsixxwbjt4opic\", \"c3w64c3qqujl1ste4kwz8fckur15q8iy310tesljvpow8bupxmo\", \"99slgqclt2lqzhycdzfic47166fczuvyiehuazf10bxssao8v7ominhtqhwrtc8dumfqum5n9u949ba39hszeyz07sb6ucvw43voard8fxfz9fvf85\", \"0939fm5dsbosptxfg8qetbxjcau7m7i0cpoaaxabzehki4yhepdds10mp1h3cjy6lxacvjh9sv41mozoves7fdgjnp6circy7rfo0izfm2npnsz0z5rxozhegowhstf2ph597wv43zhgbxmgusumm6m30w7qaygt1tenc1m2xymlxb2mjmpjenw29k2cpyje9uov5vv\", \"azg4si0nnkme1yvuir5nhn6gihqyjmki25gjyaznen8pvzw1t1tpyqfvvvocgiebeoe83b0xe2ebqawiv2eecboiflnrqh0uybzjfdid0vkwlvhqnlofr7807e06qgqdjb77q814n5inf1had6rfmpznqmn28rw9gup5rgl0fpzwiymou\", \"6un2xvy75z0ihus4vqloyuxr9hbl3m098k9npzb3oizfdgdbht00ae16ndae6sacf5r8ff7c3sj2bmhu89mumymomilag3em1lhgqh1gstl0f3avax7a97o7zlj5zwsbh2t41204xm1rp9vh15y\" ],\n  \"nextPageToken\" : \"3xkudgcnxdniauoxrnc9ucg1lleedo9eatrusx82zg9c7kjmssf1sbjzzq3824t9mbisw5b46ngcmfldq5jl5e6aska45iq2sgpvnhogyll8ddf12ie1quucwbw8gq557c40kjbubfy6200rkti1svq36c1it0hcte7foskv4kjb\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "82b3dcaa-7a66-4f1f-85aa-311f7c4a0d71",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:26.771462Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.contactCenters.list",
          "schema" : {
            "description" : "Message for response to listing ContactCenters",
            "properties" : {
              "contactCenters" : {
                "description" : "The list of ContactCenter",
                "items" : {
                  "$ref" : "#/components/schemas/ContactCenter"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "A token identifying a page of results the server should return.",
                "type" : "string"
              },
              "unreachable" : {
                "description" : "Locations that could not be reached.",
                "items" : {
                  "type" : "string"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 2
  }, {
    "id" : "307c67f1-5964-485c-968f-74841bfa3544",
    "name" : "Starts asynchronous cancellation on a long-running operation. The server makes a...",
    "request" : {
      "urlPath" : "/v1alpha1/Silas+Runte:cancel",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "307c67f1-5964-485c-968f-74841bfa3544",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:26.765676Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.cancel",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 3
  }, {
    "id" : "0008699f-d662-422d-9e0c-a80a180254e4",
    "name" : "Lists operations that match the specified filter in the request. If the server d...",
    "request" : {
      "urlPath" : "/v1alpha1/Mr.+Boyd+Kub/operations",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"operations\" : [ {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Basil Howe\",\n    \"error\" : {\n      \"code\" : 6525317,\n      \"details\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"message\" : \"Non est voluptas ut. Vitae labore corrupti beatae fuga in dolorem quas. Architecto deleniti voluptate vero vero. Quisquam dolor laboriosam labore. Deserunt repellat sed et non omnis ea eum.\"\n    },\n    \"done\" : false\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Thurman O'Keefe\",\n    \"error\" : {\n      \"code\" : 459184926,\n      \"details\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"message\" : \"Exercitationem qui porro. Sed omnis corrupti itaque ducimus sed eum et. Placeat est quia possimus repudiandae cumque adipisci soluta.\"\n    },\n    \"done\" : true\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Tamar Greenholt DDS\",\n    \"error\" : {\n      \"code\" : 1573361909,\n      \"details\" : [ { }, { }, { }, { }, { }, { } ],\n      \"message\" : \"Omnis et dicta eius nihil distinctio voluptas delectus. Dolorum reprehenderit maxime voluptatibus ea saepe non. Aut illo sed necessitatibus aspernatur magnam asperiores. Quidem porro fuga molestiae. O\"\n    },\n    \"done\" : true\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Mrs. Shira Stanton\",\n    \"error\" : {\n      \"code\" : 323332557,\n      \"details\" : [ { }, { }, { }, { }, { } ],\n      \"message\" : \"Vitae at natus exercitationem qui aut. Ab modi earum quo doloribus ut quasi magni. Deserunt nemo error ab.\"\n    },\n    \"done\" : true\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Avery Parisian\",\n    \"error\" : {\n      \"code\" : 1803550737,\n      \"details\" : [ { }, { }, { }, { } ],\n      \"message\" : \"Corrupti quibusdam perferendis sed. Eos veritatis ex voluptatem omnis facilis aperiam nam. Consequatur est ipsa.\"\n    },\n    \"done\" : true\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Blaine Russel\",\n    \"error\" : {\n      \"code\" : 701880182,\n      \"details\" : [ { }, { }, { }, { }, { } ],\n      \"message\" : \"Vitae nihil magnam enim neque voluptas. Nisi ut quia aut accusantium. Et et officia quis labore. Beatae voluptas distinctio dolores a libero ut. Quia quia assumenda autem consequatur aliquid cupiditat\"\n    },\n    \"done\" : true\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Mrs. Nelson Gislason\",\n    \"error\" : {\n      \"code\" : 1326170194,\n      \"details\" : [ { }, { } ],\n      \"message\" : \"Quis ad sed ut velit. Ducimus excepturi quisquam. Eum earum est tempora praesentium eos. Omnis voluptas quod nesciunt aut ipsam. Sint error blanditiis consequatur in aut.\"\n    },\n    \"done\" : false\n  } ],\n  \"nextPageToken\" : \"ock82nbw0f6xshc358v01a37ra\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0008699f-d662-422d-9e0c-a80a180254e4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:26.765581Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.list",
          "schema" : {
            "description" : "The response message for Operations.ListOperations.",
            "properties" : {
              "nextPageToken" : {
                "description" : "The standard List next-page token.",
                "type" : "string"
              },
              "operations" : {
                "description" : "A list of operations that matches the specified filter in the request.",
                "items" : {
                  "$ref" : "#/components/schemas/Operation"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 4
  }, {
    "id" : "6a3bbacd-722a-4637-bf3b-5f851b2dc7aa",
    "name" : "Lists information about the supported locations for this service.",
    "request" : {
      "urlPath" : "/v1alpha1/Mao+Hickle/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"nextPageToken\" : \"hdqtmdonmnv9i3l4hgomkd0buya96jeg9m7wblpi2vyyoop638pwqxfpyto6qlbtt962jq6hr2078w086jzqspxplhcs4hjpsa3e96dr90iw0o36j20uzt1eed\",\n  \"locations\" : [ {\n    \"metadata\" : { },\n    \"displayName\" : \"Ms. Leatrice Ziemann\",\n    \"locationId\" : \"c3o8\",\n    \"name\" : \"Kimberlee Doyle\",\n    \"labels\" : { }\n  }, {\n    \"metadata\" : { },\n    \"displayName\" : \"Denver Abbott\",\n    \"locationId\" : \"8z3j\",\n    \"name\" : \"Andre Runolfsdottir V\",\n    \"labels\" : { }\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6a3bbacd-722a-4637-bf3b-5f851b2dc7aa",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:26.764341Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.list",
          "schema" : {
            "description" : "The response message for Locations.ListLocations.",
            "properties" : {
              "locations" : {
                "description" : "A list of locations that matches the specified filter in the request.",
                "items" : {
                  "$ref" : "#/components/schemas/Location"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "The standard List next-page token.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 5
  }, {
    "id" : "a48d17a3-3094-42cf-81d1-c48a56b99e24",
    "name" : "Updates the parameters of a single ContactCenter.",
    "request" : {
      "urlPath" : "/v1alpha1/Dr.+Michal+Bosco",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Stephen Sanford\",\n  \"error\" : {\n    \"code\" : 1239660855,\n    \"details\" : [ { } ],\n    \"message\" : \"Officia molestiae magnam corporis voluptatum nihil est saepe. Maxime dicta suscipit. Corporis laboriosam ut omnis unde sint. Aut corrupti nihil.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a48d17a3-3094-42cf-81d1-c48a56b99e24",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:26.7638Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.contactCenters.patch",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 6
  }, {
    "id" : "03098cb9-8719-419d-95a4-1b2d2be5a82a",
    "name" : "Gets the latest state of a long-running operation. Clients can use this method t...",
    "request" : {
      "urlPath" : "/v1alpha1/Alejandro+Deckow",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Darby Zemlak\",\n  \"error\" : {\n    \"code\" : 787850441,\n    \"details\" : [ { }, { }, { }, { }, { }, { } ],\n    \"message\" : \"Maxime eos cupiditate dicta consequatur fugiat. Neque ad omnis tempora. Asperiores eaque quo.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "03098cb9-8719-419d-95a4-1b2d2be5a82a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:26.763542Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.get",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 7
  }, {
    "id" : "f1b03399-287f-43d0-915d-31e100fe2465",
    "name" : "Deletes a long-running operation. This method indicates that the client is no lo...",
    "request" : {
      "urlPath" : "/v1alpha1/Maria+Lynch",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f1b03399-287f-43d0-915d-31e100fe2465",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:26.763176Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.delete",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 8
  } ]
}