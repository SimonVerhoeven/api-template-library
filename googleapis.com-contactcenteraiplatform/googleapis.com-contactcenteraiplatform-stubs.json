{
  "mappings" : [ {
    "id" : "782d2afc-5969-4df2-9893-78d3f77f784c",
    "name" : "Queries the contact center quota, an aggregation over all the projects, that bel...",
    "request" : {
      "urlPath" : "/v1alpha1/g6yvuds1kp33d0bfon844a9qrcueup0ja5gpf2idmzyrd98owus980khrcbx3lsp7dnzob5zhx:queryContactCenterQuota",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"contactCenterCountLimit\" : 451486124,\n  \"contactCenterCountSum\" : 37225112\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "782d2afc-5969-4df2-9893-78d3f77f784c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:49.08522Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.queryContactCenterQuota",
          "schema" : {
            "description" : "Represents a quota for contact centers.",
            "properties" : {
              "contactCenterCountLimit" : {
                "description" : "Reflects the count limit of contact centers on a billing account.",
                "format" : "int32",
                "type" : "integer"
              },
              "contactCenterCountSum" : {
                "description" : "Reflects the count sum of contact centers on a billing account.",
                "format" : "int32",
                "type" : "integer"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 0
  }, {
    "id" : "a36cbf4f-d27e-4366-a5eb-52b0cdbfe917",
    "name" : "Creates a new ContactCenter in a given project and location.",
    "request" : {
      "urlPath" : "/v1alpha1/zhferytezzdqbdsalegpj3fgq3liaal3vu01yt8d2tgf6rowk91prvvs6gnoie033tq028bbtjxwkp0z4m1yf99q5bl96jq/contactCenters",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Lanny Lowe\",\n  \"error\" : {\n    \"code\" : 1284380549,\n    \"details\" : [ { } ],\n    \"message\" : \"Doloribus itaque enim totam libero voluptas quam in. Velit aut suscipit sit ut tempora eveniet aut. Facilis ut blanditiis facilis. Dignissimos aspernatur illo quasi omnis illum eveniet earum. Cupidita\"\n  },\n  \"done\" : true\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a36cbf4f-d27e-4366-a5eb-52b0cdbfe917",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:49.085126Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.contactCenters.create",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 1
  }, {
    "id" : "b98f4eb6-520e-40f7-b232-f8dc716a57fe",
    "name" : "Lists ContactCenters in a given project and location.",
    "request" : {
      "urlPath" : "/v1alpha1/icdkd/contactCenters",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"contactCenters\" : [ {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Ezra Keeling\",\n    \"updateTime\" : \"2022-12-28T13:04:49.079324Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_3XLARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"qsxtc83vawk8sxb97484txz0nlzx3yaups1dmik0djpfvxbr5ynv33im325r8se177gjh2nhbz15ri1gngj1g30dsl0ed166i\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/862786\",\n      \"entityId\" : \"tw8l\",\n      \"userEmail\" : \"310r1pzwvo6vvghghnxmkot4d8ke8qyg0oghyyxfu6vrav7qjs5xepjizbqja1\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/621010\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/176380\",\n      \"rootUri\" : \"https://web.example.mocklab.io/019994\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/036312\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Conn\",\n      \"givenName\" : \"Arnold\"\n    },\n    \"createTime\" : \"2023-01-30T14:11:49.079913Z\",\n    \"name\" : \"Mrs. Roxy Emard\",\n    \"userEmail\" : \"vrs17f3rgu8e1agkvnpwtie1mjgqxkis7sitbmz2wfo4hvvv1dzvqtj8z809jvnlapwbzb7d8lcgy7afo1ydz5jon42lt82d25ifwqfkdvp4k2rc5bj3d0o37eqtxeh1y0adqnrvce2yg3caxxwpa4wcludx6cy7a7i0sqbjfp3ye4uuqujuu3c3jp2ja4a\",\n    \"state\" : \"STATE_TERMINATED\",\n    \"customerDomainPrefix\" : \"5bzrm9zshowaf77xof68pr2a16febjh2c9u2trcrdu2f3qrumf0bgl83d32cdlt7qqba90lw27z6rd9jjg9\"\n  }, {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Mr. Edgardo Olson\",\n    \"updateTime\" : \"2022-08-08T12:15:49.080079Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_2XLARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"rc3f8gad8zhcq5cb85wx1gp3ioj3\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/581135\",\n      \"entityId\" : \"r42v\",\n      \"userEmail\" : \"mxampleso4ai3nn2odre6yyg1teqdgbinq9vm5ajkh990qhj82wp3rr3s4bmriij234ppj5hbk8n8szgvh67dxm5xj2anik14ha0jt9yqc0mlb6l0flv407zvu7pp5my88s8cytfwisf5ezjw86rwcjzmsr95pameolgo3hvtet2h1g91rpa\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/312403\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/577475\",\n      \"rootUri\" : \"https://web.example.mocklab.io/347959\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/418377\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Satterfield\",\n      \"givenName\" : \"Vivian\"\n    },\n    \"createTime\" : \"2022-07-19T12:14:49.080675Z\",\n    \"name\" : \"Elinore Thompson\",\n    \"userEmail\" : \"wtu11\",\n    \"state\" : \"STATE_FAILED\",\n    \"customerDomainPrefix\" : \"j0dfz3i9itt34b65axxpqs7vc7j69muwgi9cfl8g15z1ictzvkm2giv3sp41dfm7pbem9z3hsi4tnnq8xctu2iy6ee1r90tmpk9t8l22zznqfn8ysyhckbynbos8q77dxcqkmrp1y5u1zngjh1w5mqx835zhwpwws7g7pskwi36dtcopnmek\"\n  }, {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Chuck Dibbert\",\n    \"updateTime\" : \"2022-06-07T12:47:49.080852Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_MEDIUM\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"ffty9nfcnn3zq6o4eopgr17mw1nlcs4wl1if26nsu7gkjwk9a5ktgp9l9qujd6fqwm9ps49jabnyuuzxgwe8b6nglb6t2dzu2k036doofp8hdogqbh7ixopl8vpnlanfgx454o1xc8b6\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/831086\",\n      \"entityId\" : \"wskx\",\n      \"userEmail\" : \"dq9209878k8v5ycnsiwhehsmmy81lu2u14kkz3j4t27kg1yh7wj671zdaae7zkgwnqchykv019atd7qq270clb4\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/671851\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/600240\",\n      \"rootUri\" : \"https://web.example.mocklab.io/730103\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/376847\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Smith\",\n      \"givenName\" : \"Marg\"\n    },\n    \"createTime\" : \"2023-03-13T13:12:49.081371Z\",\n    \"name\" : \"Jalisa Franecki DDS\",\n    \"userEmail\" : \"rtt8vzwxt3cj29bxvicj9t596xj0xyjr66f8x8cv9nyglhpxzlnl9wecpr9k0531or9zkdu8xp5tqw9xkpcmopbgflmo9b1apwyhxra5p3grrb5jubzfjwbvbhxxi5klacfvv9gu2f31acs9asmyyaz3t52lw27\",\n    \"state\" : \"STATE_FAILED\",\n    \"customerDomainPrefix\" : \"ogg1tckpi83ooxp2cxxoeak17guio4djb2861syvtjwn5j1znpxpfl8pgax\"\n  }, {\n    \"ccaipManagedUsers\" : true,\n    \"displayName\" : \"Sandy Mayert\",\n    \"updateTime\" : \"2022-11-26T13:35:49.081528Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_XLARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"03rmuqet3aalbrc179m08atffy5f88ap8au6qivb8fb6ojfcluqu51rqmmymc30pvbg3wg3wmvgp8flqig8795xuokhnt9nqlvb6se5whk7fzv3zk30pqdgegbocj1kl8l\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/780386\",\n      \"entityId\" : \"gd53\",\n      \"userEmail\" : \"4p903ehucba0hfbs6tqlkb81mx4ppjosmpr6hdg02q6qrvd187zkzhw2k9mmlih342irarcu94crtdiz7ohn7u4asx8w4weli4h5zu1s8w7jd05b0piamgn0jady5pofy0p5kpbjz34\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/406414\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/860247\",\n      \"rootUri\" : \"https://web.example.mocklab.io/964795\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/235713\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Prohaska\",\n      \"givenName\" : \"Miquel\"\n    },\n    \"createTime\" : \"2022-07-31T12:26:49.082021Z\",\n    \"name\" : \"Floyd Hessel IV\",\n    \"userEmail\" : \"7c4ur93a7wwhmp5vwgccjxzdkzwc2e68y0rzkk6vl110edslo1w3f2njeydr0d0rlctam3kw0zqoyv6zes14ilv3a9b1yzr9z3qd7bfkvjb4c3m2xivq9urpoywodlbaw7fb9b4xa3h1o0iultvxzu6cpi8y0e76grzg14z5p4f6vipebihhh9uqoe\",\n    \"state\" : \"STATE_DEPLOYED\",\n    \"customerDomainPrefix\" : \"5ytasvbg4fzuv3rzwo2fq92yqacq973k8ro6gbi2enmb5zhwrstv9tmpilz8876iwi5zkgiaiea7bp6t9eefjtfwkstvflmzi273g8oede2ymrmirkpka94ll0d8ob31gr8yo1htj5rh2bxz8yxmc4dy7csysqaetpgcksoumjp4rm4s02z8z7\"\n  }, {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Lily Metz\",\n    \"updateTime\" : \"2022-08-25T14:48:49.082162Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_3XLARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"0r7fvwpajaz1fhokvsr8wd8hny5mq9j12nqwwccrfshtw45iiabehabm2umcwxxhi1sox2m39kr59dhgsdowzatxpfmnl9wevl5iaq6xa7alaxp6uqz3gznxgkk055xm26z7zswjx7h89fvwe7s7ave1gxqmfvfbe0wnrrksjqpfd\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/515309\",\n      \"entityId\" : \"ym12\",\n      \"userEmail\" : \"ako2yzdh005uqkbp3ulttjnnrocl59195eixvlo74fcx7meq74jtt24on8hy78hl4ycq3agrxac7jbt\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/301182\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/563074\",\n      \"rootUri\" : \"https://web.example.mocklab.io/435834\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/733983\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Miller\",\n      \"givenName\" : \"Clifton\"\n    },\n    \"createTime\" : \"2022-06-23T15:29:49.082645Z\",\n    \"name\" : \"Coralee Gulgowski\",\n    \"userEmail\" : \"5ifir67fbiwq7gn6joug4hf5862coa8g4edrt88nthnef9m5x3mdwxbxv9h45t48dpv9jft8i9fs0vtiqwglmz40\",\n    \"state\" : \"STATE_TERMINATED\",\n    \"customerDomainPrefix\" : \"8ibydmvm9tjsq4rwd2da2cp7aizhhz1o2ziqs6c12gz4jzk699lvk6ecgnpnspzi1hopn66vmpx1ll5dk6i1pz59n0dkiwhvqbkk643ugbz61xgxsiap0zvn2chvoaqkge2v2fe9yef81r1vnda8huvni0ax8gfw5mp99fkc\"\n  }, {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Cruz Ledner III\",\n    \"updateTime\" : \"2022-08-15T15:09:49.082786Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_MEDIUM\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"n1ch43f8r4zb9xirfmrwkdqhpkchsrc90cwm10yxggyi5qdmc8g9sdfofk11wrd96jzfoxx7v3mk8xgv9zum8htmp6\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/704962\",\n      \"entityId\" : \"19j1\",\n      \"userEmail\" : \"9u23yn3muyg5i5w2qv1efk7agtq88fd5wn5pp1g7ox3ouk4rkgirklj47ngwegna3i6i45gpkgcffnrihy3p3ozvt8imjkr1fwrqpa2k57w5r3xct1f3a3bwmi5ah1wn7wzki4xtctz8f59x\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/976052\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/520187\",\n      \"rootUri\" : \"https://web.example.mocklab.io/928467\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/009016\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Krajcik\",\n      \"givenName\" : \"Lawrence\"\n    },\n    \"createTime\" : \"2023-02-23T13:44:49.083267Z\",\n    \"name\" : \"Reid Abernathy Sr.\",\n    \"userEmail\" : \"pmk4g0zhrcob7sd3gizw35odkmngzrxmkbupbtblr72yfr4jpliyvezo1yrk5e4m41rl91y3rlta0y3icnyo96zuwm1xqi94f0rgf4wvnwzea57fcoi9lydgz20cea1y1odimve8chx2x\",\n    \"state\" : \"STATE_DEPLOYED\",\n    \"customerDomainPrefix\" : \"rp6evn5a81ggwdi5f4jglw9dby3dk670x2bxh6esw9inilrb0h57u47toun1gz3caob94m983nbwqcqvux49z30ln3a0lhvou8y68dt2yf3n8m89kt4efmsdos67e841sh88tm3cx74f5rg5v895ay8f6a02ng5\"\n  }, {\n    \"ccaipManagedUsers\" : false,\n    \"displayName\" : \"Miss Mack Howe\",\n    \"updateTime\" : \"2022-11-07T14:19:49.083411Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_MEDIUM\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"jsynvx7\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/648260\",\n      \"entityId\" : \"ot15\",\n      \"userEmail\" : \"wuev3o5cuc2bi7uc30srgeyllyr43oqoviqqrx27efgqrqx0iz39zhkc\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/259702\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/245980\",\n      \"rootUri\" : \"https://web.example.mocklab.io/636446\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/353927\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Wolf\",\n      \"givenName\" : \"Juliette\"\n    },\n    \"createTime\" : \"2022-12-06T13:45:49.0839Z\",\n    \"name\" : \"Mr. Chas Brakus\",\n    \"userEmail\" : \"uu6ik3odrzojso7k6r4hcz9i6wwvpthegwhr59nup37y8i1sl0jjr7778fkx21gqwbowfhsl4th\",\n    \"state\" : \"STATE_TERMINATING_FAILED\",\n    \"customerDomainPrefix\" : \"ilxd3gybdkn2ax881oh\"\n  }, {\n    \"ccaipManagedUsers\" : true,\n    \"displayName\" : \"Signe Jenkins\",\n    \"updateTime\" : \"2023-03-01T12:40:49.084043Z\",\n    \"instanceConfig\" : {\n      \"instanceSize\" : \"STANDARD_2XLARGE\"\n    },\n    \"labels\" : { },\n    \"samlParams\" : {\n      \"certificate\" : \"hz9utqo41m64z7fb12mfh5ke\",\n      \"ssoUri\" : \"https://web.example.mocklab.io/298364\",\n      \"entityId\" : \"s499\",\n      \"userEmail\" : \"gdyh6opulopi4urc0812fxcfvr3cxj9kueny80eoujbdd\"\n    },\n    \"uris\" : {\n      \"chatBotUri\" : \"https://web.example.mocklab.io/127468\",\n      \"mediaUri\" : \"https://web.example.mocklab.io/993981\",\n      \"rootUri\" : \"https://web.example.mocklab.io/087254\",\n      \"virtualAgentStreamingServiceUri\" : \"https://web.example.mocklab.io/743794\"\n    },\n    \"adminUser\" : {\n      \"familyName\" : \"Roberts\",\n      \"givenName\" : \"Rickie\"\n    },\n    \"createTime\" : \"2022-12-14T12:45:49.084533Z\",\n    \"name\" : \"Belia Lemke V\",\n    \"userEmail\" : \"gi5oop2twqkmeirzgvdffb7\",\n    \"state\" : \"STATE_TERMINATING\",\n    \"customerDomainPrefix\" : \"st4ouegn71b5nmppvdl2aefhf\"\n  } ],\n  \"unreachable\" : [ \"zcg8q6p\", \"aqwd8twq7ycy4cbqk32nr7tl91hif6ukkm8y4612nvuff0bqcyupxrobkfzgk0v8vuo6ye2z11olb4wozwrwbb546e3y9j9cz2w4ptpid8ce2373dkfbk\", \"44z2kmmjwjm56kaiya8o2fxycejfgvqi29grc5uup7nawjj4s6a56otm58u4v3z8gdsxgpa4if0ag9qmbs12zpeot0j4tnrx2l3tlzdz98a1l9tq5riyoxt886fmixmlco6ban5\", \"hmv9kytyul2g69ocm1yt01gz4lqgia8k814a3lwiv1yqgfe0rwv1e7modmc623fakh9ng0i1dmvp2x08almr4rtexciqk8d2\", \"l2qj07udqvima3vukv1cx9xkicegvfb8jk4c8k2ogvibfsmr1jn0ps333hbzz4p1vjbh3tfxt64h3iw0\", \"stjc7mz7kyaxayjov6neap0y0ch29i36vloil9aflq2iy\", \"2mp37sodqvltrfoy826lnagiewd00aljfow4coex3nsv5wsm94rde45sfg2n4w8cpg0kplyi9z11t\" ],\n  \"nextPageToken\" : \"4xfs4cmjgobgartffsxf15urtmh0nih3jr51osvbua93w9zqt0semg8w9azng0xrsjn\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b98f4eb6-520e-40f7-b232-f8dc716a57fe",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:49.084856Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.contactCenters.list",
          "schema" : {
            "description" : "Message for response to listing ContactCenters",
            "properties" : {
              "contactCenters" : {
                "description" : "The list of ContactCenter",
                "items" : {
                  "$ref" : "#/components/schemas/ContactCenter"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "A token identifying a page of results the server should return.",
                "type" : "string"
              },
              "unreachable" : {
                "description" : "Locations that could not be reached.",
                "items" : {
                  "type" : "string"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 2
  }, {
    "id" : "516a6ee5-46fd-4be6-9926-092b11caef52",
    "name" : "Starts asynchronous cancellation on a long-running operation. The server makes a...",
    "request" : {
      "urlPath" : "/v1alpha1/Yoshie+Homenick:cancel",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "516a6ee5-46fd-4be6-9926-092b11caef52",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:49.079215Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.cancel",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 3
  }, {
    "id" : "27d051a4-6fee-43d8-8665-999a5e7e32c0",
    "name" : "Lists operations that match the specified filter in the request. If the server d...",
    "request" : {
      "urlPath" : "/v1alpha1/Karissa+Hagenes/operations",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"operations\" : [ {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Reyes Turner\",\n    \"error\" : {\n      \"code\" : 1636453791,\n      \"details\" : [ { }, { }, { }, { } ],\n      \"message\" : \"Laborum repudiandae ullam repellat quae. Quidem velit sunt in officiis delectus dolores distinctio. Iure eos velit laudantium temporibus molestiae enim aperiam. Deleniti labore ea voluptatibus. Est po\"\n    },\n    \"done\" : false\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Charles Senger\",\n    \"error\" : {\n      \"code\" : 1129200768,\n      \"details\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"message\" : \"Sequi aut blanditiis ex nobis. Possimus accusamus laboriosam. Beatae ex est. Modi dolores aut minima blanditiis enim.\"\n    },\n    \"done\" : true\n  } ],\n  \"nextPageToken\" : \"0uhaba5t626sytgwhd5oq5i7j9uvwzdx5f5s82dpk4f0qgk8eppoumlargqqh8yc3000jyfrccfzdoezhg65efnk3mve01r4oi5u6sqfx9vwcuz9ft088ykr\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "27d051a4-6fee-43d8-8665-999a5e7e32c0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:49.07914Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.list",
          "schema" : {
            "description" : "The response message for Operations.ListOperations.",
            "properties" : {
              "nextPageToken" : {
                "description" : "The standard List next-page token.",
                "type" : "string"
              },
              "operations" : {
                "description" : "A list of operations that matches the specified filter in the request.",
                "items" : {
                  "$ref" : "#/components/schemas/Operation"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 4
  }, {
    "id" : "618b0f4d-ab00-4252-944e-6ab1bbeaf50a",
    "name" : "Lists information about the supported locations for this service.",
    "request" : {
      "urlPath" : "/v1alpha1/Miss+Asuncion+Dooley/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"nextPageToken\" : \"0swx2\",\n  \"locations\" : [ {\n    \"metadata\" : { },\n    \"displayName\" : \"Noella Krajcik V\",\n    \"locationId\" : \"8611\",\n    \"name\" : \"Ashlea Ryan\",\n    \"labels\" : { }\n  }, {\n    \"metadata\" : { },\n    \"displayName\" : \"Dr. Bryant Kunze\",\n    \"locationId\" : \"i03g\",\n    \"name\" : \"Isiah Cartwright\",\n    \"labels\" : { }\n  }, {\n    \"metadata\" : { },\n    \"displayName\" : \"Janee Nicolas PhD\",\n    \"locationId\" : \"w466\",\n    \"name\" : \"Mr. Scott Farrell\",\n    \"labels\" : { }\n  }, {\n    \"metadata\" : { },\n    \"displayName\" : \"Ernestina Vandervort\",\n    \"locationId\" : \"1d06\",\n    \"name\" : \"Emanuel Deckow Sr.\",\n    \"labels\" : { }\n  }, {\n    \"metadata\" : { },\n    \"displayName\" : \"Rudolph Bednar\",\n    \"locationId\" : \"zf19\",\n    \"name\" : \"Mellissa Rolfson II\",\n    \"labels\" : { }\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "618b0f4d-ab00-4252-944e-6ab1bbeaf50a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:49.07879Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.list",
          "schema" : {
            "description" : "The response message for Locations.ListLocations.",
            "properties" : {
              "locations" : {
                "description" : "A list of locations that matches the specified filter in the request.",
                "items" : {
                  "$ref" : "#/components/schemas/Location"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "The standard List next-page token.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 5
  }, {
    "id" : "144a4da7-ff32-4e65-83c4-8397ae1a4055",
    "name" : "Updates the parameters of a single ContactCenter.",
    "request" : {
      "urlPath" : "/v1alpha1/Branda+Waelchi+III",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Mrs. Salina Pollich\",\n  \"error\" : {\n    \"code\" : 988514573,\n    \"details\" : [ { }, { }, { } ],\n    \"message\" : \"Eum deleniti perferendis sit debitis aut eligendi. Sint corrupti aut voluptatem. Sed vel ut velit enim. Consequuntur repellat assumenda non.\"\n  },\n  \"done\" : true\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "144a4da7-ff32-4e65-83c4-8397ae1a4055",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:49.077845Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.contactCenters.patch",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 6
  }, {
    "id" : "11775fb3-51f3-4c91-bfc0-a0d1c150b9d0",
    "name" : "Gets the latest state of a long-running operation. Clients can use this method t...",
    "request" : {
      "urlPath" : "/v1alpha1/Debi+Toy",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Quincy Boyer DVM\",\n  \"error\" : {\n    \"code\" : 74436715,\n    \"details\" : [ { }, { }, { }, { }, { }, { } ],\n    \"message\" : \"Ad atque et est voluptatem. Est consequuntur dolorem expedita. Omnis nobis laborum ducimus eos libero et facilis. Et qui est. Quae aspernatur voluptatem eum.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "11775fb3-51f3-4c91-bfc0-a0d1c150b9d0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:49.077635Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.get",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 7
  }, {
    "id" : "1dec0441-5ed9-4e40-b174-424226f7446a",
    "name" : "Deletes a long-running operation. This method indicates that the client is no lo...",
    "request" : {
      "urlPath" : "/v1alpha1/Junior+Grant",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1dec0441-5ed9-4e40-b174-424226f7446a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:49.077327Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "contactcenteraiplatform.projects.locations.operations.delete",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 8
  } ]
}