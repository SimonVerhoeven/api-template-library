{
  "mappings" : [ {
    "id" : "43b8ab62-25bc-3c4b-b55a-2b17e9281f98",
    "name" : "Retrieves the consented UserInfo and other claims about the logged-in subject (e...",
    "request" : {
      "urlPath" : "/v1/userinfo",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"friendly_name\" : \"Quinton Schmidt\",\n  \"user_sid\" : \"US1edC30eaA24AeBFe6d9046B72B6Dfd19\",\n  \"last_name\" : \"Reynolds\",\n  \"first_name\" : \"Donovan\",\n  \"email\" : \"an2shl1gkmuorm476nbv6mupunf01xva3rzbbflcc28ng1b76jeysraj5kv1mw5y4nsfy72dsa2tbeivt02cd78vsslkvhm19zkl9pqpyeldbza1t67m0voh9atrj2ir2dwk1squ0r34li6gcq24q7x2mj83748sbkn5i6y3wov2kco4o8uhy3dcq607rji\",\n  \"url\" : \"https://web.example.mocklab.io/080691\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "43b8ab62-25bc-3c4b-b55a-2b17e9281f98",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "FetchUserInfo",
          "schema" : {
            "properties" : {
              "email" : {
                "description" : "The end-user's preferred email address.",
                "nullable" : true,
                "type" : "string"
              },
              "first_name" : {
                "description" : "The first name of the end-user.",
                "nullable" : true,
                "type" : "string"
              },
              "friendly_name" : {
                "description" : "The friendly name of the end-user.",
                "nullable" : true,
                "type" : "string"
              },
              "last_name" : {
                "description" : "The last name of the end-user.",
                "nullable" : true,
                "type" : "string"
              },
              "url" : {
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              },
              "user_sid" : {
                "description" : "The URL of the party that will create the token and sign it with its private key.",
                "maxLength" : 34,
                "minLength" : 34,
                "nullable" : true,
                "pattern" : "^US[0-9a-fA-F]{32}$",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 0
  }, {
    "id" : "e83088d6-847d-36a5-a235-c2d6e8d6ff26",
    "name" : "Issues a new Access token (optionally identity_token & refresh_token) in exchang...",
    "request" : {
      "urlPath" : "/v1/token",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"access_token\" : \"lxifoxl23zivtn4dp1uoje541ryu6mly2bmmgr6ncbxrkjzw1da5gpz3vcdiibvmmiadq5eaydatpo4y3c7wjz47kpw9iirv8ru\",\n  \"access_token_expires_at\" : \"2023-11-10T15:51:32.696Z\",\n  \"refresh_token\" : \"80azsjzwgeoz6ku8dpwl3aj7xmzoj15061nlcquqyhj5n6y48pnxn\",\n  \"refresh_token_expires_at\" : \"2023-08-03T18:42:59.696Z\",\n  \"id_token\" : \"3w262kylevr7eil2ze0mq3m7i4c0b6dmnwkki6hz6n5bjxblx7ig5xofas3di3wwsnvwsyz7ipnm0c8bd4arjxyjkmiv1xdn04t6gynhf0us8n9oba39yllw5ebqy1rfosn5zwaaxey5vext61rbhnkhlbj5cgy1zyhi3ua8r7s81pth6o\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e83088d6-847d-36a5-a235-c2d6e8d6ff26",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "CreateToken",
          "schema" : {
            "properties" : {
              "access_token" : {
                "description" : "Token which carries the necessary information to access a Twilio resource directly.",
                "nullable" : true,
                "type" : "string"
              },
              "access_token_expires_at" : {
                "description" : "The date and time in GMT when the refresh token expires in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.",
                "format" : "date-time",
                "nullable" : true,
                "type" : "string"
              },
              "id_token" : {
                "nullable" : true,
                "type" : "string"
              },
              "refresh_token" : {
                "description" : "Token which carries the information necessary to get a new access token.",
                "nullable" : true,
                "type" : "string"
              },
              "refresh_token_expires_at" : {
                "description" : "The date and time in GMT when the refresh token expires in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.",
                "format" : "date-time",
                "nullable" : true,
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 1
  }, {
    "id" : "c996a321-706e-368e-98d1-a17ab02796bd",
    "name" : "Issues a new Access token (optionally identity_token & refresh_token) in exchang...",
    "request" : {
      "urlPath" : "/v1/device/code",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"user_code\" : \"vo3e93989vkgcc9bbflnx0tj9d14nnlyw0oauoi8vwq7781y1\",\n  \"device_code\" : \"bkd1g6h7q1ztg0eiha1vwycf47fmjzxbfyr94ml5ddouhbbuqz0hsdb9468h5kaypvgnu9o0rjk3t2wovavodl2x6jj49to8y9mjjylj5p2nesonkym37tlshom6bcn2pi6dz28vb5zyq5gtux062dl6mze0f9vnjvkays1\",\n  \"interval\" : 6307034928732057402,\n  \"verification_uri_complete\" : \"eycumkydt6llwirue3onv251yg74tif5f4cixpsqa5pfo5f79rm8qazvohg201yvdjuci2ki9pcn4pq33uigqmh5luntug6x3enwadxg6v7h4bzive2ck82jai3o9jl9q\",\n  \"verification_uri\" : \"https://web.example.mocklab.io/917484\",\n  \"expires_in\" : 8838338230314533732\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c996a321-706e-368e-98d1-a17ab02796bd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "CreateDeviceCode",
          "schema" : {
            "properties" : {
              "device_code" : {
                "description" : "The device verification code.",
                "nullable" : true,
                "type" : "string"
              },
              "expires_in" : {
                "description" : "The expiration time of the device_code and user_code in seconds.",
                "format" : "int64",
                "nullable" : true,
                "type" : "integer"
              },
              "interval" : {
                "description" : "The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.",
                "nullable" : true,
                "type" : "integer"
              },
              "user_code" : {
                "description" : "The verification code which end user uses to verify authorization request.",
                "nullable" : true,
                "type" : "string"
              },
              "verification_uri" : {
                "description" : "The URI that the end user visits to verify authorization request.",
                "nullable" : true,
                "type" : "string"
              },
              "verification_uri_complete" : {
                "description" : "The URI with user_code that the end-user alternatively visits to verify authorization request.",
                "nullable" : true,
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 2
  }, {
    "id" : "7d294d60-6228-3f66-bb9f-3af22be477c2",
    "name" : "Fetches public JWKs",
    "request" : {
      "urlPath" : "/v1/certs",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"keys\" : { },\n  \"url\" : \"https://web.example.mocklab.io/674267\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7d294d60-6228-3f66-bb9f-3af22be477c2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "FetchCerts",
          "schema" : {
            "properties" : {
              "keys" : {
                "description" : "A collection of certificates where are signed Twilio-issued tokens.",
                "nullable" : true
              },
              "url" : {
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 3
  }, {
    "id" : "12cabd04-7748-39fb-bf24-64fee55a1b85",
    "name" : "Fetch configuration details about the OpenID Connect Authorization Server",
    "request" : {
      "urlPath" : "/v1/.well-known/openid-configuration",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"response_type_supported\" : [ \"n203k8sgxp81tvh09da90newo2njldt4zy6yvwhnnexfnx373kwtp5x757mnin6npsdikxono9dtrtjppqt28d4ibtl5oljadzx5o1kase4hwhzzz36oqjzeej06vla7asn8f56fqiwtryp0y4q0669ta6bass\", \"yvf2urrnpfl5da2xufx14lpqsgi428gmolru2eqy1veweycumdwmseh9g5almbq5ysndv6kqplez6sjneujjoeahp5fmmxuxqktd5bidulx0kouk4yt869qh9lv9z49zxdw3p2gv63dh9y\", \"j018ui1k7kb91oceq3ecpj7mognuwj0b7t3rwli95t0omktouiozct35xbe50hvznnymh3lzdsv06rz4ccg88bzrg3dredbvn6wiou7ptg7i7k8xo5yfsk8jbub5msenkdg2yvpwnbgcq7lse\", \"9f1s69ilhukz9bme6rtgllq3w3nwdizop58n4l4wfkklpzebgctgxzbxgt3v9wpyn4ncz2d74y5yzbqnekgig3xb4dyy6l8ke16perhd5ajwfhtloxw\", \"w4v3jnv3zedcq5fibk1wtb9vv7ed462z43i9l546s\", \"he51b2s044h94rpp1pu93ke298057991dz74l20hilirtz\" ],\n  \"revocation_endpoint\" : \"ec4cjegbl3umobo2t39qpcio4hgzgj1nwpu1g8lss9\",\n  \"scopes_supported\" : [ \"88hjkog7ybgm26y3o1l7l6iy1qxp6d89m5mwfe3ssq\", \"poaljztoqncjlpevj0dw8xcs1253c520cva4p5477b9shwqhpn083fkq\", \"ucnsb852cktuspo0qpg5mcp9pbhsiupxdgvp3s7dx73729mgslyo31gl179p2u84f1vf2z10dvpa0m8kiwxhdc27e8b3zl3d3zuig9rmot8biv04pdli4jhj04s0bt0xxdlh4vl\", \"54h2kxdlttpe3qhanaoy0rthh2vyoupzlftgzwrow9qrz98t3vbe7shncbg089nw10krj36e8r8y1lh3dxf8lj89z4rp5gkhej3ddipvaxamt3j5uuqci0w89ny11pkxo45sj2pat927ze67lvqrvv88yqvg2rne6jkrym9vyg69r7v1f0wwihtdku72mgq1wj\", \"776d456hfvc9za304fur48ioah06pqnuvfmr1yeqe4mxqvqy48s4hmxu2n5z2bm3war8fay9vvmo843bvwkuu1nnhkde7p2c6yvom5z5lbnrl\", \"npehvltk4fku6rostj1e6s2sxzyyhd3u5vquafl4y41n30tl6lsm4845e73wi3ayqa59wwlz43mfxtu9k58ac7atjylgicaje5jgbgozjsjs023f89\" ],\n  \"issuer\" : \"swf7ybc2z818oldb493ai3jxkqjnq3fydnrdkax3w7q0osjijfg6u4thfb6ix752v8r8bycjzas1e2m6991d6pibn64ixgfmjwgcl8g7x5spcb06z8k8ipy6oen7ll60cr7m4vu394yzh9xm9s6d2ge7xc5fryhgb51sag86syhjkrjcy4y\",\n  \"subject_type_supported\" : [ \"e1is7w4dj0p0eek0bcd5368bwkdhe2z92rlwwdbofd12sbbuf45ik4yreslzy4ftnfwj5nchsha73adgyo3jugs3ks7wufce9oica4wq8ibrz1mq9jj1n9etzwg5cuyh9e0gj\" ],\n  \"url\" : \"https://web.example.mocklab.io/922938\",\n  \"authorization_endpoint\" : \"evxgtz9nykgt2ag778xfs4aii66g1361ozx3os9sc20nvhu3fypv9n9wp9r576oimwrdbtztefccwp9x4f7njr8ij3ek9c1bnu45161dxhjiuis6mzhpfslcwqjpdk4d05si012q8lvk6yg2e6rcp7jtv5q1grtnotr9nladkjaqagjwsvrtegnec7uuzcczohc\",\n  \"userinfo_endpoint\" : \"vow5fle1j8xn3ygvdxz24urh0ia0z8687wi0t34p37rlmul0z4aq6xz8u6dykrf54mrj6op4gg97qif66pmg72mr293lopi7no7k359kxzzm77k8f1mquc5th8if7abtrjxdclphnwhwo\",\n  \"device_authorization_endpoint\" : \"992w9pexd\",\n  \"claims_supported\" : [ \"6qenh0ihmq6awvab81c5ij34wz1xr0n693vt91p2k17plwu8drp9l0hgeyolnbzh6f78kzfev\", \"02szdkno627i99hm4bul3vy6tj0krjmk2uj9cvdvtef5gp095n8bzcb9y776f7l5xwhl1fnjq6q4e33egrfu6720dbgi8jeujs6w0jddrox37v7lwkrtax35052gjvljy2u9e81j2e8gco354wgdjil1s3nzf3ck72x4yuu2c3cpcbkbr9uhvt0kdja\", \"mgmggs02uaxzkqcahlcbunw00f3hyugi8vd696fxssusf339sssfxh8b6ucs772u9ggtt9du89db53a7hegtmrhu4dpr0qi1r9o4nmy71zl6z9d6ssxmbgrvdzelwkphwrt7ohypf3nfh1grystwltebhyuul0t4ebyj8dd8e16\", \"hkpdwovl82qppcrbnkxb23jy42o05qbg18xbgrjq2r1e5uph1kqciv57edt6q4vu71djq105dtph0s8wc750vlx66gl7lsyuf34gi3cwq5mezv1fn1xednf26fnxpagtq225egtvbjj9qda3upjobjzcs186gfdmrlwgt415r7km10gy58eg7wp7zf3745mmu1mvu\", \"4gz3un5lfa0jc9htqrfy1jdfh3h5eqdjecbum4eflr1ju0hut1b\", \"jksd3czgfmfamo6zq0zrge3nnaadnsa6m8nc6cwj72agvdqckzhr8bxc5szxk2qpoj2e1r42j92e9pqu6aag8po3zt4gh\", \"emtpgfu79izky38kgftusuhistvak4smvy8ftpr572chl22m\" ],\n  \"id_token_signing_alg_values_supported\" : [ \"s30gt6svetvuq10vchdxz8ln50qgdsu7w7dzbn\", \"0qokd5jsfc3nt43ovfiaz0g84arz0skl170i347gom46c7qmw8r9r2n7wgovgzpm34ubqy3sw4l4pzegxpgcux6fmz6sfhnhcbje\" ],\n  \"jwk_uri\" : \"https://web.example.mocklab.io/157790\",\n  \"token_endpoint\" : \"bo2gel5qen7dlgwlgd0k6jfbqtuxdao2q7gp1acpn2fd8rsy533y4qlar7tz2niaur4mwwnol7mp0od41qamhwi2poovrpra4sejn3evjx3m9r739444opx1nwlae6s1ohez67mnrdc8okjv9hr4xla\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "12cabd04-7748-39fb-bf24-64fee55a1b85",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "FetchOpenidDiscovery",
          "schema" : {
            "properties" : {
              "authorization_endpoint" : {
                "description" : "The endpoint that validates all authorization requests.",
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              },
              "claims_supported" : {
                "description" : "A collection of claims supported by authorization server for identity token",
                "items" : {
                  "type" : "string"
                },
                "nullable" : true,
                "type" : "array"
              },
              "device_authorization_endpoint" : {
                "description" : "The endpoint that validates all device code related authorization requests.",
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              },
              "id_token_signing_alg_values_supported" : {
                "description" : "A collection of JWS signing algorithms supported by authorization server to sign identity token.",
                "items" : {
                  "type" : "string"
                },
                "nullable" : true,
                "type" : "array"
              },
              "issuer" : {
                "description" : "The URL of the party that will create the token and sign it with its private key.",
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              },
              "jwk_uri" : {
                "description" : "The URL of your JSON Web Key Set. This set is a collection of JSON Web Keys, a standard method for representing cryptographic keys in a JSON structure.",
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              },
              "response_type_supported" : {
                "description" : "A collection of response type supported by authorization server.",
                "items" : {
                  "type" : "string"
                },
                "nullable" : true,
                "type" : "array"
              },
              "revocation_endpoint" : {
                "description" : "The endpoint used to revoke access or refresh tokens issued by the authorization server.",
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              },
              "scopes_supported" : {
                "description" : "A collection of scopes supported by authorization server for identity token",
                "items" : {
                  "type" : "string"
                },
                "nullable" : true,
                "type" : "array"
              },
              "subject_type_supported" : {
                "description" : "A collection of subject by authorization server.",
                "items" : {
                  "type" : "string"
                },
                "nullable" : true,
                "type" : "array"
              },
              "token_endpoint" : {
                "description" : "The URL of the token endpoint. After a client has received an authorization code, that code is presented to the token endpoint and exchanged for an identity token, an access token, and a refresh token.",
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              },
              "url" : {
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              },
              "userinfo_endpoint" : {
                "description" : "The URL of the user info endpoint, which returns user profile information to a client. Keep in mind that the user info endpoint returns only the information that has been requested.",
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 4
  } ]
}