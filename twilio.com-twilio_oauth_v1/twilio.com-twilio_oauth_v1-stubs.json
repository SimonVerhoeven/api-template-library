{
  "mappings" : [ {
    "id" : "6ff44d08-6a2a-4007-ba20-7db30c9fb238",
    "name" : "Retrieves the consented UserInfo and other claims about the logged-in subject (e...",
    "request" : {
      "urlPath" : "/v1/userinfo",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"friendly_name\" : \"Eula Thompson\",\n  \"user_sid\" : \"USd887e9C003B11f1ff87e6dc3cddB8A0A\",\n  \"last_name\" : \"Gottlieb\",\n  \"first_name\" : \"Laci\",\n  \"email\" : \"6ud6xc60vw201xpp5vpprf1brwfid7ia9s7duki2eoifv412hx5mkcxj1j84qkomj6ep1wna9skw8b7puftai4nji9ho0vy95rr910frxkoewnxuh308awvmqp6pb5zwa7m20fol1kkunwdlidc0brpgof0dvh78nyjf4uxkhhy31m\",\n  \"url\" : \"https://web.example.mocklab.io/642703\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6ff44d08-6a2a-4007-ba20-7db30c9fb238",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:18.513702Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "FetchUserInfo",
          "schema" : {
            "properties" : {
              "email" : {
                "description" : "The end-user's preferred email address.",
                "nullable" : true,
                "type" : "string"
              },
              "first_name" : {
                "description" : "The first name of the end-user.",
                "nullable" : true,
                "type" : "string"
              },
              "friendly_name" : {
                "description" : "The friendly name of the end-user.",
                "nullable" : true,
                "type" : "string"
              },
              "last_name" : {
                "description" : "The last name of the end-user.",
                "nullable" : true,
                "type" : "string"
              },
              "url" : {
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              },
              "user_sid" : {
                "description" : "The URL of the party that will create the token and sign it with its private key.",
                "maxLength" : 34,
                "minLength" : 34,
                "nullable" : true,
                "pattern" : "^US[0-9a-fA-F]{32}$",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "ac4923c4-a270-4e00-8096-85da26696a87",
    "name" : "Issues a new Access token (optionally identity_token & refresh_token) in exchang...",
    "request" : {
      "urlPath" : "/v1/token",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"access_token\" : \"unaafmfn0puarsle4azafdn7x1b9mic5xh2k9mci\",\n  \"access_token_expires_at\" : \"2023-06-09T01:09:49.513Z\",\n  \"refresh_token\" : \"k74qp21lze2avc6ph6t3aatvsk5ugl3105qhfpoz4xd67ibqfozzf8qj099t7xjb16873fzmklqmqgqe8fmkjb925hge7iyhbpar0j7qqj8dnl748hg1ev3l9di9bxqgmrxbbzcs6qv0rv6w06djt3sqm8gpn69qer0orq27k6c25szmmobp\",\n  \"refresh_token_expires_at\" : \"2023-03-26T19:09:51.513Z\",\n  \"id_token\" : \"e3oxfs\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ac4923c4-a270-4e00-8096-85da26696a87",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:18.513388Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "CreateToken",
          "schema" : {
            "properties" : {
              "access_token" : {
                "description" : "Token which carries the necessary information to access a Twilio resource directly.",
                "nullable" : true,
                "type" : "string"
              },
              "access_token_expires_at" : {
                "description" : "The date and time in GMT when the refresh token expires in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.",
                "format" : "date-time",
                "nullable" : true,
                "type" : "string"
              },
              "id_token" : {
                "nullable" : true,
                "type" : "string"
              },
              "refresh_token" : {
                "description" : "Token which carries the information necessary to get a new access token.",
                "nullable" : true,
                "type" : "string"
              },
              "refresh_token_expires_at" : {
                "description" : "The date and time in GMT when the refresh token expires in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.",
                "format" : "date-time",
                "nullable" : true,
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "27d5c0af-5545-40fc-a490-38dcd47f144b",
    "name" : "Issues a new Access token (optionally identity_token & refresh_token) in exchang...",
    "request" : {
      "urlPath" : "/v1/device/code",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"user_code\" : \"ud1vvbxsywi6utdfdoyjhey555eik975gjv1xmhoxgeovae2g4fg28oz2tml6b48uqgh3tntdauevo4dv0nob4zfupq94tf1dzeqnr45r6gtpyhecy0jfmq9zegt3dz5ltvxhyzlvsi0dpxrrkh2b1ior3mytgddik1pn\",\n  \"device_code\" : \"qtocx2z0xh64b7avdvk2phco9mzsnsxy528td0eozvme80ili49km4dhi64f5kz3uocy9h1r462rgxrfcc8t1s3sh1gaxvkbxy3cb2rah3zq4b222a9ebxrochednfcmvhmvflq085g2kodlxb353ktp5zvcuy0fftcw78ca4dhhcxhhvn6fjzpok\",\n  \"interval\" : 7868269536499458901,\n  \"verification_uri_complete\" : \"flfmv7sxxep2b0aoerk2ttvsiu445k98tw610k7b22s8d24fb0nl11vyxk6m8238znudbsmujius2938uimnxfh8ec98gf4kcxktccxnxqz1xlnzihkb8y28ey96dfwogisizkc8nfq7spx53qzpo01zjetie1\",\n  \"verification_uri\" : \"https://web.example.mocklab.io/534167\",\n  \"expires_in\" : 8419086990458200255\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "27d5c0af-5545-40fc-a490-38dcd47f144b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:18.51324Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "CreateDeviceCode",
          "schema" : {
            "properties" : {
              "device_code" : {
                "description" : "The device verification code.",
                "nullable" : true,
                "type" : "string"
              },
              "expires_in" : {
                "description" : "The expiration time of the device_code and user_code in seconds.",
                "format" : "int64",
                "nullable" : true,
                "type" : "integer"
              },
              "interval" : {
                "description" : "The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.",
                "nullable" : true,
                "type" : "integer"
              },
              "user_code" : {
                "description" : "The verification code which end user uses to verify authorization request.",
                "nullable" : true,
                "type" : "string"
              },
              "verification_uri" : {
                "description" : "The URI that the end user visits to verify authorization request.",
                "nullable" : true,
                "type" : "string"
              },
              "verification_uri_complete" : {
                "description" : "The URI with user_code that the end-user alternatively visits to verify authorization request.",
                "nullable" : true,
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "4527a687-5c74-4fdb-b7e7-adf9feaa3fbe",
    "name" : "Fetches public JWKs",
    "request" : {
      "urlPath" : "/v1/certs",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"keys\" : { },\n  \"url\" : \"https://web.example.mocklab.io/436792\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4527a687-5c74-4fdb-b7e7-adf9feaa3fbe",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:18.513004Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "FetchCerts",
          "schema" : {
            "properties" : {
              "keys" : {
                "description" : "A collection of certificates where are signed Twilio-issued tokens.",
                "nullable" : true
              },
              "url" : {
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "62acace3-41c6-4f8d-b73c-d00794a2e443",
    "name" : "Fetch configuration details about the OpenID Connect Authorization Server",
    "request" : {
      "urlPath" : "/v1/.well-known/openid-configuration",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"response_type_supported\" : [ \"iov4sle0h6x8ja7orin0qjisbekf2eu7hokc4fx3o78p5s7hcpfqwqyydodxbwia5nfpl5mdhkoxtkxm4txz65luv5ebk2nv79ez51431hyidex85u20kr7bhbmh7xzjuqufiazdoaiar7jjcwer6whekfy77x8ebin7ep8ic240taci371e0\", \"sjnvjt4x9\", \"s8agor81lc0wboj0kk17332znjjt4ciwdz6lxny28vxajvhyddl2e7n483b6so2bedbnfp0g9dxixlr0c9cpmozs5c\" ],\n  \"revocation_endpoint\" : \"phjt1mk54l5tkc66b9hdbfyg7\",\n  \"scopes_supported\" : [ \"w3pj620y71bmjk23k4bo9ljjl01xaijbdgr2yvdszqowfgugucyjmrhlxv160qn3xfnx8ja6dl42iuo92r\", \"7iz3wdqmlhoah81wvtd4sraebns04765nibbf\", \"et01qo0gfwh9qvyewuta8m51vj8095t8tm2f1sd6pbdynw86kdbju6yftta5fa\", \"z4951w52ymkrni2v6z5t0s0emt25udp8219drwji3hebp3lvzzh6apemu9t4910vph6w6en0ab43dyja1kwcrh1ztn9yvlxi4ndye5506mzznzcq7h7r3szunu6p19flck1jat948ndnqvw5yne35e55t0fqnx21oof38u62vxmi3xbzsyg0noknie818\", \"gygs1c9yet007iammn4tj\" ],\n  \"issuer\" : \"ckq8cu0iix04iexu92wngs5rwqhizn2u6781odkim3qqcsccje1q9380fh6qpr3xxw2j6z7k8wvy32kdsimono9gu1kye83xhzmilb749dr\",\n  \"subject_type_supported\" : [ \"frs2yhrrq2d59d4u4z0ku5sjwjeyxvt6y8oe39g6i9\", \"dhns95n6vl0p9aq1sthnv230g5ra1axvg6f7\", \"fcn1yanfkhk7hafzi4v1npdpell6533ak8ohujs4yvha9o9s3wwfkft627889nfjmie35vwaqf\", \"xjyepquizyu0mjgbjaviygodjpv8rozm6573r2e77fi6nkcpits783r2gab0kzg7\", \"0ue9g1mi56u14n931zwk2inldyrd\", \"20scfcjzvl6h8hjhdg4tkfvu6h417e1x6wot8bftw89d4mh2eu4eyt4rxcsvjbsvz792n4baf3eu693j4w0dbizw11hh4e23hn1gn\" ],\n  \"url\" : \"https://web.example.mocklab.io/493734\",\n  \"authorization_endpoint\" : \"26qt67vq9g3np9lufqyj9o84ttyxtyzgj5zrgn86cowkmudefd63wo4c1xxz03kswlr8ksnabeuoth7r82fjmbb5ohz0owuyflv8xtwqbwxxvlx0zayds0b4hvja1k8gexa80nbpi3wzof\",\n  \"userinfo_endpoint\" : \"kz376anygfwxbh0umaoohqtsyrt56c8spob8pfw2tb65rzl9a9a9u7bjupd4cpvqhrwmwgamtb\",\n  \"device_authorization_endpoint\" : \"o7uktstigfbgjs3glktd0zz6orr64wa6agyrucg4sqgzgeqo4jzihql363cxj9yuuxa8gridqzi7ajhxye7e1akyy3pmljp503fyb47z0wi7ibg3lx6ug6svftpdgjdz8g5bj8bsln4r9wbmsgjw\",\n  \"claims_supported\" : [ \"xmfviijmdwdk25fosax1jn1wp53s2ezc5t0sml3ex21slqe2pn7hsjn7hiufp\", \"x982694r576bfrcz0vclmp6n52s77wul5wp1ounzimq5ydugbpdjhi8etmkz3k4fbizfqwqhv1vfshdgikgjm3xco1btupq2hz4dyte20kx6f4qfb0h0b4d3sxdl27uihf2em6v453s9v549k2w7r4ryasqgthr\", \"hgen2942ibt3hodgjimb3rapc4m1ey3h\" ],\n  \"id_token_signing_alg_values_supported\" : [ \"7zq62xr5a5lhf3ezgbht4ohz6hgj0sgbqngf991n7kvyplvxre2zxc3u46uohdxg6etjmaiou5actyfea3cvag119besawrm3y5w4qzavqcadb8r7x2x3xgdcybytnbeucjoooig7g1qv6tbcth0kd\", \"9r9wrdza425du1m4v0fcsifj75akolqzrebazk20bwvzuftplbob20tdkk4vey7et6fg12ygvdo9e06606cgxurdg408p1g32wtg6pio0awyidscxcdt807jqx5ryx5u44q31zb4e07kp9la9fybwft60vzh\", \"milyyijz0akuivy9ssypkgmx8ooic8ce3w5co7uaa09a1amcsql8z75p5a8hszskmggok9lr3q9puuqdjt5bdg9rnwq5016lbein7n0xfj2430v7m4i6ptrligijybjahbcs0r2rl3a\", \"9al6fd4bdpw2yjg7sxw4exvaavbbkkdednav2kps5v4hi38as1suoxq83fyprn5gjzqkvaw0w2jp52xooy9j9l77wqvbvnwsi7ttu92elqyqns667ym52pgd28lgkokhueq1ev0f0r4sg1rrhm85flikjskgdmmzvtlqp2odd0qablbsj5qrwdicpjhmrqbvyw3y90\", \"4v4clqpgsev3j714a42e73mebiv11ue3kp380geruuki2964nrkaz27ak8pgfdyovv5kmc059s566mxczcv\", \"69pqe5lx3f1kqa\", \"4xzv75q3rs8x6o2yap3o0iu0a5l2w0110p322mn7sb4hze472126nz15lkj6izj4i6tgc99rcgwuinfpbks21rzd67x1i6heu3hnfco4uaq0a9jwfl2oajv0n2sfade0rlq5p9mhn63fzea5vp4fc2h8do145ke83\", \"0q7tx5j30qx\" ],\n  \"jwk_uri\" : \"https://web.example.mocklab.io/301570\",\n  \"token_endpoint\" : \"q6oi19u6xz1bldpjyxs5hk30clvamasjtrwjstvvrpfha6824p23gxachkcfvyeg9oa548dbibcqxnm22kculvdhzrxgn0s3gph4c99e6r\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "62acace3-41c6-4f8d-b73c-d00794a2e443",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:18.512819Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "FetchOpenidDiscovery",
          "schema" : {
            "properties" : {
              "authorization_endpoint" : {
                "description" : "The endpoint that validates all authorization requests.",
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              },
              "claims_supported" : {
                "description" : "A collection of claims supported by authorization server for identity token",
                "items" : {
                  "type" : "string"
                },
                "nullable" : true,
                "type" : "array"
              },
              "device_authorization_endpoint" : {
                "description" : "The endpoint that validates all device code related authorization requests.",
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              },
              "id_token_signing_alg_values_supported" : {
                "description" : "A collection of JWS signing algorithms supported by authorization server to sign identity token.",
                "items" : {
                  "type" : "string"
                },
                "nullable" : true,
                "type" : "array"
              },
              "issuer" : {
                "description" : "The URL of the party that will create the token and sign it with its private key.",
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              },
              "jwk_uri" : {
                "description" : "The URL of your JSON Web Key Set. This set is a collection of JSON Web Keys, a standard method for representing cryptographic keys in a JSON structure.",
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              },
              "response_type_supported" : {
                "description" : "A collection of response type supported by authorization server.",
                "items" : {
                  "type" : "string"
                },
                "nullable" : true,
                "type" : "array"
              },
              "revocation_endpoint" : {
                "description" : "The endpoint used to revoke access or refresh tokens issued by the authorization server.",
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              },
              "scopes_supported" : {
                "description" : "A collection of scopes supported by authorization server for identity token",
                "items" : {
                  "type" : "string"
                },
                "nullable" : true,
                "type" : "array"
              },
              "subject_type_supported" : {
                "description" : "A collection of subject by authorization server.",
                "items" : {
                  "type" : "string"
                },
                "nullable" : true,
                "type" : "array"
              },
              "token_endpoint" : {
                "description" : "The URL of the token endpoint. After a client has received an authorization code, that code is presented to the token endpoint and exchanged for an identity token, an access token, and a refresh token.",
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              },
              "url" : {
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              },
              "userinfo_endpoint" : {
                "description" : "The URL of the user info endpoint, which returns user profile information to a client. Keep in mind that the user info endpoint returns only the information that has been requested.",
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  } ]
}