{
  "mappings" : [ {
    "id" : "dabf3106-3f90-45a4-aeff-d7362b24824c",
    "name" : "Retrieves the consented UserInfo and other claims about the logged-in subject (e...",
    "request" : {
      "urlPath" : "/v1/userinfo",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"friendly_name\" : \"Mose Deckow\",\n  \"user_sid\" : \"US9B79491c3F4F7dBAF8B5b2BA5f3eb9Cf\",\n  \"last_name\" : \"Gislason\",\n  \"first_name\" : \"Hyon\",\n  \"email\" : \"nc5ss8p74dqiy86k4erlog487x2n3r5rb1kr9ck2feidjc3je46ng\",\n  \"url\" : \"https://web.example.mocklab.io/420302\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "dabf3106-3f90-45a4-aeff-d7362b24824c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:27:53.270211Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "FetchUserInfo",
          "schema" : {
            "properties" : {
              "email" : {
                "description" : "The end-user's preferred email address.",
                "nullable" : true,
                "type" : "string"
              },
              "first_name" : {
                "description" : "The first name of the end-user.",
                "nullable" : true,
                "type" : "string"
              },
              "friendly_name" : {
                "description" : "The friendly name of the end-user.",
                "nullable" : true,
                "type" : "string"
              },
              "last_name" : {
                "description" : "The last name of the end-user.",
                "nullable" : true,
                "type" : "string"
              },
              "url" : {
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              },
              "user_sid" : {
                "description" : "The URL of the party that will create the token and sign it with its private key.",
                "maxLength" : 34,
                "minLength" : 34,
                "nullable" : true,
                "pattern" : "^US[0-9a-fA-F]{32}$",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "5d15b81b-978d-409b-aaaa-3205759be28b",
    "name" : "Issues a new Access token (optionally identity_token & refresh_token) in exchang...",
    "request" : {
      "urlPath" : "/v1/token",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"access_token\" : \"6eqb34wu5o04mn30a395ox7w2z303sl0qymttjaoc2r40cuhlmts44235081p7c70lfashj1a2j88hd7rpzsjdj4aikxkj9hxq13sx73z2dgflx6vctf1isbhpsbf\",\n  \"access_token_expires_at\" : \"2022-08-30T15:46:20.269Z\",\n  \"refresh_token\" : \"8t2bmfrkjst5u4djbrouv9id748zzvqbn52q3oiadwhno7d8xaerdyv1lels5ugrlxyi3\",\n  \"refresh_token_expires_at\" : \"2023-07-07T15:14:12.269Z\",\n  \"id_token\" : \"oz9zxy2sa4w3se7c7kmc6s93656ja5nv4jhsy8yf4xxlq56b9a1de3x3fnuwnkkbqjcri14yh8a27hqxwhgnrueyi4oyp933n6oo9w\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5d15b81b-978d-409b-aaaa-3205759be28b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:27:53.269907Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "CreateToken",
          "schema" : {
            "properties" : {
              "access_token" : {
                "description" : "Token which carries the necessary information to access a Twilio resource directly.",
                "nullable" : true,
                "type" : "string"
              },
              "access_token_expires_at" : {
                "description" : "The date and time in GMT when the refresh token expires in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.",
                "format" : "date-time",
                "nullable" : true,
                "type" : "string"
              },
              "id_token" : {
                "nullable" : true,
                "type" : "string"
              },
              "refresh_token" : {
                "description" : "Token which carries the information necessary to get a new access token.",
                "nullable" : true,
                "type" : "string"
              },
              "refresh_token_expires_at" : {
                "description" : "The date and time in GMT when the refresh token expires in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.",
                "format" : "date-time",
                "nullable" : true,
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "0972ec09-997a-43c9-8c93-79c10da14984",
    "name" : "Issues a new Access token (optionally identity_token & refresh_token) in exchang...",
    "request" : {
      "urlPath" : "/v1/device/code",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"user_code\" : \"5lksnmhclbb2rw6f33rjf49wjghg6c6ln7r4tgq4n1rl3qhapiu34ldfaj5xpg9iz9q5qm2bdqnmedhhwg2t247fnhnv1arlejped3zuqr4hxff43lkzowb1h7cg4qc2q63t\",\n  \"device_code\" : \"lzx63o6e55fzi59sl18fsh7u4vupjvk4lfxud123srdycf4065k2qa41xc0plcgn9k2\",\n  \"interval\" : 1554542610649363852,\n  \"verification_uri_complete\" : \"sm4he7ixljho7b8cpazqkb6\",\n  \"verification_uri\" : \"https://web.example.mocklab.io/670291\",\n  \"expires_in\" : 8791159039386815786\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0972ec09-997a-43c9-8c93-79c10da14984",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:27:53.269747Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "CreateDeviceCode",
          "schema" : {
            "properties" : {
              "device_code" : {
                "description" : "The device verification code.",
                "nullable" : true,
                "type" : "string"
              },
              "expires_in" : {
                "description" : "The expiration time of the device_code and user_code in seconds.",
                "format" : "int64",
                "nullable" : true,
                "type" : "integer"
              },
              "interval" : {
                "description" : "The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.",
                "nullable" : true,
                "type" : "integer"
              },
              "user_code" : {
                "description" : "The verification code which end user uses to verify authorization request.",
                "nullable" : true,
                "type" : "string"
              },
              "verification_uri" : {
                "description" : "The URI that the end user visits to verify authorization request.",
                "nullable" : true,
                "type" : "string"
              },
              "verification_uri_complete" : {
                "description" : "The URI with user_code that the end-user alternatively visits to verify authorization request.",
                "nullable" : true,
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "83c42c07-8ab9-403e-a971-535ebc520f54",
    "name" : "Fetches public JWKs",
    "request" : {
      "urlPath" : "/v1/certs",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"keys\" : { },\n  \"url\" : \"https://web.example.mocklab.io/882916\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "83c42c07-8ab9-403e-a971-535ebc520f54",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:27:53.269498Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "FetchCerts",
          "schema" : {
            "properties" : {
              "keys" : {
                "description" : "A collection of certificates where are signed Twilio-issued tokens.",
                "nullable" : true
              },
              "url" : {
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "b08da457-d23f-4086-baf5-30e6afa62bb9",
    "name" : "Fetch configuration details about the OpenID Connect Authorization Server",
    "request" : {
      "urlPath" : "/v1/.well-known/openid-configuration",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"response_type_supported\" : [ \"cv3l05ttdpm14vijzsfjjr586ow4uttvi71y35t2zgn7qf26padr4bvzl4jrrcfyuspabqmzsmw4buv7wgdbpumk9pkclzrd7sd0iktdgcehjuothqm4vv3dp42u9dix7mc982pxaon1zfqebx89dv2kjzj1x384cyusvl7dn4\", \"k0jkfkcjft7snqxz7j5tuy1dnwn46lsp814lrub3qvkiswt2b102j5x5cjlku4nz90pr2syfetb512dsh4i8d6buxde156cnq4sxheszzgcfuu9v31r74mfdpigx2scpk7s6uv\", \"k8bpn2iyljt9iwxifymus8k049xb7cu8sodmuj55y36a2dldo641qr7he4a64l3o7dw99pig2utz030y6hd1qsyk2jnxf1ou5cgu0z807vevya9w5llwwo81544q9ktszhgd6xn8c7bh\", \"uq9spwvmnk12rvlq6\" ],\n  \"revocation_endpoint\" : \"2qnvnbj5eetk55ecebv9c7wtvyuks1pi771vupr935h05fiq7zfm7znm7geafwbybnwkugvxw03l0t3hrknvi9xbu0f8nql6yr5tsmv79f3sev2fjfueospfvnhp8mt61lcmd\",\n  \"scopes_supported\" : [ \"t19mtq06crmj0aw4p89ca7vydlb9w23799tdp2iw1wspti6w637fkey456d5yaz7354t55dyx9unonxc7sczwfzaiovu7xf84om02op6kq3ds93rkh67j9n9p5ccjbjnnh9ionmh3bzh2jyqysd79pipc7lgcma7gyblv\", \"8ha3jn0m5vtetuhux7lmwd25cski59\", \"sckqmdhswjnqsdu87ih5zv55d638kppm4p44gv7kbysdrfkci59fi3w0j9a9rw005buy9fsvcu5lwwl4b2fi9wobx2mhnohns8fkfd5zk2x6wjzgg8g7jla63y30s104spvmrt8au\", \"94ucmt7gp6otmgkp9iuloi2eg0e9g5d\", \"6miuaub3qrphq62mfas2mz1tkkxurkyr3sokac3cmoy4de6nflwfpqkhhzbvjt0b36v1kw64tq2tz4egk77grohd8d5yri4tlx3sjhlu89f2ixjoxgt108bih7beb77h2pcwg3oycfny00p83\", \"m9cuk2297gwcglj2pf48owr1f1ko4x11tq8n58pl1dv292b8jotmm3b6o8anm14ye40k417cqgcvh3g60okj83hdjkmmy09e6nr62xe3rt46i8uheqg7rxppfv4p0ltdnupdrwh5r4h6qxywl7y3arciwe9k7gspre4h6nnyu4npa7qovra1jb0lm04rhdrpyyha\", \"9g9i26g826ye7or0x91up9yzzgz8ln3rybcqooo37w7a6zh1vzgwat9k2i8vmd9r1t9ktzmcx74ggs6xy3li8cb29z7awawojsxv9fx3ljpxv6w4t9ygn1c7z4zes77mez8ss3eo256x6blu9qr5au9dkgprvjvhh6h29tfvw0ub5xsvklp1vt0\" ],\n  \"issuer\" : \"0onvbnzi7ukr1k2ymx4sw8k7jpd77o3\",\n  \"subject_type_supported\" : [ \"ggyk0j4t05bzqza7rnfbi00sxhuyoovqczrkg2kssnbko6f5vxlia5p2f0dxbmk3cuvyklsi4rjzdnm5t6cdesis05m90fe491quexyt3468aa\", \"nszvw8onog89krsdcety7ulsmpeizbkmglmrtzlezglmr056vtascbvnutke4qtcs231z72ntf6ro6oyzdznkmlbj0csyzjs1uem59l3yqyezsdvz6amu210xlx73bwuxhstwn4em1xtvfw377wpnrh2g78zvadiemg2cdx8qwkwlm4v8uftuunkpgsk07rf63n54f2\", \"cxkiexk9z751qqk3ozs5pff1xcc08rlbbbfmjxdaggfp3cnftc1ckl0dt6ktgu9tf\", \"zea179funntmz3hrj4p03k1bc5kidksjyl31hhylrpmyxpx28h71bnjhloiv316cv0j8rl7xhfoe4vdzlfmong0wdapznd0pk1ywfolukxmn3xzpsdu9x2579tyqi3je\", \"saruuag3u2ir61xrkxu5pmfdvre9q6rngagxtvkkznce6kyngbxfo8v310mxr0shlfi220kv1l0c5cedjg79s4lryw2295monggy9vuquks637ndt7esakevbwsmgrcq2amphl\" ],\n  \"url\" : \"https://web.example.mocklab.io/684861\",\n  \"authorization_endpoint\" : \"l7cdeflv0aukz2txi2lzfz7dky9pmggazv71ln4kx8tn6zdq5op4a0rzipfwt06ihkfb0laja4tymnhdfrkxwcroo1v4s4suvh60d09g95ttkc0ju2qj0nflpanj3o4rtcy0eknuh9ygk4xksu4mfirdturr1gcgkm3boaatrc3faiq2dbeilbzk1r9ewwahj7\",\n  \"userinfo_endpoint\" : \"vpqhyvusor6v93mpoy2s121dcqhs1fgbvuyy3uuim1nv8p8rwdfkh4m1neotqr8a9516z2697vtapn6vkd5c9i97u7lg1aacc7noxyhwy0z1agw58l85qm6hf9po95euxitd13o4ggc47ejww9\",\n  \"device_authorization_endpoint\" : \"v9pa7k654acsseq4lp9pq9auvdzuonf5153h84jckbb6rt2ccmlh24110qn8l2lgasyfszg4kkmppaw88d\",\n  \"claims_supported\" : [ \"9zlhkgr0z1mcji9fgoh0n\", \"9jytbnelmqtipksr0i1vcne66y7r1ie8ghoi6a10quh7z2ls1fpqmigy8nax4h29olvg2dyivgfrwcqi8290he28q7tnwjoh06dsfsy5z0hgbi2sf5dy6gg0joiazs83dc11mypvwe611iq40jp33wcy5to9ojhx7nef54a66jmks6l8gdpz3xnu2yfg4\", \"7wbw481mcqj0mwnbdtm8ojzmn31m9yel2zgrhtjpwqaooisyo6vihmpfta9aug9iiveqc3x55dea506auu3qghnv6xla4aay6\", \"bu5jd612xfkvopd4oqcmb0j1wkv9y87qldn85iyxxy25dclhqyu0rv62hzymfdyn3fq326xh4dmltt867rzcnutwzfsqyb5uokduaspk6rnb0lpsnhusn4r191drm9csu0mvv0mqi2u797w3zvp7bupbg1v4rs8stef9bpkxww7iyvyinvyhfnt\", \"kqktz07n5p3jgyc2cwce5mqmkxwb2hrumj18kuttgzmww5acq599i32q8azsnfkzlezc79rfl1j44yzyvjw3s51ckiic6hqzyse2w5fdtrmmq2q9deb96dvbt3xklkfi8xxg4v1jg9qmz9fw1ukq71d7qq8pdrdf09d4x23o5fks8t\", \"thr33vsgpngrzseat9vimcc1wmdvkrcnomzogzodb5menge1czuytmv7qz9k1bzv4qkw1823e6be4xlviqgzaf5izabbnw7r5xsywuyeufiyntnbi99daow47y58k4\", \"8n61akuv9uh5bfi07bkjsk0ekp\" ],\n  \"id_token_signing_alg_values_supported\" : [ \"uxn653cp3h04wp80da2k1nbrvkqjn7rtom26l6y94e9iuys3nnp6269s1tpx3ydkiymm55tgaohq64gvm33q6hrm967nci6tba47iamht8r3kk9eutko1t84wyuor1hg8nmgn68udh7l61me1dc51mkoh4osu8oph8p\" ],\n  \"jwk_uri\" : \"https://web.example.mocklab.io/417150\",\n  \"token_endpoint\" : \"qjo6zusyaoc6vuticbs801ha1y4fpmbxxksel7r8ogqfs5xrp800fuwv3r52zgvzaxt12hvtmrwdwbqf4yydv658y2e7rjreqdeo3d7n4jn39zpunkrj16xh7v5r2ii6ezm\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b08da457-d23f-4086-baf5-30e6afa62bb9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:27:53.269284Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "FetchOpenidDiscovery",
          "schema" : {
            "properties" : {
              "authorization_endpoint" : {
                "description" : "The endpoint that validates all authorization requests.",
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              },
              "claims_supported" : {
                "description" : "A collection of claims supported by authorization server for identity token",
                "items" : {
                  "type" : "string"
                },
                "nullable" : true,
                "type" : "array"
              },
              "device_authorization_endpoint" : {
                "description" : "The endpoint that validates all device code related authorization requests.",
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              },
              "id_token_signing_alg_values_supported" : {
                "description" : "A collection of JWS signing algorithms supported by authorization server to sign identity token.",
                "items" : {
                  "type" : "string"
                },
                "nullable" : true,
                "type" : "array"
              },
              "issuer" : {
                "description" : "The URL of the party that will create the token and sign it with its private key.",
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              },
              "jwk_uri" : {
                "description" : "The URL of your JSON Web Key Set. This set is a collection of JSON Web Keys, a standard method for representing cryptographic keys in a JSON structure.",
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              },
              "response_type_supported" : {
                "description" : "A collection of response type supported by authorization server.",
                "items" : {
                  "type" : "string"
                },
                "nullable" : true,
                "type" : "array"
              },
              "revocation_endpoint" : {
                "description" : "The endpoint used to revoke access or refresh tokens issued by the authorization server.",
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              },
              "scopes_supported" : {
                "description" : "A collection of scopes supported by authorization server for identity token",
                "items" : {
                  "type" : "string"
                },
                "nullable" : true,
                "type" : "array"
              },
              "subject_type_supported" : {
                "description" : "A collection of subject by authorization server.",
                "items" : {
                  "type" : "string"
                },
                "nullable" : true,
                "type" : "array"
              },
              "token_endpoint" : {
                "description" : "The URL of the token endpoint. After a client has received an authorization code, that code is presented to the token endpoint and exchanged for an identity token, an access token, and a refresh token.",
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              },
              "url" : {
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              },
              "userinfo_endpoint" : {
                "description" : "The URL of the user info endpoint, which returns user profile information to a client. Keep in mind that the user info endpoint returns only the information that has been requested.",
                "format" : "uri",
                "nullable" : true,
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  } ]
}