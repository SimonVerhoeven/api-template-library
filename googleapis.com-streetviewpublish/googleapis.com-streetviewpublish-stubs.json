{
  "mappings" : [ {
    "id" : "9b6675e4-4f4c-46d3-a2fd-d98da26b5529",
    "name" : "Updates the metadata of Photos, such as pose, place association, connections, et...",
    "request" : {
      "urlPath" : "/v1/photos:batchUpdate",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"results\" : [ {\n    \"photo\" : {\n      \"transferStatus\" : \"RECEIVED_VIA_TRANSFER\",\n      \"captureTime\" : \"2022-08-26T12:07:04.387059Z\",\n      \"pose\" : {\n        \"gpsRecordTimestampUnixEpoch\" : \"2022-11-30T12:49:04.387102Z\",\n        \"altitude\" : 1.586938462332156E308,\n        \"accuracyMeters\" : 2.830233215687511E38,\n        \"latLngPair\" : {\n          \"latitude\" : 1.1788302036364128E308,\n          \"longitude\" : 1.499999343887106E308\n        },\n        \"heading\" : 9.767571210123146E307,\n        \"level\" : {\n          \"number\" : 9.476286888643972E307,\n          \"name\" : \"Steuber\"\n        },\n        \"roll\" : 3.3574524539383594E307,\n        \"pitch\" : 1.304817023489639E308\n      },\n      \"downloadUrl\" : \"https://web.example.mocklab.io/992020\",\n      \"uploadReference\" : {\n        \"uploadUrl\" : \"https://web.example.mocklab.io/512792\"\n      },\n      \"photoId\" : {\n        \"id\" : \"26yk\"\n      },\n      \"shareLink\" : \"id2h8jbhyin140qlabhq6tb2duk0riaxmi2teszonzqoagzst0zv3krvc8dyflulick9yvtfded0csyze1m240bcyy6p8apke48zxofxggf023ebaxx5hk103xpufc4mlmv8ek6jbtgkrxw7rig1jdh17lmlfjuyd17liqpkgtgj7q84quzrx2h0d93n8jgk\",\n      \"uploadTime\" : \"2022-10-03T14:51:04.387462Z\",\n      \"places\" : [ {\n        \"name\" : \"Yuriko Emmerich\",\n        \"placeId\" : \"x2z7\",\n        \"languageCode\" : \"mv34b083ea6hkf2k5hge34etrkj3wdvmsnka92wupuaafkzvjdox8xu9401mkxauz0cfi6x9iwr45l96yskphaxf85d\"\n      }, {\n        \"name\" : \"Carisa Pouros\",\n        \"placeId\" : \"7ipz\",\n        \"languageCode\" : \"abq2yau0yfnwch5j5lz5gkt2sdlz9uja644rqphuxy62ra9bzql5enr2qa0ree7rk97cadkag669e22iusp7pi8a69aepzq9dl989nsni9ngio0sajjb1ccm8qfi2kdshg3vcbsm019rihslmj73eyu2ny3epyrorq\"\n      } ],\n      \"viewCount\" : \"8645nibvj01922cgh897swbh1m0irik5urgtfkegpq12y97excvves82llwbjnwgewhp7js7jyhs7dx75azdtu7zxqv06fu8jo1nbt8rv1r4uy\",\n      \"mapsPublishStatus\" : \"REJECTED_UNKNOWN\",\n      \"connections\" : [ {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      } ],\n      \"thumbnailUrl\" : \"https://web.example.mocklab.io/492414\"\n    },\n    \"status\" : {\n      \"code\" : 1508099695,\n      \"details\" : [ { } ],\n      \"message\" : \"Rerum omnis dolore. Beatae eaque aut a quisquam autem ut ad. Praesentium laborum praesentium a accusantium mollitia aliquid.\"\n    }\n  }, {\n    \"photo\" : {\n      \"transferStatus\" : \"RECEIVED_VIA_TRANSFER\",\n      \"captureTime\" : \"2022-11-25T12:32:04.38796Z\",\n      \"pose\" : {\n        \"gpsRecordTimestampUnixEpoch\" : \"2022-07-22T11:48:04.387999Z\",\n        \"altitude\" : 5.577520992538407E307,\n        \"accuracyMeters\" : 1.9748699450058402E38,\n        \"latLngPair\" : {\n          \"latitude\" : 1.7563463524444702E308,\n          \"longitude\" : 1.2587089630152163E308\n        },\n        \"heading\" : 1.0959624465545868E307,\n        \"level\" : {\n          \"number\" : 1.725421174405361E308,\n          \"name\" : \"Dare\"\n        },\n        \"roll\" : 2.5504601720430884E307,\n        \"pitch\" : 1.6420233918269815E308\n      },\n      \"downloadUrl\" : \"https://web.example.mocklab.io/472472\",\n      \"uploadReference\" : {\n        \"uploadUrl\" : \"https://web.example.mocklab.io/725534\"\n      },\n      \"photoId\" : {\n        \"id\" : \"xu6e\"\n      },\n      \"shareLink\" : \"fhjquizzuzp7gkt5u1l06o99szdx4l2k7end74kitae\",\n      \"uploadTime\" : \"2022-10-19T12:28:04.388326Z\",\n      \"places\" : [ {\n        \"name\" : \"Voncile Bartoletti\",\n        \"placeId\" : \"4495\",\n        \"languageCode\" : \"z5ok9wejclwr5pz2956emjod87lccpw092\"\n      }, {\n        \"name\" : \"Laverne Osinski\",\n        \"placeId\" : \"76o9\",\n        \"languageCode\" : \"d69aop1yq5d494z0nxwwvblno9fobxe4862lnncwoxtp7gpek3de0uixhqmmrku4vanimv4aziodr7nx22jvzoh40snxcvdvm1wt6hfkk74zp0b9yaq9ljdybprw84ya4on5jdxilgow05jrtgjlhpvqsw\"\n      }, {\n        \"name\" : \"Dr. Mitchell Feest\",\n        \"placeId\" : \"362y\",\n        \"languageCode\" : \"03np5bq1vqpi22p59k1aq788uxiqeyiqsfv1vmz4um1y59vep2svykt34h763ahy5srp5g6996sb9fcqr\"\n      }, {\n        \"name\" : \"Jacquelin DuBuque\",\n        \"placeId\" : \"ppj9\",\n        \"languageCode\" : \"xdk9ua21ky2xs04y3uxqq08kw8tdr7wepi22pbwhtyfz1rxmnq3ihminsczr97zm7aozg204hi4dpa8c2z6h1c8hsynfpma6twt0mxx9b2hpnx5f\"\n      }, {\n        \"name\" : \"Errol Stroman\",\n        \"placeId\" : \"df30\",\n        \"languageCode\" : \"f9eqlwtqo9tr75pq69wv1cbekiz03n8llhjadalr4cijicq57n6v6tiee82stcrazpaafeoyx6p40hnt3cuhzm6ovuln9qbu57s7swa5z9cmedkrkjsll6btkkv9qxaf75bbgcblzfu5wvgvsi57ca1tbuc75k2fexngn03unysyp0pke840v9082kt8ujcrwayuc\"\n      }, {\n        \"name\" : \"Delphine Schamberger\",\n        \"placeId\" : \"qxtd\",\n        \"languageCode\" : \"65knby013kgj2aws9jsozl3ion23eyu5wk99bx0wxjes0mlkzy\"\n      } ],\n      \"viewCount\" : \"bv3mgi4b0lu4p9teyvlurm2rans66wp97l0qwj0ahmtfpv0ypvg98n6hui34wgcie9w6\",\n      \"mapsPublishStatus\" : \"UNSPECIFIED_MAPS_PUBLISH_STATUS\",\n      \"connections\" : [ {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      } ],\n      \"thumbnailUrl\" : \"https://web.example.mocklab.io/714153\"\n    },\n    \"status\" : {\n      \"code\" : 2124209228,\n      \"details\" : [ { }, { } ],\n      \"message\" : \"Dicta officia qui aliquam harum aut labore. Rem occaecati et nisi est accusantium at est. Et modi consequuntur tempora. Consequatur qui consequatur. Recusandae a placeat aut ut est et optio.\"\n    }\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9b6675e4-4f4c-46d3-a2fd-d98da26b5529",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:42:04.389365Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photos.batchUpdate",
          "schema" : {
            "description" : "Response to batch update of metadata of one or more Photos.",
            "properties" : {
              "results" : {
                "description" : "List of results for each individual Photo updated, in the same order as the request.",
                "items" : {
                  "$ref" : "#/components/schemas/PhotoResponse"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 0
  }, {
    "id" : "a02afcf2-3d65-4b60-a285-d497471c86f5",
    "name" : "Gets the metadata of the specified Photo batch. Note that if BatchGetPhotos fail...",
    "request" : {
      "urlPath" : "/v1/photos:batchGet",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"results\" : [ {\n    \"photo\" : {\n      \"transferStatus\" : \"PENDING\",\n      \"captureTime\" : \"2022-07-11T14:04:04.384019Z\",\n      \"pose\" : {\n        \"gpsRecordTimestampUnixEpoch\" : \"2022-11-18T14:43:04.384058Z\",\n        \"altitude\" : 1.1773348487640567E307,\n        \"accuracyMeters\" : 7.408619458542172E37,\n        \"latLngPair\" : {\n          \"latitude\" : 1.1727118943584345E307,\n          \"longitude\" : 2.1577734045474554E307\n        },\n        \"heading\" : 1.0545179278321556E308,\n        \"level\" : {\n          \"number\" : 1.1224467370856283E308,\n          \"name\" : \"Hudson\"\n        },\n        \"roll\" : 1.666995856192843E307,\n        \"pitch\" : 8.575371112904192E307\n      },\n      \"downloadUrl\" : \"https://web.example.mocklab.io/905197\",\n      \"uploadReference\" : {\n        \"uploadUrl\" : \"https://web.example.mocklab.io/998843\"\n      },\n      \"photoId\" : {\n        \"id\" : \"110o\"\n      },\n      \"shareLink\" : \"1lplb90q27fyf9v2dp9u5q8ioveb0ek89sho2b36xx7l0qnntphxduu4hsgphaqgqnr7weq45\",\n      \"uploadTime\" : \"2023-01-10T14:16:04.384404Z\",\n      \"places\" : [ {\n        \"name\" : \"Jacob Sawayn\",\n        \"placeId\" : \"sdzr\",\n        \"languageCode\" : \"n9slzdd9tlskzmi9netmdv0yf1qvdcr1j4bq26qy6wtufooh8e3tps5y5nfgyw1ytx42b3i9n9y07f4\"\n      }, {\n        \"name\" : \"Ms. Brandi Kuphal\",\n        \"placeId\" : \"646h\",\n        \"languageCode\" : \"7p0k8vnvt0wfi9jgu99wasm1n1fnenj96do8sr35nhk3mmdkfyu29887m3zen1xdyqwwbcj73855px0t21it1nuro0ig2r5h290413d7490ct3asf7onh62rl2x13yu1q8d0xjzrakcoj70qzcprq5m5t3shxteoa0y1f53cpp6h6uq8xowyff3aglp9dg4\"\n      }, {\n        \"name\" : \"Theodore Weissnat DVM\",\n        \"placeId\" : \"shf2\",\n        \"languageCode\" : \"yzpki17t8jl4bu0h9oabj2vad0sxej2yv99qhsvb5ytczypvuuj2fxi95zad25ttldfxg577c4j7flz4epj6550jt0hg8rjt83i1ypfdhdgg4c2\"\n      }, {\n        \"name\" : \"Kendall Sporer MD\",\n        \"placeId\" : \"l29l\",\n        \"languageCode\" : \"p9gru2ammcnmyzx8iz5nx98a1wlahy9p8xad3c60a730d6hl2r82wagi9q4dpm6gcappjx0781ir3h45hizymwxundv1zqnbn5x62ejxalbvx2l4odd0a9pie8jxyc6rkdqivft9r\"\n      }, {\n        \"name\" : \"Celesta Berge\",\n        \"placeId\" : \"g579\",\n        \"languageCode\" : \"sf3zpic1jylcgj2e3yjp6ggml0wk6amsuhc0mtxlccouscjy2n8hi1dwbyfo6c3628g16ni3fvwlk1ef9idxjwr8tbg8c8cz180btsb2mkdfs95847h7owweh99grfjtexo6aw03kzm2geaebv9\"\n      }, {\n        \"name\" : \"Gregg Torphy DDS\",\n        \"placeId\" : \"1mkf\",\n        \"languageCode\" : \"fpynl4v6p7xg9giu43bo0wyar3\"\n      } ],\n      \"viewCount\" : \"qgsp18kiv1wztgy0m2ri3k0feid0kcwxuflxnb4jd170117wg2a1oc7xh411qi5hkhs4q1m\",\n      \"mapsPublishStatus\" : \"REJECTED_UNKNOWN\",\n      \"connections\" : [ {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      } ],\n      \"thumbnailUrl\" : \"https://web.example.mocklab.io/164446\"\n    },\n    \"status\" : {\n      \"code\" : 252724391,\n      \"details\" : [ { }, { }, { }, { }, { }, { } ],\n      \"message\" : \"Maxime ut sint suscipit ratione repellendus expedita. Similique optio recusandae hic iusto ducimus et. Quibusdam nihil sit aut rem. Aliquam et iure dolorum distinctio. Ut tempore rerum esse odio repel\"\n    }\n  }, {\n    \"photo\" : {\n      \"transferStatus\" : \"REJECTED\",\n      \"captureTime\" : \"2022-12-11T14:21:04.385423Z\",\n      \"pose\" : {\n        \"gpsRecordTimestampUnixEpoch\" : \"2022-11-06T12:47:04.38546Z\",\n        \"altitude\" : 1.4915581403322488E308,\n        \"accuracyMeters\" : 2.5616951959677434E38,\n        \"latLngPair\" : {\n          \"latitude\" : 1.0606365277890421E307,\n          \"longitude\" : 1.1333084180191194E308\n        },\n        \"heading\" : 6.572390843950667E306,\n        \"level\" : {\n          \"number\" : 1.0024226221561994E308,\n          \"name\" : \"Miller\"\n        },\n        \"roll\" : 4.888550301258496E307,\n        \"pitch\" : 3.147770101264498E307\n      },\n      \"downloadUrl\" : \"https://web.example.mocklab.io/747350\",\n      \"uploadReference\" : {\n        \"uploadUrl\" : \"https://web.example.mocklab.io/857939\"\n      },\n      \"photoId\" : {\n        \"id\" : \"il49\"\n      },\n      \"shareLink\" : \"7slxioetfejiaa7y9ocycghe1ajeqt4p6zb8fzplpkdjbusy8go9v5ugc7bzaewyxp2ipvtjdd9zyd0xd0340\",\n      \"uploadTime\" : \"2023-01-21T13:16:04.38579Z\",\n      \"places\" : [ {\n        \"name\" : \"Ms. Vasiliki Stamm\",\n        \"placeId\" : \"sa4d\",\n        \"languageCode\" : \"125m6oicmlcs2e1j1o1p22a9e1fkli8do4deay7ufpo6jrqa4rsxg9cupnt3ydd87ub8uokzeq73hy7ux1hq3q8sov6nu08lvjdsdmo3ufs839pqx79ovat4naj2z6e5kk04novvd\"\n      }, {\n        \"name\" : \"Willette McCullough\",\n        \"placeId\" : \"58y9\",\n        \"languageCode\" : \"x627n73044uij6gu8fzkhaiefmec67e6y43kev5r3y94uurzbb9u9034s5zpe7h8zb7gsb2gy28q57rnvaw58rpmf3dly163ba9r\"\n      }, {\n        \"name\" : \"Sherika D'Amore\",\n        \"placeId\" : \"09cf\",\n        \"languageCode\" : \"ld506clpq4kfvcgnzxnh5ya7y8oev0ki2psnv2p42d49qjk6g8h9qglqrgthlbdp7h61d5ogdr8ngw2lma4nfpoab4dysm637577t8su5top42bad5kar\"\n      }, {\n        \"name\" : \"Cammie Wiza\",\n        \"placeId\" : \"957h\",\n        \"languageCode\" : \"2ahlxvxzu6tnf2yv3uph31pi17z1upprnd9qh2s3h8r153yro2426zv116dmxzhqi9cc7ljyngt9s43ll20y5iot64la1ggnfdymgmvlcd8vqy5ersu8t7brhigvevme22468fufg8gjhvoh1xdmadknc35bm00o3rqrbv29g58t7x97boairzrvlxlk\"\n      } ],\n      \"viewCount\" : \"uw6sxijfz20fj4ns72e9tp8ojqse0955lzmej4ugi3of9ji67o0i2v9fl7pxek\",\n      \"mapsPublishStatus\" : \"UNSPECIFIED_MAPS_PUBLISH_STATUS\",\n      \"connections\" : [ {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      } ],\n      \"thumbnailUrl\" : \"https://web.example.mocklab.io/864816\"\n    },\n    \"status\" : {\n      \"code\" : 183288346,\n      \"details\" : [ { }, { } ],\n      \"message\" : \"Laudantium in eos. Nesciunt ducimus provident ut. Quia quidem velit quam. Hic inventore omnis repellendus id est rem.\"\n    }\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a02afcf2-3d65-4b60-a285-d497471c86f5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:42:04.386964Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photos.batchGet",
          "schema" : {
            "description" : "Response to batch get of Photos.",
            "properties" : {
              "results" : {
                "description" : "List of results for each individual Photo requested, in the same order as the requests in BatchGetPhotos.",
                "items" : {
                  "$ref" : "#/components/schemas/PhotoResponse"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 1
  }, {
    "id" : "73b9ce2c-1e4f-4c20-a33c-1daa9bec353f",
    "name" : "Deletes a list of Photos and their metadata. Note that if BatchDeletePhotos fail...",
    "request" : {
      "urlPath" : "/v1/photos:batchDelete",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status\" : [ {\n    \"code\" : 455835330,\n    \"details\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n    \"message\" : \"Voluptatem asperiores non porro. Harum exercitationem placeat rerum excepturi voluptatibus. Quod hic voluptate necessitatibus placeat deserunt. Quas tenetur non saepe. Recusandae quidem amet dolores q\"\n  }, {\n    \"code\" : 1216902053,\n    \"details\" : [ { }, { }, { }, { }, { }, { } ],\n    \"message\" : \"Minus et eaque aut odio consequatur et dicta. Qui iste commodi. Quia natus in deleniti quia quia. Culpa porro et et et fuga.\"\n  }, {\n    \"code\" : 479392794,\n    \"details\" : [ { }, { }, { } ],\n    \"message\" : \"A esse repellendus et rerum. Unde quidem eveniet vero ab qui earum necessitatibus. Praesentium sit nobis.\"\n  }, {\n    \"code\" : 1893752695,\n    \"details\" : [ { }, { } ],\n    \"message\" : \"Similique vitae eligendi molestiae ut aperiam voluptatum. Ea temporibus autem et. Sit quas in in. Eveniet quas necessitatibus dicta animi maxime voluptas.\"\n  }, {\n    \"code\" : 186870753,\n    \"details\" : [ { } ],\n    \"message\" : \"Eum illum porro. Neque exercitationem maxime molestiae sunt. Odio perspiciatis doloremque laudantium et praesentium molestiae. Vel est aliquid quia et. Qui aut et impedit deleniti est accusamus.\"\n  }, {\n    \"code\" : 1236193704,\n    \"details\" : [ { }, { }, { }, { }, { }, { }, { } ],\n    \"message\" : \"Perspiciatis asperiores praesentium error autem facere laborum. Et illo et aperiam odio. Impedit ipsa ab tempora quis cum est voluptatem. Est dolore qui et aut praesentium. Laborum deleniti recusandae\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "73b9ce2c-1e4f-4c20-a33c-1daa9bec353f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:42:04.383948Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photos.batchDelete",
          "schema" : {
            "description" : "Response to batch delete of one or more Photos.",
            "properties" : {
              "status" : {
                "description" : "The status for the operation to delete a single Photo in the batch request.",
                "items" : {
                  "$ref" : "#/components/schemas/Status"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 2
  }, {
    "id" : "0f9457c3-d994-4511-b560-62e0c017cde4",
    "name" : "Lists all the Photos that belong to the user. > Note: Recently created photos th...",
    "request" : {
      "urlPath" : "/v1/photos",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"nextPageToken\" : \"kpbbzkahkyl3w3zfwbj1v5zf78tw35wwzs7pkim9qci4it81oayyzeis9igtff3we7nj7rysxuci9o2sve08slr1zur8204hhlkeak1qq193\",\n  \"photos\" : [ {\n    \"transferStatus\" : \"EXPIRED\",\n    \"captureTime\" : \"2022-09-15T14:41:04.369366Z\",\n    \"pose\" : {\n      \"gpsRecordTimestampUnixEpoch\" : \"2022-10-05T14:56:04.369407Z\",\n      \"altitude\" : 4.0867010982739025E307,\n      \"accuracyMeters\" : 1.911272353695847E38,\n      \"latLngPair\" : {\n        \"latitude\" : 1.2077560660899085E308,\n        \"longitude\" : 6.971810827187182E307\n      },\n      \"heading\" : 7.289036183428374E307,\n      \"level\" : {\n        \"number\" : 9.933061698460407E307,\n        \"name\" : \"Gleason\"\n      },\n      \"roll\" : 1.3528923603683311E308,\n      \"pitch\" : 1.534051623916111E308\n    },\n    \"downloadUrl\" : \"https://web.example.mocklab.io/221518\",\n    \"uploadReference\" : {\n      \"uploadUrl\" : \"https://web.example.mocklab.io/606238\"\n    },\n    \"photoId\" : {\n      \"id\" : \"vat2\"\n    },\n    \"shareLink\" : \"al0r4leh79o0191h3xbg98htpan7u724j0eoz9az50ii9om60eacyyi8mgpxkwzjys004tjdrk80hxr4bxzx3y661ct5mugwp7trjlb3lm3bb7iary97g\",\n    \"uploadTime\" : \"2022-08-04T12:07:04.369755Z\",\n    \"places\" : [ {\n      \"name\" : \"Tory Streich\",\n      \"placeId\" : \"ezv7\",\n      \"languageCode\" : \"7upg0rb6o04unw578pvx2vlswzahwvawtz3u5htdmqy1hyg2d2pou5a3a851ycsxmuvlyd9gs0gurq3ijkork2fi2v6oqsxke81cixc5qt01ewy5mnb0s7pvvcrr0c7h8k6sym7qleoxlb0hyh2g\"\n    }, {\n      \"name\" : \"Sung Berge\",\n      \"placeId\" : \"dh57\",\n      \"languageCode\" : \"9pvdfz46qw8zpqnaqnectpmzmjwh9c8x4tc0sl5b6v08px27coycxhoaaz7il65yrc3pxa4xagb91apljvxn3h2ky93we5emf74dkqe0thk5lc2xbj8jil8gxinve1dv222ev4xzzn101sfr\"\n    }, {\n      \"name\" : \"Christian Fritsch\",\n      \"placeId\" : \"9974\",\n      \"languageCode\" : \"3z33yrtci65vkbgj4us2kuvdupsbzt9q8ihdjxck6q9i46gp5919pj9ec6dw\"\n    }, {\n      \"name\" : \"Jacob Bailey\",\n      \"placeId\" : \"f4r9\",\n      \"languageCode\" : \"kl9idjo51ctgqe34qu6chqum12chkzcy310jx0qcsqxxe4ally66bdxxkix9hx9srvt7vg7fhltk7j9qi66zh1luneglk1zp7q1fyl6ev6buv6ooz2mki\"\n    }, {\n      \"name\" : \"Reynaldo Spinka III\",\n      \"placeId\" : \"497x\",\n      \"languageCode\" : \"82u1y93h2m\"\n    } ],\n    \"viewCount\" : \"8bj834jt6mm2sgom5w61xyol29241pg0a59sxzp9lf0uc5v4eo1tfznfgm1q6ftreynl4cqbfgpmb13duk9rd53e6t6efq4ou4a9aof7z3qkooiq9fez7vtt5vchaalaxp5tldml9avq0qy7zbvc85v8foo8xn0ew5mq2pcylprdzjxupxdc9zy0a\",\n    \"mapsPublishStatus\" : \"REJECTED_UNKNOWN\",\n    \"connections\" : [ {\n      \"target\" : {\n        \"id\" : \"8i78\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"vkbw\"\n      }\n    } ],\n    \"thumbnailUrl\" : \"https://web.example.mocklab.io/049736\"\n  }, {\n    \"transferStatus\" : \"TRANSFER_STATUS_UNKNOWN\",\n    \"captureTime\" : \"2022-04-20T12:30:04.370697Z\",\n    \"pose\" : {\n      \"gpsRecordTimestampUnixEpoch\" : \"2022-06-01T13:24:04.370736Z\",\n      \"altitude\" : 1.3372382126876882E308,\n      \"accuracyMeters\" : 7.558860686810369E37,\n      \"latLngPair\" : {\n        \"latitude\" : 6.349883771536075E307,\n        \"longitude\" : 1.3221166872363813E308\n      },\n      \"heading\" : 8.107767740943984E307,\n      \"level\" : {\n        \"number\" : 9.321779405598768E307,\n        \"name\" : \"Schroeder\"\n      },\n      \"roll\" : 5.389624234418341E307,\n      \"pitch\" : 6.060466521438278E307\n    },\n    \"downloadUrl\" : \"https://web.example.mocklab.io/103553\",\n    \"uploadReference\" : {\n      \"uploadUrl\" : \"https://web.example.mocklab.io/527052\"\n    },\n    \"photoId\" : {\n      \"id\" : \"87rv\"\n    },\n    \"shareLink\" : \"ogt3xss6akxvjqnhsaiumeqtgm6umb664dgfhz3viw1l6krit0nzhvy75mobdawpfh3vc71e6kf0a1k5335exnxctrigaai5lxym6p93m1q6l0v8d826rki1uzrmlmv31n9of9ohq9ie9iwpx9hzdkx695f33781kdly0atudyz5enup50mmtnf3eue7zt\",\n    \"uploadTime\" : \"2022-06-14T13:11:04.371062Z\",\n    \"places\" : [ {\n      \"name\" : \"Dane Rippin III\",\n      \"placeId\" : \"9p69\",\n      \"languageCode\" : \"cky8ifeqrtwwhphhr8h2e7uw5tfvr2h832pfo11avld5y33a7wvfarvk04y3hvjm92bi75dqycfsmcymnc9aiknztbnibp6sd7wb0rftyhd5k0s4pcl00cbpb7euekw3sms09zikkxugwv18fna16deqbffx80n2iim5gl2kbroxa6fvlpv\"\n    }, {\n      \"name\" : \"Kareem Champlin\",\n      \"placeId\" : \"j46v\",\n      \"languageCode\" : \"2ya66lrguaq4fyme02z05tnij9t3wr6hlgh1a9qcwjc5f4pdoqfb6585l9y0em5evbn30efzk25r61pjxhj6r9we35ojfigb90eskboi8lxcg5gihpbe8yz77u3wwfrunzc03tdgdecqix36zobj6bc7a4vb7mtbts7n96v5g1novkpe\"\n    } ],\n    \"viewCount\" : \"blw\",\n    \"mapsPublishStatus\" : \"PUBLISHED\",\n    \"connections\" : [ {\n      \"target\" : {\n        \"id\" : \"r79p\"\n      }\n    } ],\n    \"thumbnailUrl\" : \"https://web.example.mocklab.io/915452\"\n  }, {\n    \"transferStatus\" : \"COMPLETED\",\n    \"captureTime\" : \"2022-07-01T13:28:04.371528Z\",\n    \"pose\" : {\n      \"gpsRecordTimestampUnixEpoch\" : \"2022-11-29T13:52:04.371564Z\",\n      \"altitude\" : 1.369600206296496E308,\n      \"accuracyMeters\" : 1.1833292313123187E38,\n      \"latLngPair\" : {\n        \"latitude\" : 3.9775165168619295E307,\n        \"longitude\" : 1.6031486275335979E308\n      },\n      \"heading\" : 1.0315493837211088E308,\n      \"level\" : {\n        \"number\" : 1.1388257063760889E308,\n        \"name\" : \"Aufderhar\"\n      },\n      \"roll\" : 8.871237519211914E307,\n      \"pitch\" : 1.742406645840386E308\n    },\n    \"downloadUrl\" : \"https://web.example.mocklab.io/512164\",\n    \"uploadReference\" : {\n      \"uploadUrl\" : \"https://web.example.mocklab.io/213397\"\n    },\n    \"photoId\" : {\n      \"id\" : \"2fq8\"\n    },\n    \"shareLink\" : \"8x8fu40yyjsg4sen8tw5g7e7cy6g1\",\n    \"uploadTime\" : \"2022-12-09T14:37:04.371864Z\",\n    \"places\" : [ {\n      \"name\" : \"Nicole Brown\",\n      \"placeId\" : \"o65d\",\n      \"languageCode\" : \"exg9r241okg5kyx6mqpxoagzub58z0\"\n    }, {\n      \"name\" : \"Alexander Balistreri\",\n      \"placeId\" : \"4pgl\",\n      \"languageCode\" : \"hg2nsojprsoam94v41zv0gxbvzl3j0yrqapg5ew9owzakg6b9cr3aqurrgruhwfw8jfveehmwjhdzi2ytz763h17jut6adqi7uh7bov6m11e3oisl7t8dga7bpcthccgo6hsbdc7les9r97cn2ctkosjn0j5gp28yh7jn95er6db8iu7pt1qx8564tz2kre8km\"\n    }, {\n      \"name\" : \"Renea Kerluke\",\n      \"placeId\" : \"78e4\",\n      \"languageCode\" : \"dlellbcl346mqvl66a661vwdztkn5butrbjcuc65mb5jfc0knlh7odpwguzfrxru4q5txg7f\"\n    }, {\n      \"name\" : \"Bobbie Marquardt\",\n      \"placeId\" : \"2clr\",\n      \"languageCode\" : \"c890os9empemi8fjzknazhe71u0emlqfc9dnhvhnw20grd0iifcbfumv0xgl9s1hmn0263qchsh29of2c1w1eu8qz8mjf81naqk5js7eg14ldd4nndxpjl137mlx9rso05qn4adbeqbpt8a9ssp3mjte48dw5765zom1yhj5r69evh\"\n    }, {\n      \"name\" : \"Henriette Keebler\",\n      \"placeId\" : \"uc42\",\n      \"languageCode\" : \"pamdege7d78jgyy042dbfo3gx9v5yb7fo7iugwccn3bi8a8el83ye3jb3fm25eujdya4cjbtvwrevqsyu1pryfvjam32mw8vzs8l029ahoijzdqfq0pq7pzb08al270v1sivs0zc5wetgi4eccmzqb2ovjcncp4ud8f0n1ojzreo1q0md04ueo1ttknwt5hc9\"\n    }, {\n      \"name\" : \"Donetta Stamm\",\n      \"placeId\" : \"fqb0\",\n      \"languageCode\" : \"0l0mduvxbucg8qeb8j2g1vv0mu2f6di\"\n    } ],\n    \"viewCount\" : \"m1teowkh5ku9l1vh56wx7vh6lw5yr1c\",\n    \"mapsPublishStatus\" : \"UNSPECIFIED_MAPS_PUBLISH_STATUS\",\n    \"connections\" : [ {\n      \"target\" : {\n        \"id\" : \"m81l\"\n      }\n    } ],\n    \"thumbnailUrl\" : \"https://web.example.mocklab.io/937692\"\n  }, {\n    \"transferStatus\" : \"RECEIVED_VIA_TRANSFER\",\n    \"captureTime\" : \"2023-01-28T11:43:04.376867Z\",\n    \"pose\" : {\n      \"gpsRecordTimestampUnixEpoch\" : \"2022-08-13T12:24:04.376913Z\",\n      \"altitude\" : 1.9027757055302232E307,\n      \"accuracyMeters\" : 2.9456985245744296E38,\n      \"latLngPair\" : {\n        \"latitude\" : 1.5640782177985523E308,\n        \"longitude\" : 6.723607164301714E307\n      },\n      \"heading\" : 1.4390581982904622E308,\n      \"level\" : {\n        \"number\" : 1.0524587652901927E308,\n        \"name\" : \"West\"\n      },\n      \"roll\" : 5.593870502287601E307,\n      \"pitch\" : 9.540155515279881E307\n    },\n    \"downloadUrl\" : \"https://web.example.mocklab.io/415507\",\n    \"uploadReference\" : {\n      \"uploadUrl\" : \"https://web.example.mocklab.io/710862\"\n    },\n    \"photoId\" : {\n      \"id\" : \"912z\"\n    },\n    \"shareLink\" : \"hlpp2hcxiv7zf63fh2xpnjv9px4xcucap9y8hedcyri1yycn84b99vzppjp28k81sj2yvuy2zv62mlpndov95jy3wj986tcw41awrnjhlga9gbsxd1vk0aq7ji2yxsa643speibwhia7gwnk64p2eenxs7mxmcnjrbqn\",\n    \"uploadTime\" : \"2023-02-27T14:36:04.377278Z\",\n    \"places\" : [ {\n      \"name\" : \"Celesta Feeney\",\n      \"placeId\" : \"j650\",\n      \"languageCode\" : \"u2jnxuvxq1194ih4840eqcy0g21xam\"\n    }, {\n      \"name\" : \"Clifford Parisian\",\n      \"placeId\" : \"l3f5\",\n      \"languageCode\" : \"2iazvatg73uwqe4xbaepeovp77eie27fyzuwtlt69mgoxzyakyz9ird9a7t3b5y5wutg89oga8d0amsy4upqys3jq7eiu0sorf0uehv4hpj3znq8\"\n    }, {\n      \"name\" : \"Karl Lueilwitz\",\n      \"placeId\" : \"cdyy\",\n      \"languageCode\" : \"3t1cgq3whc5gejz4rxqw7i5mzgstph0qx4makmndctc32yczhhj3qpyacoa5981yfzg5vhu7g3mn8aq14jsvtlxyw18cip9i418l80yxkhjup6lsgpwrw8jpd1wektgpde2t6qq9dgip1zd6iysozoja6nk\"\n    }, {\n      \"name\" : \"Manda Berge\",\n      \"placeId\" : \"l402\",\n      \"languageCode\" : \"3mdwqpy8r3fhf39viftizxfwweghezk1vv6kkobkrhed4959kftsmt7xg0g7x2b5nnml1qfdgss6bnntbs8koftin411lo09v3rm38jiyvdlsh52cz\"\n    }, {\n      \"name\" : \"Irvin Murazik\",\n      \"placeId\" : \"38ra\",\n      \"languageCode\" : \"nxlxdm7biqvo5r2vj888eu4c20y499my8gekw6o7zcbnashwwxulx47rgmxezg5bhqmsjr2wwjjlyv1xz1cy4gh16ja\"\n    }, {\n      \"name\" : \"Tawana Heidenreich\",\n      \"placeId\" : \"1uj0\",\n      \"languageCode\" : \"yz1bm2wfc9voj7qekazpaexg8z6n2losqnj8yphry7k6j768\"\n    }, {\n      \"name\" : \"Reggie Wilkinson\",\n      \"placeId\" : \"60nz\",\n      \"languageCode\" : \"kvzo8okbntu6rangspkk0hnujl8mmzxfryh\"\n    } ],\n    \"viewCount\" : \"o5ch8en8fxewkqtcaakbgfmn3407xreskrd3kggeqt8aixeoj7hfrxqtmtloddldsg\",\n    \"mapsPublishStatus\" : \"REJECTED_UNKNOWN\",\n    \"connections\" : [ {\n      \"target\" : {\n        \"id\" : \"x8p9\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"5329\"\n      }\n    } ],\n    \"thumbnailUrl\" : \"https://web.example.mocklab.io/844090\"\n  }, {\n    \"transferStatus\" : \"REJECTED\",\n    \"captureTime\" : \"2023-02-04T12:09:04.378471Z\",\n    \"pose\" : {\n      \"gpsRecordTimestampUnixEpoch\" : \"2023-03-21T13:14:04.37851Z\",\n      \"altitude\" : 1.568029174365948E308,\n      \"accuracyMeters\" : 4.481621326440466E37,\n      \"latLngPair\" : {\n        \"latitude\" : 1.4502893045318568E308,\n        \"longitude\" : 1.011191035685827E308\n      },\n      \"heading\" : 4.780581377219658E306,\n      \"level\" : {\n        \"number\" : 1.739154564030991E308,\n        \"name\" : \"Legros\"\n      },\n      \"roll\" : 6.010736366023154E307,\n      \"pitch\" : 8.271908615778132E307\n    },\n    \"downloadUrl\" : \"https://web.example.mocklab.io/460632\",\n    \"uploadReference\" : {\n      \"uploadUrl\" : \"https://web.example.mocklab.io/175227\"\n    },\n    \"photoId\" : {\n      \"id\" : \"a22s\"\n    },\n    \"shareLink\" : \"grleno8dtssue5qkjcmce0m4fj6lzrz0nclmtowt9cufzbecrikg389ytqs9v2vqc4gjlcnb6xdmcevs22xvk4aqku1puxnajqvdlbrptgcw156lmqzl3mezpl4t65hh5ktc7hn34ok75zpzewelidjyfglxvnia83fc4abby2ogdi91zg79x9u2\",\n    \"uploadTime\" : \"2023-01-13T13:25:04.378841Z\",\n    \"places\" : [ {\n      \"name\" : \"Gwyn Heidenreich\",\n      \"placeId\" : \"3577\",\n      \"languageCode\" : \"8v8aqi46rlvogqsk25kb3qe53v3lyjka3s2o5qgff2pcz6x7ouqx0skk5t1c01b141cf9sxudjkolrv055qkdokrbrjlylypm37ardy5da17xrwr1v8zpcfgxo7k\"\n    }, {\n      \"name\" : \"Miss Emmaline Haag\",\n      \"placeId\" : \"7dhb\",\n      \"languageCode\" : \"jhm9s7a3kt2dggvxwcemzbruelquwwnppbth8u8tq69c9rvsyjbl09fsev9lom081g9ptt0bm5tg99u4dmb2jd984y4esmzavrmg3i82qczfqfy4o659dowefyytc79nggnvyhv0e7fkyiuaby3d6dsicnsjrjkbvcdm6s\"\n    } ],\n    \"viewCount\" : \"xmfnlslebrgre9x4trpsvfly0qrpwem8j6lb7\",\n    \"mapsPublishStatus\" : \"REJECTED_UNKNOWN\",\n    \"connections\" : [ {\n      \"target\" : {\n        \"id\" : \"543d\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"zu12\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"4u1a\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"f0v8\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"07hc\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"2gdh\"\n      }\n    } ],\n    \"thumbnailUrl\" : \"https://web.example.mocklab.io/115295\"\n  }, {\n    \"transferStatus\" : \"RECEIVED_VIA_TRANSFER\",\n    \"captureTime\" : \"2023-02-05T15:33:04.379685Z\",\n    \"pose\" : {\n      \"gpsRecordTimestampUnixEpoch\" : \"2022-03-31T12:11:04.379722Z\",\n      \"altitude\" : 1.026746274358361E308,\n      \"accuracyMeters\" : 2.1900509810635557E38,\n      \"latLngPair\" : {\n        \"latitude\" : 1.5051960879012847E306,\n        \"longitude\" : 1.0111523148617708E308\n      },\n      \"heading\" : 1.5561945571390644E308,\n      \"level\" : {\n        \"number\" : 6.29096072326027E306,\n        \"name\" : \"Parker\"\n      },\n      \"roll\" : 1.3707399185386335E308,\n      \"pitch\" : 1.4706024531650785E308\n    },\n    \"downloadUrl\" : \"https://web.example.mocklab.io/591504\",\n    \"uploadReference\" : {\n      \"uploadUrl\" : \"https://web.example.mocklab.io/896665\"\n    },\n    \"photoId\" : {\n      \"id\" : \"2276\"\n    },\n    \"shareLink\" : \"insr2uimb7pzihoy5k2mqbgbbvnl3lfq24n3bw8fnbd2pheu33e0qo7hq9w7hr2gzcnrkylj9ckcdnuzbodipxq\",\n    \"uploadTime\" : \"2022-07-19T15:23:04.380046Z\",\n    \"places\" : [ {\n      \"name\" : \"Ms. Shelby Bednar\",\n      \"placeId\" : \"2hr9\",\n      \"languageCode\" : \"ygd0jnaf9ha0feft4yp9apz4ht4gd7yog01linsrvt4ykp6mqeookyielonflemh5apj9v8w6pcid1go3uan02zbng52kxald1d4vc5l\"\n    } ],\n    \"viewCount\" : \"r3ygtzachab9061vmxxjaohpb2wqawzyi0zvm9gytynuhtnqyomimoifdzclbotfmhsfr59n1gvctky995kcw\",\n    \"mapsPublishStatus\" : \"PUBLISHED\",\n    \"connections\" : [ {\n      \"target\" : {\n        \"id\" : \"1yg2\"\n      }\n    } ],\n    \"thumbnailUrl\" : \"https://web.example.mocklab.io/468675\"\n  }, {\n    \"transferStatus\" : \"REJECTED\",\n    \"captureTime\" : \"2022-10-16T13:58:04.380389Z\",\n    \"pose\" : {\n      \"gpsRecordTimestampUnixEpoch\" : \"2022-06-15T12:33:04.380422Z\",\n      \"altitude\" : 8.257553391446392E307,\n      \"accuracyMeters\" : 3.0009797517588156E38,\n      \"latLngPair\" : {\n        \"latitude\" : 3.418259265932335E307,\n        \"longitude\" : 1.9138928772312275E307\n      },\n      \"heading\" : 7.268472494376977E307,\n      \"level\" : {\n        \"number\" : 4.734841403014913E307,\n        \"name\" : \"Ullrich\"\n      },\n      \"roll\" : 1.2248720190924572E308,\n      \"pitch\" : 2.7753226712053476E307\n    },\n    \"downloadUrl\" : \"https://web.example.mocklab.io/393584\",\n    \"uploadReference\" : {\n      \"uploadUrl\" : \"https://web.example.mocklab.io/204822\"\n    },\n    \"photoId\" : {\n      \"id\" : \"i087\"\n    },\n    \"shareLink\" : \"zozywvb86hx9x8shoinjsd4in1o8783akb9agjegynrg7qf6ex107qr5bs8nmajulwglfm1av4qi9n1v2ddx202w21bgi7c4187t7sdz99hypgarcx7ltz18730d0aubuyqr6l8qfe2t0ivqwiwe1bl3falribqohfgfz16feikvnjbt1geq04lnmc5pmm8ddm20\",\n    \"uploadTime\" : \"2022-07-19T12:09:04.380733Z\",\n    \"places\" : [ {\n      \"name\" : \"Norma Gislason\",\n      \"placeId\" : \"76gc\",\n      \"languageCode\" : \"f9yfe6ey6twr9en711nkuuz3c9cicafm7mgbk03suyhd2vcvc6kne26vtyviv4ufidsi7j5vlk0sp3rpx1hfd6watdv02ar82cm0fwtrwhx\"\n    }, {\n      \"name\" : \"David Doyle\",\n      \"placeId\" : \"s030\",\n      \"languageCode\" : \"bdeggitef\"\n    }, {\n      \"name\" : \"Edison Zemlak\",\n      \"placeId\" : \"y0f3\",\n      \"languageCode\" : \"khipffimat1zbhfi2n8i586dpn81u41jtnthsz872wfriy798epabkobp3oas2o4pgbuh3iq8b\"\n    }, {\n      \"name\" : \"Jeremy Jast\",\n      \"placeId\" : \"1830\",\n      \"languageCode\" : \"ec0rvzwwdgptuoudlikkjgtgk4svsnqwaa3rr2ka4upz1s5g6duvo4ymh1nmybf12a99vjkp0kab2s8klphh03ibac2pfzu5dvi1kmgpmmnzlftpja133vnlpaea4dpwtivq5vk88g85l4iwepbpwyvi4ipyx3a7ldvd3a0f4f5xfpgjbleq4lb\"\n    }, {\n      \"name\" : \"Setsuko Mraz\",\n      \"placeId\" : \"iwqd\",\n      \"languageCode\" : \"a3fflyovoha8e4bwdavxd6xsq7dl8hcroo1kin9g9exkgltxnh47740c7l0h66khq3mw0cygjf5g8v3e3drb7hskbhpwp2vtp4n9rijrjydyib3em075y8zp0dm2jqp6lzcazj5891jdq0s6jv1ucyoz33pjuamy1g87gq2vvi9\"\n    } ],\n    \"viewCount\" : \"dwcvspufm0r1mvvfnu67z9q9j44xl\",\n    \"mapsPublishStatus\" : \"REJECTED_UNKNOWN\",\n    \"connections\" : [ {\n      \"target\" : {\n        \"id\" : \"598i\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"myc5\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"17oy\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"p4cz\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"7df8\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"smto\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"d0rw\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"qzr0\"\n      }\n    } ],\n    \"thumbnailUrl\" : \"https://web.example.mocklab.io/377658\"\n  }, {\n    \"transferStatus\" : \"TRANSFER_STATUS_UNKNOWN\",\n    \"captureTime\" : \"2022-07-22T15:04:04.382055Z\",\n    \"pose\" : {\n      \"gpsRecordTimestampUnixEpoch\" : \"2022-08-07T12:29:04.382091Z\",\n      \"altitude\" : 1.643370186390296E307,\n      \"accuracyMeters\" : 5.601626377773537E37,\n      \"latLngPair\" : {\n        \"latitude\" : 1.6467325149226905E308,\n        \"longitude\" : 2.883553910949119E307\n      },\n      \"heading\" : 8.246941947220324E307,\n      \"level\" : {\n        \"number\" : 3.961662717449488E307,\n        \"name\" : \"Lindgren\"\n      },\n      \"roll\" : 2.9973478930786516E307,\n      \"pitch\" : 1.0617945407426386E308\n    },\n    \"downloadUrl\" : \"https://web.example.mocklab.io/835498\",\n    \"uploadReference\" : {\n      \"uploadUrl\" : \"https://web.example.mocklab.io/234659\"\n    },\n    \"photoId\" : {\n      \"id\" : \"ox4g\"\n    },\n    \"shareLink\" : \"tgigvejjr3zn3zk4shmyg2cn0icz6mfmploc55j3rxy7r882296w7qc0cp0pxhdmtmr563fkosc8a6hdyfi4qw5hfhhnh\",\n    \"uploadTime\" : \"2022-04-13T13:23:04.382408Z\",\n    \"places\" : [ {\n      \"name\" : \"Ellyn Lindgren V\",\n      \"placeId\" : \"fy34\",\n      \"languageCode\" : \"sejky2pd5288y42m3bqbjusguuav4grqb451wxamwiz3wr8zzd9xovba7ikh54nio1v5qyjyfv0uatsrr52kj4sgpwgel48zglp0b4djdcpx4g6646yka5\"\n    }, {\n      \"name\" : \"Oswaldo Wuckert\",\n      \"placeId\" : \"vzwq\",\n      \"languageCode\" : \"168vy7qofb1xcra914e5aatdvs607mt6ml0mk\"\n    }, {\n      \"name\" : \"Carol Lueilwitz\",\n      \"placeId\" : \"p723\",\n      \"languageCode\" : \"6xnpgqe7g1cu7nt1i28rmyk7uck1lra473dlec72dxqspzb7t61542w6ji2rc2koxcyc224t67kimgtmod7bjoubsexux1gwqf5m0y4d5tewfmk0jcutex6zya3u6saocsoysukfgh\"\n    }, {\n      \"name\" : \"Kirby Howe\",\n      \"placeId\" : \"443e\",\n      \"languageCode\" : \"fbya7x40zeozt9v8mym4vys6pyg1bjgq5fi6fzke4wbj534i6d6q30l5t6wwf0jzwazebymq7ahvu49e8hasx127jbt6jhq4bzvs96ro3btr6yolxh23qxz5512h7irpboj9vf5yw0orzn7r06prvdsefqvvenh3ybalitijmdljpptaiwb0yv1r3g\"\n    }, {\n      \"name\" : \"Neil Zieme\",\n      \"placeId\" : \"c20v\",\n      \"languageCode\" : \"5iqxzi6r3wl77euj0xpyaevbb6adfx7rnsdxcle48xg15lq3adowy8atqahxf9g92zeda1cckgoewedwzsx61bpkj2zy\"\n    }, {\n      \"name\" : \"Candice Halvorson\",\n      \"placeId\" : \"40tc\",\n      \"languageCode\" : \"0yjtxp1kxzpgia8b4fqvfxgu3wt5z6ueb8brh2k8kgc4\"\n    } ],\n    \"viewCount\" : \"7scziz6m3mf0p5jl5js0nck38zti3h1a55ru2ji0pcxiszx5yi0ky17mdojlbko3f7ynhphmeosscsqtj8uwrxun3c0qjswvbu8b1theumw9ocnd79\",\n    \"mapsPublishStatus\" : \"UNSPECIFIED_MAPS_PUBLISH_STATUS\",\n    \"connections\" : [ {\n      \"target\" : {\n        \"id\" : \"955j\"\n      }\n    } ],\n    \"thumbnailUrl\" : \"https://web.example.mocklab.io/862415\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0f9457c3-d994-4511-b560-62e0c017cde4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:42:04.383537Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photos.list",
          "schema" : {
            "description" : "Response to list all photos that belong to a user.",
            "properties" : {
              "nextPageToken" : {
                "description" : "Token to retrieve the next page of results, or empty if there are no more results in the list.",
                "type" : "string"
              },
              "photos" : {
                "description" : "List of photos. The pageSize field in the request determines the number of items returned.",
                "items" : {
                  "$ref" : "#/components/schemas/Photo"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 3
  }, {
    "id" : "45091e43-f4bb-4ac5-9341-59913d814a41",
    "name" : "Lists all the PhotoSequences that belong to the user, in descending CreatePhotoS...",
    "request" : {
      "urlPath" : "/v1/photoSequences",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"photoSequences\" : [ {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Rosario Herman\",\n    \"error\" : {\n      \"code\" : 3080557,\n      \"details\" : [ { }, { }, { } ],\n      \"message\" : \"Sint voluptas sunt sit omnis sint enim. Temporibus officia aut voluptatem quae. Aspernatur est dolorem qui molestiae vitae. Deserunt fuga ullam saepe ut. Enim odit iure dolore et.\"\n    },\n    \"done\" : true\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Joey Mayer\",\n    \"error\" : {\n      \"code\" : 346988488,\n      \"details\" : [ { }, { }, { } ],\n      \"message\" : \"Sed occaecati laborum. Sint placeat quidem. Qui sed placeat ut magnam expedita. Reiciendis sit dolore aut.\"\n    },\n    \"done\" : true\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Mr. Kerry Rodriguez\",\n    \"error\" : {\n      \"code\" : 2080915098,\n      \"details\" : [ { }, { }, { }, { }, { } ],\n      \"message\" : \"Sed ut hic laudantium vel occaecati tempora. Quisquam facere necessitatibus dolores aspernatur nisi sunt quod. Deserunt quia voluptas dolores repellendus consequatur hic. Ut voluptas voluptates natus \"\n    },\n    \"done\" : false\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Jerrod Harris\",\n    \"error\" : {\n      \"code\" : 1329572254,\n      \"details\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"message\" : \"Atque exercitationem est. Quia voluptate hic ut tempora et voluptatem. Rerum ad eaque atque. Nemo minus quisquam atque tenetur omnis rerum ipsa.\"\n    },\n    \"done\" : true\n  } ],\n  \"nextPageToken\" : \"n4wafaokbp46kymtdck9wayfyrfo5p7z9bv3jmxvm\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "45091e43-f4bb-4ac5-9341-59913d814a41",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:42:04.369281Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photoSequences.list",
          "schema" : {
            "description" : "Response to list all photo sequences that belong to a user.",
            "properties" : {
              "nextPageToken" : {
                "description" : "Token to retrieve the next page of results, or empty if there are no more results in the list.",
                "type" : "string"
              },
              "photoSequences" : {
                "description" : "List of photo sequences via Operation interface. The maximum number of items returned is based on the pageSize field in the request. Each item in the list can have three possible states, * `Operation.done` = false, if the processing of PhotoSequence is not finished yet. * `Operation.done` = true and `Operation.error` is populated, if there was an error in processing. * `Operation.done` = true and `Operation.response` contains a PhotoSequence message, In each sequence, only Id is populated.",
                "items" : {
                  "$ref" : "#/components/schemas/Operation"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 4
  }, {
    "id" : "c014b327-cc24-4f93-a3c4-5a2eab939a4d",
    "name" : "Creates an upload session to start uploading photo sequence data. The upload URL...",
    "request" : {
      "urlPath" : "/v1/photoSequence:startUpload",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"uploadUrl\" : \"https://web.example.mocklab.io/322965\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c014b327-cc24-4f93-a3c4-5a2eab939a4d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:42:04.368733Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photoSequence.startUpload",
          "schema" : {
            "description" : "Upload reference for media files.",
            "properties" : {
              "uploadUrl" : {
                "description" : "An upload reference should be unique for each user. It follows the form: \"https://streetviewpublish.googleapis.com/media/user/{account_id}/photo/{upload_reference}\"",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 5
  }, {
    "id" : "27ce53b2-4db6-4c22-8625-479c779ddc40",
    "name" : "Gets the metadata of the specified PhotoSequence via the Operation interface. Th...",
    "request" : {
      "urlPath" : "/v1/photoSequence/7761",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Adah Ratke\",\n  \"error\" : {\n    \"code\" : 203446758,\n    \"details\" : [ { }, { }, { }, { }, { }, { } ],\n    \"message\" : \"Quae error recusandae. Iure aut fugiat nemo reprehenderit. Necessitatibus amet soluta nostrum dolor. Earum nulla sunt odio. Temporibus aut quo ipsam occaecati qui.\"\n  },\n  \"done\" : true\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "27ce53b2-4db6-4c22-8625-479c779ddc40",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:42:04.368626Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photoSequence.get",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 6
  }, {
    "id" : "ac62c309-8705-4995-94e5-f7b6774c210d",
    "name" : "Deletes a PhotoSequence and its metadata. This method returns the following erro...",
    "request" : {
      "urlPath" : "/v1/photoSequence/03u2",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ac62c309-8705-4995-94e5-f7b6774c210d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:42:04.36838Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photoSequence.delete",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 7
  }, {
    "id" : "2a5193e4-c710-4a9e-9f78-0b83e69db69b",
    "name" : "After the client finishes uploading the PhotoSequence with the returned UploadRe...",
    "request" : {
      "urlPath" : "/v1/photoSequence",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Mercedes Cummings\",\n  \"error\" : {\n    \"code\" : 1705689122,\n    \"details\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n    \"message\" : \"Ipsam iusto quos enim in sequi et. Quo maxime nihil neque illum id. Distinctio omnis alias dolores placeat cumque veniam. Laboriosam corrupti recusandae eius debitis.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2a5193e4-c710-4a9e-9f78-0b83e69db69b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:42:04.368265Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photoSequence.create",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 8
  }, {
    "id" : "d3457a2c-15ce-44a4-a48a-5ccadf2357b2",
    "name" : "Creates an upload session to start uploading photo bytes. The method uses the up...",
    "request" : {
      "urlPath" : "/v1/photo:startUpload",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"uploadUrl\" : \"https://web.example.mocklab.io/111260\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d3457a2c-15ce-44a4-a48a-5ccadf2357b2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:42:04.368014Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photo.startUpload",
          "schema" : {
            "description" : "Upload reference for media files.",
            "properties" : {
              "uploadUrl" : {
                "description" : "An upload reference should be unique for each user. It follows the form: \"https://streetviewpublish.googleapis.com/media/user/{account_id}/photo/{upload_reference}\"",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 9
  }, {
    "id" : "fae39f31-e8a7-4e2f-a8e7-0a4e04470b5d",
    "name" : "Gets the metadata of the specified Photo. This method returns the following erro...",
    "request" : {
      "urlPath" : "/v1/photo/7048",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"transferStatus\" : \"EXPIRED\",\n  \"captureTime\" : \"2023-03-07T14:16:04.366143Z\",\n  \"pose\" : {\n    \"gpsRecordTimestampUnixEpoch\" : \"2022-04-04T11:54:04.366182Z\",\n    \"altitude\" : 1.5766382991836524E308,\n    \"accuracyMeters\" : 8.667665999209962E36,\n    \"latLngPair\" : {\n      \"latitude\" : 1.1651487184195548E308,\n      \"longitude\" : 1.560741284290445E308\n    },\n    \"heading\" : 2.1207624345609839E307,\n    \"level\" : {\n      \"number\" : 5.29399885933361E307,\n      \"name\" : \"Gleason\"\n    },\n    \"roll\" : 8.499488601393311E307,\n    \"pitch\" : 3.965844583961151E307\n  },\n  \"downloadUrl\" : \"https://web.example.mocklab.io/308693\",\n  \"uploadReference\" : {\n    \"uploadUrl\" : \"https://web.example.mocklab.io/009840\"\n  },\n  \"photoId\" : {\n    \"id\" : \"3cb6\"\n  },\n  \"shareLink\" : \"fa752ywi2b06k4wi30jeoy7w41miaqc8bfwzw0bpb5k8fajqagpn45ynqra81i85yv1hzqmtocysneqx9yygjf9e2sin3qf2yvyc6sffvg46c35iw9drcvhgesgqdpr41vsoibaml4ca32ftryi1r9py3mu8m0pmhni2aylzi\",\n  \"uploadTime\" : \"2022-06-27T13:30:04.366499Z\",\n  \"places\" : [ {\n    \"name\" : \"Abdul Padberg Sr.\",\n    \"placeId\" : \"r9tu\",\n    \"languageCode\" : \"03gzj0u0hj1eghii5rbh48eg72rmlisa3q4gih7z9ur7xxu4i4g7a1oka1sy9tg4gtht4cbe0aszy9hnpu665j6zu8ar8a6twsg75tk9uk8p8srwwv\"\n  }, {\n    \"name\" : \"Ms. Alan Goodwin\",\n    \"placeId\" : \"002c\",\n    \"languageCode\" : \"gdq0ic0lya7k11cehqxl0lssnan6ajvzqquma7njdg8skpqg92o8pc9mcjmowblpmrqr0r7d8uxdmaa7v89ka9eh74jcu7wpi3tz0zlzgdj6i9c6isremdfupnbb9ysc9477l0yc4e6z9eemyj7xmw8lwx9wh5hu3x1yhhw947g5nkbvfvopxp8d2rin6nzb4m\"\n  }, {\n    \"name\" : \"Cedric Jerde\",\n    \"placeId\" : \"74m0\",\n    \"languageCode\" : \"q29lqh6xfftgnxew0ugxwk20vo3m36j8kyvvttoxxbp2jzg6mhkwpo84cjnxz3b1v0srkmb4jypwh03vsovzc6h3bo3ur6rg1hwqo9wa7mwpsqt4mwwi21twebugn43099ufxg9qb6z5a1c1xdwivx4h\"\n  }, {\n    \"name\" : \"Shannon Powlowski II\",\n    \"placeId\" : \"9113\",\n    \"languageCode\" : \"kgkfn0mdsxw7lsg1dd9qclb60umet5pbe3o\"\n  } ],\n  \"viewCount\" : \"4kklylt9si9gawvehmny8hdk5gq50arfbi6oevg68hhdrv59cecmizyl5d5yo4a58qe2475hh48ysk0n3gcoxtxj9p295eio27wh8paf5tf13pvst02z\",\n  \"mapsPublishStatus\" : \"UNSPECIFIED_MAPS_PUBLISH_STATUS\",\n  \"connections\" : [ {\n    \"target\" : {\n      \"id\" : \"x13u\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"154d\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"2csw\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"7are\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"4l9b\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"bie8\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"c9lt\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"ht9s\"\n    }\n  } ],\n  \"thumbnailUrl\" : \"https://web.example.mocklab.io/616154\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fae39f31-e8a7-4e2f-a8e7-0a4e04470b5d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:42:04.367891Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photo.get",
          "schema" : {
            "description" : "Photo is used to store 360 photos along with photo metadata.",
            "properties" : {
              "captureTime" : {
                "description" : "Optional. Absolute time when the photo was captured. When the photo has no exif timestamp, this is used to set a timestamp in the photo metadata.",
                "format" : "google-datetime",
                "type" : "string"
              },
              "connections" : {
                "description" : "Optional. Connections to other photos. A connection represents the link from this photo to another photo.",
                "items" : {
                  "$ref" : "#/components/schemas/Connection"
                },
                "type" : "array"
              },
              "downloadUrl" : {
                "description" : "Output only. The download URL for the photo bytes. This field is set only when GetPhotoRequest.view is set to PhotoView.INCLUDE_DOWNLOAD_URL.",
                "readOnly" : true,
                "type" : "string"
              },
              "mapsPublishStatus" : {
                "description" : "Output only. Status in Google Maps, whether this photo was published or rejected.",
                "enum" : [ "UNSPECIFIED_MAPS_PUBLISH_STATUS", "PUBLISHED", "REJECTED_UNKNOWN" ],
                "readOnly" : true,
                "type" : "string"
              },
              "photoId" : {
                "$ref" : "#/components/schemas/PhotoId"
              },
              "places" : {
                "description" : "Optional. Places where this photo belongs.",
                "items" : {
                  "$ref" : "#/components/schemas/Place"
                },
                "type" : "array"
              },
              "pose" : {
                "$ref" : "#/components/schemas/Pose"
              },
              "shareLink" : {
                "description" : "Output only. The share link for the photo.",
                "readOnly" : true,
                "type" : "string"
              },
              "thumbnailUrl" : {
                "description" : "Output only. The thumbnail URL for showing a preview of the given photo.",
                "readOnly" : true,
                "type" : "string"
              },
              "transferStatus" : {
                "description" : "Output only. Status of rights transfer on this photo.",
                "enum" : [ "TRANSFER_STATUS_UNKNOWN", "NEVER_TRANSFERRED", "PENDING", "COMPLETED", "REJECTED", "EXPIRED", "CANCELLED", "RECEIVED_VIA_TRANSFER" ],
                "readOnly" : true,
                "type" : "string"
              },
              "uploadReference" : {
                "$ref" : "#/components/schemas/UploadRef"
              },
              "uploadTime" : {
                "description" : "Output only. Time when the image was uploaded.",
                "format" : "google-datetime",
                "readOnly" : true,
                "type" : "string"
              },
              "viewCount" : {
                "description" : "Output only. View count of the photo.",
                "format" : "int64",
                "readOnly" : true,
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 10
  }, {
    "id" : "b822ce3f-5aa3-4f61-acf7-d0a0e9ef7fc2",
    "name" : "Deletes a Photo and its metadata. This method returns the following error codes:...",
    "request" : {
      "urlPath" : "/v1/photo/wb96",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b822ce3f-5aa3-4f61-acf7-d0a0e9ef7fc2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:42:04.366096Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photo.delete",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 11
  }, {
    "id" : "8010b292-9e96-4bee-a695-cc89e8b99144",
    "name" : "Updates the metadata of a Photo, such as pose, place association, connections, e...",
    "request" : {
      "urlPath" : "/v1/photo/tygz",
      "method" : "PUT"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"transferStatus\" : \"EXPIRED\",\n  \"captureTime\" : \"2023-03-21T13:45:04.364502Z\",\n  \"pose\" : {\n    \"gpsRecordTimestampUnixEpoch\" : \"2023-02-12T14:39:04.364539Z\",\n    \"altitude\" : 1.5624708763413355E308,\n    \"accuracyMeters\" : 2.031224573481558E37,\n    \"latLngPair\" : {\n      \"latitude\" : 7.189998932753831E307,\n      \"longitude\" : 7.871285554622191E307\n    },\n    \"heading\" : 5.78368752350798E307,\n    \"level\" : {\n      \"number\" : 1.1405051815684395E308,\n      \"name\" : \"Maggio\"\n    },\n    \"roll\" : 1.5906470479310265E308,\n    \"pitch\" : 1.5454794017752748E308\n  },\n  \"downloadUrl\" : \"https://web.example.mocklab.io/111698\",\n  \"uploadReference\" : {\n    \"uploadUrl\" : \"https://web.example.mocklab.io/357677\"\n  },\n  \"photoId\" : {\n    \"id\" : \"6964\"\n  },\n  \"shareLink\" : \"3vix748goowlgybin4gdpo5gso5as2w1o3no163zfo1tkpe6imdbtfe8qxs43i3sugam2zf81ihy4utt9rm2v4bvl26p8tuwvryjpdxzmffkb827ck3f8n7fk495muyp66ol6ip5pmku62ekbkn6u80jt2grq7rjukn2mor4w8nx\",\n  \"uploadTime\" : \"2022-09-09T14:13:04.364875Z\",\n  \"places\" : [ {\n    \"name\" : \"Felica Witting\",\n    \"placeId\" : \"l4jw\",\n    \"languageCode\" : \"o6iinimq3oag522s2w89juzhm2ch22onbql5bpafxycqltjcc7u82eg9u340778nmtuhjak9dfyik8exiy4pnv4h2e95nyo7u\"\n  }, {\n    \"name\" : \"Mandi Schaefer DVM\",\n    \"placeId\" : \"6h7z\",\n    \"languageCode\" : \"gfahm8kyasubw38r6gljul0ksdxaeihkr8or48u6u61\"\n  }, {\n    \"name\" : \"Dr. Warner Bode\",\n    \"placeId\" : \"n6c1\",\n    \"languageCode\" : \"l7ix6kiakjgn9fbq09ho3bfba4wiq449bjd7zv99cukyt55yukrwvv5neabph51zq2blbd7g96rt1aqgrk2inf0o2ebmdr8fmhgjo4\"\n  }, {\n    \"name\" : \"Dr. Sandra Treutel\",\n    \"placeId\" : \"1u28\",\n    \"languageCode\" : \"rr1br0qe930q30q0qj7c1agklmkdk8qg1n36be3ecnjcfnx77jdou8rbmv9ca3yi631cqta949v64ogvtggmrly79a5552w0mje6uhesgnzctipz8b014odyv5yts5qkx7fbn5di8vcy0qxcwli18is\"\n  } ],\n  \"viewCount\" : \"kmxf5njfw3v8rtxk2ma7sdyi0h38nynaluqha5f8ohquv9hx0c8979egs9l2\",\n  \"mapsPublishStatus\" : \"UNSPECIFIED_MAPS_PUBLISH_STATUS\",\n  \"connections\" : [ {\n    \"target\" : {\n      \"id\" : \"c246\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"54y2\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"0s8h\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"zxdb\"\n    }\n  } ],\n  \"thumbnailUrl\" : \"https://web.example.mocklab.io/583060\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8010b292-9e96-4bee-a695-cc89e8b99144",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:42:04.365977Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photo.update",
          "schema" : {
            "description" : "Photo is used to store 360 photos along with photo metadata.",
            "properties" : {
              "captureTime" : {
                "description" : "Optional. Absolute time when the photo was captured. When the photo has no exif timestamp, this is used to set a timestamp in the photo metadata.",
                "format" : "google-datetime",
                "type" : "string"
              },
              "connections" : {
                "description" : "Optional. Connections to other photos. A connection represents the link from this photo to another photo.",
                "items" : {
                  "$ref" : "#/components/schemas/Connection"
                },
                "type" : "array"
              },
              "downloadUrl" : {
                "description" : "Output only. The download URL for the photo bytes. This field is set only when GetPhotoRequest.view is set to PhotoView.INCLUDE_DOWNLOAD_URL.",
                "readOnly" : true,
                "type" : "string"
              },
              "mapsPublishStatus" : {
                "description" : "Output only. Status in Google Maps, whether this photo was published or rejected.",
                "enum" : [ "UNSPECIFIED_MAPS_PUBLISH_STATUS", "PUBLISHED", "REJECTED_UNKNOWN" ],
                "readOnly" : true,
                "type" : "string"
              },
              "photoId" : {
                "$ref" : "#/components/schemas/PhotoId"
              },
              "places" : {
                "description" : "Optional. Places where this photo belongs.",
                "items" : {
                  "$ref" : "#/components/schemas/Place"
                },
                "type" : "array"
              },
              "pose" : {
                "$ref" : "#/components/schemas/Pose"
              },
              "shareLink" : {
                "description" : "Output only. The share link for the photo.",
                "readOnly" : true,
                "type" : "string"
              },
              "thumbnailUrl" : {
                "description" : "Output only. The thumbnail URL for showing a preview of the given photo.",
                "readOnly" : true,
                "type" : "string"
              },
              "transferStatus" : {
                "description" : "Output only. Status of rights transfer on this photo.",
                "enum" : [ "TRANSFER_STATUS_UNKNOWN", "NEVER_TRANSFERRED", "PENDING", "COMPLETED", "REJECTED", "EXPIRED", "CANCELLED", "RECEIVED_VIA_TRANSFER" ],
                "readOnly" : true,
                "type" : "string"
              },
              "uploadReference" : {
                "$ref" : "#/components/schemas/UploadRef"
              },
              "uploadTime" : {
                "description" : "Output only. Time when the image was uploaded.",
                "format" : "google-datetime",
                "readOnly" : true,
                "type" : "string"
              },
              "viewCount" : {
                "description" : "Output only. View count of the photo.",
                "format" : "int64",
                "readOnly" : true,
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 12
  }, {
    "id" : "786b47fd-3f5d-4a19-841b-e5ed377d289b",
    "name" : "After the client finishes uploading the photo with the returned UploadRef, Creat...",
    "request" : {
      "urlPath" : "/v1/photo",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"transferStatus\" : \"NEVER_TRANSFERRED\",\n  \"captureTime\" : \"2022-05-04T15:16:04.362825Z\",\n  \"pose\" : {\n    \"gpsRecordTimestampUnixEpoch\" : \"2023-02-17T14:56:04.3629Z\",\n    \"altitude\" : 5.27740745495814E307,\n    \"accuracyMeters\" : 1.2538724975188621E38,\n    \"latLngPair\" : {\n      \"latitude\" : 4.558806556436794E307,\n      \"longitude\" : 1.6088722568633278E308\n    },\n    \"heading\" : 7.2891434721017E307,\n    \"level\" : {\n      \"number\" : 1.6330464545711841E308,\n      \"name\" : \"Kilback\"\n    },\n    \"roll\" : 1.241913521746178E308,\n    \"pitch\" : 3.209795789640684E307\n  },\n  \"downloadUrl\" : \"https://web.example.mocklab.io/299463\",\n  \"uploadReference\" : {\n    \"uploadUrl\" : \"https://web.example.mocklab.io/839440\"\n  },\n  \"photoId\" : {\n    \"id\" : \"jt3p\"\n  },\n  \"shareLink\" : \"7t6vgy4s\",\n  \"uploadTime\" : \"2022-05-26T14:43:04.363306Z\",\n  \"places\" : [ {\n    \"name\" : \"Dr. Murray Reichert\",\n    \"placeId\" : \"2f4q\",\n    \"languageCode\" : \"otvo52easgtr795cwdak6qu23ahm0g0wwfl45zlbaxhh2e3sf0dttusfpmad3gqhnz68h8vkh215iemgvi4lmq3dxcd88wqdpdhotyk4vecfljg\"\n  }, {\n    \"name\" : \"Loyd Roob\",\n    \"placeId\" : \"e6r2\",\n    \"languageCode\" : \"9yqkhp4g1yecu670gkdhncx4d9x575xmps8quxh0fcino70vd0dr88oa5u7uqxq0pg3hfw6hki1phjikalp4ab4os88ygyyazvox023k3mayknl5qacxm3augc6rwpdpqbqj4mgl512knyhslm2tno2z44kwzmftulqynsxog0od7de6nbko66lp\"\n  } ],\n  \"viewCount\" : \"dc5cthuiw30symlffxcc2id1r2hh9qmuij71tlm\",\n  \"mapsPublishStatus\" : \"REJECTED_UNKNOWN\",\n  \"connections\" : [ {\n    \"target\" : {\n      \"id\" : \"29qm\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"24a3\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"ism3\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"zh09\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"26e4\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"u8c6\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"55j8\"\n    }\n  } ],\n  \"thumbnailUrl\" : \"https://web.example.mocklab.io/800406\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "786b47fd-3f5d-4a19-841b-e5ed377d289b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:42:04.364441Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photo.create",
          "schema" : {
            "description" : "Photo is used to store 360 photos along with photo metadata.",
            "properties" : {
              "captureTime" : {
                "description" : "Optional. Absolute time when the photo was captured. When the photo has no exif timestamp, this is used to set a timestamp in the photo metadata.",
                "format" : "google-datetime",
                "type" : "string"
              },
              "connections" : {
                "description" : "Optional. Connections to other photos. A connection represents the link from this photo to another photo.",
                "items" : {
                  "$ref" : "#/components/schemas/Connection"
                },
                "type" : "array"
              },
              "downloadUrl" : {
                "description" : "Output only. The download URL for the photo bytes. This field is set only when GetPhotoRequest.view is set to PhotoView.INCLUDE_DOWNLOAD_URL.",
                "readOnly" : true,
                "type" : "string"
              },
              "mapsPublishStatus" : {
                "description" : "Output only. Status in Google Maps, whether this photo was published or rejected.",
                "enum" : [ "UNSPECIFIED_MAPS_PUBLISH_STATUS", "PUBLISHED", "REJECTED_UNKNOWN" ],
                "readOnly" : true,
                "type" : "string"
              },
              "photoId" : {
                "$ref" : "#/components/schemas/PhotoId"
              },
              "places" : {
                "description" : "Optional. Places where this photo belongs.",
                "items" : {
                  "$ref" : "#/components/schemas/Place"
                },
                "type" : "array"
              },
              "pose" : {
                "$ref" : "#/components/schemas/Pose"
              },
              "shareLink" : {
                "description" : "Output only. The share link for the photo.",
                "readOnly" : true,
                "type" : "string"
              },
              "thumbnailUrl" : {
                "description" : "Output only. The thumbnail URL for showing a preview of the given photo.",
                "readOnly" : true,
                "type" : "string"
              },
              "transferStatus" : {
                "description" : "Output only. Status of rights transfer on this photo.",
                "enum" : [ "TRANSFER_STATUS_UNKNOWN", "NEVER_TRANSFERRED", "PENDING", "COMPLETED", "REJECTED", "EXPIRED", "CANCELLED", "RECEIVED_VIA_TRANSFER" ],
                "readOnly" : true,
                "type" : "string"
              },
              "uploadReference" : {
                "$ref" : "#/components/schemas/UploadRef"
              },
              "uploadTime" : {
                "description" : "Output only. Time when the image was uploaded.",
                "format" : "google-datetime",
                "readOnly" : true,
                "type" : "string"
              },
              "viewCount" : {
                "description" : "Output only. View count of the photo.",
                "format" : "int64",
                "readOnly" : true,
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 13
  } ]
}