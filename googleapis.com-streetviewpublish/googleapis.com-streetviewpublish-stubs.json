{
  "mappings" : [ {
    "id" : "7ab48877-b21d-4555-a827-0c06eb5c1e99",
    "name" : "Updates the metadata of Photos, such as pose, place association, connections, et...",
    "request" : {
      "urlPath" : "/v1/photos:batchUpdate",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"results\" : [ {\n    \"photo\" : {\n      \"transferStatus\" : \"REJECTED\",\n      \"captureTime\" : \"2022-06-06T15:46:34.750475Z\",\n      \"pose\" : {\n        \"gpsRecordTimestampUnixEpoch\" : \"2022-12-22T15:07:34.750514Z\",\n        \"altitude\" : 1.3591523518287104E308,\n        \"accuracyMeters\" : 4.304891954721854E37,\n        \"latLngPair\" : {\n          \"latitude\" : 1.6065819500458415E308,\n          \"longitude\" : 1.647991002511161E308\n        },\n        \"heading\" : 1.1414105251577916E307,\n        \"level\" : {\n          \"number\" : 8.142481792528221E307,\n          \"name\" : \"Casper\"\n        },\n        \"roll\" : 4.805544837026681E307,\n        \"pitch\" : 6.513215680131647E307\n      },\n      \"downloadUrl\" : \"https://web.example.mocklab.io/787278\",\n      \"uploadReference\" : {\n        \"uploadUrl\" : \"https://web.example.mocklab.io/686599\"\n      },\n      \"photoId\" : {\n        \"id\" : \"7967\"\n      },\n      \"shareLink\" : \"6xrf4g2zgruxgru4v5roacxgwhk2ms839jbx57i30ns39da0z8vfak8k0mf507qawdvxddcmtmqs97i3hw4pdhr3yx9pjtq6yk37eilbmd\",\n      \"uploadTime\" : \"2023-02-16T17:04:34.75084Z\",\n      \"places\" : [ {\n        \"name\" : \"Cherryl Mayer\",\n        \"placeId\" : \"22ni\",\n        \"languageCode\" : \"v55dkrveuea64vimz48pz28nnpgbvc0g7bmqgn24bpai677cak3bjbsi3ofbd3alyu4qwt367h49p6bqau6x78rdsyifa0qi0otku6ypnxqro5b3imlv92zmcm70gtu7s3nf8ycx6j21bfm1r4r6zwgtwec7chcbrpr58\"\n      }, {\n        \"name\" : \"Coralee Connelly\",\n        \"placeId\" : \"44w7\",\n        \"languageCode\" : \"kdrtue7hv3ei0prp4x7en1hausvx4xsyeooyn8hzugf5sjb458w53yornh3ilk6fokjwbjv4a7\"\n      }, {\n        \"name\" : \"Harvey Hagenes\",\n        \"placeId\" : \"6952\",\n        \"languageCode\" : \"bntz6dqtfixp1l3r5hvy5cvy7wrdsj0y9sxmze91fp426gbyz0f6gouxe2mz6m2ps3k7ea4kuo86pkt125oyb13s6ufrf4pd6qkat6tdlyqyq89k4ea20t894p0ook3cmv4\"\n      }, {\n        \"name\" : \"Dr. Luvenia Bahringer\",\n        \"placeId\" : \"ijp1\",\n        \"languageCode\" : \"s696e40b0wdr32riulwsdchvh2ehu4hg6yu\"\n      }, {\n        \"name\" : \"Fritz Wyman\",\n        \"placeId\" : \"07qg\",\n        \"languageCode\" : \"43sejslohjw7vl2zcr73jfq6t7dxblhm857tv1yn96d0ix4b7p3urpf863uawiut3hepdk80sczrzltm27dcvfk9d39jit7g0areguwf74gsqzkkmp7l2pwlpseh805gsp3w81tmynpm85\"\n      }, {\n        \"name\" : \"Mitchel Gleason\",\n        \"placeId\" : \"44o9\",\n        \"languageCode\" : \"fnjb53jhtycbvy5vpiw\"\n      }, {\n        \"name\" : \"Aleisha Franecki\",\n        \"placeId\" : \"3327\",\n        \"languageCode\" : \"pu7jlh0yyin21o9bquygn2hiixscik1pm3rmmag1rhvtlylpnyxzcdytprqawskg8s2ujf9llsjtut89zo1lddibsnl0o6c6vrkirkxyyu3hffea6auwh3hn3xztf6tvjlaa6b2rwocz8un\"\n      } ],\n      \"viewCount\" : \"jvkucpend0vm1bfia7emdmrtcyc1j1wjlsdrxppt90sfail36dmhb8mnl2bp031rofu2iumy4tyvwsd8mfhlstatjvky0xuh\",\n      \"mapsPublishStatus\" : \"UNSPECIFIED_MAPS_PUBLISH_STATUS\",\n      \"connections\" : [ {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      } ],\n      \"thumbnailUrl\" : \"https://web.example.mocklab.io/319378\"\n    },\n    \"status\" : {\n      \"code\" : 2005741066,\n      \"details\" : [ { }, { }, { }, { }, { } ],\n      \"message\" : \"Accusamus tenetur consequatur rerum labore accusantium. Odit recusandae vel laborum est sed. Eos maxime id. Ut ex aut. Provident natus nam vero reprehenderit itaque et.\"\n    }\n  }, {\n    \"photo\" : {\n      \"transferStatus\" : \"PENDING\",\n      \"captureTime\" : \"2022-05-28T14:39:34.751938Z\",\n      \"pose\" : {\n        \"gpsRecordTimestampUnixEpoch\" : \"2023-01-26T15:29:34.751974Z\",\n        \"altitude\" : 1.584692842667217E308,\n        \"accuracyMeters\" : 3.346350852888412E38,\n        \"latLngPair\" : {\n          \"latitude\" : 3.838787338874929E307,\n          \"longitude\" : 1.2244554206774064E308\n        },\n        \"heading\" : 1.5025468987995272E308,\n        \"level\" : {\n          \"number\" : 2.029084561056891E307,\n          \"name\" : \"Schaden\"\n        },\n        \"roll\" : 1.4896293908905185E308,\n        \"pitch\" : 1.3932991995298168E307\n      },\n      \"downloadUrl\" : \"https://web.example.mocklab.io/633525\",\n      \"uploadReference\" : {\n        \"uploadUrl\" : \"https://web.example.mocklab.io/547796\"\n      },\n      \"photoId\" : {\n        \"id\" : \"69tc\"\n      },\n      \"shareLink\" : \"ru7pdjswvpt1hbcqxpjc00v10wfgvg1fgartr8gq772wkaoknrgyzuud6313cvgl06i98dj9sfaoo2rwnf2cravl2p98g01w8kojdhiri1avxi36sndoav85eofbvcd0cb1tns79c9mf3mrwvto5ny3c0mehdyvszmoitr4263unu7wkk7hvni3fks34jrz\",\n      \"uploadTime\" : \"2022-09-23T17:57:34.752287Z\",\n      \"places\" : [ {\n        \"name\" : \"Altha Anderson\",\n        \"placeId\" : \"cv6v\",\n        \"languageCode\" : \"qzkg8rgcxdjpb4ue9reic0xkpeh0e1lq3ogdbyxyhllg11xezm18i6qmemf5oz304h7k10vxh3ktb2caejep05l9dqwzjgp0aj6c95lurfg4tblj9n44w2bq8yj8\"\n      } ],\n      \"viewCount\" : \"sw08h5s4yd49gzds9q5fgs7nltybfesnkshx1tpsfymziorxm4vaopm3jcrg0genbuhljg68edk8v0nqduh79vw4r9en2ctiqpnf8y1n1o8pnghg50wl\",\n      \"mapsPublishStatus\" : \"PUBLISHED\",\n      \"connections\" : [ {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      } ],\n      \"thumbnailUrl\" : \"https://web.example.mocklab.io/299941\"\n    },\n    \"status\" : {\n      \"code\" : 584742520,\n      \"details\" : [ { }, { }, { }, { }, { } ],\n      \"message\" : \"Rerum laboriosam magni quia quasi error et. Minus laudantium cum fuga et voluptatum ipsa aperiam. Dolorem ipsa reprehenderit quasi et.\"\n    }\n  }, {\n    \"photo\" : {\n      \"transferStatus\" : \"PENDING\",\n      \"captureTime\" : \"2022-05-06T17:56:34.752634Z\",\n      \"pose\" : {\n        \"gpsRecordTimestampUnixEpoch\" : \"2022-09-30T15:48:34.75267Z\",\n        \"altitude\" : 1.0951215482918458E307,\n        \"accuracyMeters\" : 2.4497992541097694E38,\n        \"latLngPair\" : {\n          \"latitude\" : 1.2542397247052227E308,\n          \"longitude\" : 1.4584452454511008E308\n        },\n        \"heading\" : 1.4804686760092962E308,\n        \"level\" : {\n          \"number\" : 1.048637534204411E308,\n          \"name\" : \"Gleason\"\n        },\n        \"roll\" : 8.564575966068532E307,\n        \"pitch\" : 1.2796785434076092E308\n      },\n      \"downloadUrl\" : \"https://web.example.mocklab.io/998503\",\n      \"uploadReference\" : {\n        \"uploadUrl\" : \"https://web.example.mocklab.io/368957\"\n      },\n      \"photoId\" : {\n        \"id\" : \"z623\"\n      },\n      \"shareLink\" : \"conzkc92nidb5c4ks0ywmk82er51nit0639qh06aawbjzwfqtdf98m27pdg1zv4ewezyr692izs3y7jc5\",\n      \"uploadTime\" : \"2022-10-16T15:34:34.752988Z\",\n      \"places\" : [ {\n        \"name\" : \"Leonard Lemke DVM\",\n        \"placeId\" : \"3346\",\n        \"languageCode\" : \"1580ndr0m391nv086ffnostp45rdnea6oa0gxfdtwnee7pxghncgur1ndovo8llkplzf4r5o9ur3cyap8tbqipquzznshc0nv9mg3w7rx31gapq9ab344yzx9mhypxlxyud4hsjh3q8sl8tto1le0kv2829qgun1fpvrgx227cvogdzxpm5mmxsozekjlgi2p01s\"\n      }, {\n        \"name\" : \"Reinaldo Langosh\",\n        \"placeId\" : \"67e9\",\n        \"languageCode\" : \"0yakwdrbg2bjcezbgibgiopgzkx907en30swe1u9fl0ivopm7rqwnim8uobneicvmti1n60gk7x3u5nfbhj0rkyv9yggkrk211ecquif23ey4\"\n      }, {\n        \"name\" : \"Julio Mante\",\n        \"placeId\" : \"xloq\",\n        \"languageCode\" : \"m1so1fxwbp770anavujgtvkbsmsi3nvuqz4c6vqpvtc1uorae2mk764qegjsgsw0ma4cih629rasctuz4dgu9k5z4nlhv5fya6cxskcs3fek10q60vsi5djj0979sfgjnbpld96\"\n      }, {\n        \"name\" : \"Shanika Labadie\",\n        \"placeId\" : \"80i4\",\n        \"languageCode\" : \"1wpyrkzau5jyyws9x58ojksqi57btf3qkyvkwr2fphu0l1ra3hec5znqkqqruzfzjuxsjvizvwy7st0tvriywio24lc9dcu1k6cwe5dg9kiucnrvemkpcknexjl6i1pcv\"\n      }, {\n        \"name\" : \"Lashawn Mertz\",\n        \"placeId\" : \"13my\",\n        \"languageCode\" : \"fuixa066w48nvj2arnulbv9bkbmwqu7px\"\n      }, {\n        \"name\" : \"Sherwood Schinner\",\n        \"placeId\" : \"689y\",\n        \"languageCode\" : \"49nxlpd3donubt04ng3njf5y02v21qx1z3db6pn5jfrbjb3b3ea8id0q9f3m6a3u9gzgg6wnd3wourszlr7a16bzhv1x8il6f1gk8nbh04dyn08nje5efxavva67qpcc3ews51s3ahqw7uwhf3gq9i1kjoly9g157woyhfa11k\"\n      }, {\n        \"name\" : \"Dr. Leigha Abernathy\",\n        \"placeId\" : \"8c7z\",\n        \"languageCode\" : \"xyit5faveuh7h0m6t6954dtz1cof4a2sase7dz90si08dblb0se3oqubomqqw0k3flahpplryvynyt6wgvjruvfr63s1zca78rgni6f1lx1rcrmdut6tq1jwwnizd1gyg2ma2u2al8nsjh1mm9hm4o2ysvocf8\"\n      }, {\n        \"name\" : \"Logan Bartell\",\n        \"placeId\" : \"80oo\",\n        \"languageCode\" : \"wbmfn39wu8gam29xlpzesaujhjcs6wl6rl8duovj9d2kqjvdb39ajz6ti4fsd0tv6vee3zrahzw7xlg7ybcqbzzxt4huwpd276oi590p8ay6uohl308c2ujsizl7sg2w0gk225crsaptyt0w1gan87rrt83ih04546s5c5lp0vkxckeokuq7y3r9qhcn2jrlrg4gn1t\"\n      } ],\n      \"viewCount\" : \"jmljtvfkue32ruhw8i9lc407ajt1gum07efeb0xlnp5cd8ovqiidc4ouxgnn9tzklnhoms4ciyjehd8sgsiez0ut0mk6uigvcgv1vfrkalkcsbzc15hsu2vfcyszrxl7\",\n      \"mapsPublishStatus\" : \"REJECTED_UNKNOWN\",\n      \"connections\" : [ {\n        \"target\" : { }\n      } ],\n      \"thumbnailUrl\" : \"https://web.example.mocklab.io/690921\"\n    },\n    \"status\" : {\n      \"code\" : 1782121749,\n      \"details\" : [ { }, { }, { }, { }, { } ],\n      \"message\" : \"Aliquam doloremque tempora aut alias vero voluptatem eum. Dolores non dolore excepturi facere. Tenetur velit maxime rerum hic amet cupiditate.\"\n    }\n  }, {\n    \"photo\" : {\n      \"transferStatus\" : \"CANCELLED\",\n      \"captureTime\" : \"2022-08-10T15:56:34.754254Z\",\n      \"pose\" : {\n        \"gpsRecordTimestampUnixEpoch\" : \"2022-04-09T14:28:34.754297Z\",\n        \"altitude\" : 9.301393397224952E307,\n        \"accuracyMeters\" : 1.038764606817866E38,\n        \"latLngPair\" : {\n          \"latitude\" : 8.989560456014711E306,\n          \"longitude\" : 1.6986751060275488E308\n        },\n        \"heading\" : 6.703635304200884E307,\n        \"level\" : {\n          \"number\" : 2.7979812050672516E307,\n          \"name\" : \"Herzog\"\n        },\n        \"roll\" : 1.774379024960825E308,\n        \"pitch\" : 1.430152822828071E308\n      },\n      \"downloadUrl\" : \"https://web.example.mocklab.io/501435\",\n      \"uploadReference\" : {\n        \"uploadUrl\" : \"https://web.example.mocklab.io/586658\"\n      },\n      \"photoId\" : {\n        \"id\" : \"8j62\"\n      },\n      \"shareLink\" : \"8chozq3fbflymk85oik2joc9ejm1wno2xzeoemo6q2pjtai19nsh9zwfqvqdyvybbg7c419o7b9uzkwpina0kzj7iqsciwzfw9vipzm64lqf12gi0u\",\n      \"uploadTime\" : \"2022-08-22T17:24:34.754635Z\",\n      \"places\" : [ {\n        \"name\" : \"America Marvin Sr.\",\n        \"placeId\" : \"s63q\",\n        \"languageCode\" : \"07qh81i99aa9o650a1nd1lohdsizt6ceqjdjn9obvhe48l2shbeonhmnh9u2hbitwh6v5bcv7d8v\"\n      }, {\n        \"name\" : \"Dwana Armstrong\",\n        \"placeId\" : \"j9z9\",\n        \"languageCode\" : \"lsn0xhq2k7hp1uzooq1go84vjasrlae073aybvem0xmybfkopwmk9lczyt8l6coirwx5jzz5vmuecfwsxnx795nommgfwmay0x6h95xsw4v04pidomje6d9a2irajh1p\"\n      } ],\n      \"viewCount\" : \"e1ij4fup9lziurvmh08pdtamoluanlsaudd58fugw9oj25ll7f1ljv61hqmn6pi7owx76l\",\n      \"mapsPublishStatus\" : \"UNSPECIFIED_MAPS_PUBLISH_STATUS\",\n      \"connections\" : [ {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      } ],\n      \"thumbnailUrl\" : \"https://web.example.mocklab.io/531881\"\n    },\n    \"status\" : {\n      \"code\" : 379650191,\n      \"details\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"message\" : \"Iusto sed perferendis numquam dolorum iste odio voluptas. Incidunt voluptatem magni consequatur non dolores. Qui et et aut sit magni.\"\n    }\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7ab48877-b21d-4555-a827-0c06eb5c1e99",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:11:34.755252Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photos.batchUpdate",
          "schema" : {
            "description" : "Response to batch update of metadata of one or more Photos.",
            "properties" : {
              "results" : {
                "description" : "List of results for each individual Photo updated, in the same order as the request.",
                "items" : {
                  "$ref" : "#/components/schemas/PhotoResponse"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "9f7dad61-caac-4655-b72b-74b07002617f",
    "name" : "Gets the metadata of the specified Photo batch. Note that if BatchGetPhotos fail...",
    "request" : {
      "urlPath" : "/v1/photos:batchGet",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"results\" : [ {\n    \"photo\" : {\n      \"transferStatus\" : \"PENDING\",\n      \"captureTime\" : \"2022-09-06T18:06:34.749331Z\",\n      \"pose\" : {\n        \"gpsRecordTimestampUnixEpoch\" : \"2023-02-16T15:58:34.749377Z\",\n        \"altitude\" : 5.026538411136218E307,\n        \"accuracyMeters\" : 2.9488222639824162E38,\n        \"latLngPair\" : {\n          \"latitude\" : 5.91216014323936E307,\n          \"longitude\" : 1.4839551245134184E308\n        },\n        \"heading\" : 4.1969204227603997E307,\n        \"level\" : {\n          \"number\" : 1.2052251526642988E307,\n          \"name\" : \"Roberts\"\n        },\n        \"roll\" : 1.739951834685839E308,\n        \"pitch\" : 2.584932720007036E307\n      },\n      \"downloadUrl\" : \"https://web.example.mocklab.io/517622\",\n      \"uploadReference\" : {\n        \"uploadUrl\" : \"https://web.example.mocklab.io/395914\"\n      },\n      \"photoId\" : {\n        \"id\" : \"x828\"\n      },\n      \"shareLink\" : \"4lif88\",\n      \"uploadTime\" : \"2022-06-06T16:01:34.749732Z\",\n      \"places\" : [ {\n        \"name\" : \"Tory Russel\",\n        \"placeId\" : \"jh33\",\n        \"languageCode\" : \"gevk3v2dkuq8f0m656sm3jj7nf7dqbasau2pirk0haoos1bat\"\n      }, {\n        \"name\" : \"Bryce Funk Sr.\",\n        \"placeId\" : \"65p9\",\n        \"languageCode\" : \"47rekpfbxb5e8g0k5ve9z657g3di6pno006dta03oa3nj7z06bdhtaqniy\"\n      }, {\n        \"name\" : \"Dr. Justin Kuhn\",\n        \"placeId\" : \"y6qi\",\n        \"languageCode\" : \"r6s\"\n      } ],\n      \"viewCount\" : \"vp43l0ntru6rlztqyu5rcevdysduzr6glyjfq0f7sif5c4jn4moat\",\n      \"mapsPublishStatus\" : \"UNSPECIFIED_MAPS_PUBLISH_STATUS\",\n      \"connections\" : [ {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      } ],\n      \"thumbnailUrl\" : \"https://web.example.mocklab.io/676499\"\n    },\n    \"status\" : {\n      \"code\" : 839224047,\n      \"details\" : [ { }, { }, { }, { }, { } ],\n      \"message\" : \"Quia nihil repellat animi. Explicabo ducimus magnam delectus a itaque corrupti perferendis. Optio qui sequi vel debitis et repellat qui. Non rem velit est. Ut enim perferendis fugit aut qui labore.\"\n    }\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9f7dad61-caac-4655-b72b-74b07002617f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:11:34.750406Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photos.batchGet",
          "schema" : {
            "description" : "Response to batch get of Photos.",
            "properties" : {
              "results" : {
                "description" : "List of results for each individual Photo requested, in the same order as the requests in BatchGetPhotos.",
                "items" : {
                  "$ref" : "#/components/schemas/PhotoResponse"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "9f7ce0df-48bd-48d3-b587-0a471bf4623b",
    "name" : "Deletes a list of Photos and their metadata. Note that if BatchDeletePhotos fail...",
    "request" : {
      "urlPath" : "/v1/photos:batchDelete",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status\" : [ {\n    \"code\" : 459680914,\n    \"details\" : [ { } ],\n    \"message\" : \"Vel dolor ipsa sapiente. Et ratione esse quae. Commodi dolorem asperiores laborum voluptatem voluptas nam.\"\n  }, {\n    \"code\" : 532143883,\n    \"details\" : [ { }, { }, { }, { }, { } ],\n    \"message\" : \"Recusandae ut adipisci natus ducimus et. Sunt ipsa exercitationem omnis. Beatae explicabo itaque corporis quia incidunt provident.\"\n  }, {\n    \"code\" : 1901706404,\n    \"details\" : [ { }, { }, { }, { } ],\n    \"message\" : \"Voluptatem quis soluta quidem et ut est. Ex est velit quibusdam unde natus eveniet sed. Iure saepe minus dolores. Similique nostrum rerum quae dolores incidunt voluptatem. Unde maxime eveniet tempora \"\n  }, {\n    \"code\" : 2142484379,\n    \"details\" : [ { }, { }, { }, { }, { }, { } ],\n    \"message\" : \"Ea qui adipisci consequatur minus enim et. Distinctio voluptatem commodi. Minima voluptatem quo iusto alias excepturi cupiditate ipsam. Libero voluptas debitis quaerat ea at sint illum.\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9f7ce0df-48bd-48d3-b587-0a471bf4623b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:11:34.74926Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photos.batchDelete",
          "schema" : {
            "description" : "Response to batch delete of one or more Photos.",
            "properties" : {
              "status" : {
                "description" : "The status for the operation to delete a single Photo in the batch request.",
                "items" : {
                  "$ref" : "#/components/schemas/Status"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "fb6572b0-96e8-441e-864a-76c62eefee92",
    "name" : "Lists all the Photos that belong to the user. > Note: Recently created photos th...",
    "request" : {
      "urlPath" : "/v1/photos",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"nextPageToken\" : \"4bxrqfp4uh6t7ivz0yiqw8auhsi7yfb022a8dwfyuyec70zbpmhenw5c6cmn63xwwzlcdop2z92j8uwvnxi3weeiwj3m6dtsc1041jh4haaazp5hvy71ckzkpz73cxsktbted69bbd\",\n  \"photos\" : [ {\n    \"transferStatus\" : \"COMPLETED\",\n    \"captureTime\" : \"2022-11-29T16:35:34.743912Z\",\n    \"pose\" : {\n      \"gpsRecordTimestampUnixEpoch\" : \"2022-07-23T15:43:34.743949Z\",\n      \"altitude\" : 1.4188205020999962E308,\n      \"accuracyMeters\" : 1.2345495035843062E38,\n      \"latLngPair\" : {\n        \"latitude\" : 1.5304834692654851E308,\n        \"longitude\" : 1.1434201334083258E308\n      },\n      \"heading\" : 3.602472617708222E306,\n      \"level\" : {\n        \"number\" : 1.4201418414489953E308,\n        \"name\" : \"Rice\"\n      },\n      \"roll\" : 9.34520208739992E307,\n      \"pitch\" : 1.031215807644791E308\n    },\n    \"downloadUrl\" : \"https://web.example.mocklab.io/534020\",\n    \"uploadReference\" : {\n      \"uploadUrl\" : \"https://web.example.mocklab.io/938620\"\n    },\n    \"photoId\" : {\n      \"id\" : \"nj9b\"\n    },\n    \"shareLink\" : \"xwntqkb6j9dhqpo64il9839fpw5c3aifuocr957i67gn7i3puae6u1qax1d2vvz80pyynuyero7p2nilu9jzzm0nw63smddw307qh3f9mvh1bt1ud4cs8cyv001eijdbzjqk13b5\",\n    \"uploadTime\" : \"2022-05-18T14:38:34.744267Z\",\n    \"places\" : [ {\n      \"name\" : \"Lesley Bartoletti III\",\n      \"placeId\" : \"k4m5\",\n      \"languageCode\" : \"y7a0imsz4sh1bjwozq9gbc91usxfj0s8n4it6rzbdvhd6q765lagg2iw7yzii0zi0ixlgxaqzpbs6cqwp3s1tf20r9bfb5l6wyywt2r8qmcjh58bbq5frxwyd1rmxbvdhwl6pa8yhqlrfpv7fc3ixqxdfixj0zwu97a337\"\n    }, {\n      \"name\" : \"Elissa Wiegand V\",\n      \"placeId\" : \"o6ef\",\n      \"languageCode\" : \"lslxtusxlh8fcnv566c4ljokjg0q96sdd1zz4ispma9z0xum8eydszva9pg1acg32hpxfujlhs8ubklkdsu3bcbtu0j2d\"\n    }, {\n      \"name\" : \"Susy Koepp\",\n      \"placeId\" : \"hwg4\",\n      \"languageCode\" : \"trr9ogz5t6r7x6c92nmz8f1vyavdg13lk0hjqxd3gf6q7m8u89pv4ca4726v7qdh15zig2f5cu29r95qa7kbr\"\n    }, {\n      \"name\" : \"Branden Farrell\",\n      \"placeId\" : \"8d22\",\n      \"languageCode\" : \"aofqs0ibkucublc9ej13rhfs70wy02k087difj03fdpni3ddmtni84w8aj8ic0qlmxs8dndtflkvxmu94wotnh6u58snbqwt1vk9mrirp193ov45oh3wgoe1347fnuvjkg0oa7qxd28vvgu24w2\"\n    } ],\n    \"viewCount\" : \"72rgow74faxrtn7fuguc3kmrvagn\",\n    \"mapsPublishStatus\" : \"UNSPECIFIED_MAPS_PUBLISH_STATUS\",\n    \"connections\" : [ {\n      \"target\" : {\n        \"id\" : \"sbga\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"yh9x\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"5e0y\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"7p98\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"56pw\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"lk7a\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"0il1\"\n      }\n    } ],\n    \"thumbnailUrl\" : \"https://web.example.mocklab.io/973000\"\n  }, {\n    \"transferStatus\" : \"NEVER_TRANSFERRED\",\n    \"captureTime\" : \"2023-01-03T18:01:34.745525Z\",\n    \"pose\" : {\n      \"gpsRecordTimestampUnixEpoch\" : \"2022-08-19T14:41:34.745569Z\",\n      \"altitude\" : 2.5253388843605553E307,\n      \"accuracyMeters\" : 2.509986861660665E38,\n      \"latLngPair\" : {\n        \"latitude\" : 4.474184645240192E307,\n        \"longitude\" : 1.040283027016363E308\n      },\n      \"heading\" : 6.484209426007883E307,\n      \"level\" : {\n        \"number\" : 3.38123869745892E307,\n        \"name\" : \"Ratke\"\n      },\n      \"roll\" : 2.448137770046459E307,\n      \"pitch\" : 6.819379365434198E307\n    },\n    \"downloadUrl\" : \"https://web.example.mocklab.io/352323\",\n    \"uploadReference\" : {\n      \"uploadUrl\" : \"https://web.example.mocklab.io/998729\"\n    },\n    \"photoId\" : {\n      \"id\" : \"c6e7\"\n    },\n    \"shareLink\" : \"4rbk66gsig7t75sahwppa1fqynudlr7277x4731ylhf7mlmt3gk\",\n    \"uploadTime\" : \"2022-08-26T14:47:34.745914Z\",\n    \"places\" : [ {\n      \"name\" : \"Benjamin Ullrich\",\n      \"placeId\" : \"w045\",\n      \"languageCode\" : \"g9me6pshwpn16drvlm\"\n    }, {\n      \"name\" : \"Sanford Macejkovic Sr.\",\n      \"placeId\" : \"y8dw\",\n      \"languageCode\" : \"o3ujqh7ub0v1ia5lvvcph0u92ef3jvjylk45oahvsql8evs1hi5ym20htk7rlqgeszmihqt07kjpj5a6dbwp8ar4gz5hykbdju235mjur2ungbuhcwk5z6lur09n9z6o3zugxgicifxau5p5y6g00kmuqjnwadp\"\n    } ],\n    \"viewCount\" : \"vlzc5jygs9lfqx7flsiq43nwl6uzk9bmvt0n0dj21ua6r6iinixq2cypnyof2hyoomqoyf4js7mk1z2d0wclt6q6xkvg8n0su2iipmthi7wsnb3acm67b9xzfne9ke9sd37t29lkmtdul65q0gopacxj16xi6711mfqmwqiq0z8zpps4au8\",\n    \"mapsPublishStatus\" : \"UNSPECIFIED_MAPS_PUBLISH_STATUS\",\n    \"connections\" : [ {\n      \"target\" : {\n        \"id\" : \"nvut\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"uos8\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"c446\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"kw6y\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"1i0e\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"09b3\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"xm1d\"\n      }\n    } ],\n    \"thumbnailUrl\" : \"https://web.example.mocklab.io/084017\"\n  }, {\n    \"transferStatus\" : \"EXPIRED\",\n    \"captureTime\" : \"2023-03-05T14:58:34.747004Z\",\n    \"pose\" : {\n      \"gpsRecordTimestampUnixEpoch\" : \"2022-04-15T14:13:34.747053Z\",\n      \"altitude\" : 2.1398442477657512E307,\n      \"accuracyMeters\" : 2.243021668660101E38,\n      \"latLngPair\" : {\n        \"latitude\" : 8.200732288943826E307,\n        \"longitude\" : 1.5165930577415632E308\n      },\n      \"heading\" : 4.0148770782157695E307,\n      \"level\" : {\n        \"number\" : 1.49892777309862E308,\n        \"name\" : \"Buckridge\"\n      },\n      \"roll\" : 6.177482246407539E307,\n      \"pitch\" : 1.2550259681616894E308\n    },\n    \"downloadUrl\" : \"https://web.example.mocklab.io/352551\",\n    \"uploadReference\" : {\n      \"uploadUrl\" : \"https://web.example.mocklab.io/951743\"\n    },\n    \"photoId\" : {\n      \"id\" : \"1f5t\"\n    },\n    \"shareLink\" : \"14pcfeqy0tfhfp\",\n    \"uploadTime\" : \"2022-04-29T15:21:34.747391Z\",\n    \"places\" : [ {\n      \"name\" : \"Lakeshia Parisian\",\n      \"placeId\" : \"l5y6\",\n      \"languageCode\" : \"96e8hb83nf0dwizm7c380mpqknxi38xy8c19rj4petce6b48i13e8rt2s7yyv1ruwb18vuqejdvta1kjc2u7s2ah7g0an5vdtn8ghlmmqv9jovgnhy9fc3zt6lrj030frkxq7cqz6cunkyn80d5fit53li3sxw6g1uctjvfg0vmaneyqj88ak14vwfcl73\"\n    }, {\n      \"name\" : \"Alethea Christiansen\",\n      \"placeId\" : \"836x\",\n      \"languageCode\" : \"1ale10sdwxjhue4zedi780wnbj387wjan89ofzzu1uhv3dczufelx2bq0gztwnwcaqe5sltfw0cgj15fd2\"\n    }, {\n      \"name\" : \"Deeann Bernhard\",\n      \"placeId\" : \"r0i0\",\n      \"languageCode\" : \"yodyqht8qx7\"\n    }, {\n      \"name\" : \"Hans Murray\",\n      \"placeId\" : \"ozcp\",\n      \"languageCode\" : \"z0xatb75qgnscylzg0ih5zf083dqwelcywihr02w1o6k00qibuaq467bpthbcy5qm0ocsp9j2h4wh43h91kowytm7dpeve87u4n5g6qtly3nykkthy1at9n\"\n    }, {\n      \"name\" : \"Mrs. Lekisha Murphy\",\n      \"placeId\" : \"mnk3\",\n      \"languageCode\" : \"ri4kr3ybj2oc4ai60rbpe1alwsqgi0x4xqxt2ew32gidry909o5wufiav43j9kx1t1dih4nivb83z7b1secskq59fmrtarl9ujwjza7qeh6lfcvff90nrb4nq\"\n    }, {\n      \"name\" : \"Anja Kirlin\",\n      \"placeId\" : \"8b5f\",\n      \"languageCode\" : \"bzvwrcmeyzyw0exx0or2tgef0gs99n9ffncfp0t5c\"\n    }, {\n      \"name\" : \"Carmine Cassin\",\n      \"placeId\" : \"20fb\",\n      \"languageCode\" : \"w553r13fame7wcjrfg889crcpcyw2qrbdbjr86an8yjw7kn2jzro8b7hdilh7uka1lv4vy9xy3qfuo0r805vw5ew6m5y8s3mo9s5gt0bo4\"\n    }, {\n      \"name\" : \"Lashawna Renner\",\n      \"placeId\" : \"a0ip\",\n      \"languageCode\" : \"tbxre2nv5obszug0lz1ood8ymm7re4wpmc2eeriuuzsakd2mcio4xz2v9i28hq60nzyltztu3tqkqhtrg4zew62k1ebokj74zut69f6055b2i0sq5i6ctjn89uuhxze43azq9unfna08\"\n    } ],\n    \"viewCount\" : \"8nrpn8ffvt4lvgyg0j6hzzo84cub6pkt1ycqjoqlog0hxsr9jv1nmw8gwf5i1can4k2azejcszessrvsb5o1edraycd2ho68h37f1rijgkk7jur8zpbb0jgf\",\n    \"mapsPublishStatus\" : \"UNSPECIFIED_MAPS_PUBLISH_STATUS\",\n    \"connections\" : [ {\n      \"target\" : {\n        \"id\" : \"w52s\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"wcgg\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"1o59\"\n      }\n    } ],\n    \"thumbnailUrl\" : \"https://web.example.mocklab.io/914186\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fb6572b0-96e8-441e-864a-76c62eefee92",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:11:34.748947Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photos.list",
          "schema" : {
            "description" : "Response to list all photos that belong to a user.",
            "properties" : {
              "nextPageToken" : {
                "description" : "Token to retrieve the next page of results, or empty if there are no more results in the list.",
                "type" : "string"
              },
              "photos" : {
                "description" : "List of photos. The pageSize field in the request determines the number of items returned.",
                "items" : {
                  "$ref" : "#/components/schemas/Photo"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "d18b6b4c-1a35-4fd9-9c8a-b0dc766ec496",
    "name" : "Lists all the PhotoSequences that belong to the user, in descending CreatePhotoS...",
    "request" : {
      "urlPath" : "/v1/photoSequences",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"photoSequences\" : [ {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Hal Schumm\",\n    \"error\" : {\n      \"code\" : 819280547,\n      \"details\" : [ { } ],\n      \"message\" : \"Sed iure maxime debitis placeat sint rerum est. Aperiam qui esse. Eaque et eos aut et. Magni consequatur qui ipsam. Delectus voluptas ab mollitia quis.\"\n    },\n    \"done\" : false\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Virgil Barton Jr.\",\n    \"error\" : {\n      \"code\" : 43682121,\n      \"details\" : [ { } ],\n      \"message\" : \"Fugiat accusamus consequuntur omnis enim. Autem facilis natus numquam quod cumque consequatur officia. Vero illo architecto deserunt nisi id alias omnis. Dolores ut ut.\"\n    },\n    \"done\" : false\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Miss Mozella Rolfson\",\n    \"error\" : {\n      \"code\" : 1053786793,\n      \"details\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"message\" : \"Nihil occaecati itaque ut aut nisi. Qui maiores impedit dicta quis. Voluptas itaque id consequuntur et porro quia veniam. Reprehenderit illo totam quo.\"\n    },\n    \"done\" : true\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Mrs. Cordell Cremin\",\n    \"error\" : {\n      \"code\" : 874440212,\n      \"details\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"message\" : \"Omnis a vel non sequi praesentium est. Quidem possimus dolorem velit suscipit sed officia. Occaecati voluptas voluptas voluptatum assumenda aut ullam. Amet expedita dolores repudiandae atque vel dolor\"\n    },\n    \"done\" : false\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Jarod Steuber\",\n    \"error\" : {\n      \"code\" : 437403315,\n      \"details\" : [ { }, { }, { }, { } ],\n      \"message\" : \"Est id voluptatem laudantium est id. Vero enim pariatur possimus perspiciatis consequuntur ut. Non facilis exercitationem commodi cumque aut. Sit voluptas et cumque. Doloremque nesciunt eaque id cum d\"\n    },\n    \"done\" : true\n  } ],\n  \"nextPageToken\" : \"rev02z6242ycrrjbjyqrjwg9lfxtdpew22q9kvwy20uekttphit828xnnjp1w6kwwyxuu8uk0\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d18b6b4c-1a35-4fd9-9c8a-b0dc766ec496",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:11:34.74383Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photoSequences.list",
          "schema" : {
            "description" : "Response to list all photo sequences that belong to a user.",
            "properties" : {
              "nextPageToken" : {
                "description" : "Token to retrieve the next page of results, or empty if there are no more results in the list.",
                "type" : "string"
              },
              "photoSequences" : {
                "description" : "List of photo sequences via Operation interface. The maximum number of items returned is based on the pageSize field in the request. Each item in the list can have three possible states, * `Operation.done` = false, if the processing of PhotoSequence is not finished yet. * `Operation.done` = true and `Operation.error` is populated, if there was an error in processing. * `Operation.done` = true and `Operation.response` contains a PhotoSequence message, In each sequence, only Id is populated.",
                "items" : {
                  "$ref" : "#/components/schemas/Operation"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "96ccf79a-450a-4a40-9190-c1ab433f8934",
    "name" : "Creates an upload session to start uploading photo sequence data. The upload URL...",
    "request" : {
      "urlPath" : "/v1/photoSequence:startUpload",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"uploadUrl\" : \"https://web.example.mocklab.io/695812\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "96ccf79a-450a-4a40-9190-c1ab433f8934",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:11:34.743209Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photoSequence.startUpload",
          "schema" : {
            "description" : "Upload reference for media files.",
            "properties" : {
              "uploadUrl" : {
                "description" : "An upload reference should be unique for each user. It follows the form: \"https://streetviewpublish.googleapis.com/media/user/{account_id}/photo/{upload_reference}\"",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "429b98f2-c3fd-40ee-a414-cac5dcd96985",
    "name" : "Gets the metadata of the specified PhotoSequence via the Operation interface. Th...",
    "request" : {
      "urlPath" : "/v1/photoSequence/8j36",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Chris Klein\",\n  \"error\" : {\n    \"code\" : 1340236284,\n    \"details\" : [ { }, { }, { }, { }, { }, { } ],\n    \"message\" : \"Tempora quos deleniti vel a dolores. Hic eum distinctio hic mollitia praesentium eum. Hic minus dolores dolorem quas.\"\n  },\n  \"done\" : true\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "429b98f2-c3fd-40ee-a414-cac5dcd96985",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:11:34.743102Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photoSequence.get",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "734a2278-3228-4dba-b636-f680e9b21b2d",
    "name" : "Deletes a PhotoSequence and its metadata. This method returns the following erro...",
    "request" : {
      "urlPath" : "/v1/photoSequence/2c2w",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "734a2278-3228-4dba-b636-f680e9b21b2d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:11:34.742873Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photoSequence.delete",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "7628813e-a9d2-432f-ba4b-723ba473644c",
    "name" : "After the client finishes uploading the PhotoSequence with the returned UploadRe...",
    "request" : {
      "urlPath" : "/v1/photoSequence",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Samual Rippin\",\n  \"error\" : {\n    \"code\" : 1376025552,\n    \"details\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n    \"message\" : \"Non itaque repudiandae distinctio. Recusandae ut et. Est repellat voluptatem et explicabo quia et beatae. Odio fugit qui eum quia reprehenderit qui.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7628813e-a9d2-432f-ba4b-723ba473644c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:11:34.742766Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photoSequence.create",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "90f64437-576e-4cc6-a212-fc348c2f7249",
    "name" : "Creates an upload session to start uploading photo bytes. The method uses the up...",
    "request" : {
      "urlPath" : "/v1/photo:startUpload",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"uploadUrl\" : \"https://web.example.mocklab.io/001861\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "90f64437-576e-4cc6-a212-fc348c2f7249",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:11:34.742526Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photo.startUpload",
          "schema" : {
            "description" : "Upload reference for media files.",
            "properties" : {
              "uploadUrl" : {
                "description" : "An upload reference should be unique for each user. It follows the form: \"https://streetviewpublish.googleapis.com/media/user/{account_id}/photo/{upload_reference}\"",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "cd62f5e2-32bc-4803-abc2-4b4d6222c08c",
    "name" : "Gets the metadata of the specified Photo. This method returns the following erro...",
    "request" : {
      "urlPath" : "/v1/photo/9pks",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"transferStatus\" : \"COMPLETED\",\n  \"captureTime\" : \"2022-06-04T16:09:34.741063Z\",\n  \"pose\" : {\n    \"gpsRecordTimestampUnixEpoch\" : \"2022-10-25T15:25:34.741099Z\",\n    \"altitude\" : 5.912027633507731E306,\n    \"accuracyMeters\" : 1.1617960509440681E38,\n    \"latLngPair\" : {\n      \"latitude\" : 1.1002129107749475E308,\n      \"longitude\" : 1.4046466000979572E308\n    },\n    \"heading\" : 2.578681703211567E307,\n    \"level\" : {\n      \"number\" : 1.3719333478029602E308,\n      \"name\" : \"Pouros\"\n    },\n    \"roll\" : 7.608214279220855E307,\n    \"pitch\" : 1.7775340059615222E308\n  },\n  \"downloadUrl\" : \"https://web.example.mocklab.io/421014\",\n  \"uploadReference\" : {\n    \"uploadUrl\" : \"https://web.example.mocklab.io/749678\"\n  },\n  \"photoId\" : {\n    \"id\" : \"f44w\"\n  },\n  \"shareLink\" : \"du9qmwuxbazl1vnwszmwypmf2dosxonmjv561o77\",\n  \"uploadTime\" : \"2022-10-24T17:38:34.741409Z\",\n  \"places\" : [ {\n    \"name\" : \"Chantay Mertz\",\n    \"placeId\" : \"e9tf\",\n    \"languageCode\" : \"unmqmo\"\n  }, {\n    \"name\" : \"Fabian Brown Sr.\",\n    \"placeId\" : \"8nx7\",\n    \"languageCode\" : \"kdt5abvblfaun5vhrn7r7m5j2ahq2h362s94jtad9dch9ipb1t7lk1t00cq2q38gt2dfcqwneb\"\n  }, {\n    \"name\" : \"Adrian Murray\",\n    \"placeId\" : \"2kc4\",\n    \"languageCode\" : \"afn9mbx8a1e0dvvn46ft6umhz3mwx6pwxi1832zcgs9p1rnzca0b8y6cjrx6o6wb\"\n  } ],\n  \"viewCount\" : \"1iaoko4b4fz49uit1toq0wl5b3dllcfesn6nx9fsbf2kjfkvc3omy674q7t\",\n  \"mapsPublishStatus\" : \"REJECTED_UNKNOWN\",\n  \"connections\" : [ {\n    \"target\" : {\n      \"id\" : \"u25l\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"jx54\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"i5u9\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"m29d\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"556j\"\n    }\n  } ],\n  \"thumbnailUrl\" : \"https://web.example.mocklab.io/913577\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "cd62f5e2-32bc-4803-abc2-4b4d6222c08c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:11:34.742408Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photo.get",
          "schema" : {
            "description" : "Photo is used to store 360 photos along with photo metadata.",
            "properties" : {
              "captureTime" : {
                "description" : "Optional. Absolute time when the photo was captured. When the photo has no exif timestamp, this is used to set a timestamp in the photo metadata.",
                "format" : "google-datetime",
                "type" : "string"
              },
              "connections" : {
                "description" : "Optional. Connections to other photos. A connection represents the link from this photo to another photo.",
                "items" : {
                  "$ref" : "#/components/schemas/Connection"
                },
                "type" : "array"
              },
              "downloadUrl" : {
                "description" : "Output only. The download URL for the photo bytes. This field is set only when GetPhotoRequest.view is set to PhotoView.INCLUDE_DOWNLOAD_URL.",
                "readOnly" : true,
                "type" : "string"
              },
              "mapsPublishStatus" : {
                "description" : "Output only. Status in Google Maps, whether this photo was published or rejected.",
                "enum" : [ "UNSPECIFIED_MAPS_PUBLISH_STATUS", "PUBLISHED", "REJECTED_UNKNOWN" ],
                "readOnly" : true,
                "type" : "string"
              },
              "photoId" : {
                "$ref" : "#/components/schemas/PhotoId"
              },
              "places" : {
                "description" : "Optional. Places where this photo belongs.",
                "items" : {
                  "$ref" : "#/components/schemas/Place"
                },
                "type" : "array"
              },
              "pose" : {
                "$ref" : "#/components/schemas/Pose"
              },
              "shareLink" : {
                "description" : "Output only. The share link for the photo.",
                "readOnly" : true,
                "type" : "string"
              },
              "thumbnailUrl" : {
                "description" : "Output only. The thumbnail URL for showing a preview of the given photo.",
                "readOnly" : true,
                "type" : "string"
              },
              "transferStatus" : {
                "description" : "Output only. Status of rights transfer on this photo.",
                "enum" : [ "TRANSFER_STATUS_UNKNOWN", "NEVER_TRANSFERRED", "PENDING", "COMPLETED", "REJECTED", "EXPIRED", "CANCELLED", "RECEIVED_VIA_TRANSFER" ],
                "readOnly" : true,
                "type" : "string"
              },
              "uploadReference" : {
                "$ref" : "#/components/schemas/UploadRef"
              },
              "uploadTime" : {
                "description" : "Output only. Time when the image was uploaded.",
                "format" : "google-datetime",
                "readOnly" : true,
                "type" : "string"
              },
              "viewCount" : {
                "description" : "Output only. View count of the photo.",
                "format" : "int64",
                "readOnly" : true,
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "eac6e236-8860-4545-bde4-1cf5e8d8b37d",
    "name" : "Deletes a Photo and its metadata. This method returns the following error codes:...",
    "request" : {
      "urlPath" : "/v1/photo/4if7",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "eac6e236-8860-4545-bde4-1cf5e8d8b37d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:11:34.741016Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photo.delete",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "3b309b60-90ad-420c-9341-0a344ffb73a2",
    "name" : "Updates the metadata of a Photo, such as pose, place association, connections, e...",
    "request" : {
      "urlPath" : "/v1/photo/2720",
      "method" : "PUT"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"transferStatus\" : \"CANCELLED\",\n  \"captureTime\" : \"2022-07-04T14:23:34.739172Z\",\n  \"pose\" : {\n    \"gpsRecordTimestampUnixEpoch\" : \"2023-01-06T16:32:34.739207Z\",\n    \"altitude\" : 1.09029239346331E308,\n    \"accuracyMeters\" : 2.5679626024090167E38,\n    \"latLngPair\" : {\n      \"latitude\" : 1.4969372273932577E308,\n      \"longitude\" : 6.331359677172441E307\n    },\n    \"heading\" : 9.737215543216199E307,\n    \"level\" : {\n      \"number\" : 1.073194509331716E308,\n      \"name\" : \"West\"\n    },\n    \"roll\" : 9.200063776969333E307,\n    \"pitch\" : 6.94624405695911E307\n  },\n  \"downloadUrl\" : \"https://web.example.mocklab.io/631225\",\n  \"uploadReference\" : {\n    \"uploadUrl\" : \"https://web.example.mocklab.io/840945\"\n  },\n  \"photoId\" : {\n    \"id\" : \"3wrz\"\n  },\n  \"shareLink\" : \"2gd6bjewdlfuueitnptn0l1jcu0zd1s3zplhqwppf64pkoj3gahj9j5zq270teaz66f2q8ba6lou8u6qd56quytl09y6mz1i5djcckvnvq82vumq8ofkd0ua1h2krqtspt1gvslkmaqog9w7miweorr4a98flrvl6qixjfyc7b7\",\n  \"uploadTime\" : \"2022-12-27T17:21:34.739536Z\",\n  \"places\" : [ {\n    \"name\" : \"Ms. Vertie D'Amore\",\n    \"placeId\" : \"t7y9\",\n    \"languageCode\" : \"bt0mnus4zy5k5dqfdegh58ozimfhmlwn7lc4itjzmzcq4gduec4587ibi13vp7tl3n6iqdvkhsll06vvljca9lp1u9rfw2iyvsdrez9ea1dnymheb3kflb4z1fc0n8kgbcdqj5a98h0dus9sfwnis87xnzm4xvwjgakkdl01b2p7\"\n  }, {\n    \"name\" : \"Ashlyn Ledner\",\n    \"placeId\" : \"029i\",\n    \"languageCode\" : \"l3alospkld5dpfuyss7icquxm1aibun6m5xbgpupicjsne2vxshxlmv7jgoqsasnfv990l154kepa51w3xnjwbcamiylv89ps9lfg0pwi5ko7bmtjwgzecli9jkoeob25jj9ox\"\n  }, {\n    \"name\" : \"Christina Schimmel\",\n    \"placeId\" : \"jqg0\",\n    \"languageCode\" : \"jh2x0gffoz9qig9h5o7cbp4woqhscewoa8fx05z0\"\n  }, {\n    \"name\" : \"Carma Quigley\",\n    \"placeId\" : \"3w64\",\n    \"languageCode\" : \"31h1p2wb2gj6kl4izvmoxp5vua3185f0w80slzkiiqv3wrno6v1h0nlkkfk7z67a1a1k4rhanjajgmj3ibnq9rw3cscm5vefh05jvcbqr616tta7zik7otup2r4eant49pnfe\"\n  }, {\n    \"name\" : \"Dwight Boyle\",\n    \"placeId\" : \"0x9c\",\n    \"languageCode\" : \"kj7lxk6g6owwu3lu2g9zsfmp97xgssq74f3eh5chymmxga\"\n  }, {\n    \"name\" : \"Aracely Hills\",\n    \"placeId\" : \"9o3z\",\n    \"languageCode\" : \"d6tyrvu3kkyvv2d39bjvyss8wyydsvbd586jpqzawtnq4\"\n  }, {\n    \"name\" : \"Shanel Balistreri\",\n    \"placeId\" : \"9425\",\n    \"languageCode\" : \"vjmgqzng3rfr7t2g441qag3pqdlf8\"\n  } ],\n  \"viewCount\" : \"95hst7r7sx5ct8pzxn8yr6lybn27tk59lauimf4h0wd0vbwet5ur0194qnmn1bt0oqfsjegfbfvp33j62382n92v6xqaiggywj9dawf9y5iz5aie023y6d9l4sukyet3s3g695ybr2b58thc6dm8jfkxb4dwiynnt2nel\",\n  \"mapsPublishStatus\" : \"REJECTED_UNKNOWN\",\n  \"connections\" : [ {\n    \"target\" : {\n      \"id\" : \"a434\"\n    }\n  } ],\n  \"thumbnailUrl\" : \"https://web.example.mocklab.io/018504\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3b309b60-90ad-420c-9341-0a344ffb73a2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:11:34.740887Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photo.update",
          "schema" : {
            "description" : "Photo is used to store 360 photos along with photo metadata.",
            "properties" : {
              "captureTime" : {
                "description" : "Optional. Absolute time when the photo was captured. When the photo has no exif timestamp, this is used to set a timestamp in the photo metadata.",
                "format" : "google-datetime",
                "type" : "string"
              },
              "connections" : {
                "description" : "Optional. Connections to other photos. A connection represents the link from this photo to another photo.",
                "items" : {
                  "$ref" : "#/components/schemas/Connection"
                },
                "type" : "array"
              },
              "downloadUrl" : {
                "description" : "Output only. The download URL for the photo bytes. This field is set only when GetPhotoRequest.view is set to PhotoView.INCLUDE_DOWNLOAD_URL.",
                "readOnly" : true,
                "type" : "string"
              },
              "mapsPublishStatus" : {
                "description" : "Output only. Status in Google Maps, whether this photo was published or rejected.",
                "enum" : [ "UNSPECIFIED_MAPS_PUBLISH_STATUS", "PUBLISHED", "REJECTED_UNKNOWN" ],
                "readOnly" : true,
                "type" : "string"
              },
              "photoId" : {
                "$ref" : "#/components/schemas/PhotoId"
              },
              "places" : {
                "description" : "Optional. Places where this photo belongs.",
                "items" : {
                  "$ref" : "#/components/schemas/Place"
                },
                "type" : "array"
              },
              "pose" : {
                "$ref" : "#/components/schemas/Pose"
              },
              "shareLink" : {
                "description" : "Output only. The share link for the photo.",
                "readOnly" : true,
                "type" : "string"
              },
              "thumbnailUrl" : {
                "description" : "Output only. The thumbnail URL for showing a preview of the given photo.",
                "readOnly" : true,
                "type" : "string"
              },
              "transferStatus" : {
                "description" : "Output only. Status of rights transfer on this photo.",
                "enum" : [ "TRANSFER_STATUS_UNKNOWN", "NEVER_TRANSFERRED", "PENDING", "COMPLETED", "REJECTED", "EXPIRED", "CANCELLED", "RECEIVED_VIA_TRANSFER" ],
                "readOnly" : true,
                "type" : "string"
              },
              "uploadReference" : {
                "$ref" : "#/components/schemas/UploadRef"
              },
              "uploadTime" : {
                "description" : "Output only. Time when the image was uploaded.",
                "format" : "google-datetime",
                "readOnly" : true,
                "type" : "string"
              },
              "viewCount" : {
                "description" : "Output only. View count of the photo.",
                "format" : "int64",
                "readOnly" : true,
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "178e31ea-c423-4262-bd65-bf717eef10e4",
    "name" : "After the client finishes uploading the photo with the returned UploadRef, Creat...",
    "request" : {
      "urlPath" : "/v1/photo",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"transferStatus\" : \"RECEIVED_VIA_TRANSFER\",\n  \"captureTime\" : \"2022-12-10T16:54:34.737179Z\",\n  \"pose\" : {\n    \"gpsRecordTimestampUnixEpoch\" : \"2022-09-13T14:55:34.737227Z\",\n    \"altitude\" : 7.849585725805777E307,\n    \"accuracyMeters\" : 2.9737699945693837E38,\n    \"latLngPair\" : {\n      \"latitude\" : 1.4309052463215508E308,\n      \"longitude\" : 2.283233225546636E307\n    },\n    \"heading\" : 7.787016293821207E306,\n    \"level\" : {\n      \"number\" : 7.704063685348885E307,\n      \"name\" : \"Doyle\"\n    },\n    \"roll\" : 8.408828820748554E307,\n    \"pitch\" : 2.979189447445293E307\n  },\n  \"downloadUrl\" : \"https://web.example.mocklab.io/701272\",\n  \"uploadReference\" : {\n    \"uploadUrl\" : \"https://web.example.mocklab.io/747744\"\n  },\n  \"photoId\" : {\n    \"id\" : \"3fb2\"\n  },\n  \"shareLink\" : \"9qffba7mgprtffmfvp3n4bkz281j72apzxg6kmxpg9sr38vverdo6206fe3qtcanwnny4lh1fx8s3oj0u3ehlh4gxmmng47pfd79zifai364s8ijupn35514lye86l5u97lylabnolgowc\",\n  \"uploadTime\" : \"2023-01-04T15:51:34.737644Z\",\n  \"places\" : [ {\n    \"name\" : \"Mrs. Bennie Schoen\",\n    \"placeId\" : \"ck98\",\n    \"languageCode\" : \"39g02p9gs58s8ag4iwg4ys8zdu\"\n  }, {\n    \"name\" : \"Madge Kreiger III\",\n    \"placeId\" : \"c8pr\",\n    \"languageCode\" : \"3yp8yfxrbg7\"\n  }, {\n    \"name\" : \"Clay Bruen\",\n    \"placeId\" : \"z129\",\n    \"languageCode\" : \"7ty57j8bj7bimcoegdgrhzuohvpskwktpqzemv0yn0c3g0p614tktt9tqmfdmze4m9l04xjaz7eeevhc8i4vi709nipi172e4ofu1gk3hstxkwmjdj6909x4zl3denjklsxwo9\"\n  }, {\n    \"name\" : \"Alejandra Cronin\",\n    \"placeId\" : \"2k8d\",\n    \"languageCode\" : \"9030i3tscfekebb7u3bs0trd49mdfkfdbmkc96dklv6dxc6ubenrt678eq117h03jigncqvf4q092d8gvkdu770l0cy2lmcr4ogsgk4xe3q0n0tzq18ycn9ee2mluc0xbm74rg3yuzwn52ue1epb7ka4dgchebp9buirua331kre\"\n  }, {\n    \"name\" : \"Kevin Larkin\",\n    \"placeId\" : \"3zcd\",\n    \"languageCode\" : \"5685u5xwrn2q1ztlrwy513qlndwbfkw8n8fctm31pds8owv27sbs9m1d9eqhcfmb68vxlsl9wez8x36hzwnz9tv54x9klh2g3itvguaemmpuej2jx5z50xy8e83m47ux4e8a3pccm9m206ykf9qfw6rfhku1mwh27kkbukxpwzg1rkswce08enim7dq425mdjce9gwq3\"\n  }, {\n    \"name\" : \"Ms. Fiona Osinski\",\n    \"placeId\" : \"19f4\",\n    \"languageCode\" : \"fsx3jp6hy604v24h7z\"\n  }, {\n    \"name\" : \"Lorelei Homenick\",\n    \"placeId\" : \"4z2v\",\n    \"languageCode\" : \"hdghdxvrcp85h6r1jtgwwqp7u82wgkm0d0dl989av1vz6au3p1fjbxwije78ir889wjaq9ct3ig195s94iiuptjdy7xfn3i2wcbe2h0uj4zyegc4t9je12uq5vuljpudsovg7wyy0v4z3qzm8zbl00o3u3sfflp3f04egdh\"\n  } ],\n  \"viewCount\" : \"zqenyakpr2c7uqrednyt2bz85o802oe7ewq2kmyrnhns7zty6x5jsffvekc7lvdpbgsso8pbefxvd8iurok6p9mbpaqckoocavdg7qxv9ai7eqc2xh345p4ftn9nqvv1vxci486t7xvhnk9emavvb2th5952019ouzirdtkerjwbffjtokoa0cxnb5qf\",\n  \"mapsPublishStatus\" : \"UNSPECIFIED_MAPS_PUBLISH_STATUS\",\n  \"connections\" : [ {\n    \"target\" : {\n      \"id\" : \"943w\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"6plz\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"cxnn\"\n    }\n  } ],\n  \"thumbnailUrl\" : \"https://web.example.mocklab.io/129167\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "178e31ea-c423-4262-bd65-bf717eef10e4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:11:34.739103Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photo.create",
          "schema" : {
            "description" : "Photo is used to store 360 photos along with photo metadata.",
            "properties" : {
              "captureTime" : {
                "description" : "Optional. Absolute time when the photo was captured. When the photo has no exif timestamp, this is used to set a timestamp in the photo metadata.",
                "format" : "google-datetime",
                "type" : "string"
              },
              "connections" : {
                "description" : "Optional. Connections to other photos. A connection represents the link from this photo to another photo.",
                "items" : {
                  "$ref" : "#/components/schemas/Connection"
                },
                "type" : "array"
              },
              "downloadUrl" : {
                "description" : "Output only. The download URL for the photo bytes. This field is set only when GetPhotoRequest.view is set to PhotoView.INCLUDE_DOWNLOAD_URL.",
                "readOnly" : true,
                "type" : "string"
              },
              "mapsPublishStatus" : {
                "description" : "Output only. Status in Google Maps, whether this photo was published or rejected.",
                "enum" : [ "UNSPECIFIED_MAPS_PUBLISH_STATUS", "PUBLISHED", "REJECTED_UNKNOWN" ],
                "readOnly" : true,
                "type" : "string"
              },
              "photoId" : {
                "$ref" : "#/components/schemas/PhotoId"
              },
              "places" : {
                "description" : "Optional. Places where this photo belongs.",
                "items" : {
                  "$ref" : "#/components/schemas/Place"
                },
                "type" : "array"
              },
              "pose" : {
                "$ref" : "#/components/schemas/Pose"
              },
              "shareLink" : {
                "description" : "Output only. The share link for the photo.",
                "readOnly" : true,
                "type" : "string"
              },
              "thumbnailUrl" : {
                "description" : "Output only. The thumbnail URL for showing a preview of the given photo.",
                "readOnly" : true,
                "type" : "string"
              },
              "transferStatus" : {
                "description" : "Output only. Status of rights transfer on this photo.",
                "enum" : [ "TRANSFER_STATUS_UNKNOWN", "NEVER_TRANSFERRED", "PENDING", "COMPLETED", "REJECTED", "EXPIRED", "CANCELLED", "RECEIVED_VIA_TRANSFER" ],
                "readOnly" : true,
                "type" : "string"
              },
              "uploadReference" : {
                "$ref" : "#/components/schemas/UploadRef"
              },
              "uploadTime" : {
                "description" : "Output only. Time when the image was uploaded.",
                "format" : "google-datetime",
                "readOnly" : true,
                "type" : "string"
              },
              "viewCount" : {
                "description" : "Output only. View count of the photo.",
                "format" : "int64",
                "readOnly" : true,
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  } ]
}