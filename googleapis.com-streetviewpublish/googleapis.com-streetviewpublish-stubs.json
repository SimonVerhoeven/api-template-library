{
  "mappings" : [ {
    "id" : "3227b325-a218-4284-8fa5-805bf18c8c17",
    "name" : "Updates the metadata of Photos, such as pose, place association, connections, et...",
    "request" : {
      "urlPath" : "/v1/photos:batchUpdate",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"results\" : [ {\n    \"photo\" : {\n      \"transferStatus\" : \"TRANSFER_STATUS_UNKNOWN\",\n      \"captureTime\" : \"2022-09-24T10:38:42.59447Z\",\n      \"pose\" : {\n        \"gpsRecordTimestampUnixEpoch\" : \"2022-12-27T12:00:42.594508Z\",\n        \"altitude\" : 1.4678021325676325E308,\n        \"accuracyMeters\" : 1.911409891873108E37,\n        \"latLngPair\" : {\n          \"latitude\" : 6.434416289244414E306,\n          \"longitude\" : 1.2666317078060268E308\n        },\n        \"heading\" : 1.137579708911999E308,\n        \"level\" : {\n          \"number\" : 2.902497320976066E307,\n          \"name\" : \"Rippin\"\n        },\n        \"roll\" : 1.9673371879976526E307,\n        \"pitch\" : 4.750696319265147E307\n      },\n      \"downloadUrl\" : \"https://web.example.mocklab.io/119710\",\n      \"uploadReference\" : {\n        \"uploadUrl\" : \"https://web.example.mocklab.io/603138\"\n      },\n      \"photoId\" : {\n        \"id\" : \"opgd\"\n      },\n      \"shareLink\" : \"7hzsuoijibfx93ttgt23rl2zfqkdxyt5hy3nqn3z50cclsfcivwyr1fnq7opaes2o20xn5lselznchgofro1a5ymhayj85vro\",\n      \"uploadTime\" : \"2022-04-07T13:40:42.594829Z\",\n      \"places\" : [ {\n        \"name\" : \"Cruz Gislason Jr.\",\n        \"placeId\" : \"e82e\",\n        \"languageCode\" : \"mk0n6bd4e38oipd2fuh67cim9b7r0pb10ohcscyqix42k8rg7lidv6oybvhbn20hs7v1no6d2i9agf14sx65i9\"\n      }, {\n        \"name\" : \"Kristopher Turner\",\n        \"placeId\" : \"p1k9\",\n        \"languageCode\" : \"5c87pqts47tyofv4lk8dlukm9jloib4y4elimrw0iamvlmxlrj9soq4ecz6qoemffrka8kb1hkuvxdwon8ytbhzdzqmjfkjp5gsq8dev\"\n      }, {\n        \"name\" : \"Delila Bogisich\",\n        \"placeId\" : \"6n75\",\n        \"languageCode\" : \"qzhefsuvxta48wxnxw7j36yykq877lvgaodp84om4ga8im1o06axudigzs8pv4idefbymej0\"\n      }, {\n        \"name\" : \"Andera Moen\",\n        \"placeId\" : \"p467\",\n        \"languageCode\" : \"dnlwgl4imivru4s9m82aavi2enwis9qe0yg8x3unx2m4t2a4nf2t9bp6jdi4ah5fogjik66g1qjg8jb8369ahres95fyassqp2q41rfc9myh1new32bqhu3n76k8a5gc4yb3kmtgnyr9hgvd274uo53sdmd77df10l1gxekvja5f9x2moljpk7vjxj6temr4ivz\"\n      }, {\n        \"name\" : \"Lynn Dare PhD\",\n        \"placeId\" : \"4861\",\n        \"languageCode\" : \"1z1\"\n      } ],\n      \"viewCount\" : \"259s\",\n      \"mapsPublishStatus\" : \"REJECTED_UNKNOWN\",\n      \"connections\" : [ {\n        \"target\" : { }\n      } ],\n      \"thumbnailUrl\" : \"https://web.example.mocklab.io/740667\"\n    },\n    \"status\" : {\n      \"code\" : 1142525949,\n      \"details\" : [ { }, { }, { }, { } ],\n      \"message\" : \"Eaque saepe minima aperiam eaque. Delectus incidunt sit labore quia iure. Molestiae voluptates repudiandae hic. Et beatae consequatur. Ratione ipsa saepe ipsum expedita dolore.\"\n    }\n  }, {\n    \"photo\" : {\n      \"transferStatus\" : \"EXPIRED\",\n      \"captureTime\" : \"2022-11-14T11:04:42.595665Z\",\n      \"pose\" : {\n        \"gpsRecordTimestampUnixEpoch\" : \"2022-09-14T11:59:42.595699Z\",\n        \"altitude\" : 9.451517628222771E307,\n        \"accuracyMeters\" : 1.7411483018166898E37,\n        \"latLngPair\" : {\n          \"latitude\" : 8.937879527765218E307,\n          \"longitude\" : 2.8336892139820894E305\n        },\n        \"heading\" : 1.7829391854692048E308,\n        \"level\" : {\n          \"number\" : 5.54599602218031E306,\n          \"name\" : \"Effertz\"\n        },\n        \"roll\" : 1.6402864658756645E308,\n        \"pitch\" : 1.2614721915460956E308\n      },\n      \"downloadUrl\" : \"https://web.example.mocklab.io/406028\",\n      \"uploadReference\" : {\n        \"uploadUrl\" : \"https://web.example.mocklab.io/551283\"\n      },\n      \"photoId\" : {\n        \"id\" : \"3gmv\"\n      },\n      \"shareLink\" : \"r2fz7fzo5fqyy73ge3tne4wu8stlmqzc6nctq2duvt2ws01d57w5z0r9bnw9aojd372bdlevtm438ne2dobpl066lsc5x90ks5b1f6p47bq8w4wwfhi7xaqb8mpgny7xjmml9nvz1g3bszhxx6atigjadaf3bz3ga1zp724m\",\n      \"uploadTime\" : \"2023-02-04T13:18:42.595986Z\",\n      \"places\" : [ {\n        \"name\" : \"Michale Thiel\",\n        \"placeId\" : \"7817\",\n        \"languageCode\" : \"h7ctuaw2myhd4sq3t1o7e4qwr06zlcfzelmvkkwunt2zkkgf888lzte463l4j1pqs4xakitgp8wfr8brhe6xithtw67ryy3sq\"\n      }, {\n        \"name\" : \"Agustina Cartwright DDS\",\n        \"placeId\" : \"f7q7\",\n        \"languageCode\" : \"aqk4wh3hwdua1atokepe23dz\"\n      }, {\n        \"name\" : \"Berta Bailey\",\n        \"placeId\" : \"e6ot\",\n        \"languageCode\" : \"d6e7yhz930vrp3trm1ft61v2nlw0zoinb7biyj630rcudqg86hplqflrydimbpm2qmbsy3umimv1ufj8kem\"\n      } ],\n      \"viewCount\" : \"ecfhrf389c5t1kcrh4kbj27ipuwdkkgbd99kcs1ado5m6gl0hyvf34v4utpepp7sjdqykas6cg5f6efp75cs8z6ypb5lbvpp4ow0w2cn842trkmgs93z7pn41uoqg9b7on11nj4znsg\",\n      \"mapsPublishStatus\" : \"UNSPECIFIED_MAPS_PUBLISH_STATUS\",\n      \"connections\" : [ {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      } ],\n      \"thumbnailUrl\" : \"https://web.example.mocklab.io/870224\"\n    },\n    \"status\" : {\n      \"code\" : 1618614315,\n      \"details\" : [ { } ],\n      \"message\" : \"Accusantium eos quod. Ut deserunt est qui aperiam. Quasi neque dolor rerum. Dolorum aliquam laboriosam vel voluptas. Cumque magnam consequuntur.\"\n    }\n  }, {\n    \"photo\" : {\n      \"transferStatus\" : \"PENDING\",\n      \"captureTime\" : \"2022-08-06T12:00:42.596545Z\",\n      \"pose\" : {\n        \"gpsRecordTimestampUnixEpoch\" : \"2022-05-09T12:35:42.596578Z\",\n        \"altitude\" : 9.612124295639718E307,\n        \"accuracyMeters\" : 1.9595316040602555E38,\n        \"latLngPair\" : {\n          \"latitude\" : 1.5963641344023115E308,\n          \"longitude\" : 1.668404396069867E308\n        },\n        \"heading\" : 7.786394751142618E307,\n        \"level\" : {\n          \"number\" : 2.3824372625101066E307,\n          \"name\" : \"Powlowski\"\n        },\n        \"roll\" : 1.2220277397126458E308,\n        \"pitch\" : 1.550658862062503E308\n      },\n      \"downloadUrl\" : \"https://web.example.mocklab.io/063171\",\n      \"uploadReference\" : {\n        \"uploadUrl\" : \"https://web.example.mocklab.io/958949\"\n      },\n      \"photoId\" : {\n        \"id\" : \"6jc4\"\n      },\n      \"shareLink\" : \"xzjrgvbus0724fpqgs3qv987dkki12myiewq28bp8v6awj641tk7clbuw1kklss9hq1mawepb0lkmyqdreyj75losr6uykylbsde3ipe1gf3zs0k22t5u9792umnjhddfvzv1hid8qm8l0kmypgq82oa65st\",\n      \"uploadTime\" : \"2022-03-29T12:30:42.596855Z\",\n      \"places\" : [ {\n        \"name\" : \"Woodrow Metz\",\n        \"placeId\" : \"25x1\",\n        \"languageCode\" : \"aqzm95ak2olqlh6srt4wdcmvbkujqqw77qzha9yo44vlhh889bc1iobi7q6kteqmn979j6o6chm\"\n      }, {\n        \"name\" : \"Shiloh Boyle\",\n        \"placeId\" : \"ge24\",\n        \"languageCode\" : \"em6xubo2dw43r8b9o83zgt5r9lolmlqcwfc70s4kg7915q6jnx9cztc855b9ltk059zoyceirbym7w1im0jd8prcf5qpnxk40ywz2ardartfh5a3idgndaqjjf2b2sxjtr7cmbuoghfjj50\"\n      }, {\n        \"name\" : \"Ms. Nicole Jerde\",\n        \"placeId\" : \"f20x\",\n        \"languageCode\" : \"or8ulw7f8dhp2d0gtw8t03d113msktcrj2la44ix8pxic6l4exgorifh40k2v4czy19os7381r0ed4eidtk6li9bhx8kvi6b3e3gh13qon5kob61zo802gj3fd9n33iaowetgkidlmeomj2w4yw5n03lkabezu\"\n      }, {\n        \"name\" : \"Soon Towne I\",\n        \"placeId\" : \"1042\",\n        \"languageCode\" : \"8pulphhhszm0di2c4u79pmyr839j5ula5jy3v6jdxswxyjifxr6h5tighm5anhmp0rpmy428zfrgy6ocss28xvtkge7tt6zpjt7ujc6f8g50j8hnnn2l3akstqbo3zph0\"\n      }, {\n        \"name\" : \"Reynaldo Franecki\",\n        \"placeId\" : \"lw12\",\n        \"languageCode\" : \"jm7psmbidl1du2wdp7vojphdgn59gia1\"\n      } ],\n      \"viewCount\" : \"kp3xsfjg3i6t92uswgm308lxzjmnh0zp5dulay22jizoq7og9ttdl3nuars71rdmy462kmkwrielrhrtenc149ehsruq8dp62tl3l6507lps0th5p1jxwtapgdahhcmo89p5ikgkjjr863z2pn32y5e61d\",\n      \"mapsPublishStatus\" : \"UNSPECIFIED_MAPS_PUBLISH_STATUS\",\n      \"connections\" : [ {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      } ],\n      \"thumbnailUrl\" : \"https://web.example.mocklab.io/384905\"\n    },\n    \"status\" : {\n      \"code\" : 96875489,\n      \"details\" : [ { }, { }, { } ],\n      \"message\" : \"Similique voluptas est dolores aperiam. Cupiditate mollitia sit sed eos reprehenderit facere. Quia enim ut ipsam quas. Possimus nostrum dolorem aspernatur necessitatibus. Dignissimos omnis et.\"\n    }\n  }, {\n    \"photo\" : {\n      \"transferStatus\" : \"COMPLETED\",\n      \"captureTime\" : \"2022-09-24T14:07:42.59767Z\",\n      \"pose\" : {\n        \"gpsRecordTimestampUnixEpoch\" : \"2022-03-15T11:18:42.597702Z\",\n        \"altitude\" : 8.665892981739478E306,\n        \"accuracyMeters\" : 1.2996955669128435E38,\n        \"latLngPair\" : {\n          \"latitude\" : 8.174819054356415E306,\n          \"longitude\" : 2.743545358295265E307\n        },\n        \"heading\" : 1.0689887932649454E308,\n        \"level\" : {\n          \"number\" : 6.856545390912673E307,\n          \"name\" : \"Farrell\"\n        },\n        \"roll\" : 1.2336413192346924E308,\n        \"pitch\" : 1.7437849635915459E308\n      },\n      \"downloadUrl\" : \"https://web.example.mocklab.io/123432\",\n      \"uploadReference\" : {\n        \"uploadUrl\" : \"https://web.example.mocklab.io/991688\"\n      },\n      \"photoId\" : {\n        \"id\" : \"zc83\"\n      },\n      \"shareLink\" : \"rrjd1htee7fznjvsk31z6xehizxgcohyln3oaylujgt2vby420pkel7k21hdbssqsenkg6wczd9bplt75fakhnkiwyc3lwn1yq8t1vx7qj5ig7bgj0qrj460umipyrlh958zbxhkopqb8zhc9moymv1t11gy258qjw436acnxlpu6xyjey07t0t2xqd8m\",\n      \"uploadTime\" : \"2023-01-08T12:50:42.597989Z\",\n      \"places\" : [ {\n        \"name\" : \"Dr. Ron Koch\",\n        \"placeId\" : \"h15o\",\n        \"languageCode\" : \"puh89samtmzclabgnokffjtzpm8epk5flh2jevvjh6v158u5hpjfbyuys9qf5ddcrp4o3gqx0q2ude9z83meli40xb25mkv5gklkqrc8rv\"\n      }, {\n        \"name\" : \"Chang McClure\",\n        \"placeId\" : \"k9d3\",\n        \"languageCode\" : \"wy8ic4lprbmsvfln79v96wh20n8w6e80910i3jwom1jzlpp72uhtpa5hbvnwo9io656k4q5kjk\"\n      }, {\n        \"name\" : \"Herb Zieme PhD\",\n        \"placeId\" : \"6x77\",\n        \"languageCode\" : \"ovhovjz1cr3ra5nk16mlrn3kdj5w02b2n84ln9303tj\"\n      }, {\n        \"name\" : \"Curt Gibson MD\",\n        \"placeId\" : \"2v43\",\n        \"languageCode\" : \"131x1t8c0ezqpfu897qy49fhldrc4f1hw030qukjlkhyay7sofy02wy4mqv3ug31wfzdjoawy4zhqvuu8i0sbfons3pp5r5l0kna\"\n      }, {\n        \"name\" : \"Adaline Konopelski\",\n        \"placeId\" : \"75u8\",\n        \"languageCode\" : \"cqwapjxfc4ki4r4zmre2h2b\"\n      } ],\n      \"viewCount\" : \"lcm5ci1q44qvd041wh6h7m1s\",\n      \"mapsPublishStatus\" : \"REJECTED_UNKNOWN\",\n      \"connections\" : [ {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      } ],\n      \"thumbnailUrl\" : \"https://web.example.mocklab.io/169845\"\n    },\n    \"status\" : {\n      \"code\" : 259239253,\n      \"details\" : [ { }, { }, { }, { }, { }, { } ],\n      \"message\" : \"Eaque voluptas autem. Repudiandae vel reprehenderit eum unde. Accusamus animi quis animi commodi. Ut modi voluptatem.\"\n    }\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3227b325-a218-4284-8fa5-805bf18c8c17",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:19:42.598871Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photos.batchUpdate",
          "schema" : {
            "description" : "Response to batch update of metadata of one or more Photos.",
            "properties" : {
              "results" : {
                "description" : "List of results for each individual Photo updated, in the same order as the request.",
                "items" : {
                  "$ref" : "#/components/schemas/PhotoResponse"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "f904e333-69c1-4cd0-84c5-05d462fb88e6",
    "name" : "Gets the metadata of the specified Photo batch. Note that if BatchGetPhotos fail...",
    "request" : {
      "urlPath" : "/v1/photos:batchGet",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"results\" : [ {\n    \"photo\" : {\n      \"transferStatus\" : \"EXPIRED\",\n      \"captureTime\" : \"2022-03-21T13:25:42.592907Z\",\n      \"pose\" : {\n        \"gpsRecordTimestampUnixEpoch\" : \"2022-07-16T12:27:42.592944Z\",\n        \"altitude\" : 5.226731357969679E307,\n        \"accuracyMeters\" : 8.088448491611901E37,\n        \"latLngPair\" : {\n          \"latitude\" : 1.140867346611457E308,\n          \"longitude\" : 9.015811402262097E307\n        },\n        \"heading\" : 1.7710948409086304E308,\n        \"level\" : {\n          \"number\" : 9.77582059425529E307,\n          \"name\" : \"Balistreri\"\n        },\n        \"roll\" : 3.1676600387556803E307,\n        \"pitch\" : 1.5090406769279086E308\n      },\n      \"downloadUrl\" : \"https://web.example.mocklab.io/141658\",\n      \"uploadReference\" : {\n        \"uploadUrl\" : \"https://web.example.mocklab.io/093129\"\n      },\n      \"photoId\" : {\n        \"id\" : \"5r64\"\n      },\n      \"shareLink\" : \"9dse90yi80hdhoilx53ujtwlf72h115vcsgbm93nzxck2a609icdkanpaj8fktlavcmuh8kjbe2um9sjw71x6zo6x5bfted0ruzgi1u3p17lxunb9j6e0dgdev79kk8j62\",\n      \"uploadTime\" : \"2022-03-07T10:39:42.593271Z\",\n      \"places\" : [ {\n        \"name\" : \"Reinaldo Schimmel I\",\n        \"placeId\" : \"5vcg\",\n        \"languageCode\" : \"twm1y79i0uvt1p046qnni7s48apfuvny4xya4t9i4891b424tj3d5lam53kh0dkytojdpc3rfaxjnyes8iadgaxqm3agc3swfa9pz5bjc1vnnicda5c97jqk0pkakm9lng8mfj3b\"\n      } ],\n      \"viewCount\" : \"amidoegtehabom5b0pia0dofx9fysmt32kbyfvfk3kq8mz1dyoep4vdj3i8jkqlmr\",\n      \"mapsPublishStatus\" : \"UNSPECIFIED_MAPS_PUBLISH_STATUS\",\n      \"connections\" : [ {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      }, {\n        \"target\" : { }\n      } ],\n      \"thumbnailUrl\" : \"https://web.example.mocklab.io/107952\"\n    },\n    \"status\" : {\n      \"code\" : 746332819,\n      \"details\" : [ { }, { }, { }, { }, { } ],\n      \"message\" : \"Et fuga nesciunt atque quod et dicta. Molestiae suscipit sed in et aliquid. In dolore ut consequatur at doloribus unde.\"\n    }\n  }, {\n    \"photo\" : {\n      \"transferStatus\" : \"RECEIVED_VIA_TRANSFER\",\n      \"captureTime\" : \"2023-02-06T12:00:42.593625Z\",\n      \"pose\" : {\n        \"gpsRecordTimestampUnixEpoch\" : \"2023-02-18T13:28:42.59366Z\",\n        \"altitude\" : 1.6468607893095408E308,\n        \"accuracyMeters\" : 6.992344850070768E37,\n        \"latLngPair\" : {\n          \"latitude\" : 1.3706431623305712E308,\n          \"longitude\" : 1.7080513660260646E308\n        },\n        \"heading\" : 8.819142927640563E306,\n        \"level\" : {\n          \"number\" : 1.4427032207289606E308,\n          \"name\" : \"Cummings\"\n        },\n        \"roll\" : 1.0557330827949336E308,\n        \"pitch\" : 9.636209128221597E307\n      },\n      \"downloadUrl\" : \"https://web.example.mocklab.io/452769\",\n      \"uploadReference\" : {\n        \"uploadUrl\" : \"https://web.example.mocklab.io/013102\"\n      },\n      \"photoId\" : {\n        \"id\" : \"84t6\"\n      },\n      \"shareLink\" : \"ujygctu1mcmp5ntg80qv2uui1oggg4utowx381ao7mo8j22c7den6tw5j0\",\n      \"uploadTime\" : \"2022-12-31T12:50:42.593961Z\",\n      \"places\" : [ {\n        \"name\" : \"Ms. Billie Waelchi\",\n        \"placeId\" : \"12u5\",\n        \"languageCode\" : \"khgkvfe6viwibfpgma5hgbozitj1y38le3q3olz\"\n      } ],\n      \"viewCount\" : \"i9dly6o0vlp7u3s9rg2g4x68fpvrhpl33sbjfsivf6lmmz1ac3zzxqs9ha4sr0024c7oowdf8ugm2tn0yx07e3t8i56bagbo5ju8yr96e4adqfb6yctkj8ksawao3\",\n      \"mapsPublishStatus\" : \"PUBLISHED\",\n      \"connections\" : [ {\n        \"target\" : { }\n      } ],\n      \"thumbnailUrl\" : \"https://web.example.mocklab.io/950795\"\n    },\n    \"status\" : {\n      \"code\" : 558645392,\n      \"details\" : [ { }, { }, { } ],\n      \"message\" : \"Rerum voluptatem placeat qui. Explicabo illo laborum consequuntur voluptas sunt. Sed ipsam doloribus qui sunt.\"\n    }\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f904e333-69c1-4cd0-84c5-05d462fb88e6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:19:42.594393Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photos.batchGet",
          "schema" : {
            "description" : "Response to batch get of Photos.",
            "properties" : {
              "results" : {
                "description" : "List of results for each individual Photo requested, in the same order as the requests in BatchGetPhotos.",
                "items" : {
                  "$ref" : "#/components/schemas/PhotoResponse"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "c808e489-6218-47bb-b989-7d08dceda1f1",
    "name" : "Deletes a list of Photos and their metadata. Note that if BatchDeletePhotos fail...",
    "request" : {
      "urlPath" : "/v1/photos:batchDelete",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status\" : [ {\n    \"code\" : 421047340,\n    \"details\" : [ { }, { }, { }, { }, { }, { }, { } ],\n    \"message\" : \"Aperiam ea et nisi. Aliquam sit explicabo. Quae sit voluptatem esse nemo voluptatibus aspernatur quod. Ut aut quaerat quod alias.\"\n  }, {\n    \"code\" : 1321413831,\n    \"details\" : [ { }, { }, { }, { } ],\n    \"message\" : \"Earum commodi molestiae laborum. Modi adipisci id a facilis enim aut consequatur. Consequatur impedit molestias voluptatibus ut voluptas placeat. Magni natus molestiae aliquam quis. Aliquam ut nam pro\"\n  }, {\n    \"code\" : 1010774647,\n    \"details\" : [ { }, { }, { }, { } ],\n    \"message\" : \"Reiciendis possimus qui quis. Eos assumenda provident quis laborum sapiente et. Nobis reprehenderit et sapiente. Aut ea eaque placeat a voluptates iure veritatis. Sed omnis esse esse animi perspiciati\"\n  }, {\n    \"code\" : 33457107,\n    \"details\" : [ { }, { } ],\n    \"message\" : \"Officiis eaque quia quaerat voluptas omnis. Necessitatibus sed eum consequatur impedit autem omnis. Itaque et sunt sunt. Totam dolorem quod beatae voluptatum laborum corrupti fuga.\"\n  }, {\n    \"code\" : 321644409,\n    \"details\" : [ { }, { }, { }, { } ],\n    \"message\" : \"Qui quam sit assumenda. Animi eius quis beatae nihil qui. Qui vel unde modi quia enim.\"\n  }, {\n    \"code\" : 1683820985,\n    \"details\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n    \"message\" : \"Suscipit vitae est quod praesentium quasi. Ea assumenda ut. Aliquam cum laborum possimus eaque laborum eveniet.\"\n  }, {\n    \"code\" : 1289579913,\n    \"details\" : [ { }, { }, { } ],\n    \"message\" : \"Nulla rerum fuga. Incidunt non id est voluptates corrupti eaque provident. Eum ipsa eligendi quibusdam labore. Non ab cum et.\"\n  }, {\n    \"code\" : 470993382,\n    \"details\" : [ { }, { }, { } ],\n    \"message\" : \"Asperiores perspiciatis laborum. Eos molestiae tempore sit. Consequatur necessitatibus ea dolore dolores saepe laboriosam.\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c808e489-6218-47bb-b989-7d08dceda1f1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:19:42.592838Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photos.batchDelete",
          "schema" : {
            "description" : "Response to batch delete of one or more Photos.",
            "properties" : {
              "status" : {
                "description" : "The status for the operation to delete a single Photo in the batch request.",
                "items" : {
                  "$ref" : "#/components/schemas/Status"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "ee418833-92ac-4bde-8458-19fb0f6bf5eb",
    "name" : "Lists all the Photos that belong to the user. > Note: Recently created photos th...",
    "request" : {
      "urlPath" : "/v1/photos",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"nextPageToken\" : \"tlgo8hrdfy58jrakkcowbpq71e6jwe9ozir97qyhhnf7h4ffwjlh5yadqczup2nfzz3gatjp7a42iocfd3a7lkm9dctalrmmmd2dnbu68lzksbj1nqz5m2ev9zzj\",\n  \"photos\" : [ {\n    \"transferStatus\" : \"CANCELLED\",\n    \"captureTime\" : \"2023-02-23T10:33:42.581588Z\",\n    \"pose\" : {\n      \"gpsRecordTimestampUnixEpoch\" : \"2022-11-01T12:51:42.581626Z\",\n      \"altitude\" : 1.1852173558764896E308,\n      \"accuracyMeters\" : 7.279075236832723E37,\n      \"latLngPair\" : {\n        \"latitude\" : 1.5346707851635218E308,\n        \"longitude\" : 1.550087492713665E308\n      },\n      \"heading\" : 7.449736777783881E307,\n      \"level\" : {\n        \"number\" : 2.5805652746436173E307,\n        \"name\" : \"Brekke\"\n      },\n      \"roll\" : 2.0333291238132304E307,\n      \"pitch\" : 5.446942721779184E307\n    },\n    \"downloadUrl\" : \"https://web.example.mocklab.io/106188\",\n    \"uploadReference\" : {\n      \"uploadUrl\" : \"https://web.example.mocklab.io/341093\"\n    },\n    \"photoId\" : {\n      \"id\" : \"gt9s\"\n    },\n    \"shareLink\" : \"pumktvm67pwnzhv5k4dovka6p2i0e9eqeycoac4yc3f89i\",\n    \"uploadTime\" : \"2022-05-22T11:47:42.581922Z\",\n    \"places\" : [ {\n      \"name\" : \"Mrs. Eusebio Mann\",\n      \"placeId\" : \"n974\",\n      \"languageCode\" : \"jre9fpmlx3ttguhzy3xthjhcgn8m39i11l0pnyyb1lj531otje3lbryij2tu03d0uubu4f593kgq200ihqwk8ip2klndpknnf60wj8h9gm84co1stfim62zmr5l8cloyvizu049iadu801n1yyfij3yx9k0qr70ha1jlys9o51buo7qwxqjg03srddgw0prd5754v\"\n    }, {\n      \"name\" : \"Roma Schimmel\",\n      \"placeId\" : \"1i13\",\n      \"languageCode\" : \"x3y9s\"\n    }, {\n      \"name\" : \"Zetta Marks DVM\",\n      \"placeId\" : \"y435\",\n      \"languageCode\" : \"4i620ujsz31wbc0a95m7q17b8j07ujzph3zukshv70r0ylp4kby79oszddkyk2g1vbrh8u9wqcgnff733e6bu97nzd0vio1n8uhvc7lo4d56i6cdjvnfn4hovvu8vtquigabtg6\"\n    }, {\n      \"name\" : \"Riley Rosenbaum\",\n      \"placeId\" : \"m9f8\",\n      \"languageCode\" : \"3kcbylzq8ezzhr0bcarxyr9rsynbrkqpx5gs0wi6lsqyf89dyz2hzi1zknub2\"\n    }, {\n      \"name\" : \"Alfred Miller\",\n      \"placeId\" : \"0jd2\",\n      \"languageCode\" : \"b7379pyhcme41wo2ehgywq0a2hkpkbg1fodd4r0lavwyuoby25pmm2x6vx82hpjlpjl84bwqbzivofo42fmci6opixa3mpf2hf1ri8hk5105hhk8fa8elicfe6p7suons0ng\"\n    }, {\n      \"name\" : \"Daphne Beer Jr.\",\n      \"placeId\" : \"o7n3\",\n      \"languageCode\" : \"7aaktd4rodfy2tmwssmp2yveblef3menu6i33w0lhp8xdb8dh8skh35tl1nm7uh5bnu4trm5q6i1rmltnm3zr\"\n    } ],\n    \"viewCount\" : \"c2z5ejksjhu7kojx0wtvsmdx8otbxjihzwdugjg7w4q7knn6m8x33wjz8b8dbfpb2thriwyn5jgrq4iyf45spd1343vkamxeppqa5pa9gapfezkwi4cymk7grhf94e\",\n    \"mapsPublishStatus\" : \"UNSPECIFIED_MAPS_PUBLISH_STATUS\",\n    \"connections\" : [ {\n      \"target\" : {\n        \"id\" : \"t1l8\"\n      }\n    } ],\n    \"thumbnailUrl\" : \"https://web.example.mocklab.io/210825\"\n  }, {\n    \"transferStatus\" : \"COMPLETED\",\n    \"captureTime\" : \"2022-07-22T14:14:42.582831Z\",\n    \"pose\" : {\n      \"gpsRecordTimestampUnixEpoch\" : \"2023-02-20T12:30:42.582866Z\",\n      \"altitude\" : 6.438068534376678E307,\n      \"accuracyMeters\" : 3.210249586428743E38,\n      \"latLngPair\" : {\n        \"latitude\" : 8.175798674456874E307,\n        \"longitude\" : 2.2091255589201027E307\n      },\n      \"heading\" : 1.6745910182374835E308,\n      \"level\" : {\n        \"number\" : 3.038482019481862E307,\n        \"name\" : \"Witting\"\n      },\n      \"roll\" : 6.845134229577368E306,\n      \"pitch\" : 1.383492048697929E308\n    },\n    \"downloadUrl\" : \"https://web.example.mocklab.io/388739\",\n    \"uploadReference\" : {\n      \"uploadUrl\" : \"https://web.example.mocklab.io/051504\"\n    },\n    \"photoId\" : {\n      \"id\" : \"vl0u\"\n    },\n    \"shareLink\" : \"mx11n36tvxxnk0k6gu3bjqn1ias2sv\",\n    \"uploadTime\" : \"2022-10-28T13:39:42.583147Z\",\n    \"places\" : [ {\n      \"name\" : \"Marica Littel\",\n      \"placeId\" : \"51yq\",\n      \"languageCode\" : \"230czf2b53ae0uf5g3hxl16ez24bjkbit4b4y9r7dax6praeeqapxa9dn1xv60swfvep4f1am7dirq2giy9cb\"\n    }, {\n      \"name\" : \"Dr. Asia Haley\",\n      \"placeId\" : \"xxyk\",\n      \"languageCode\" : \"4ohu3j8tv84geaoflycdomt0elv7kwkonbkixo1kvhscp1hxio1vq46em9p1zi3kny17tcrpoyvqresgs0m00oxzsovr6y6p5gfc6dszsjx5hzwaktizy26n41toq1wtshjmm1mqd9u2p85ia3f9kmu6v\"\n    }, {\n      \"name\" : \"King King\",\n      \"placeId\" : \"09fu\",\n      \"languageCode\" : \"9k0e3jpflwpspkenb04ba3cwjrgc19ixkehjk0nlxx14nextk39onvvdac5zktjwow3p6vga3ysql8ctwkjvkvqjobjgh6mkll9miob2rdv51hjpcz5wcnjlkdbllo2lcahkcoi7qs9g3ajdbncn4ztvva507sx0sv7pj\"\n    }, {\n      \"name\" : \"Nolan Predovic\",\n      \"placeId\" : \"q29q\",\n      \"languageCode\" : \"4jz20oooiozcc6njjx0bip591k7rk8jq18222s72yq54srefhfgtyjh8698jvu40o81q7hqnd8s137ips3y450pes5bl4k0cfb4t7w6t8\"\n    }, {\n      \"name\" : \"Dr. Son Hagenes\",\n      \"placeId\" : \"6ts8\",\n      \"languageCode\" : \"8yy8h0q0b4at7595g4stxpk4et859o36bojdpm35o9aed85q64a4r64jkto9l09nkw0o60jolggi2ayz8n00hn1olo5ik52d44rp98uuixlxiy\"\n    } ],\n    \"viewCount\" : \"2e21dyv3328g1xisi99rrtiw4zke9vbjr7nihnf3bcvr5m9420ocbhy2b1kbylcoe4r8anhc2bdmcmkot8yrbt0hj29u8gynu86pe4jtvnjqq6z3fe2knubvy9s1ipfrgp3ynscry7k8qgm1cup2b23vyf\",\n    \"mapsPublishStatus\" : \"UNSPECIFIED_MAPS_PUBLISH_STATUS\",\n    \"connections\" : [ {\n      \"target\" : {\n        \"id\" : \"t5dz\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"2d26\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"rvc2\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"l8lq\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"41ge\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"k0o4\"\n      }\n    } ],\n    \"thumbnailUrl\" : \"https://web.example.mocklab.io/707470\"\n  }, {\n    \"transferStatus\" : \"PENDING\",\n    \"captureTime\" : \"2023-02-26T12:50:42.58427Z\",\n    \"pose\" : {\n      \"gpsRecordTimestampUnixEpoch\" : \"2022-12-01T14:06:42.584303Z\",\n      \"altitude\" : 7.448843980811054E306,\n      \"accuracyMeters\" : 3.1710049226438945E38,\n      \"latLngPair\" : {\n        \"latitude\" : 8.167292684072521E307,\n        \"longitude\" : 2.9217306675392415E307\n      },\n      \"heading\" : 8.832456334721196E307,\n      \"level\" : {\n        \"number\" : 1.6352521912753524E308,\n        \"name\" : \"Bergstrom\"\n      },\n      \"roll\" : 5.988867260676358E307,\n      \"pitch\" : 1.6166643128574791E308\n    },\n    \"downloadUrl\" : \"https://web.example.mocklab.io/126473\",\n    \"uploadReference\" : {\n      \"uploadUrl\" : \"https://web.example.mocklab.io/905103\"\n    },\n    \"photoId\" : {\n      \"id\" : \"3r2s\"\n    },\n    \"shareLink\" : \"71uxms9eowv5p2nh51lj3xrg73vqc70h8lyudm7ngy1at3agrgsy69ljr8qu3hcqhow4mfqwm8915\",\n    \"uploadTime\" : \"2022-08-16T11:04:42.584596Z\",\n    \"places\" : [ {\n      \"name\" : \"Elizebeth Wolf\",\n      \"placeId\" : \"b8qa\",\n      \"languageCode\" : \"ker61ae072gmtz8pipy1lnqucrj\"\n    }, {\n      \"name\" : \"Johna Botsford\",\n      \"placeId\" : \"3g1i\",\n      \"languageCode\" : \"ggiwj0e0txu4mutlzo6orgqhiws9xz2o38rl5vbhuz0ml32s7majgrjc6dzaakyh\"\n    }, {\n      \"name\" : \"Neva Marquardt\",\n      \"placeId\" : \"v1ix\",\n      \"languageCode\" : \"00mkloogbjo67anf1wp9r66krxu3ghz9p2ycea8jjd88zkrp2xg4b1mb6g36e5qo3u9se7ynywgsbm7heewq5p2ltcfrqv3ii9c8qnlkirhg49x29gu1c6ehs1dg5kvzefhs6v29hpdaagpd33kr9xp4f1l86u5orgygh9pntfu10b4hwjca7\"\n    }, {\n      \"name\" : \"Jesus Bernier\",\n      \"placeId\" : \"hp9v\",\n      \"languageCode\" : \"05klm9etohbl63kf0tkkhi7ba47dd1r0p7k8u888u25l3kympv9g1xdplwplzfms7apfkv0yzyievlv935qn66gzdt68akyekzr647d1zsdk3cjuwajvjg1qlqc5jpq0btqgrilrdt6a6bxbxuusppz0zry1\"\n    }, {\n      \"name\" : \"Carlo Larkin\",\n      \"placeId\" : \"zu41\",\n      \"languageCode\" : \"couz9epeb6ipvhfgjdn4b80m3gre4o3poy9n2ly04ljyz1d0iypbfrz2jwzjx7x5p9mtv38i3zbpqfr67hyo2qbcu44dyctc7aloqyqck3vuu598q74q5sj7913jfct26n74abuu6x5ydcuv5dya87np8haaxbkn92emrlogr9e5qknryarq9gd0nyuljwsjl67x2m9e\"\n    }, {\n      \"name\" : \"Mazie Funk\",\n      \"placeId\" : \"93z8\",\n      \"languageCode\" : \"6p0may6qgbvw1r6ws7nwryc6ni0ji0qb0nbxzezsp06k1se21b0autsntaf6jl9l9yvjaa7whbe73wkgqug4qw6kp5eio4i8s6c3vk77eotss5u55szromx6r\"\n    }, {\n      \"name\" : \"Claretha Cassin\",\n      \"placeId\" : \"8932\",\n      \"languageCode\" : \"pr11a7trhyah893yws4kd7cc9qv709k83ziviywuot7y2ivc9hqqh94ue62en42vi33gv4if55v0ja85w8xl171bg3loun53njdye4veli3eadkd314e0t7ef821efrtx6awv5nwvnna0o\"\n    }, {\n      \"name\" : \"Basil Boyle\",\n      \"placeId\" : \"8os1\",\n      \"languageCode\" : \"z6x454drq\"\n    } ],\n    \"viewCount\" : \"8y8lvfmd3zoxtgxy1cvpvdjy46cpl1fxglw3ojzyn0ihftjgtjm521r7xp2imxwaxwjlvkbxmloessc2dm12l98dauh90pnhgi173sviv72goyanwki69enfn26njaoysk912uliaqnny4z0yni3z66x\",\n    \"mapsPublishStatus\" : \"PUBLISHED\",\n    \"connections\" : [ {\n      \"target\" : {\n        \"id\" : \"y309\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"5k15\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"l1xc\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"f857\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"4ymv\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"l726\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"gd74\"\n      }\n    } ],\n    \"thumbnailUrl\" : \"https://web.example.mocklab.io/743591\"\n  }, {\n    \"transferStatus\" : \"REJECTED\",\n    \"captureTime\" : \"2022-10-13T13:28:42.586187Z\",\n    \"pose\" : {\n      \"gpsRecordTimestampUnixEpoch\" : \"2022-04-18T11:55:42.586224Z\",\n      \"altitude\" : 7.991152835522606E307,\n      \"accuracyMeters\" : 1.5460442167534393E38,\n      \"latLngPair\" : {\n        \"latitude\" : 3.3122089375941645E306,\n        \"longitude\" : 7.700868595198282E307\n      },\n      \"heading\" : 5.192881294733093E307,\n      \"level\" : {\n        \"number\" : 8.62130985379495E307,\n        \"name\" : \"Hirthe\"\n      },\n      \"roll\" : 1.3551784776956428E308,\n      \"pitch\" : 1.7586921439254285E308\n    },\n    \"downloadUrl\" : \"https://web.example.mocklab.io/375976\",\n    \"uploadReference\" : {\n      \"uploadUrl\" : \"https://web.example.mocklab.io/927289\"\n    },\n    \"photoId\" : {\n      \"id\" : \"8d05\"\n    },\n    \"shareLink\" : \"5o3vowaagc4ne0r1g5cbmo45i494dwn1r7us5b2ri9zgr3nicow05svuigrrflw87axx7tdhz3e0qziulsfcbeqiisx\",\n    \"uploadTime\" : \"2022-10-27T13:40:42.586513Z\",\n    \"places\" : [ {\n      \"name\" : \"Romeo Fritsch\",\n      \"placeId\" : \"55u2\",\n      \"languageCode\" : \"ji0bj9rbyzpac22iued5ynexkubqgmworgh8nzgavn4dkvuxqy2izfuvf834\"\n    }, {\n      \"name\" : \"Mr. Irving Corkery\",\n      \"placeId\" : \"m0n5\",\n      \"languageCode\" : \"mqr25dkky1dgpaw2g50fcghjetqyjc6f\"\n    }, {\n      \"name\" : \"Ms. Paige Schultz\",\n      \"placeId\" : \"9883\",\n      \"languageCode\" : \"xupic2vpx2b2mh8ldn854lp6bngt18oekybmrb0jr899\"\n    }, {\n      \"name\" : \"Mr. Brice Tromp\",\n      \"placeId\" : \"7yht\",\n      \"languageCode\" : \"pyc80ixpu7bcya0txldg4kij6546e4x9tp4pa6u6yqpxnkb94y2uv98ucqy12cswll4dv2y97usecn6qmpzlgtg3yydp9npel31ckz2tmiaj9zi6e9qxl392vgfg2odrni81jnm7brm0ms2zl2o9srnhsktwptut1jnl\"\n    }, {\n      \"name\" : \"Omer Jenkins\",\n      \"placeId\" : \"3dsw\",\n      \"languageCode\" : \"ftc0tlrj2ep4owygz9ivsx8vwzyp5t6ey8k\"\n    } ],\n    \"viewCount\" : \"x3wfx6t0q0lx2iywp0jz3j72zqv595e32313szga916yle838idbmmfjhzuct7msg7g459abzz3xb1apelyt5p4kw3fnulshbuxc7ivibi8o30o7jql0ot6aeah0b0zo7e5wkpi8it84zpickpvqrcx5l3c\",\n    \"mapsPublishStatus\" : \"PUBLISHED\",\n    \"connections\" : [ {\n      \"target\" : {\n        \"id\" : \"weev\"\n      }\n    } ],\n    \"thumbnailUrl\" : \"https://web.example.mocklab.io/429756\"\n  }, {\n    \"transferStatus\" : \"NEVER_TRANSFERRED\",\n    \"captureTime\" : \"2022-11-20T10:48:42.587299Z\",\n    \"pose\" : {\n      \"gpsRecordTimestampUnixEpoch\" : \"2022-06-05T12:38:42.587332Z\",\n      \"altitude\" : 1.4353058712607107E308,\n      \"accuracyMeters\" : 1.2649942431297987E38,\n      \"latLngPair\" : {\n        \"latitude\" : 5.399726287880088E307,\n        \"longitude\" : 7.518478522300284E307\n      },\n      \"heading\" : 1.1980538290745137E308,\n      \"level\" : {\n        \"number\" : 7.092652365596166E307,\n        \"name\" : \"Bailey\"\n      },\n      \"roll\" : 3.6494779043518784E307,\n      \"pitch\" : 1.6410290304843666E308\n    },\n    \"downloadUrl\" : \"https://web.example.mocklab.io/369917\",\n    \"uploadReference\" : {\n      \"uploadUrl\" : \"https://web.example.mocklab.io/901629\"\n    },\n    \"photoId\" : {\n      \"id\" : \"5m3j\"\n    },\n    \"shareLink\" : \"eqk3k7g5vnppcczcpjvoghn5vrbxkdzfzbhyj4v5qpiogz6cn9dkm8k0s0aswg4va7mlhzvyxzfwlsa09c2a90706or6jp5f8ejvvs70j5esik87k\",\n    \"uploadTime\" : \"2023-01-16T12:36:42.587608Z\",\n    \"places\" : [ {\n      \"name\" : \"Nannette Doyle\",\n      \"placeId\" : \"rbi1\",\n      \"languageCode\" : \"b2u3qfhx0wo6a92patlomh9dj4327xyzpzhbjbtuehequlxst1czp5ioairwer03563u5wg4zth75vpajp5m0r1e299cae7jnnwyv9zfjonqzuidp9r1ww\"\n    }, {\n      \"name\" : \"Herma Beier\",\n      \"placeId\" : \"i826\",\n      \"languageCode\" : \"kym8semdm1\"\n    }, {\n      \"name\" : \"Lana Gulgowski II\",\n      \"placeId\" : \"yjjc\",\n      \"languageCode\" : \"zbx8ozayhg1984ue2ob6wbnw6gb57dhywfdsac533w88pnjcnuo6hk5q7s619djhmcg57feycnnledziov7mr6ms837ya6hqmmzdg8lhfcj3cyh4vbcv4bsgirbxbnpejimgt7aegcg04q35bji530yhgjtlq26jp3ktijmr8\"\n    } ],\n    \"viewCount\" : \"9vfhml9m49z98lkefxwbnxuwwpkdahpjpxvhnpgpmx70o9jj18z1n7i6wg0dn4m2azyuygicd5jmkxj5xsget8w37a594dywzr19k5xbtiby3n057i5j9lc1\",\n    \"mapsPublishStatus\" : \"REJECTED_UNKNOWN\",\n    \"connections\" : [ {\n      \"target\" : {\n        \"id\" : \"h68c\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"peh7\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"9r3h\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"7bw7\"\n      }\n    } ],\n    \"thumbnailUrl\" : \"https://web.example.mocklab.io/993653\"\n  }, {\n    \"transferStatus\" : \"CANCELLED\",\n    \"captureTime\" : \"2022-07-19T11:37:42.588371Z\",\n    \"pose\" : {\n      \"gpsRecordTimestampUnixEpoch\" : \"2022-08-11T13:00:42.588404Z\",\n      \"altitude\" : 1.1617118770216531E308,\n      \"accuracyMeters\" : 3.0290376637949564E37,\n      \"latLngPair\" : {\n        \"latitude\" : 8.0450801631265725E307,\n        \"longitude\" : 6.853432056324198E307\n      },\n      \"heading\" : 8.556175726895967E307,\n      \"level\" : {\n        \"number\" : 2.0919594971803012E307,\n        \"name\" : \"Gaylord\"\n      },\n      \"roll\" : 9.21921128053466E307,\n      \"pitch\" : 4.460961199137645E307\n    },\n    \"downloadUrl\" : \"https://web.example.mocklab.io/960846\",\n    \"uploadReference\" : {\n      \"uploadUrl\" : \"https://web.example.mocklab.io/125399\"\n    },\n    \"photoId\" : {\n      \"id\" : \"94ay\"\n    },\n    \"shareLink\" : \"kzg99vksuazwe3wbu75jolmynvnhl74vfsb03dbpcwbn2hu35mj813aos32eg55qjutgx7le1j5kx4vh83wodjya62onryj157c18a\",\n    \"uploadTime\" : \"2022-12-22T12:14:42.588683Z\",\n    \"places\" : [ {\n      \"name\" : \"Ninfa Cummings\",\n      \"placeId\" : \"9x3v\",\n      \"languageCode\" : \"h045f2k9vzzg1aqebqmfdj5b89wavhgmez7ps22joo21c6rs3s1h6he8yli6ggz\"\n    } ],\n    \"viewCount\" : \"y23oht2ihcytcy3mskp3h3y3jetpoigv\",\n    \"mapsPublishStatus\" : \"UNSPECIFIED_MAPS_PUBLISH_STATUS\",\n    \"connections\" : [ {\n      \"target\" : {\n        \"id\" : \"jkvy\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"jszr\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"2t3n\"\n      }\n    } ],\n    \"thumbnailUrl\" : \"https://web.example.mocklab.io/556091\"\n  }, {\n    \"transferStatus\" : \"PENDING\",\n    \"captureTime\" : \"2022-07-30T13:39:42.589132Z\",\n    \"pose\" : {\n      \"gpsRecordTimestampUnixEpoch\" : \"2022-11-02T13:20:42.589166Z\",\n      \"altitude\" : 1.1096257496086463E307,\n      \"accuracyMeters\" : 1.6845594273871353E38,\n      \"latLngPair\" : {\n        \"latitude\" : 3.834341167677485E307,\n        \"longitude\" : 1.5167031152443455E308\n      },\n      \"heading\" : 1.0382734954242545E307,\n      \"level\" : {\n        \"number\" : 1.11923282018769E308,\n        \"name\" : \"Hahn\"\n      },\n      \"roll\" : 1.375525929525495E308,\n      \"pitch\" : 1.205283327280424E308\n    },\n    \"downloadUrl\" : \"https://web.example.mocklab.io/304920\",\n    \"uploadReference\" : {\n      \"uploadUrl\" : \"https://web.example.mocklab.io/393430\"\n    },\n    \"photoId\" : {\n      \"id\" : \"5a22\"\n    },\n    \"shareLink\" : \"jhv1flrbayhoatncuat884ttio23cxgu7pks6f7xtteou4gnxy0adsz1xeaou5116gfqii9c53akcdtwywj11ne40ezgwpv5yp3zbqlpvd073hpz2uetn14vtj8p25a1q5oe07vv1n57xvw4b88ihzymuutow1u9qb\",\n    \"uploadTime\" : \"2022-05-31T11:54:42.589448Z\",\n    \"places\" : [ {\n      \"name\" : \"Katherina Christiansen\",\n      \"placeId\" : \"eobh\",\n      \"languageCode\" : \"d54xb2uzp777c3srr1m8e69y06n44zss8q1hx9dby6scfxjspbdgxnip3rhb3wj1nbbn24hikyc6ytzi\"\n    }, {\n      \"name\" : \"Alejandro Dickinson\",\n      \"placeId\" : \"r813\",\n      \"languageCode\" : \"wgkoik0phvfcdfsllbv0byhp1whzmrhmrw8482clm0fz0qz5ncb0cnrg86cm2forlw510vslxhajyivbnbfbcaifyzwlnkmz3n0ee8giwajunnkrk3389fs4buwbg138k19c71odb8s5i8a6itiz\"\n    } ],\n    \"viewCount\" : \"6gxnojjudbj9yyxhfloq5pzhfsv1q9dommu1j9zgdjf5mporqtptt5n4mzw1gmt9iccf1dkdpzpr4thkf6dvjvao5uohvohoh2zmw0aoi5p2szh6m\",\n    \"mapsPublishStatus\" : \"UNSPECIFIED_MAPS_PUBLISH_STATUS\",\n    \"connections\" : [ {\n      \"target\" : {\n        \"id\" : \"7esm\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"7mg6\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"9p2b\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"484z\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"w44w\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"il2d\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"77yg\"\n      }\n    } ],\n    \"thumbnailUrl\" : \"https://web.example.mocklab.io/811080\"\n  }, {\n    \"transferStatus\" : \"NEVER_TRANSFERRED\",\n    \"captureTime\" : \"2022-03-08T11:50:42.590332Z\",\n    \"pose\" : {\n      \"gpsRecordTimestampUnixEpoch\" : \"2022-10-15T12:26:42.590367Z\",\n      \"altitude\" : 2.526193957740614E307,\n      \"accuracyMeters\" : 1.483382908828126E38,\n      \"latLngPair\" : {\n        \"latitude\" : 2.8657934881334385E307,\n        \"longitude\" : 6.381146845944083E307\n      },\n      \"heading\" : 1.0596427560265169E308,\n      \"level\" : {\n        \"number\" : 6.591068700393399E307,\n        \"name\" : \"King\"\n      },\n      \"roll\" : 7.989690686998999E307,\n      \"pitch\" : 8.510433985493534E307\n    },\n    \"downloadUrl\" : \"https://web.example.mocklab.io/731096\",\n    \"uploadReference\" : {\n      \"uploadUrl\" : \"https://web.example.mocklab.io/350224\"\n    },\n    \"photoId\" : {\n      \"id\" : \"83x1\"\n    },\n    \"shareLink\" : \"azxf4itcws81be8mmoi5t2tfj4vcy14qy8wkhst0bxjd3g5be36cizspsz0wdebpb6o84gwk7gge\",\n    \"uploadTime\" : \"2022-10-06T13:13:42.59067Z\",\n    \"places\" : [ {\n      \"name\" : \"Mrs. Hilario Toy\",\n      \"placeId\" : \"8mpm\",\n      \"languageCode\" : \"alpe1492dvccydrqztsjbkdrvfo091lfa9evdkcnqe8jnkljehekddlocc9kco9di755efuklnon23j0458oicxv628y0ly7nmv54qqhqm6uvzhnlge8n0uzbc3kcp4z02ay3t13xc0oyoayta\"\n    }, {\n      \"name\" : \"Ngoc Berge\",\n      \"placeId\" : \"yl90\",\n      \"languageCode\" : \"zvdbsbveqvhemjuen3u6\"\n    }, {\n      \"name\" : \"Kimbra Schultz\",\n      \"placeId\" : \"i8az\",\n      \"languageCode\" : \"m7njxw087x2sypyj4m5fnvmfhl1bin0j8vz6pk1usxfx9shaj5g276k3r4lkicdzk4o8f4h5c937300otsdskb93awdsg86oqifh4vyjrqca19xm0umvea7fel1bbz9zih72vjpv1ughz3d2us774v4kvl6kw0k6k2xbhmi\"\n    }, {\n      \"name\" : \"Paris Miller\",\n      \"placeId\" : \"9z77\",\n      \"languageCode\" : \"pb9jve79mjb1sqjzudbaxuqpwfwizb9hngr59w\"\n    }, {\n      \"name\" : \"Aurelio Hackett\",\n      \"placeId\" : \"ait5\",\n      \"languageCode\" : \"uqzasf761t1j6rkzyt7x66rbdx5x3xljy81wiquasrwoy7dfxrpw3skisgpol\"\n    }, {\n      \"name\" : \"Mariano Price\",\n      \"placeId\" : \"8rv9\",\n      \"languageCode\" : \"dnj374xstyumba2v0sdoducw8701jdhxswlonr466kcxxne2hbvpszaawm2y9eobxm0ll1h767cabph0bi00bt\"\n    }, {\n      \"name\" : \"Olga Glover\",\n      \"placeId\" : \"n179\",\n      \"languageCode\" : \"sgylp0pcmjal9caz0v94znin14beh7kr4bd9dkrw6r71raaveu5kknggjjuhh3w6xbwq5pi6nq17uhvvyt6adu1w0v86hbk3iuqejvhia0clo22atoyi9nz2lkhvlq6asa0zqdc9qlwxzw\"\n    } ],\n    \"viewCount\" : \"sm56rngumqdje2yx2gpy7p63ibpdfc2a76vpcxppv7vikplevch2gjodc8rz6f0b5vxk805hz1bjcaf8p7bp50vflal7qnpkl5\",\n    \"mapsPublishStatus\" : \"UNSPECIFIED_MAPS_PUBLISH_STATUS\",\n    \"connections\" : [ {\n      \"target\" : {\n        \"id\" : \"4cxx\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"4440\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"k60w\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"fs69\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"7p57\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"da7v\"\n      }\n    }, {\n      \"target\" : {\n        \"id\" : \"1128\"\n      }\n    } ],\n    \"thumbnailUrl\" : \"https://web.example.mocklab.io/222055\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ee418833-92ac-4bde-8458-19fb0f6bf5eb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:19:42.592369Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photos.list",
          "schema" : {
            "description" : "Response to list all photos that belong to a user.",
            "properties" : {
              "nextPageToken" : {
                "description" : "Token to retrieve the next page of results, or empty if there are no more results in the list.",
                "type" : "string"
              },
              "photos" : {
                "description" : "List of photos. The pageSize field in the request determines the number of items returned.",
                "items" : {
                  "$ref" : "#/components/schemas/Photo"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "0f767c47-c0aa-40a8-9fdd-953c69833e49",
    "name" : "Lists all the PhotoSequences that belong to the user, in descending CreatePhotoS...",
    "request" : {
      "urlPath" : "/v1/photoSequences",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"photoSequences\" : [ {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Mr. Preston West\",\n    \"error\" : {\n      \"code\" : 1562332720,\n      \"details\" : [ { }, { }, { }, { }, { } ],\n      \"message\" : \"Illum rerum commodi quos omnis aut temporibus. Voluptatem voluptatem est officiis modi. Explicabo nihil odio quod atque.\"\n    },\n    \"done\" : false\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Ali Wiza\",\n    \"error\" : {\n      \"code\" : 275625639,\n      \"details\" : [ { }, { }, { }, { }, { } ],\n      \"message\" : \"Voluptatem dolores error omnis aut id non. Illum rerum saepe inventore omnis ut aut vel. Quia sint non necessitatibus qui vitae voluptatibus.\"\n    },\n    \"done\" : true\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Julia Morissette\",\n    \"error\" : {\n      \"code\" : 549473465,\n      \"details\" : [ { }, { }, { }, { }, { } ],\n      \"message\" : \"Atque deserunt aperiam voluptatibus facere. Ut sit reiciendis aliquid in explicabo maxime qui. Perferendis laudantium excepturi similique modi excepturi assumenda eos. Magni nihil et eius perspiciatis\"\n    },\n    \"done\" : false\n  }, {\n    \"metadata\" : { },\n    \"response\" : { },\n    \"name\" : \"Lucio O'Connell\",\n    \"error\" : {\n      \"code\" : 74151576,\n      \"details\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"message\" : \"Ut unde illo sunt. Quo culpa at sint. Error hic ullam quisquam. Quas tempore et ut.\"\n    },\n    \"done\" : false\n  } ],\n  \"nextPageToken\" : \"boazyvtlk7n9j9jdjnljn5g70rxhgue23x14skg4zovd8u9n33qtth1p44mes0twbirk3qh3iuf4b61qc99svxq2rgm98l0aqm0z80s\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0f767c47-c0aa-40a8-9fdd-953c69833e49",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:19:42.581514Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photoSequences.list",
          "schema" : {
            "description" : "Response to list all photo sequences that belong to a user.",
            "properties" : {
              "nextPageToken" : {
                "description" : "Token to retrieve the next page of results, or empty if there are no more results in the list.",
                "type" : "string"
              },
              "photoSequences" : {
                "description" : "List of photo sequences via Operation interface. The maximum number of items returned is based on the pageSize field in the request. Each item in the list can have three possible states, * `Operation.done` = false, if the processing of PhotoSequence is not finished yet. * `Operation.done` = true and `Operation.error` is populated, if there was an error in processing. * `Operation.done` = true and `Operation.response` contains a PhotoSequence message, In each sequence, only Id is populated.",
                "items" : {
                  "$ref" : "#/components/schemas/Operation"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "9e0f0777-4cdc-4f66-a0f2-3f28a18c5659",
    "name" : "Creates an upload session to start uploading photo sequence data. The upload URL...",
    "request" : {
      "urlPath" : "/v1/photoSequence:startUpload",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"uploadUrl\" : \"https://web.example.mocklab.io/107730\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9e0f0777-4cdc-4f66-a0f2-3f28a18c5659",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:19:42.581014Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photoSequence.startUpload",
          "schema" : {
            "description" : "Upload reference for media files.",
            "properties" : {
              "uploadUrl" : {
                "description" : "An upload reference should be unique for each user. It follows the form: \"https://streetviewpublish.googleapis.com/media/user/{account_id}/photo/{upload_reference}\"",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "5f8235fc-96a7-49d2-84d2-e5577bda8636",
    "name" : "Gets the metadata of the specified PhotoSequence via the Operation interface. Th...",
    "request" : {
      "urlPath" : "/v1/photoSequence/8160",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Enoch Hauck\",\n  \"error\" : {\n    \"code\" : 1317608530,\n    \"details\" : [ { }, { }, { }, { }, { } ],\n    \"message\" : \"Expedita recusandae explicabo deserunt ipsum ipsum. Suscipit quis in. Omnis vel corrupti ipsum libero.\"\n  },\n  \"done\" : true\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5f8235fc-96a7-49d2-84d2-e5577bda8636",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:19:42.580912Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photoSequence.get",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "88d42640-a1ff-4a59-94d1-4defacf9cd9c",
    "name" : "Deletes a PhotoSequence and its metadata. This method returns the following erro...",
    "request" : {
      "urlPath" : "/v1/photoSequence/q595",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "88d42640-a1ff-4a59-94d1-4defacf9cd9c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:19:42.580687Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photoSequence.delete",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "e8330360-4fe3-4711-b35a-01843d2a9c3f",
    "name" : "After the client finishes uploading the PhotoSequence with the returned UploadRe...",
    "request" : {
      "urlPath" : "/v1/photoSequence",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Jose Kub\",\n  \"error\" : {\n    \"code\" : 440415253,\n    \"details\" : [ { }, { }, { } ],\n    \"message\" : \"Qui est est quia. Veritatis similique odit aliquid in. Corporis et culpa. Aperiam quaerat vitae qui rem et.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e8330360-4fe3-4711-b35a-01843d2a9c3f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:19:42.580579Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photoSequence.create",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "08bf9343-dc55-47db-b384-9536c501dc7f",
    "name" : "Creates an upload session to start uploading photo bytes. The method uses the up...",
    "request" : {
      "urlPath" : "/v1/photo:startUpload",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"uploadUrl\" : \"https://web.example.mocklab.io/541956\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "08bf9343-dc55-47db-b384-9536c501dc7f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:19:42.580367Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photo.startUpload",
          "schema" : {
            "description" : "Upload reference for media files.",
            "properties" : {
              "uploadUrl" : {
                "description" : "An upload reference should be unique for each user. It follows the form: \"https://streetviewpublish.googleapis.com/media/user/{account_id}/photo/{upload_reference}\"",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "03a3f774-8e4c-445d-98b3-4088660dbf0c",
    "name" : "Gets the metadata of the specified Photo. This method returns the following erro...",
    "request" : {
      "urlPath" : "/v1/photo/9ymn",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"transferStatus\" : \"REJECTED\",\n  \"captureTime\" : \"2023-02-07T12:19:42.578769Z\",\n  \"pose\" : {\n    \"gpsRecordTimestampUnixEpoch\" : \"2022-12-16T10:25:42.578803Z\",\n    \"altitude\" : 1.4072188775760706E308,\n    \"accuracyMeters\" : 1.0829570242496476E37,\n    \"latLngPair\" : {\n      \"latitude\" : 8.241722743912975E307,\n      \"longitude\" : 1.2115662483214776E306\n    },\n    \"heading\" : 1.014530495410056E308,\n    \"level\" : {\n      \"number\" : 2.9330670018722206E307,\n      \"name\" : \"Abbott\"\n    },\n    \"roll\" : 8.660519010491209E307,\n    \"pitch\" : 1.4499280548083444E307\n  },\n  \"downloadUrl\" : \"https://web.example.mocklab.io/992821\",\n  \"uploadReference\" : {\n    \"uploadUrl\" : \"https://web.example.mocklab.io/931535\"\n  },\n  \"photoId\" : {\n    \"id\" : \"7507\"\n  },\n  \"shareLink\" : \"qrnxznl07cw1rxccvhd4fnv\",\n  \"uploadTime\" : \"2023-01-15T10:46:42.579092Z\",\n  \"places\" : [ {\n    \"name\" : \"Delbert Hegmann\",\n    \"placeId\" : \"qmte\",\n    \"languageCode\" : \"wowik7w5vrkekzensbqioqp22znt6h2jt9uqa26nc0plgeypv12uuu7rmf3brsb1cle4k4mnw15fxd1lf\"\n  }, {\n    \"name\" : \"Jerrod VonRueden MD\",\n    \"placeId\" : \"9t64\",\n    \"languageCode\" : \"t9uvznlj9vfcak9zqp0rv54q1m4eauoqrsrrlgfgoydlu7qhr3s3cnq3f99rfyss5jbkz4ux1csrafhkwzx1oq4qc17rbx0u5sm8cbfr3jjqaratbzvp0jykxbk29b4jpk4hpa22clfr37rwlsfzyor1i2mgmjh8ybaxl\"\n  }, {\n    \"name\" : \"Waneta Rowe\",\n    \"placeId\" : \"jy34\",\n    \"languageCode\" : \"gnyw97lq5b9ndx33b\"\n  }, {\n    \"name\" : \"Brendan Schaden\",\n    \"placeId\" : \"fphz\",\n    \"languageCode\" : \"3wwr3isoprqwyg5y7tw6gnisadkpt9hph5xuuer4cesq9yk2l4gdkb7mef3ldx30552qoszkeh8eqmrurnjr0fghfgtteyeq2wgrjo1w6\"\n  }, {\n    \"name\" : \"Edward Christiansen\",\n    \"placeId\" : \"y74l\",\n    \"languageCode\" : \"yfcwttk0e6d2w3wmoakekr3ixvzjkz0pulg0h586bfve8nq8cr8li9a4h3aj68g8r9onbatxqoargayxn0kyewelpexf\"\n  }, {\n    \"name\" : \"Boyce Schinner\",\n    \"placeId\" : \"v814\",\n    \"languageCode\" : \"5bmwc9y0bts26omy3vqwje2pkytk50es80v8c3fqmx0xy2r94cmhe64dywq6g0igcdc\"\n  }, {\n    \"name\" : \"Mrs. Hunter Kuphal\",\n    \"placeId\" : \"n6h6\",\n    \"languageCode\" : \"yi8xsfwoeb4wje3tg2pjd6lbx0lgylgew265o4g53bg9x0mxs65vk0bv4uj3wm1726p88bm8ok2nkd2t5fs8inhkxz61htmu8ixhhuxb3jiuw7p0kn2oyqa\"\n  } ],\n  \"viewCount\" : \"w17lqj0l7qgn65\",\n  \"mapsPublishStatus\" : \"PUBLISHED\",\n  \"connections\" : [ {\n    \"target\" : {\n      \"id\" : \"862g\"\n    }\n  } ],\n  \"thumbnailUrl\" : \"https://web.example.mocklab.io/911379\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "03a3f774-8e4c-445d-98b3-4088660dbf0c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:19:42.580251Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photo.get",
          "schema" : {
            "description" : "Photo is used to store 360 photos along with photo metadata.",
            "properties" : {
              "captureTime" : {
                "description" : "Optional. Absolute time when the photo was captured. When the photo has no exif timestamp, this is used to set a timestamp in the photo metadata.",
                "format" : "google-datetime",
                "type" : "string"
              },
              "connections" : {
                "description" : "Optional. Connections to other photos. A connection represents the link from this photo to another photo.",
                "items" : {
                  "$ref" : "#/components/schemas/Connection"
                },
                "type" : "array"
              },
              "downloadUrl" : {
                "description" : "Output only. The download URL for the photo bytes. This field is set only when GetPhotoRequest.view is set to PhotoView.INCLUDE_DOWNLOAD_URL.",
                "readOnly" : true,
                "type" : "string"
              },
              "mapsPublishStatus" : {
                "description" : "Output only. Status in Google Maps, whether this photo was published or rejected.",
                "enum" : [ "UNSPECIFIED_MAPS_PUBLISH_STATUS", "PUBLISHED", "REJECTED_UNKNOWN" ],
                "readOnly" : true,
                "type" : "string"
              },
              "photoId" : {
                "$ref" : "#/components/schemas/PhotoId"
              },
              "places" : {
                "description" : "Optional. Places where this photo belongs.",
                "items" : {
                  "$ref" : "#/components/schemas/Place"
                },
                "type" : "array"
              },
              "pose" : {
                "$ref" : "#/components/schemas/Pose"
              },
              "shareLink" : {
                "description" : "Output only. The share link for the photo.",
                "readOnly" : true,
                "type" : "string"
              },
              "thumbnailUrl" : {
                "description" : "Output only. The thumbnail URL for showing a preview of the given photo.",
                "readOnly" : true,
                "type" : "string"
              },
              "transferStatus" : {
                "description" : "Output only. Status of rights transfer on this photo.",
                "enum" : [ "TRANSFER_STATUS_UNKNOWN", "NEVER_TRANSFERRED", "PENDING", "COMPLETED", "REJECTED", "EXPIRED", "CANCELLED", "RECEIVED_VIA_TRANSFER" ],
                "readOnly" : true,
                "type" : "string"
              },
              "uploadReference" : {
                "$ref" : "#/components/schemas/UploadRef"
              },
              "uploadTime" : {
                "description" : "Output only. Time when the image was uploaded.",
                "format" : "google-datetime",
                "readOnly" : true,
                "type" : "string"
              },
              "viewCount" : {
                "description" : "Output only. View count of the photo.",
                "format" : "int64",
                "readOnly" : true,
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "3b584c7e-7f61-400c-95bf-a3db4330cab4",
    "name" : "Deletes a Photo and its metadata. This method returns the following error codes:...",
    "request" : {
      "urlPath" : "/v1/photo/n08u",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3b584c7e-7f61-400c-95bf-a3db4330cab4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:19:42.578726Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photo.delete",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "f6cd691d-c366-4854-b1d9-f73e966670a7",
    "name" : "Updates the metadata of a Photo, such as pose, place association, connections, e...",
    "request" : {
      "urlPath" : "/v1/photo/31i4",
      "method" : "PUT"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"transferStatus\" : \"RECEIVED_VIA_TRANSFER\",\n  \"captureTime\" : \"2022-12-26T12:27:42.576956Z\",\n  \"pose\" : {\n    \"gpsRecordTimestampUnixEpoch\" : \"2022-10-02T10:54:42.576991Z\",\n    \"altitude\" : 9.06629902993764E307,\n    \"accuracyMeters\" : 1.804698265127801E38,\n    \"latLngPair\" : {\n      \"latitude\" : 4.963339115546833E307,\n      \"longitude\" : 8.70296053551989E307\n    },\n    \"heading\" : 1.7898197300386117E308,\n    \"level\" : {\n      \"number\" : 1.0697351505352352E308,\n      \"name\" : \"Hauck\"\n    },\n    \"roll\" : 2.491083209313221E307,\n    \"pitch\" : 2.7149177989544385E307\n  },\n  \"downloadUrl\" : \"https://web.example.mocklab.io/231391\",\n  \"uploadReference\" : {\n    \"uploadUrl\" : \"https://web.example.mocklab.io/662277\"\n  },\n  \"photoId\" : {\n    \"id\" : \"a3i6\"\n  },\n  \"shareLink\" : \"zlfyq2j8wrt6okcpnf51lx18dou8xti0u7cv9etp8i2288odr31irj2o5cjjx261rqo5jwa1uvw0lf9h\",\n  \"uploadTime\" : \"2022-04-15T12:59:42.577289Z\",\n  \"places\" : [ {\n    \"name\" : \"Mr. Darnell Gerhold\",\n    \"placeId\" : \"69wg\",\n    \"languageCode\" : \"rxovsi93fsecgctwrupx85wy60alt81if3q4ojncv44r58te7\"\n  }, {\n    \"name\" : \"Elinor Ernser\",\n    \"placeId\" : \"dt26\",\n    \"languageCode\" : \"d1uirhyyyrjcqbkzkjtzk9mmwvpcfda8i4t\"\n  }, {\n    \"name\" : \"Josef Lindgren\",\n    \"placeId\" : \"sk79\",\n    \"languageCode\" : \"e03lhb0wqy48m168o065ac1rhlo33vuwgv4htw2swg858xjeeeyj6jppgktsyfqjy0g5qi1i4o9fpeuref7utdocq3r41adztesp4x1bmk32stqzg87sr5l8ok9bl1f5s7w6fslytqe7xdgjxiocwco81p5e0fpt820izz5w1fl8f3az13zmsoq1q7ts\"\n  }, {\n    \"name\" : \"Raleigh Durgan\",\n    \"placeId\" : \"43nx\",\n    \"languageCode\" : \"rcodhgkep5cg9uy2r9tyvq8xco7fqpj\"\n  } ],\n  \"viewCount\" : \"q46t9kdmy42vtt65bvmmyurgmtn604skyxn8ga70qh7qiwa242a0msdumh169v3hqbvwm0unf5403t0awnfe\",\n  \"mapsPublishStatus\" : \"UNSPECIFIED_MAPS_PUBLISH_STATUS\",\n  \"connections\" : [ {\n    \"target\" : {\n      \"id\" : \"1z7y\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"i4sn\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"pqx8\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"5740\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"u8kf\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"jm7m\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"282s\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"l31o\"\n    }\n  } ],\n  \"thumbnailUrl\" : \"https://web.example.mocklab.io/624443\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f6cd691d-c366-4854-b1d9-f73e966670a7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:19:42.57861Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photo.update",
          "schema" : {
            "description" : "Photo is used to store 360 photos along with photo metadata.",
            "properties" : {
              "captureTime" : {
                "description" : "Optional. Absolute time when the photo was captured. When the photo has no exif timestamp, this is used to set a timestamp in the photo metadata.",
                "format" : "google-datetime",
                "type" : "string"
              },
              "connections" : {
                "description" : "Optional. Connections to other photos. A connection represents the link from this photo to another photo.",
                "items" : {
                  "$ref" : "#/components/schemas/Connection"
                },
                "type" : "array"
              },
              "downloadUrl" : {
                "description" : "Output only. The download URL for the photo bytes. This field is set only when GetPhotoRequest.view is set to PhotoView.INCLUDE_DOWNLOAD_URL.",
                "readOnly" : true,
                "type" : "string"
              },
              "mapsPublishStatus" : {
                "description" : "Output only. Status in Google Maps, whether this photo was published or rejected.",
                "enum" : [ "UNSPECIFIED_MAPS_PUBLISH_STATUS", "PUBLISHED", "REJECTED_UNKNOWN" ],
                "readOnly" : true,
                "type" : "string"
              },
              "photoId" : {
                "$ref" : "#/components/schemas/PhotoId"
              },
              "places" : {
                "description" : "Optional. Places where this photo belongs.",
                "items" : {
                  "$ref" : "#/components/schemas/Place"
                },
                "type" : "array"
              },
              "pose" : {
                "$ref" : "#/components/schemas/Pose"
              },
              "shareLink" : {
                "description" : "Output only. The share link for the photo.",
                "readOnly" : true,
                "type" : "string"
              },
              "thumbnailUrl" : {
                "description" : "Output only. The thumbnail URL for showing a preview of the given photo.",
                "readOnly" : true,
                "type" : "string"
              },
              "transferStatus" : {
                "description" : "Output only. Status of rights transfer on this photo.",
                "enum" : [ "TRANSFER_STATUS_UNKNOWN", "NEVER_TRANSFERRED", "PENDING", "COMPLETED", "REJECTED", "EXPIRED", "CANCELLED", "RECEIVED_VIA_TRANSFER" ],
                "readOnly" : true,
                "type" : "string"
              },
              "uploadReference" : {
                "$ref" : "#/components/schemas/UploadRef"
              },
              "uploadTime" : {
                "description" : "Output only. Time when the image was uploaded.",
                "format" : "google-datetime",
                "readOnly" : true,
                "type" : "string"
              },
              "viewCount" : {
                "description" : "Output only. View count of the photo.",
                "format" : "int64",
                "readOnly" : true,
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  }, {
    "id" : "b528e0af-9f33-4eeb-bd8d-a2b4d3814c75",
    "name" : "After the client finishes uploading the photo with the returned UploadRef, Creat...",
    "request" : {
      "urlPath" : "/v1/photo",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"transferStatus\" : \"PENDING\",\n  \"captureTime\" : \"2023-02-06T14:01:42.574877Z\",\n  \"pose\" : {\n    \"gpsRecordTimestampUnixEpoch\" : \"2022-08-08T12:44:42.574931Z\",\n    \"altitude\" : 5.937491373569216E307,\n    \"accuracyMeters\" : 1.7676132281438733E38,\n    \"latLngPair\" : {\n      \"latitude\" : 1.6693314093450228E308,\n      \"longitude\" : 7.231466206051891E307\n    },\n    \"heading\" : 6.721284006340141E307,\n    \"level\" : {\n      \"number\" : 1.2574536459779552E308,\n      \"name\" : \"Heller\"\n    },\n    \"roll\" : 1.5635882183338263E308,\n    \"pitch\" : 1.6230933626119493E307\n  },\n  \"downloadUrl\" : \"https://web.example.mocklab.io/280591\",\n  \"uploadReference\" : {\n    \"uploadUrl\" : \"https://web.example.mocklab.io/579944\"\n  },\n  \"photoId\" : {\n    \"id\" : \"kfpl\"\n  },\n  \"shareLink\" : \"rikvs61pbhajtar5bwdaiqftlbzyztwcsxx4aor4901hfl4nyricg6c7macgmttsm5aj6rf35ujrxafalq0unhehrh8v3w5cv4ed8mon5g9lt5q80iy4y2xlqyi7wj4k91tdlqz0j9v9txtzydqn1a64t3m5v9xw19ffcj\",\n  \"uploadTime\" : \"2023-01-19T13:19:42.575318Z\",\n  \"places\" : [ {\n    \"name\" : \"Inocencia Ritchie\",\n    \"placeId\" : \"488l\",\n    \"languageCode\" : \"7gwxl0kfskin8nx29078dhjag2jrs60bymwdr54yof835lxr4revbhivzmty4rxku0dkisrsr54jtvtt4f7r82uv4wj94z\"\n  }, {\n    \"name\" : \"Tessie Becker\",\n    \"placeId\" : \"pikx\",\n    \"languageCode\" : \"egsi3zy1780us9xzxc3mq4tbgnjztbhkfxfry7bur5wcg3r43vhywr1gv3wzioruvkkt2ptxn9rc7xzz9n7os2w1gwub7aek9o003l18y46yg5htx1acjc64ylrvod9bymjcenztld11vsal4zqkmf3kn397ui4h2mt8q420v4k6865v9dfq0y\"\n  }, {\n    \"name\" : \"Ena Wyman\",\n    \"placeId\" : \"3eiw\",\n    \"languageCode\" : \"4d7j3ewe7vx6dg9jb2ludbezifcxz2efehg038uhotsf7e0ob1yawdrvs50lexfxh5qoyiwm70kf6i71uiif40e3pq9qw76m809f5oo744m7kb3ir0xw6uu5eami0b0t8j4gv6pfm8mb7pfcv8ufpuntrs63\"\n  }, {\n    \"name\" : \"Teodora Bins\",\n    \"placeId\" : \"r806\",\n    \"languageCode\" : \"v9jlh1c5yj0grf1nuihnx9bli9pje6ftomb2pt3tbab73hgd0h2ju6kwrfsytqdrd8aeocuj9chy2nb79ob0vjgcbifzefcv60rp9pbao\"\n  }, {\n    \"name\" : \"Xavier Senger\",\n    \"placeId\" : \"9k0r\",\n    \"languageCode\" : \"97dp8vi8wh11p7knq9iqfp3ct7y1lp2mlcm0gikfhhl9463y1bct1zr8b011kfdt8khce5qruw7blibyx352kcwm0v095d48bgxcu8c5wxoi2adk78hmuu08b101b55f9rnlg2bnixgmtr8h6qadlyyc150b94miih3a8p1z89e8o5vf35am7oqo17p\"\n  }, {\n    \"name\" : \"Sena Gulgowski\",\n    \"placeId\" : \"j928\",\n    \"languageCode\" : \"0ik2ieyn5810xnqv1ofr976ieotuo2be6h\"\n  } ],\n  \"viewCount\" : \"ki6ha3reebv4uytfa96w9spr0r2iomcm3u8w4eezgqbsp0ampxcqsyb07o68dyn7wvs9t0k0a7tw1htb1zi0wtdzkpk3oaodgfdouc3frwrv8q82iqg9ywfx786nl0qtaf8qlrid8nf10b3az0yz4jmuuad\",\n  \"mapsPublishStatus\" : \"UNSPECIFIED_MAPS_PUBLISH_STATUS\",\n  \"connections\" : [ {\n    \"target\" : {\n      \"id\" : \"i4g8\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"51sh\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"u1gg\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"4395\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"220a\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"n046\"\n    }\n  }, {\n    \"target\" : {\n      \"id\" : \"hkiy\"\n    }\n  } ],\n  \"thumbnailUrl\" : \"https://web.example.mocklab.io/559674\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b528e0af-9f33-4eeb-bd8d-a2b4d3814c75",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-03T14:19:42.576881Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "streetviewpublish.photo.create",
          "schema" : {
            "description" : "Photo is used to store 360 photos along with photo metadata.",
            "properties" : {
              "captureTime" : {
                "description" : "Optional. Absolute time when the photo was captured. When the photo has no exif timestamp, this is used to set a timestamp in the photo metadata.",
                "format" : "google-datetime",
                "type" : "string"
              },
              "connections" : {
                "description" : "Optional. Connections to other photos. A connection represents the link from this photo to another photo.",
                "items" : {
                  "$ref" : "#/components/schemas/Connection"
                },
                "type" : "array"
              },
              "downloadUrl" : {
                "description" : "Output only. The download URL for the photo bytes. This field is set only when GetPhotoRequest.view is set to PhotoView.INCLUDE_DOWNLOAD_URL.",
                "readOnly" : true,
                "type" : "string"
              },
              "mapsPublishStatus" : {
                "description" : "Output only. Status in Google Maps, whether this photo was published or rejected.",
                "enum" : [ "UNSPECIFIED_MAPS_PUBLISH_STATUS", "PUBLISHED", "REJECTED_UNKNOWN" ],
                "readOnly" : true,
                "type" : "string"
              },
              "photoId" : {
                "$ref" : "#/components/schemas/PhotoId"
              },
              "places" : {
                "description" : "Optional. Places where this photo belongs.",
                "items" : {
                  "$ref" : "#/components/schemas/Place"
                },
                "type" : "array"
              },
              "pose" : {
                "$ref" : "#/components/schemas/Pose"
              },
              "shareLink" : {
                "description" : "Output only. The share link for the photo.",
                "readOnly" : true,
                "type" : "string"
              },
              "thumbnailUrl" : {
                "description" : "Output only. The thumbnail URL for showing a preview of the given photo.",
                "readOnly" : true,
                "type" : "string"
              },
              "transferStatus" : {
                "description" : "Output only. Status of rights transfer on this photo.",
                "enum" : [ "TRANSFER_STATUS_UNKNOWN", "NEVER_TRANSFERRED", "PENDING", "COMPLETED", "REJECTED", "EXPIRED", "CANCELLED", "RECEIVED_VIA_TRANSFER" ],
                "readOnly" : true,
                "type" : "string"
              },
              "uploadReference" : {
                "$ref" : "#/components/schemas/UploadRef"
              },
              "uploadTime" : {
                "description" : "Output only. Time when the image was uploaded.",
                "format" : "google-datetime",
                "readOnly" : true,
                "type" : "string"
              },
              "viewCount" : {
                "description" : "Output only. View count of the photo.",
                "format" : "int64",
                "readOnly" : true,
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    }
  } ]
}