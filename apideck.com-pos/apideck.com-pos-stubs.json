{
  "mappings" : [ {
    "id" : "7cfdf7a0-4e17-4f1b-beee-21bdc252bdf8",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/d9ch",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7cfdf7a0-4e17-4f1b-beee-21bdc252bdf8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.030959Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "2e3cb7a7-1ad2-47ff-857c-b8d64fd8d686",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/or02",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2e3cb7a7-1ad2-47ff-857c-b8d64fd8d686",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.030786Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "477bc880-031f-47ab-9a52-c8e52b8769a5",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/t6v1",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "477bc880-031f-47ab-9a52-c8e52b8769a5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.030555Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "59413f98-e5a3-4f93-ae0e-daa2de18dbf8",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/rir6",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "59413f98-e5a3-4f93-ae0e-daa2de18dbf8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.030354Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "d5c23fdd-de55-4178-a277-c08290d898dc",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/1ac6",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d5c23fdd-de55-4178-a277-c08290d898dc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.030014Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "925886a2-bd1d-451a-86ab-07bb7b5a4dd4",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/3x2y",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Tenders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "925886a2-bd1d-451a-86ab-07bb7b5a4dd4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.029693Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Tenders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateTenderResponse"
          }
        }
      }
    }
  }, {
    "id" : "b04c5afa-caab-4b7c-83ac-5357c65995ca",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/68u7",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b04c5afa-caab-4b7c-83ac-5357c65995ca",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.029475Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "8fddd2b9-33a1-414c-8b33-31dc49551a38",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/673y",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8fddd2b9-33a1-414c-8b33-31dc49551a38",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.029184Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "e3ae2621-ea50-4706-803d-67dba96cfe8e",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/05p4",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e3ae2621-ea50-4706-803d-67dba96cfe8e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.02895Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "1c96a6f1-e7f8-4c82-b415-6db8ce6e3e71",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/q2w5",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1c96a6f1-e7f8-4c82-b415-6db8ce6e3e71",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.028748Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "a2851fc4-d957-4514-897f-95960ee9b11c",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/36ur",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a2851fc4-d957-4514-897f-95960ee9b11c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.028536Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "c3099277-2b92-4a28-9caf-cb7538463205",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/35bh",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"allows_tipping\" : false,\n    \"opens_cash_drawer\" : false,\n    \"hidden\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"editable\" : true,\n    \"updated_by\" : \"12345\",\n    \"active\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"label\" : \"Cash\",\n    \"created_by\" : \"12345\",\n    \"key\" : \"com.clover.tender.cash\"\n  },\n  \"resource\" : \"Tenders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c3099277-2b92-4a28-9caf-cb7538463205",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.028136Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Tender"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Tenders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetTenderResponse",
            "x-graphql-type-name" : "Tender"
          }
        }
      }
    }
  }, {
    "id" : "aa74ab1f-11ea-4e80-b3b2-1e2498f3a3b4",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/j51d",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "aa74ab1f-11ea-4e80-b3b2-1e2498f3a3b4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.027877Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "73a9795e-12da-4c6a-a439-05775bac0479",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/x0q0",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "73a9795e-12da-4c6a-a439-05775bac0479",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.027676Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "e72a53c4-4f0a-43e9-a8c9-3e45c56acb18",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/r021",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e72a53c4-4f0a-43e9-a8c9-3e45c56acb18",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.027388Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "d7593553-3989-468b-9133-cf891047d579",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/9w9z",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d7593553-3989-468b-9133-cf891047d579",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.027147Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "a8b912dd-fe77-4c7d-a481-7ecde885e656",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/s1e3",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a8b912dd-fe77-4c7d-a481-7ecde885e656",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.026895Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "f9623dda-4751-4df4-a1e8-9c310e496181",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/boui",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Tenders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f9623dda-4751-4df4-a1e8-9c310e496181",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.026658Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Tenders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteTenderResponse"
          }
        }
      }
    }
  }, {
    "id" : "7efe85ce-8f61-4bad-b0d0-edf32262dd37",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7efe85ce-8f61-4bad-b0d0-edf32262dd37",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.026442Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "f7e609ba-744c-476d-8665-7c2b2eaebc33",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f7e609ba-744c-476d-8665-7c2b2eaebc33",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.02633Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "6e06321a-e4b0-42d9-a273-aaa85a961a8f",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6e06321a-e4b0-42d9-a273-aaa85a961a8f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.026108Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "9430497b-a5f4-43d3-83a7-988f2ae8561c",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9430497b-a5f4-43d3-83a7-988f2ae8561c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.026Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "a4a48562-b346-438d-8d9e-e262244c517b",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a4a48562-b346-438d-8d9e-e262244c517b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.025888Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "661765b6-bcdf-41c9-8ed4-a70dcf3cdcbf",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Tenders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "661765b6-bcdf-41c9-8ed4-a70dcf3cdcbf",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.025733Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Tenders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateTenderResponse"
          }
        }
      }
    }
  }, {
    "id" : "b4ba5a28-f11f-48ed-9d86-c0f7b37526b9",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b4ba5a28-f11f-48ed-9d86-c0f7b37526b9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.025597Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "259b1d34-365c-4503-bdb4-0c2fd53fcf57",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "259b1d34-365c-4503-bdb4-0c2fd53fcf57",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.025483Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "cb7be594-12ab-4096-aaa5-815b8780b760",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "cb7be594-12ab-4096-aaa5-815b8780b760",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.025307Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "d77cb03d-c436-41ae-b9c3-4942a5e8c047",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d77cb03d-c436-41ae-b9c3-4942a5e8c047",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.025175Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "36090671-7c9e-468e-95af-3c0988c4f25b",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "36090671-7c9e-468e-95af-3c0988c4f25b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.02493Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "cd422530-463b-426a-9b64-afc9a55bf2cf",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"allows_tipping\" : true,\n    \"opens_cash_drawer\" : true,\n    \"hidden\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"editable\" : true,\n    \"updated_by\" : \"12345\",\n    \"active\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"label\" : \"Cash\",\n    \"created_by\" : \"12345\",\n    \"key\" : \"com.clover.tender.cash\"\n  }, {\n    \"allows_tipping\" : true,\n    \"opens_cash_drawer\" : false,\n    \"hidden\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"editable\" : true,\n    \"updated_by\" : \"12345\",\n    \"active\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"label\" : \"Cash\",\n    \"created_by\" : \"12345\",\n    \"key\" : \"com.clover.tender.cash\"\n  }, {\n    \"allows_tipping\" : false,\n    \"opens_cash_drawer\" : true,\n    \"hidden\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"editable\" : true,\n    \"updated_by\" : \"12345\",\n    \"active\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"label\" : \"Cash\",\n    \"created_by\" : \"12345\",\n    \"key\" : \"com.clover.tender.cash\"\n  }, {\n    \"allows_tipping\" : false,\n    \"opens_cash_drawer\" : true,\n    \"hidden\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"editable\" : true,\n    \"updated_by\" : \"12345\",\n    \"active\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"label\" : \"Cash\",\n    \"created_by\" : \"12345\",\n    \"key\" : \"com.clover.tender.cash\"\n  } ],\n  \"resource\" : \"Tenders\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"clover\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "cd422530-463b-426a-9b64-afc9a55bf2cf",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.0247Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Tender"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Tenders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetTendersResponse",
            "x-graphql-type-name" : "TenderList"
          }
        }
      }
    }
  }, {
    "id" : "8c603f62-7269-42bc-ab2a-db590abb6cd2",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/z1z7",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8c603f62-7269-42bc-ab2a-db590abb6cd2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.024316Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "8bea28ee-49de-4bad-991c-4a109f811c57",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/r56q",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8bea28ee-49de-4bad-991c-4a109f811c57",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.02411Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "0436fb1c-db72-423f-98c1-5c56995ff6eb",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/94jx",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0436fb1c-db72-423f-98c1-5c56995ff6eb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.023867Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "54481a1f-1622-4c31-b76b-1977c4514a1d",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/k369",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "54481a1f-1622-4c31-b76b-1977c4514a1d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.023618Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "7b1c8cf9-f246-4e0d-b3cf-c5f9350882c2",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/4xkw",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7b1c8cf9-f246-4e0d-b3cf-c5f9350882c2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.023292Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "f38531c9-1bb4-41a4-b9a4-4706c83df1a4",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/j148",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"PosPayments\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f38531c9-1bb4-41a4-b9a4-4706c83df1a4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.023039Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "PosPayments",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdatePosPaymentResponse"
          }
        }
      }
    }
  }, {
    "id" : "aca1ca0a-eab0-4e52-ba4e-54f7d42b5291",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/g3zo",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "aca1ca0a-eab0-4e52-ba4e-54f7d42b5291",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.022822Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "c2eb7167-3c83-40ea-bc0e-20d4b9d17dbe",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/x96b",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c2eb7167-3c83-40ea-bc0e-20d4b9d17dbe",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.022613Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "b2bf8016-4598-47bc-990c-83daf6c057ce",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/h4h9",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b2bf8016-4598-47bc-990c-83daf6c057ce",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.022299Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "42cc778a-5d32-42b3-95eb-2ce7ca7b9418",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/66by",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "42cc778a-5d32-42b3-95eb-2ce7ca7b9418",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.022028Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "20283ce6-5b09-42f7-a657-77740eaa4865",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/54j0",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "20283ce6-5b09-42f7-a657-77740eaa4865",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.021758Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "1cb540e1-d67d-486d-9154-3f6eba98ed5c",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/4j77",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"change_back_cash_amount\" : 20,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"tender_id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"external\",\n    \"location_id\" : \"12345\",\n    \"external_payment_id\" : \"12345\",\n    \"approved\" : 37.5,\n    \"total\" : 37.5,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"app_fee\" : 3,\n    \"currency\" : \"USD\",\n    \"refunded\" : 37.5,\n    \"tip\" : 7,\n    \"id\" : \"12345\",\n    \"cash\" : {\n      \"amount\" : { },\n      \"charge_back_amount\" : { }\n    },\n    \"external_details\" : {\n      \"source_fee_amount\" : 2.5,\n      \"source\" : \"kedj16bfuv6kxzf4ropjyhhceavswlu00b5j5mxhlt7ublemgfy15x8c6da8xinv7l8dk7mvemxsrtiqxucccg1v3q3x36nebye2p1rb7jam3rvcxuzbz970ormwy3xc1d81kjg4myz6bn\",\n      \"source_id\" : \"674d\",\n      \"type\" : \"bank_transfer\"\n    },\n    \"bank_account\" : {\n      \"country\" : \"US\",\n      \"account_ownership_type\" : \"6705pv7357eaegz0w9fxf51b0iewnkaayop\",\n      \"bank_name\" : \"Andy Boehm\",\n      \"fingerprint\" : \"t3h7c7dyyog5icwuww0fjh62e517intumgfjiwmfa\",\n      \"transfer_type\" : \"u1w\",\n      \"ach_details\" : {\n        \"account_type\" : \"v4gtw061iv7epe8bq\",\n        \"routing_number\" : \"id1yp3j3sgl57qp91jkghb4ymtq017k41cxu9nbjeacvhh\",\n        \"account_number_suffix\" : \"i9z\"\n      },\n      \"statement_description\" : \"Tenetur illum quibusdam. Sint a non similique in minus ea veniam. Omnis consequuntur qui consequatur aut minima culpa illo. Perferendis est placeat libero corrupti reiciendis facere. Ex asperiores hic.\"\n    },\n    \"card_details\" : {\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"discover\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    },\n    \"amount\" : 27.5,\n    \"wallet\" : {\n      \"status\" : \"other\"\n    },\n    \"device_id\" : \"12345\",\n    \"processing_fees\" : [ {\n      \"amount\" : 1.05,\n      \"effective_at\" : \"2020-09-30T07:43:32.000Z\",\n      \"processing_type\" : \"initial\"\n    } ],\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"tax\" : 20,\n    \"created_by\" : \"12345\",\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"source_id\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"order_id\" : \"12345\",\n    \"status\" : \"approved\"\n  },\n  \"resource\" : \"PosPayments\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1cb540e1-d67d-486d-9154-3f6eba98ed5c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.021503Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/PosPayment"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "PosPayments",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetPosPaymentResponse",
            "x-graphql-type-name" : "PosPayment"
          }
        }
      }
    }
  }, {
    "id" : "1e2dfa1b-19ec-4f24-bb82-554373801bb3",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/5531",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1e2dfa1b-19ec-4f24-bb82-554373801bb3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.020344Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "93e1bd1a-98da-499c-9a20-d9bd0e6b895f",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/wx1y",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "93e1bd1a-98da-499c-9a20-d9bd0e6b895f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.020132Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "9a6ff3f7-dc10-40b4-9e4e-32a2799aa86a",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/tv2p",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9a6ff3f7-dc10-40b4-9e4e-32a2799aa86a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.019865Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "8d99b0d8-590f-430c-9573-2fd4bedb2742",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/jeuv",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8d99b0d8-590f-430c-9573-2fd4bedb2742",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.019593Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "964382f1-8882-4deb-9ffb-26b66564f3f5",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/n141",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "964382f1-8882-4deb-9ffb-26b66564f3f5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.019314Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "d775b058-a2b4-4aba-b8bd-cd0cc91324d3",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/gh3b",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"PosPayments\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d775b058-a2b4-4aba-b8bd-cd0cc91324d3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.018993Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "PosPayments",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeletePosPaymentResponse"
          }
        }
      }
    }
  }, {
    "id" : "de3cb35c-06e8-44ad-9ebf-c1b25053e8c5",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "de3cb35c-06e8-44ad-9ebf-c1b25053e8c5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.018735Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "d02c3e47-ea8b-4ca8-966c-e8b37b0d80e4",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d02c3e47-ea8b-4ca8-966c-e8b37b0d80e4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.018606Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "1df50c01-ba84-4df8-af29-f01bb88eb50b",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1df50c01-ba84-4df8-af29-f01bb88eb50b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.018441Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "3689070b-98c7-4593-ad2c-34aa261479ff",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3689070b-98c7-4593-ad2c-34aa261479ff",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.018286Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "c0265e36-934c-4b7e-809f-44f382e2931a",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c0265e36-934c-4b7e-809f-44f382e2931a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.018105Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "f2123fdd-369f-497d-901c-3c364699bd6d",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"PosPayments\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f2123fdd-369f-497d-901c-3c364699bd6d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.017936Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "PosPayments",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreatePosPaymentResponse"
          }
        }
      }
    }
  }, {
    "id" : "e498cd4a-1c71-4b1b-881a-3a627599b28b",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e498cd4a-1c71-4b1b-881a-3a627599b28b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.017763Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "8419e6bc-777f-4e83-bb80-442118e8c298",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8419e6bc-777f-4e83-bb80-442118e8c298",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.017569Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "c42007b8-7986-444d-b3cc-e619b932738f",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c42007b8-7986-444d-b3cc-e619b932738f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.017406Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "57a49476-0490-4929-86e4-ea72674d1843",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "57a49476-0490-4929-86e4-ea72674d1843",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.017278Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "1d190188-2287-4fe4-8c5f-d0516e0629fe",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1d190188-2287-4fe4-8c5f-d0516e0629fe",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.017148Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "427c10ac-c6b6-486b-9814-01f2673d3ced",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"change_back_cash_amount\" : 20,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"tender_id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"external\",\n    \"location_id\" : \"12345\",\n    \"external_payment_id\" : \"12345\",\n    \"approved\" : 37.5,\n    \"total\" : 37.5,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"app_fee\" : 3,\n    \"currency\" : \"USD\",\n    \"refunded\" : 37.5,\n    \"tip\" : 7,\n    \"id\" : \"12345\",\n    \"cash\" : {\n      \"amount\" : { },\n      \"charge_back_amount\" : { }\n    },\n    \"external_details\" : {\n      \"source_fee_amount\" : 2.5,\n      \"source\" : \"aq5nld1t0ltlzc6q0z2mw7lzet7mmcstv9nsejoxj38kazciiebwtb9kt39jn25arqtrc3egaqabehmthx4l\",\n      \"source_id\" : \"2b47\",\n      \"type\" : \"external\"\n    },\n    \"bank_account\" : {\n      \"country\" : \"US\",\n      \"account_ownership_type\" : \"hqzqkk3u\",\n      \"bank_name\" : \"Carlton Buckridge\",\n      \"fingerprint\" : \"9wop06z6j68kteehi8sljtqevarfydhws6ffclq1rle01ohhrq432s9y70g3wvlh4kwtn1lvd470efkdade23tt4nxakg8o4opptm031lguo\",\n      \"transfer_type\" : \"birxjwxzu17pl73\",\n      \"ach_details\" : {\n        \"account_type\" : \"73561uhkctk9b9q247m\",\n        \"routing_number\" : \"h80n7rvl93p9rzsqhv7id7zusni6htgxfs\",\n        \"account_number_suffix\" : \"gqn\"\n      },\n      \"statement_description\" : \"Et dolores quae delectus est quae. Consequatur atque et iste. Deserunt aut illum voluptas consectetur nobis possimus similique.\"\n    },\n    \"card_details\" : {\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"discover-diners\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    },\n    \"amount\" : 27.5,\n    \"wallet\" : {\n      \"status\" : \"failed\"\n    },\n    \"device_id\" : \"12345\",\n    \"processing_fees\" : [ {\n      \"amount\" : 1.05,\n      \"effective_at\" : \"2020-09-30T07:43:32.000Z\",\n      \"processing_type\" : \"initial\"\n    } ],\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"tax\" : 20,\n    \"created_by\" : \"12345\",\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"source_id\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"order_id\" : \"12345\",\n    \"status\" : \"approved\"\n  }, {\n    \"change_back_cash_amount\" : 20,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"tender_id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"external\",\n    \"location_id\" : \"12345\",\n    \"external_payment_id\" : \"12345\",\n    \"approved\" : 37.5,\n    \"total\" : 37.5,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"app_fee\" : 3,\n    \"currency\" : \"USD\",\n    \"refunded\" : 37.5,\n    \"tip\" : 7,\n    \"id\" : \"12345\",\n    \"cash\" : {\n      \"amount\" : { },\n      \"charge_back_amount\" : { }\n    },\n    \"external_details\" : {\n      \"source_fee_amount\" : 2.5,\n      \"source\" : \"ha8ywr1xgvvan1pm6swvkz35cju2n0gv7qe9f13yc55flnevr5xvj0jye0fdcjugobn7n3nn479hp7q5lzbt6ccsp1azlgkfhk81mppocisncc07lnjz5q8tnwnm76g1shoyiwdw1z416vum9q8vjjhnzb74xjo2n276cvmklgpo2vqmrifltm5qd4d0sfqqp3ydzjmpezdrhgdr6kzrjgtgalxbcfgxawcw0wo4vzby7c8cip0v4kprskw8\",\n      \"source_id\" : \"ix73\",\n      \"type\" : \"bank_transfer\"\n    },\n    \"bank_account\" : {\n      \"country\" : \"US\",\n      \"account_ownership_type\" : \"82a3mn\",\n      \"bank_name\" : \"Julio Volkman\",\n      \"fingerprint\" : \"ynh3q474djiqdns8ils0fobbph9bojn4168meri8qy1ft5bfzxsnxea78neyz3ma1c227uhyxodarofd3pu5irj03iqd5m46a3w2l2dsttpamt5jx55ky2naemsw3pyj2piac2xbmdz80jsomhim9z1lsuhd6kfeok3usuiqag1yoewypsxu3rxkxsm10tru21dr5nebed8aq3xv7460gm7sujslvv658si7swbvdeg62yk7jjtkw3j\",\n      \"transfer_type\" : \"eak58g02jtqlpe2hzxf13ds3ujfpfn6sweqzlqt2r0jqu\",\n      \"ach_details\" : {\n        \"account_type\" : \"avbi51tzucfw9ub5cj301294\",\n        \"routing_number\" : \"qmkd1j4aqmr5uj7gj0m\",\n        \"account_number_suffix\" : \"gho\"\n      },\n      \"statement_description\" : \"Ratione doloribus non explicabo et id. Optio cupiditate sit nostrum voluptatibus tempora ut. Qui nesciunt numquam ut nemo reiciendis.\"\n    },\n    \"card_details\" : {\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"jcb\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    },\n    \"amount\" : 27.5,\n    \"wallet\" : {\n      \"status\" : \"other\"\n    },\n    \"device_id\" : \"12345\",\n    \"processing_fees\" : [ {\n      \"amount\" : 1.05,\n      \"effective_at\" : \"2020-09-30T07:43:32.000Z\",\n      \"processing_type\" : \"initial\"\n    } ],\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"tax\" : 20,\n    \"created_by\" : \"12345\",\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"source_id\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"order_id\" : \"12345\",\n    \"status\" : \"approved\"\n  } ],\n  \"resource\" : \"PosPayments\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "427c10ac-c6b6-486b-9814-01f2673d3ced",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.016957Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/PosPayment"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "PosPayments",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetPosPaymentsResponse",
            "x-graphql-type-name" : "PosPaymentList"
          }
        }
      }
    }
  }, {
    "id" : "1eb251fb-b3d9-425c-8893-48341938195e",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/q4j8/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1eb251fb-b3d9-425c-8893-48341938195e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.015288Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "18368a90-df2b-42c5-9ced-8c59bb53a9a4",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/8ebq/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "18368a90-df2b-42c5-9ced-8c59bb53a9a4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.015063Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "b32722ce-0b35-42bf-bf4e-1b71afd98338",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/y7pq/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b32722ce-0b35-42bf-bf4e-1b71afd98338",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.014764Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "d2113c5f-47ed-42e4-8796-59be7e62cb9c",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/y7t9/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d2113c5f-47ed-42e4-8796-59be7e62cb9c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.01456Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "69b00734-28d0-48b8-af31-2759bfd1a41a",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/9333/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "69b00734-28d0-48b8-af31-2759bfd1a41a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.014362Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "4fe2cf83-8f86-452e-90d1-5717604b8bb7",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/231a/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"orders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4fe2cf83-8f86-452e-90d1-5717604b8bb7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.014021Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateOrderResponse"
          }
        }
      }
    }
  }, {
    "id" : "16a3679f-ea59-4ce9-84d9-9b77eaa933cf",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/w5v2",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "16a3679f-ea59-4ce9-84d9-9b77eaa933cf",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.013803Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "52ce899e-bb15-46ff-af63-46c6c0af151f",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/qfux",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "52ce899e-bb15-46ff-af63-46c6c0af151f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.013608Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "45ca1f29-c0b4-4251-be7c-7b6ade89001e",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/5zut",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "45ca1f29-c0b4-4251-be7c-7b6ade89001e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.013365Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "5e3461d1-7f4e-47e4-9476-664454a8a07b",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/i11d",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5e3461d1-7f4e-47e4-9476-664454a8a07b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.01316Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "d87dede2-d8d2-473c-bb33-0b407cbc23da",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/xj3b",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d87dede2-d8d2-473c-bb33-0b407cbc23da",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.012941Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "304abe11-a828-4c06-8459-50e3fceab064",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/udrn",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"orders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "304abe11-a828-4c06-8459-50e3fceab064",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.012484Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateOrderResponse"
          }
        }
      }
    }
  }, {
    "id" : "4177b115-5e7c-49ef-8e0a-4eb0f32ff85e",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/a9i1",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4177b115-5e7c-49ef-8e0a-4eb0f32ff85e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.012158Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "64db4298-0123-48b5-b389-7f1640f3051b",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/5039",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "64db4298-0123-48b5-b389-7f1640f3051b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.011934Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "4b433e99-188c-4f5f-8f7f-fe8f45293aa3",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/gm2s",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4b433e99-188c-4f5f-8f7f-fe8f45293aa3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.01168Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "9dc88e01-94a7-4dc8-a6b7-786540629b4e",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/9231",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9dc88e01-94a7-4dc8-a6b7-786540629b4e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.011459Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "2a2aa5c7-6128-4cce-b24c-59555ddd48be",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/02nw",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2a2aa5c7-6128-4cce-b24c-59555ddd48be",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.011193Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "060aa68a-537a-4088-862f-c4ba9e4e5d83",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/lumm",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"note\" : \"0vc9l7tuv7b8b2q8oosv3fq4ycadcry63nnf3am96ufte6s8r7hj0nyva0yyh9rab3ruybmm00bnsspcmdytgazbh2ni05iftbrs021arkjp4eng4rolwipges2g0yjez28v\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Dolorum omnis delectus aut.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"pending\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : {\n          \"curbside_details\" : \"lgaummz3zk2a1m1nmnxrckfuqnndx3vy0y551neftz8e6uflnfxg1fg39w9fqrq9hcr4seen5yfcgu84svbea853ju1smk6t6slra1x4f4pyim41v0dmeq1i6mf9jgq0lzmxnbsimr0i8r2neqht\",\n          \"buyer_arrived_at\" : \"2016-09-04T23:59:33.123Z\"\n        },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : {\n          \"address\" : { },\n          \"phone_number\" : {\n            \"number\" : \"111-111-1111\"\n          },\n          \"customer_id\" : \"12345\",\n          \"display_name\" : \"Elon Musk\",\n          \"email\" : {\n            \"email\" : \"elon@musk.com\"\n          }\n        },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"failed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : {\n          \"curbside_details\" : \"4ga3j3wqkx0puit2m1ikfogk\",\n          \"buyer_arrived_at\" : \"2016-09-04T23:59:33.123Z\"\n        },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : {\n          \"address\" : { },\n          \"phone_number\" : {\n            \"number\" : \"111-111-1111\"\n          },\n          \"customer_id\" : \"12345\",\n          \"display_name\" : \"Elon Musk\",\n          \"email\" : {\n            \"email\" : \"elon@musk.com\"\n          }\n        },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"proposed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : {\n          \"curbside_details\" : \"ycz7yqqu41fsel0e8q58rtrs3tn9fkzio78496tyy1kb7bnn5wfjc2pvoak6a57m123aj26927201f1zswl6beer8hnlfpjubdeqbn597iygi58tm30ke5amjsrjdyrwism8bsos26fvvoiz6o4anettqi9zqiz3loy3pjc1yznogumg0ckjwfgk0s56ltgzsg\",\n          \"buyer_arrived_at\" : \"2016-09-04T23:59:33.123Z\"\n        },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : {\n          \"address\" : { },\n          \"phone_number\" : {\n            \"number\" : \"111-111-1111\"\n          },\n          \"customer_id\" : \"12345\",\n          \"display_name\" : \"Elon Musk\",\n          \"email\" : {\n            \"email\" : \"elon@musk.com\"\n          }\n        },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"cancelled\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : {\n          \"curbside_details\" : \"lrf608272y7xu7hml6dt0bvn7169pr71pwtkdgtmtrla0875847mca3djsrtrkug8csm0fol4w5fwmn3k3pa3fyrukg9640cujgo8b4y3uh6oh3ad3y0miwjnkuwzbk40tzf3eovjzjjyptnp5uplrvb2lhf4oo4xnv3c5gmfizh3xwfhcv8kpwh4t8qq9o4aglvmnwpks2tz7d4rkv6nx4z1zos1kuoyg8ni6oit74eu9m4\",\n          \"buyer_arrived_at\" : \"2016-09-04T23:59:33.123Z\"\n        },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : {\n          \"address\" : { },\n          \"phone_number\" : {\n            \"number\" : \"111-111-1111\"\n          },\n          \"customer_id\" : \"12345\",\n          \"display_name\" : \"Elon Musk\",\n          \"email\" : {\n            \"email\" : \"elon@musk.com\"\n          }\n        },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"other\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : {\n          \"curbside_details\" : \"r8klyyu48m99xp2katczydewc1ngyyfbf47b4byod5e1k3euzl\",\n          \"buyer_arrived_at\" : \"2016-09-04T23:59:33.123Z\"\n        },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : {\n          \"address\" : { },\n          \"phone_number\" : {\n            \"number\" : \"111-111-1111\"\n          },\n          \"customer_id\" : \"12345\",\n          \"display_name\" : \"Elon Musk\",\n          \"email\" : {\n            \"email\" : \"elon@musk.com\"\n          }\n        },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"failed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : {\n          \"curbside_details\" : \"00vr48kyc2eq0qoaa8lnjbgrnprabmek9101v3rru3mldhcdn8v86mnf2vumehh9ui1rmljq771ecavepwfofy1yvhmpmudz95wmr0tncx0xdfwdvn738m79hc90hzc13qmtth8o96ndpjgje6c9ku0e6kufd2pvgsv2k9wjpl2r2hmuxdq53qxzf48e1d9tbsnzoyybh3lrivq01jlo6axbn4\",\n          \"buyer_arrived_at\" : \"2016-09-04T23:59:33.123Z\"\n        },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : {\n          \"address\" : { },\n          \"phone_number\" : {\n            \"number\" : \"111-111-1111\"\n          },\n          \"customer_id\" : \"12345\",\n          \"display_name\" : \"Elon Musk\",\n          \"email\" : {\n            \"email\" : \"elon@musk.com\"\n          }\n        },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"other\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"felica\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"interac\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"eftpos\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"square-gift-card\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"china-unionpay\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"discover-diners\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"ebt\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"square-gift-card\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  },\n  \"resource\" : \"orders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "060aa68a-537a-4088-862f-c4ba9e4e5d83",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.010911Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Order"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetOrderResponse",
            "x-graphql-type-name" : "Order"
          }
        }
      }
    }
  }, {
    "id" : "8ab8abcb-2a43-44be-97c8-2202529d5640",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/1v5h",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8ab8abcb-2a43-44be-97c8-2202529d5640",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.005407Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "cedb56d4-591a-4043-8589-cb7d9c14c439",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/21w7",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "cedb56d4-591a-4043-8589-cb7d9c14c439",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.005207Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "274bd643-319f-4263-b22e-267aafd22392",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/o704",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "274bd643-319f-4263-b22e-267aafd22392",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.004963Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "d1dbb6cd-1350-4eff-a9b0-e73f8a183389",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/ey5x",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d1dbb6cd-1350-4eff-a9b0-e73f8a183389",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.004703Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "28e60402-a995-4d86-b91b-6aa8478679c2",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/l2i7",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "28e60402-a995-4d86-b91b-6aa8478679c2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.004519Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "9811f608-f2be-47cd-920f-fa7c86ae11d9",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/ziu5",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"orders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9811f608-f2be-47cd-920f-fa7c86ae11d9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.004205Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteOrderResponse"
          }
        }
      }
    }
  }, {
    "id" : "4e7418f3-b182-43fb-b941-da0f61d885a9",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4e7418f3-b182-43fb-b941-da0f61d885a9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.00382Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "5d4cb4b4-31cd-4802-bc95-c88d97b96058",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5d4cb4b4-31cd-4802-bc95-c88d97b96058",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.003643Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "70fc6b21-f4d8-42c8-aa41-a8498642d15e",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "70fc6b21-f4d8-42c8-aa41-a8498642d15e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.003493Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "a2c573ca-6cf5-4d9e-b89a-80414fee78ac",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a2c573ca-6cf5-4d9e-b89a-80414fee78ac",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.003384Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "1635c3d9-6629-4286-8f1a-3b0d16342cd1",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1635c3d9-6629-4286-8f1a-3b0d16342cd1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.003263Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "cd34d2e5-4f13-4d41-be0d-b7eff8dacace",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"orders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "cd34d2e5-4f13-4d41-be0d-b7eff8dacace",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.003119Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateOrderResponse"
          }
        }
      }
    }
  }, {
    "id" : "3a9d8b43-85b3-4990-a3da-125ce9a876b3",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3a9d8b43-85b3-4990-a3da-125ce9a876b3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.00297Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "7490fa6b-c2c8-4ece-9548-803f5ce7b233",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7490fa6b-c2c8-4ece-9548-803f5ce7b233",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.002762Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "9653f87b-3904-44c0-815a-7615198b2a47",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9653f87b-3904-44c0-815a-7615198b2a47",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.002594Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "e9efd25e-c479-4510-8cae-e1a107a3d6a0",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e9efd25e-c479-4510-8cae-e1a107a3d6a0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.00247Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "a9a569d0-6209-42f5-95dd-c432ad8b40e8",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a9a569d0-6209-42f5-95dd-c432ad8b40e8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.002334Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "3fb93857-6941-4040-869e-fc69691f16f8",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"note\" : \"mua0cqxdbjfu04loomuolq83oswm75g937f7upmziyryavqx6mvgndxxacsth3re4gt6xtlu79pxt5ztrbz2g32z36l5fp36t2s35q9btrtg3l3nqdf\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Repellendus commodi commodi reiciendis fuga vero.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"completed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"cancelled\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"proposed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"reserved\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"reserved\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"proposed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"cancelled\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"other\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"visa\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"discover\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"visa\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"other\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"discover-diners\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"mastercard\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"eftpos\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  }, {\n    \"note\" : \"vj7eyhstottnm7kcujctzb5b67nrsko059j5ftfazbeqa0j8kiyq8hv0g2kinlhskxffp49cut065d69n5eqwly7kjlnagvn70048pmhw1le1ml72c9ynx6w95aqww05316h0ary5xva3a\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Quos consectetur adipisci atque quia dolorum.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"pending\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"failed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"failed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"failed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"cancelled\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"square-capital-card\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"jcb\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"square-capital-card\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"ebt\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  }, {\n    \"note\" : \"qh9ennitdll9xg27tha5ji2kj05xngfwob9r77falrkjra8ca12923lx3b66h2ftp6mnpz55x3ufpxh9rghq1fc7smalsqlr\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Aut libero repellat eum consequatur necessitatibus.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"proposed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"failed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"prepared\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"proposed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"completed\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"other\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"china-unionpay\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"visa\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"discover\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  }, {\n    \"note\" : \"zrwu4lkcxxeg5t9pqxmk1zan6tqw244tsipyvrsmuxwfh3ke8euse\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Quia id nemo ut sit ut numquam iure.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"proposed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"other\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"cancelled\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"reserved\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"cancelled\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"prepared\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"cancelled\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"visa\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"ebt\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"china-unionpay\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  }, {\n    \"note\" : \"6cci966q28woqyf7kqy5kepgnlyhshq59myqnyonsods2lt7rlifcva3\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Error quo pariatur amet et dolor nam illum.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"pending\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"completed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"reserved\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"completed\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"other\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"square-gift-card\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"discover\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"square-capital-card\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"visa\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"square-capital-card\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"visa\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"interac\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  }, {\n    \"note\" : \"bm062f\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Doloribus placeat possimus est.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"failed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"failed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"other\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"reserved\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"proposed\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"felica\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"square-gift-card\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"mastercard\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"mastercard\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"mastercard\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"visa\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  }, {\n    \"note\" : \"h1bno9syz2y4jpki9ln4espts8o0lb26ykcxlb2estgodinos0cgslug2sght5hbfzf1h8vr\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Et dolorem expedita ad voluptatem delectus.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"cancelled\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"proposed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"proposed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"cancelled\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"cancelled\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"prepared\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"failed\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"square-gift-card\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"felica\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"interac\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"amex\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"eftpos\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"ebt\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  } ],\n  \"resource\" : \"orders\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"clover\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3fb93857-6941-4040-869e-fc69691f16f8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:03.002111Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Order"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetOrdersResponse",
            "x-graphql-type-name" : "OrderList"
          }
        }
      }
    }
  }, {
    "id" : "192dba03-4394-41de-a060-32ebb3ff8841",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/g313",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "192dba03-4394-41de-a060-32ebb3ff8841",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.976533Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "50bee8c7-5912-4023-9d48-6c18346b1910",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/093g",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "50bee8c7-5912-4023-9d48-6c18346b1910",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.976229Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "e631c804-7f2a-42df-afc8-bccc81f62d66",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/tm23",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e631c804-7f2a-42df-afc8-bccc81f62d66",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.975898Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "46507545-824e-497b-926a-a9d0e5820d41",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/50o8",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "46507545-824e-497b-926a-a9d0e5820d41",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.975616Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "0028ba7a-62ef-4294-a12a-cc8e7f50e304",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/4o96",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0028ba7a-62ef-4294-a12a-cc8e7f50e304",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.975399Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "aa699f7b-1309-4f50-b809-c6ca9f1999f2",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/a59s",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"OrderTypes\",\n  \"service\" : \"clover\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "aa699f7b-1309-4f50-b809-c6ca9f1999f2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.975143Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "OrderTypes",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateOrderTypeResponse"
          }
        }
      }
    }
  }, {
    "id" : "faa0fd51-d187-4c22-a5a7-6f3bc6604b6d",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/n8hk",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "faa0fd51-d187-4c22-a5a7-6f3bc6604b6d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.974865Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "1be77c4f-57fe-49e0-907d-2ba8f2a5c610",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/u4z9",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1be77c4f-57fe-49e0-907d-2ba8f2a5c610",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.97457Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "77272193-b91b-46f0-aab6-7525254a26d4",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/1vh2",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "77272193-b91b-46f0-aab6-7525254a26d4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.974361Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "415e6e0f-265f-4609-84ff-6863742bc49a",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/9q36",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "415e6e0f-265f-4609-84ff-6863742bc49a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.974164Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "aca11209-b6f3-4df2-a254-83a1869f2322",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/0r6z",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "aca11209-b6f3-4df2-a254-83a1869f2322",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.973977Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "80ba05d6-60cb-41fe-8790-826f2e25319f",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/sr0u",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"default\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Default order type\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  },\n  \"resource\" : \"OrderTypes\",\n  \"service\" : \"clover\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "80ba05d6-60cb-41fe-8790-826f2e25319f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.973751Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/OrderType"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "OrderTypes",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetOrderTypeResponse",
            "x-graphql-type-name" : "OrderType"
          }
        }
      }
    }
  }, {
    "id" : "9d9ab3aa-7186-4512-a366-f71c7cdc2b61",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/9d0w",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9d9ab3aa-7186-4512-a366-f71c7cdc2b61",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.973472Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "ec651441-d572-43e0-af45-d28e662749e0",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/1m5k",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ec651441-d572-43e0-af45-d28e662749e0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.973294Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "3b087275-ab94-4a6e-ab80-3ac29a52bd9b",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/0bji",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3b087275-ab94-4a6e-ab80-3ac29a52bd9b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.973057Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "24c188e8-14b6-4fc1-9648-4cbe8bcfc29d",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/n3l6",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "24c188e8-14b6-4fc1-9648-4cbe8bcfc29d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.972859Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "9cb327cb-e59f-4eb9-87ea-91b5b9615fb8",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/dzo1",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9cb327cb-e59f-4eb9-87ea-91b5b9615fb8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.972666Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "36fe5f2e-2f8b-42c2-bcc1-4fde44c1ba2b",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/5225",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"OrderTypes\",\n  \"service\" : \"clover\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "36fe5f2e-2f8b-42c2-bcc1-4fde44c1ba2b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.972442Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "OrderTypes",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteOrderTypeResponse"
          }
        }
      }
    }
  }, {
    "id" : "476ab1da-060d-4290-aba4-4031b3f8ad34",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "476ab1da-060d-4290-aba4-4031b3f8ad34",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.972232Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "baf8aca5-03c8-4c54-9059-65d0497d88ad",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "baf8aca5-03c8-4c54-9059-65d0497d88ad",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.972118Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "d1801287-28dc-4875-bf6c-cecef8e0f87b",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d1801287-28dc-4875-bf6c-cecef8e0f87b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.971952Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "157bcf29-c62e-4258-bed6-69abcef2d3e0",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "157bcf29-c62e-4258-bed6-69abcef2d3e0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.971762Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "d2b3f547-eca0-46a5-b375-7bca2dee8cc1",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d2b3f547-eca0-46a5-b375-7bca2dee8cc1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.971641Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "0dd75f03-b0e3-4440-ae2c-12d28f14f1d7",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"OrderTypes\",\n  \"service\" : \"clover\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0dd75f03-b0e3-4440-ae2c-12d28f14f1d7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.971424Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "OrderTypes",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateOrderTypeResponse"
          }
        }
      }
    }
  }, {
    "id" : "3edac2d0-1964-4c3f-bb7d-ef3d4b45beee",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3edac2d0-1964-4c3f-bb7d-ef3d4b45beee",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.971288Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "b6582d1b-1bd5-4858-a980-ecdc6fa3c000",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b6582d1b-1bd5-4858-a980-ecdc6fa3c000",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.971101Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "356429a9-96e3-4968-b89e-6447241edf87",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "356429a9-96e3-4968-b89e-6447241edf87",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.97088Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "5f934975-fef4-4299-8404-84dcf7786bd3",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5f934975-fef4-4299-8404-84dcf7786bd3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.970755Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "25f10509-6357-46ee-a440-2ae527c593ca",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "25f10509-6357-46ee-a440-2ae527c593ca",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.970557Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "35a4c309-9c8f-4197-a4ba-f11e1ebaa242",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"default\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Default order type\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  } ],\n  \"resource\" : \"OrderTypes\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"clover\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "35a4c309-9c8f-4197-a4ba-f11e1ebaa242",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.970402Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/OrderType"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "OrderTypes",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetOrderTypesResponse",
            "x-graphql-type-name" : "OrderTypeList"
          }
        }
      }
    }
  }, {
    "id" : "0a37902f-afc6-44cf-8e54-a50e482865d3",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/0160",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0a37902f-afc6-44cf-8e54-a50e482865d3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.970186Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "10c79b17-1d96-4f28-af1e-b853c9a59f98",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/653g",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "10c79b17-1d96-4f28-af1e-b853c9a59f98",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.969993Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "6a4acfb4-67ee-4029-a197-97b5aa7511f2",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/mi42",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6a4acfb4-67ee-4029-a197-97b5aa7511f2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.969621Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "1400a44c-c12e-4529-9ed7-500decd209d0",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/vs16",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1400a44c-c12e-4529-9ed7-500decd209d0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.969399Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "b0a8f1a5-779e-4a14-9e11-5fd8666cf2ff",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/id02",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b0a8f1a5-779e-4a14-9e11-5fd8666cf2ff",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.969192Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "0d0f3792-141a-4ab7-bdde-527c40c80a7d",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/xd4x",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Modifiers\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0d0f3792-141a-4ab7-bdde-527c40c80a7d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.968937Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Modifiers",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateModifierResponse"
          }
        }
      }
    }
  }, {
    "id" : "c8505bb4-5533-4ccd-93a2-733ee3b14ded",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/jhxc",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c8505bb4-5533-4ccd-93a2-733ee3b14ded",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.968679Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "8e1d9d1c-9e36-4748-b2e1-4731e472d0e4",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/i83y",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8e1d9d1c-9e36-4748-b2e1-4731e472d0e4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.96847Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "720ab335-1db1-42c2-afd9-61f45565686c",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/0ouf",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "720ab335-1db1-42c2-afd9-61f45565686c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.968218Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "6d7a033b-50bf-4169-879b-9caed61c82a7",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/l9pd",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6d7a033b-50bf-4169-879b-9caed61c82a7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.967974Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "e9fde5d9-fa2d-418c-b419-0167323af262",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/69l6",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e9fde5d9-fa2d-418c-b419-0167323af262",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.96766Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "14a1e19d-1f10-4c38-89b8-a23c0c9f5d34",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/nrib",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  },\n  \"resource\" : \"Modifiers\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "14a1e19d-1f10-4c38-89b8-a23c0c9f5d34",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.967395Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Modifier"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Modifiers",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetModifierResponse",
            "x-graphql-type-name" : "Modifier"
          }
        }
      }
    }
  }, {
    "id" : "f7e2e55c-aab7-4bb4-9980-e51442447c2e",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/6gq8",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f7e2e55c-aab7-4bb4-9980-e51442447c2e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.967118Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "38f19fa7-4259-4263-9c60-00fb134318fc",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/q7y8",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "38f19fa7-4259-4263-9c60-00fb134318fc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.966859Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "f8f04c12-b9ac-4132-8c48-6dc5ca507c7b",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/wyzs",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f8f04c12-b9ac-4132-8c48-6dc5ca507c7b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.966614Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "d1753bda-d83f-45a9-9a49-a16b1e2b710a",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/4a1e",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d1753bda-d83f-45a9-9a49-a16b1e2b710a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.96641Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "9322ff15-0565-46ff-968f-46f6368cf8bd",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/329y",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9322ff15-0565-46ff-968f-46f6368cf8bd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.966185Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "b9f12f27-46ff-40bc-aa26-709875a3dc6c",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/kd86",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Modifiers\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b9f12f27-46ff-40bc-aa26-709875a3dc6c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.965966Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Modifiers",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteModifierResponse"
          }
        }
      }
    }
  }, {
    "id" : "6f50cd04-e851-4e88-a05f-7597638be4d2",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6f50cd04-e851-4e88-a05f-7597638be4d2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.96576Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "e043d709-e2c9-44c0-8007-9e89f8138ad6",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e043d709-e2c9-44c0-8007-9e89f8138ad6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.965654Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "0179a741-d4ca-401c-9fe4-36c2e16c1154",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0179a741-d4ca-401c-9fe4-36c2e16c1154",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.965476Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "f318c78d-79a8-4f7d-86c9-10feabc1a6b3",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f318c78d-79a8-4f7d-86c9-10feabc1a6b3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.965362Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "ae5dfcc0-2297-4deb-ac4c-daa83e7f65d0",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ae5dfcc0-2297-4deb-ac4c-daa83e7f65d0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.965175Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "3f57a090-dd5b-4b57-9822-75c476c29a09",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Modifiers\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3f57a090-dd5b-4b57-9822-75c476c29a09",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.964951Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Modifiers",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateModifierResponse"
          }
        }
      }
    }
  }, {
    "id" : "eee29275-1ef2-4e94-8d31-b154067e00de",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "eee29275-1ef2-4e94-8d31-b154067e00de",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.964825Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "d67fc5c6-ceb5-4215-b45e-50a7ba84932d",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d67fc5c6-ceb5-4215-b45e-50a7ba84932d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.964698Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "bdb29295-21b3-4dfa-afc4-bb37e62400f5",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "bdb29295-21b3-4dfa-afc4-bb37e62400f5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.964476Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "b5c79235-2a9b-499f-958f-c17e9fa9bcdb",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b5c79235-2a9b-499f-958f-c17e9fa9bcdb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.964356Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "f19ae75a-a237-4cd5-9ee9-762b96496d40",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f19ae75a-a237-4cd5-9ee9-762b96496d40",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.964236Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "392a05d2-8faf-42c5-8897-05ac4ccf1e5f",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  } ],\n  \"resource\" : \"Modifiers\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "392a05d2-8faf-42c5-8897-05ac4ccf1e5f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.964009Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Modifier"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Modifiers",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetModifiersResponse",
            "x-graphql-type-name" : "ModifierList"
          }
        }
      }
    }
  }, {
    "id" : "c57b536d-09f9-4e83-9925-cfcb791ccb98",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/lo5b",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c57b536d-09f9-4e83-9925-cfcb791ccb98",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.963619Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "a24b8918-b89c-49fc-abca-be110b373c4d",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/276n",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a24b8918-b89c-49fc-abca-be110b373c4d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.963407Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "29675350-4fd3-40e2-9cba-1dbfcfbb5f21",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/696b",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "29675350-4fd3-40e2-9cba-1dbfcfbb5f21",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.963094Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "9c7c591b-7243-4d75-b05a-b3fe1209d1ea",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/try1",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9c7c591b-7243-4d75-b05a-b3fe1209d1ea",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.962834Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "ade7675f-9160-4e98-bf42-6e59f24b019d",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/9i9w",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ade7675f-9160-4e98-bf42-6e59f24b019d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.962426Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "7ffc3e0f-2bae-4f4c-bdfd-384c836fb787",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/i24x",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"ModifierGroups\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7ffc3e0f-2bae-4f4c-bdfd-384c836fb787",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.962152Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "ModifierGroups",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateModifierGroupResponse"
          }
        }
      }
    }
  }, {
    "id" : "84bb9019-503d-481d-8ec8-19f9d70374cf",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/9v16",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "84bb9019-503d-481d-8ec8-19f9d70374cf",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.961939Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "9e3e0519-3c97-41bc-9e91-3d44c44a4517",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/3c2f",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9e3e0519-3c97-41bc-9e91-3d44c44a4517",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.961696Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "c3679f0a-7838-453e-a693-b4d5ad2c631d",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/b8b5",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c3679f0a-7838-453e-a693-b4d5ad2c631d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.961383Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "deede7f6-5bf4-426d-99d8-0d18ac632cc1",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/2wtr",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "deede7f6-5bf4-426d-99d8-0d18ac632cc1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.961177Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "72f56e95-1376-4b8f-934d-dfc930e20338",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/2s1d",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "72f56e95-1376-4b8f-934d-dfc930e20338",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.960966Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "7f928615-d08a-4d72-80aa-156b8aba2e46",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/14e7",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"alternate_name\" : \"Modifier New\",\n    \"maximum_allowed\" : 5,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"modifiers\" : [ {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"created_by\" : \"12345\",\n    \"present_at_all_locations\" : false,\n    \"selection_type\" : \"single\",\n    \"deleted\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"row_version\" : \"1-12345\",\n    \"minimum_required\" : 1,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"ModifierGroups\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7f928615-d08a-4d72-80aa-156b8aba2e46",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.960707Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/ModifierGroup"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "ModifierGroups",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetModifierGroupResponse",
            "x-graphql-type-name" : "ModifierGroup"
          }
        }
      }
    }
  }, {
    "id" : "90097b4b-4ffb-43e7-b1af-769d75885064",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/y8cv",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "90097b4b-4ffb-43e7-b1af-769d75885064",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.960362Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "e0d53512-34e7-42be-b8dd-834da6e23e6b",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/caso",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e0d53512-34e7-42be-b8dd-834da6e23e6b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.96015Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "821008df-f71d-43b8-b114-b45a6308901b",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/13u1",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "821008df-f71d-43b8-b114-b45a6308901b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.959755Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "853c9075-5db5-4aa9-8703-d56e7a70c7d7",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/g11g",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "853c9075-5db5-4aa9-8703-d56e7a70c7d7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.959511Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "20d329f4-45fb-408a-86c5-e73b83903e59",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/x12e",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "20d329f4-45fb-408a-86c5-e73b83903e59",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.95923Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "14be6925-72d4-494a-9f1b-b3fb5d925e72",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/h0k2",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"ModifierGroups\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "14be6925-72d4-494a-9f1b-b3fb5d925e72",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.958966Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "ModifierGroups",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteModifierGroupResponse"
          }
        }
      }
    }
  }, {
    "id" : "84d778ab-e634-4c84-9691-b9e403587a5c",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "84d778ab-e634-4c84-9691-b9e403587a5c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.958727Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "ea2df778-14d0-4d29-95f1-c7dff06b8ae7",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ea2df778-14d0-4d29-95f1-c7dff06b8ae7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.958619Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "1d4dab38-f28d-48e9-a8ee-67572db0a40b",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1d4dab38-f28d-48e9-a8ee-67572db0a40b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.958394Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "c66ddbe8-1cce-4809-a940-5ea352e656a4",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c66ddbe8-1cce-4809-a940-5ea352e656a4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.958283Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "bc410e5b-9f2a-4fde-8736-2cbb968d7582",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "bc410e5b-9f2a-4fde-8736-2cbb968d7582",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.958179Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "a2f54a09-ea8b-41b7-8e41-6938246b2548",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"ModifierGroups\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a2f54a09-ea8b-41b7-8e41-6938246b2548",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.958038Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "ModifierGroups",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateModifierGroupResponse"
          }
        }
      }
    }
  }, {
    "id" : "9f6c1aa8-dbdc-4e39-85ab-99787bdfeb89",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9f6c1aa8-dbdc-4e39-85ab-99787bdfeb89",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.957912Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "e18e3e41-1ff2-46a3-9416-da184ffac033",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e18e3e41-1ff2-46a3-9416-da184ffac033",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.957805Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "0b6d4df5-8022-4cc3-be1f-53630104a4aa",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0b6d4df5-8022-4cc3-be1f-53630104a4aa",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.957663Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "5c13cd42-6bc0-4d43-921f-98e72cd8dd58",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5c13cd42-6bc0-4d43-921f-98e72cd8dd58",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.957548Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "6cb8ef28-e2d2-44c2-968a-e74a0311da2d",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6cb8ef28-e2d2-44c2-968a-e74a0311da2d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.957429Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "34cdb4ca-ac46-461f-b52c-dacb94b906ca",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"alternate_name\" : \"Modifier New\",\n    \"maximum_allowed\" : 5,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"modifiers\" : [ {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"created_by\" : \"12345\",\n    \"present_at_all_locations\" : false,\n    \"selection_type\" : \"single\",\n    \"deleted\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"row_version\" : \"1-12345\",\n    \"minimum_required\" : 1,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"id\" : \"12345\"\n  }, {\n    \"alternate_name\" : \"Modifier New\",\n    \"maximum_allowed\" : 5,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"modifiers\" : [ {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"created_by\" : \"12345\",\n    \"present_at_all_locations\" : false,\n    \"selection_type\" : \"single\",\n    \"deleted\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"row_version\" : \"1-12345\",\n    \"minimum_required\" : 1,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"id\" : \"12345\"\n  }, {\n    \"alternate_name\" : \"Modifier New\",\n    \"maximum_allowed\" : 5,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"modifiers\" : [ {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"created_by\" : \"12345\",\n    \"present_at_all_locations\" : false,\n    \"selection_type\" : \"single\",\n    \"deleted\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"row_version\" : \"1-12345\",\n    \"minimum_required\" : 1,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"id\" : \"12345\"\n  } ],\n  \"resource\" : \"ModifierGroups\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "34cdb4ca-ac46-461f-b52c-dacb94b906ca",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.957245Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/ModifierGroup"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "ModifierGroups",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetModifierGroupsResponse",
            "x-graphql-type-name" : "ModifierGroupList"
          }
        }
      }
    }
  }, {
    "id" : "3d6abfa1-38bd-49c2-a2a5-cefa93a64d91",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/u0x0",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3d6abfa1-38bd-49c2-a2a5-cefa93a64d91",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.956716Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "24366bea-aafd-445d-aa08-cbec5dc459d6",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/6l55",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "24366bea-aafd-445d-aa08-cbec5dc459d6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.95653Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "675ed3bc-bd95-4d17-8154-aca31c0507b2",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/hrao",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "675ed3bc-bd95-4d17-8154-aca31c0507b2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.956304Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "8109356e-bf80-4bf3-b3cf-5045e2c9e67c",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/lf41",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8109356e-bf80-4bf3-b3cf-5045e2c9e67c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.956097Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "47868bfb-c058-43fc-9a78-f061d30e579e",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/4q0v",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "47868bfb-c058-43fc-9a78-f061d30e579e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.955893Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "3614bfd6-0f38-4452-afe8-23cc1ef02e37",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/w1sw",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Merchants\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3614bfd6-0f38-4452-afe8-23cc1ef02e37",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.955583Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Merchants",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateMerchantResponse"
          }
        }
      }
    }
  }, {
    "id" : "864031be-50d8-4cbd-a9a7-02ba07b75c15",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/d1m7",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "864031be-50d8-4cbd-a9a7-02ba07b75c15",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.955369Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "94447ea0-16f6-44d6-bf06-28cb58b73226",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/hxl9",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "94447ea0-16f6-44d6-bf06-28cb58b73226",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.955114Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "aafb24e5-7d7f-4d27-9752-7f1f7e50523e",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/fv69",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "aafb24e5-7d7f-4d27-9752-7f1f7e50523e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.954871Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "9e6259bf-640a-44c7-a739-f1b309337035",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/d36t",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9e6259bf-640a-44c7-a739-f1b309337035",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.954609Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "0ac3f14e-9510-4d01-a982-28285af92bd1",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/y225",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0ac3f14e-9510-4d01-a982-28285af92bd1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.954405Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "be40413a-e2d1-4726-bdcd-855e4b33f95a",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/zyd9",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"main_location_id\" : \"12345\",\n    \"owner_id\" : \"12345\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"language\" : \"EN\",\n    \"created_by\" : \"12345\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"status\" : \"active\"\n  },\n  \"resource\" : \"Merchants\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "be40413a-e2d1-4726-bdcd-855e4b33f95a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.954185Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Merchant"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Merchants",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetMerchantResponse",
            "x-graphql-type-name" : "Merchant"
          }
        }
      }
    }
  }, {
    "id" : "67345369-5fc4-4195-959d-7179942fd9b7",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/f140",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "67345369-5fc4-4195-959d-7179942fd9b7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.953768Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "ea2ecc7c-5770-43e1-85a7-b8a80f090c5d",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/1155",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ea2ecc7c-5770-43e1-85a7-b8a80f090c5d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.953583Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "18b94fde-7c1e-4437-951d-9170b302e9e3",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/1f18",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "18b94fde-7c1e-4437-951d-9170b302e9e3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.953354Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "cf696292-4b3d-4c8f-a3c5-196c8aa47eb4",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/jd2n",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "cf696292-4b3d-4c8f-a3c5-196c8aa47eb4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.9531Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "3eb5d892-206f-446f-9cd9-34a21c3fbebe",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/cmr9",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3eb5d892-206f-446f-9cd9-34a21c3fbebe",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.952872Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "1c945d1a-0f21-421b-be14-506d5261f378",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/r30w",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Merchants\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1c945d1a-0f21-421b-be14-506d5261f378",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.952567Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Merchants",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteMerchantResponse"
          }
        }
      }
    }
  }, {
    "id" : "e70ec35f-be98-4ef4-a300-9b4c778e6768",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e70ec35f-be98-4ef4-a300-9b4c778e6768",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.952258Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "93a50a39-2ca2-4fdc-a3d2-0e7a80d1a867",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "93a50a39-2ca2-4fdc-a3d2-0e7a80d1a867",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.952098Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "dbd033c6-e94c-4c96-971c-8e8992c295d1",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "dbd033c6-e94c-4c96-971c-8e8992c295d1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.95194Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "5ca47642-730d-4f40-96af-478174b1189d",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5ca47642-730d-4f40-96af-478174b1189d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.951817Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "09b51339-f9d5-46be-b856-c5e25b2486a1",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "09b51339-f9d5-46be-b856-c5e25b2486a1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.9517Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "ce2dd830-fea3-4200-aa67-aceade6ed3d7",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Merchants\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ce2dd830-fea3-4200-aa67-aceade6ed3d7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.951535Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Merchants",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateMerchantResponse"
          }
        }
      }
    }
  }, {
    "id" : "2756ce3a-1915-4cb9-a16e-b0e0ada6476d",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2756ce3a-1915-4cb9-a16e-b0e0ada6476d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.951393Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "79f6dac4-0e8a-470c-816b-8552cca32ae1",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "79f6dac4-0e8a-470c-816b-8552cca32ae1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.951273Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "225f238e-ec8f-49a4-976b-daad3d36f110",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "225f238e-ec8f-49a4-976b-daad3d36f110",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.95108Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "b2697bce-cd16-4c53-8bc2-8906a14097d7",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b2697bce-cd16-4c53-8bc2-8906a14097d7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.950887Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "b51ffe96-0f7c-4e75-b9ee-b5c48850c7fd",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b51ffe96-0f7c-4e75-b9ee-b5c48850c7fd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.950771Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "411464be-0ee0-4760-a0f9-2ce3c72a3218",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"main_location_id\" : \"12345\",\n    \"owner_id\" : \"12345\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"language\" : \"EN\",\n    \"created_by\" : \"12345\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"status\" : \"active\"\n  }, {\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"main_location_id\" : \"12345\",\n    \"owner_id\" : \"12345\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"language\" : \"EN\",\n    \"created_by\" : \"12345\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"status\" : \"active\"\n  }, {\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"main_location_id\" : \"12345\",\n    \"owner_id\" : \"12345\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"language\" : \"EN\",\n    \"created_by\" : \"12345\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"status\" : \"active\"\n  }, {\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"main_location_id\" : \"12345\",\n    \"owner_id\" : \"12345\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"language\" : \"EN\",\n    \"created_by\" : \"12345\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"status\" : \"active\"\n  }, {\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"main_location_id\" : \"12345\",\n    \"owner_id\" : \"12345\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"language\" : \"EN\",\n    \"created_by\" : \"12345\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"status\" : \"active\"\n  }, {\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"main_location_id\" : \"12345\",\n    \"owner_id\" : \"12345\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"language\" : \"EN\",\n    \"created_by\" : \"12345\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"status\" : \"active\"\n  }, {\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"main_location_id\" : \"12345\",\n    \"owner_id\" : \"12345\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"language\" : \"EN\",\n    \"created_by\" : \"12345\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"status\" : \"active\"\n  } ],\n  \"resource\" : \"Merchants\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "411464be-0ee0-4760-a0f9-2ce3c72a3218",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.9506Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Merchant"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Merchants",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetMerchantsResponse",
            "x-graphql-type-name" : "MerchantList"
          }
        }
      }
    }
  }, {
    "id" : "6f49a261-9da5-4fbc-a800-ec624d026b5b",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/2450",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6f49a261-9da5-4fbc-a800-ec624d026b5b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.948534Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "6763d65f-8f70-4feb-a4d1-ef0d4342219e",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/28e9",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6763d65f-8f70-4feb-a4d1-ef0d4342219e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.948321Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "3adcd639-23d8-400e-97ef-b9d6cdceeae8",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/14pe",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3adcd639-23d8-400e-97ef-b9d6cdceeae8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.948085Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "3396a3e6-6d87-494c-a737-f692c8bf7e4b",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/9p5m",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3396a3e6-6d87-494c-a737-f692c8bf7e4b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.947821Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "14d7c74d-f74f-4f14-8a79-49a12b7337b4",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/e5pp",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "14d7c74d-f74f-4f14-8a79-49a12b7337b4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.947591Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "f0139df3-479b-430c-8d4c-ae1ec27c5617",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/4r3g",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Locations\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f0139df3-479b-430c-8d4c-ae1ec27c5617",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.947347Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Locations",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateLocationResponse"
          }
        }
      }
    }
  }, {
    "id" : "e1f6012b-74d1-4caa-a6cb-21d4a9c26bf3",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/432r",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e1f6012b-74d1-4caa-a6cb-21d4a9c26bf3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.947131Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "0cd1f06e-bf08-43f0-9618-3e4fdc73e420",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/c401",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0cd1f06e-bf08-43f0-9618-3e4fdc73e420",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.946926Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "3ead3d26-42d0-4e1e-b04a-623f783e4473",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/t73q",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3ead3d26-42d0-4e1e-b04a-623f783e4473",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.946518Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "aa8db698-25e8-4d2d-9387-7b3bcfcbfe0d",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/70cy",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "aa8db698-25e8-4d2d-9387-7b3bcfcbfe0d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.946254Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "bb3086f5-295e-48ae-a994-87751fa56000",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/pkdi",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "bb3086f5-295e-48ae-a994-87751fa56000",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.946045Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "559a723e-9d7d-4370-ae33-24f352edbeca",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/0ex7",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"business_name\" : \"Dunkin Donuts LLC\",\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"created_by\" : \"12345\",\n    \"status\" : \"active\"\n  },\n  \"resource\" : \"Locations\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "559a723e-9d7d-4370-ae33-24f352edbeca",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.94579Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Location"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Locations",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetLocationResponse",
            "x-graphql-type-name" : "Location"
          }
        }
      }
    }
  }, {
    "id" : "e009eb1c-d15f-4bc2-88e6-fd5e252e4ad9",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/3mu1",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e009eb1c-d15f-4bc2-88e6-fd5e252e4ad9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.945397Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "b6b6e63d-fa1c-4a54-a8cf-8fa72eb77228",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/62sr",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b6b6e63d-fa1c-4a54-a8cf-8fa72eb77228",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.945199Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "05b8a558-d392-4244-9153-e927a5e9c0d4",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/op1x",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "05b8a558-d392-4244-9153-e927a5e9c0d4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.944885Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "476eff90-e2a5-4ecf-bf88-7ee354c3497e",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/a0bf",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "476eff90-e2a5-4ecf-bf88-7ee354c3497e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.944614Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "40610dc3-163f-485c-bd4d-f808cf5bb3d5",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/2870",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "40610dc3-163f-485c-bd4d-f808cf5bb3d5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.944384Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "c16ca583-88f3-489d-b600-59eddcd3ceb2",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/egs7",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Locations\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c16ca583-88f3-489d-b600-59eddcd3ceb2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.944091Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Locations",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteLocationResponse"
          }
        }
      }
    }
  }, {
    "id" : "052199e0-de2c-4a2c-9d58-086807510a91",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "052199e0-de2c-4a2c-9d58-086807510a91",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.943773Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "ff41b608-31d6-4654-9766-8aa564c8af1b",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ff41b608-31d6-4654-9766-8aa564c8af1b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.94363Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "ddb9bc7a-be39-42ed-900b-985585a02739",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ddb9bc7a-be39-42ed-900b-985585a02739",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.943457Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "08b8bc9d-3e7b-4dc7-ae0a-eff7bf62379f",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "08b8bc9d-3e7b-4dc7-ae0a-eff7bf62379f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.943321Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "29dd8188-07c8-4fa1-893c-9108aa922aaf",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "29dd8188-07c8-4fa1-893c-9108aa922aaf",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.943185Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "c55d24b8-2ad1-487a-a2c4-6228ba2c8640",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Locations\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c55d24b8-2ad1-487a-a2c4-6228ba2c8640",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.943003Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Locations",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateLocationResponse"
          }
        }
      }
    }
  }, {
    "id" : "e501d876-0f33-4434-a220-b5a61320673b",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e501d876-0f33-4434-a220-b5a61320673b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.942782Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "1786ab85-d0ce-4c6e-bc47-7437f4ec0223",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1786ab85-d0ce-4c6e-bc47-7437f4ec0223",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.942588Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "d22927d7-4829-4fe2-bd06-6a46e3b330dd",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d22927d7-4829-4fe2-bd06-6a46e3b330dd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.942401Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "361b4bb5-9c2c-42a0-a37d-6469a5397d3d",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "361b4bb5-9c2c-42a0-a37d-6469a5397d3d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.942292Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "b28fe083-9e51-4d13-9eee-137765717d46",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b28fe083-9e51-4d13-9eee-137765717d46",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.942164Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "00abc974-a510-4287-bbd9-9edc7be45c05",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"business_name\" : \"Dunkin Donuts LLC\",\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"created_by\" : \"12345\",\n    \"status\" : \"active\"\n  } ],\n  \"resource\" : \"Locations\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "00abc974-a510-4287-bbd9-9edc7be45c05",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.941981Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Location"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Locations",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetLocationsResponse",
            "x-graphql-type-name" : "LocationList"
          }
        }
      }
    }
  }, {
    "id" : "ac2a1338-dae9-4492-83f1-10b220402eb5",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/xr8v",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ac2a1338-dae9-4492-83f1-10b220402eb5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.94169Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "cfda6247-0502-464b-aa15-53cf5dacce35",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/2zrn",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "cfda6247-0502-464b-aa15-53cf5dacce35",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.941463Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "c29160cd-46b0-43ab-ac80-e163bf6cc8bf",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/vhmb",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c29160cd-46b0-43ab-ac80-e163bf6cc8bf",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.941017Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "b730abe6-8663-47c8-88e5-473f97ff3482",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/707v",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b730abe6-8663-47c8-88e5-473f97ff3482",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.94069Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "58bd34ed-a0c6-4be4-a058-37211625b4ab",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/57cc",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "58bd34ed-a0c6-4be4-a058-37211625b4ab",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.940477Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "76c498e4-2ed8-4139-ab91-65ef32586f23",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/8v07",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Items\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "76c498e4-2ed8-4139-ab91-65ef32586f23",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.940164Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Items",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateItemResponse"
          }
        }
      }
    }
  }, {
    "id" : "2185b482-9663-4175-89af-84a0c81dc8f2",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/40du",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2185b482-9663-4175-89af-84a0c81dc8f2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.939944Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "27a08f00-ae10-4b85-abe2-ddc5e8c62e25",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/2647",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "27a08f00-ae10-4b85-abe2-ddc5e8c62e25",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.939723Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "649f8ac0-33b2-4071-9584-e3f427eae8e5",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/p37a",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "649f8ac0-33b2-4071-9584-e3f427eae8e5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.939417Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "c5669b28-6ce9-47c4-b2a9-f379a12be09c",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/1q53",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c5669b28-6ce9-47c4-b2a9-f379a12be09c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.939123Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "5fb6d1f0-5d8d-4883-825e-ac733e77023d",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/4hsd",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5fb6d1f0-5d8d-4883-825e-ac733e77023d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.938827Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "b912115c-338d-4421-b7da-d53e1a50e8e5",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/rlz8",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  },\n  \"resource\" : \"Items\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b912115c-338d-4421-b7da-d53e1a50e8e5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.938562Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Item"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Items",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetItemResponse",
            "x-graphql-type-name" : "Item"
          }
        }
      }
    }
  }, {
    "id" : "24ce13a0-360f-44e2-9862-24f8654aed28",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/k16x",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "24ce13a0-360f-44e2-9862-24f8654aed28",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.938142Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "7727b2fe-f02c-477b-ab60-cbb56090ab81",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/816m",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7727b2fe-f02c-477b-ab60-cbb56090ab81",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.93793Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "07f37044-b848-4172-892a-553392623c8f",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/3v2v",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "07f37044-b848-4172-892a-553392623c8f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.937653Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "1b102e5f-af50-4231-a01c-3dcb085ff074",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/54ux",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1b102e5f-af50-4231-a01c-3dcb085ff074",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.937346Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "2b67ed3f-d512-4545-b575-436358f00347",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/t1t1",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2b67ed3f-d512-4545-b575-436358f00347",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.937086Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "0e53c546-fece-4503-974c-8074c2938160",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/q6tb",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Items\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0e53c546-fece-4503-974c-8074c2938160",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.936779Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Items",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteItemResponse"
          }
        }
      }
    }
  }, {
    "id" : "5b9734e3-a805-4923-a873-7d02579d923f",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5b9734e3-a805-4923-a873-7d02579d923f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.936452Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "573a4ea4-fd33-454b-8bfd-dd5a77645453",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "573a4ea4-fd33-454b-8bfd-dd5a77645453",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.93632Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "bbbb9165-0946-445f-94de-c105b2adde11",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "bbbb9165-0946-445f-94de-c105b2adde11",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.936143Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "3eb6cb1b-1684-4f5f-9bae-0a4a34c5c4fe",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3eb6cb1b-1684-4f5f-9bae-0a4a34c5c4fe",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.935996Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "42331cdb-f8ba-44af-b615-6883db512a4d",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "42331cdb-f8ba-44af-b615-6883db512a4d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.935748Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "885a691b-3550-4cda-8ca5-835673dfac7b",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Items\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "885a691b-3550-4cda-8ca5-835673dfac7b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.935571Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Items",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateItemResponse"
          }
        }
      }
    }
  }, {
    "id" : "e4af3ccd-3a96-496d-a368-96ff332ae60e",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e4af3ccd-3a96-496d-a368-96ff332ae60e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.935398Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "bd7ebd93-30da-4396-825b-93c24134d6d4",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "bd7ebd93-30da-4396-825b-93c24134d6d4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.935258Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "9eb6c04c-c870-4656-bccd-92f665ae24bb",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9eb6c04c-c870-4656-bccd-92f665ae24bb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.935067Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "b44bbdd3-5cc5-4a87-a17c-d82c0c725b0e",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b44bbdd3-5cc5-4a87-a17c-d82c0c725b0e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.93487Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "18062487-bce1-4baf-bd9c-c912ee805f2f",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "18062487-bce1-4baf-bd9c-c912ee805f2f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.934719Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "6f9ef0e1-e7e3-4b30-85a4-7cb9af4d9e68",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  }, {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  }, {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  }, {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  }, {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  }, {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  }, {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  }, {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  } ],\n  \"resource\" : \"Items\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6f9ef0e1-e7e3-4b30-85a4-7cb9af4d9e68",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T17:28:02.934439Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Item"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Items",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetItemsResponse",
            "x-graphql-type-name" : "ItemList"
          }
        }
      }
    }
  } ]
}