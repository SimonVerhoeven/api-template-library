{
  "mappings" : [ {
    "id" : "16b28fd8-c92d-4395-a8f2-66eaf10d1ebd",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/6069",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "16b28fd8-c92d-4395-a8f2-66eaf10d1ebd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.130667Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "177f450d-1b44-4e8e-a762-144fed12b02b",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/19z4",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "177f450d-1b44-4e8e-a762-144fed12b02b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.13053Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "b9e3bf2d-e6d5-4836-90f8-5d16237b99cd",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/5758",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b9e3bf2d-e6d5-4836-90f8-5d16237b99cd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.130364Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "84cb3619-e6f3-4a77-b794-24098db2287c",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/99q1",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "84cb3619-e6f3-4a77-b794-24098db2287c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.130227Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "b5be9f6d-8963-414a-bc35-9a94292c4237",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/5426",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b5be9f6d-8963-414a-bc35-9a94292c4237",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.130088Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "a90b59de-a7b9-4537-abc5-7a3df81b33e8",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/48u9",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Tenders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a90b59de-a7b9-4537-abc5-7a3df81b33e8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.129924Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Tenders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateTenderResponse"
          }
        }
      }
    }
  }, {
    "id" : "709f08e7-8a57-457d-9931-57d76dee4dd0",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/206j",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "709f08e7-8a57-457d-9931-57d76dee4dd0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.129756Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "7325c19c-10ce-429c-af48-8f6ac27dff06",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/hvs5",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7325c19c-10ce-429c-af48-8f6ac27dff06",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.129599Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "82fd8f78-e67a-490a-86fe-402fd5eadd19",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/uh3g",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "82fd8f78-e67a-490a-86fe-402fd5eadd19",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.129434Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "7287df06-84aa-45f7-90e0-067f1bbc7b3f",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/p0fh",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7287df06-84aa-45f7-90e0-067f1bbc7b3f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.129284Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "ac64bb97-267d-41e3-989e-eabb4239ac02",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/1mel",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ac64bb97-267d-41e3-989e-eabb4239ac02",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.12914Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "7eab0987-3df6-46bb-ac05-74d7eaceff31",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/814j",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"allows_tipping\" : true,\n    \"opens_cash_drawer\" : true,\n    \"hidden\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"editable\" : true,\n    \"updated_by\" : \"12345\",\n    \"active\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"label\" : \"Cash\",\n    \"created_by\" : \"12345\",\n    \"key\" : \"com.clover.tender.cash\"\n  },\n  \"resource\" : \"Tenders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7eab0987-3df6-46bb-ac05-74d7eaceff31",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.128971Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Tender"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Tenders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetTenderResponse",
            "x-graphql-type-name" : "Tender"
          }
        }
      }
    }
  }, {
    "id" : "73c1039d-6237-43ad-b4c3-2b7fb71c7a1f",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/6945",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "73c1039d-6237-43ad-b4c3-2b7fb71c7a1f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.12877Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "02fef81c-1e47-4dc1-b7eb-81a8c718598d",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/kd56",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "02fef81c-1e47-4dc1-b7eb-81a8c718598d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.128622Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "8d9a725f-e060-4035-a3b3-56d54527f9f1",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/408q",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8d9a725f-e060-4035-a3b3-56d54527f9f1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.128449Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "02c6377b-b2f7-4bff-887f-672507676218",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/rvr0",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "02c6377b-b2f7-4bff-887f-672507676218",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.128311Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "3d295388-bfb0-4c4c-b175-54850b095731",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/nfby",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3d295388-bfb0-4c4c-b175-54850b095731",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.12816Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "fb162e64-273b-4ba6-85b9-95a0abbbce51",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/sfug",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Tenders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fb162e64-273b-4ba6-85b9-95a0abbbce51",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.127994Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Tenders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteTenderResponse"
          }
        }
      }
    }
  }, {
    "id" : "7c71a9bf-cc03-4151-8f8d-00a4d7bf5c00",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7c71a9bf-cc03-4151-8f8d-00a4d7bf5c00",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.127791Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "4d4b313b-9b04-4360-8cd0-36ff2f5cdb49",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4d4b313b-9b04-4360-8cd0-36ff2f5cdb49",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.127716Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "d441fb63-acbe-4935-9cf0-ee7cb5df8a6c",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d441fb63-acbe-4935-9cf0-ee7cb5df8a6c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.127621Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "79e4ef6e-55b1-4b9f-9e7a-8a733630812c",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "79e4ef6e-55b1-4b9f-9e7a-8a733630812c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.127546Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "df1b9f15-b7db-4b36-a0d8-637ef8079698",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "df1b9f15-b7db-4b36-a0d8-637ef8079698",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.127474Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "3dcf44aa-64bc-4f83-9b17-092b0ee376ee",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Tenders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3dcf44aa-64bc-4f83-9b17-092b0ee376ee",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.127374Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Tenders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateTenderResponse"
          }
        }
      }
    }
  }, {
    "id" : "54d1536e-205b-4aad-9417-96c47fe3b0ca",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "54d1536e-205b-4aad-9417-96c47fe3b0ca",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.127267Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "2d8301a5-bbe4-4fa3-b5c8-86c2d4255278",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2d8301a5-bbe4-4fa3-b5c8-86c2d4255278",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.12718Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "b3cebd2c-06be-4751-a6cb-e88ba10d7a0a",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b3cebd2c-06be-4751-a6cb-e88ba10d7a0a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.127071Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "25bcd57b-78c3-4019-8a20-d9fb16757614",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "25bcd57b-78c3-4019-8a20-d9fb16757614",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.126994Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "68b8f4ea-232b-4822-84b3-ca9c69316c87",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "68b8f4ea-232b-4822-84b3-ca9c69316c87",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.126908Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "b8cb6957-df30-419c-8d0f-82add56c1e16",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"allows_tipping\" : true,\n    \"opens_cash_drawer\" : false,\n    \"hidden\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"editable\" : true,\n    \"updated_by\" : \"12345\",\n    \"active\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"label\" : \"Cash\",\n    \"created_by\" : \"12345\",\n    \"key\" : \"com.clover.tender.cash\"\n  }, {\n    \"allows_tipping\" : false,\n    \"opens_cash_drawer\" : false,\n    \"hidden\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"editable\" : true,\n    \"updated_by\" : \"12345\",\n    \"active\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"label\" : \"Cash\",\n    \"created_by\" : \"12345\",\n    \"key\" : \"com.clover.tender.cash\"\n  }, {\n    \"allows_tipping\" : false,\n    \"opens_cash_drawer\" : false,\n    \"hidden\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"editable\" : true,\n    \"updated_by\" : \"12345\",\n    \"active\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"label\" : \"Cash\",\n    \"created_by\" : \"12345\",\n    \"key\" : \"com.clover.tender.cash\"\n  }, {\n    \"allows_tipping\" : false,\n    \"opens_cash_drawer\" : false,\n    \"hidden\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"editable\" : true,\n    \"updated_by\" : \"12345\",\n    \"active\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"label\" : \"Cash\",\n    \"created_by\" : \"12345\",\n    \"key\" : \"com.clover.tender.cash\"\n  }, {\n    \"allows_tipping\" : false,\n    \"opens_cash_drawer\" : true,\n    \"hidden\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"editable\" : true,\n    \"updated_by\" : \"12345\",\n    \"active\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"label\" : \"Cash\",\n    \"created_by\" : \"12345\",\n    \"key\" : \"com.clover.tender.cash\"\n  } ],\n  \"resource\" : \"Tenders\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"clover\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b8cb6957-df30-419c-8d0f-82add56c1e16",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.126788Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Tender"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Tenders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetTendersResponse",
            "x-graphql-type-name" : "TenderList"
          }
        }
      }
    }
  }, {
    "id" : "94f46523-a5b2-4497-b21c-0ddbd7feff75",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/3499",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "94f46523-a5b2-4497-b21c-0ddbd7feff75",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.126491Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "e4b0148a-0213-4bc1-ad94-3500d5dbc752",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/5ybc",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e4b0148a-0213-4bc1-ad94-3500d5dbc752",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.126351Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "71104ab9-9f19-4f01-ae9b-f9731946460d",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/w4n4",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "71104ab9-9f19-4f01-ae9b-f9731946460d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.126189Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "82febe2c-4649-4483-ba6f-09580b948e9d",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/a7u3",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "82febe2c-4649-4483-ba6f-09580b948e9d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.12604Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "13b88f44-03b2-4810-b215-3bfd62ad1bea",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/fqw8",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "13b88f44-03b2-4810-b215-3bfd62ad1bea",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.125895Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "1066e888-5eeb-4bf0-badd-9be2a6e1f1f2",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/g517",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"PosPayments\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1066e888-5eeb-4bf0-badd-9be2a6e1f1f2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.125722Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "PosPayments",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdatePosPaymentResponse"
          }
        }
      }
    }
  }, {
    "id" : "fd5816af-3a29-4ab8-80e4-09b043155889",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/c06v",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fd5816af-3a29-4ab8-80e4-09b043155889",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.125548Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "a19033a5-cfe1-46a8-b04f-e293abfd8d05",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/tp37",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a19033a5-cfe1-46a8-b04f-e293abfd8d05",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.125398Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "a820c76d-c367-43ef-ad6d-9f84c3a7bcc4",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/d64f",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a820c76d-c367-43ef-ad6d-9f84c3a7bcc4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.125221Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "93fca972-9280-4b05-9fc1-d2135995ff21",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/5dy8",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "93fca972-9280-4b05-9fc1-d2135995ff21",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.125074Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "24521cbe-8957-4430-bf6d-b8cf6a1dfb4b",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/48f7",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "24521cbe-8957-4430-bf6d-b8cf6a1dfb4b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.124923Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "38c3f18b-146e-4b11-8ea9-11ad7c6a556e",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/f0nb",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"change_back_cash_amount\" : 20,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"tender_id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"external\",\n    \"location_id\" : \"12345\",\n    \"external_payment_id\" : \"12345\",\n    \"approved\" : 37.5,\n    \"total\" : 37.5,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"app_fee\" : 3,\n    \"currency\" : \"USD\",\n    \"refunded\" : 37.5,\n    \"tip\" : 7,\n    \"id\" : \"12345\",\n    \"cash\" : {\n      \"amount\" : { },\n      \"charge_back_amount\" : { }\n    },\n    \"external_details\" : {\n      \"source_fee_amount\" : 2.5,\n      \"source\" : \"1ivszne42lbs8cwqwi847x3weo37caove8izgx7scostbo0r475782b\",\n      \"source_id\" : \"2h47\",\n      \"type\" : \"emoney\"\n    },\n    \"bank_account\" : {\n      \"country\" : \"US\",\n      \"account_ownership_type\" : \"6eoq\",\n      \"bank_name\" : \"Jacquelyn Torp\",\n      \"fingerprint\" : \"m0t9uw2ws2iad9ntf55syidit8792ja2iflv21ntaspbo3sjakmkebpu29jmgkemw77iqj3skqee3ng6ivvmmjy6awvkh4rouuchlqyjyjfjq10gqfsodirkg4l5ktzkf4rt7qzt4bzdvaorgfijpwmz3219eqsa7s0axqz1i36pz03ef83qy41j1g1ajiz79qwz3g6uc2prkrjxnxmvd0hcg1f62ak13f1902oxu\",\n      \"transfer_type\" : \"eeyhyl54pfxdu7r0ksdtmi1gjjd31b6l17db9g95jsy5eqk0\",\n      \"ach_details\" : {\n        \"account_type\" : \"hfh66wqrnf567w2ic3vns4pw6fgl0mexsiednnhb6l32h4a\",\n        \"routing_number\" : \"j471wg8ibftblqjtylgwapszjnwewozbmoq3hykgmq7v\",\n        \"account_number_suffix\" : \"l7l\"\n      },\n      \"statement_description\" : \"Accusamus deserunt eos sit tempore ea nam ut. Dolorum animi temporibus. Cum qui laborum sed vitae ad.\"\n    },\n    \"card_details\" : {\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"jcb\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    },\n    \"amount\" : 27.5,\n    \"wallet\" : {\n      \"status\" : \"voided\"\n    },\n    \"device_id\" : \"12345\",\n    \"processing_fees\" : [ {\n      \"amount\" : 1.05,\n      \"effective_at\" : \"2020-09-30T07:43:32.000Z\",\n      \"processing_type\" : \"initial\"\n    } ],\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"tax\" : 20,\n    \"created_by\" : \"12345\",\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"source_id\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"order_id\" : \"12345\",\n    \"status\" : \"approved\"\n  },\n  \"resource\" : \"PosPayments\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "38c3f18b-146e-4b11-8ea9-11ad7c6a556e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.124733Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/PosPayment"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "PosPayments",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetPosPaymentResponse",
            "x-graphql-type-name" : "PosPayment"
          }
        }
      }
    }
  }, {
    "id" : "aa0c9741-6e58-4432-bf6f-99fbfaf6d280",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/2m75",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "aa0c9741-6e58-4432-bf6f-99fbfaf6d280",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.12376Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "d533b935-fda0-4e42-bc0e-f9ba15238f9b",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/dd0v",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d533b935-fda0-4e42-bc0e-f9ba15238f9b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.123612Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "4f50f5f4-8be4-4de0-a876-592d18e47b8f",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/8f6s",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4f50f5f4-8be4-4de0-a876-592d18e47b8f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.123437Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "c7b832f2-5396-43cd-ae01-8467ac1060c2",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/562r",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c7b832f2-5396-43cd-ae01-8467ac1060c2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.123287Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "60e60d92-a95d-4c01-8638-2d0dc9547108",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/i38d",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "60e60d92-a95d-4c01-8638-2d0dc9547108",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.12314Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "5e7a7dcd-73b1-4ed4-a5f6-1e5fb5a286b2",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/o693",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"PosPayments\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5e7a7dcd-73b1-4ed4-a5f6-1e5fb5a286b2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.122969Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "PosPayments",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeletePosPaymentResponse"
          }
        }
      }
    }
  }, {
    "id" : "b8f4c028-6b36-4f23-bad7-dc330eb27329",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b8f4c028-6b36-4f23-bad7-dc330eb27329",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.122761Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "072907b8-80ce-4a72-9dc1-cef1cfa3ccd9",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "072907b8-80ce-4a72-9dc1-cef1cfa3ccd9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.122682Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "844ee544-f429-4235-935f-3b36217dd1cf",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "844ee544-f429-4235-935f-3b36217dd1cf",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.122582Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "47eb4c6e-6b40-477a-8694-f304b1b711d4",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "47eb4c6e-6b40-477a-8694-f304b1b711d4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.122507Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "adaac47c-6402-4ec2-9ff5-338212090420",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "adaac47c-6402-4ec2-9ff5-338212090420",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.122424Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "19e7ca3e-063d-40b9-9ba1-3a4e34a3f254",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"PosPayments\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "19e7ca3e-063d-40b9-9ba1-3a4e34a3f254",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.122322Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "PosPayments",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreatePosPaymentResponse"
          }
        }
      }
    }
  }, {
    "id" : "bde4755e-8070-4839-8f73-6a090698b66e",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "bde4755e-8070-4839-8f73-6a090698b66e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.122202Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "bd5dd230-6b28-4e5c-a504-8eb7750e7a92",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "bd5dd230-6b28-4e5c-a504-8eb7750e7a92",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.122092Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "c0a470c4-f60c-44de-9cc8-6cd15932a3dc",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c0a470c4-f60c-44de-9cc8-6cd15932a3dc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.121956Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "77d58a26-19ac-4968-a1a0-23bb1ea83e57",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "77d58a26-19ac-4968-a1a0-23bb1ea83e57",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.121857Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "0202a738-5515-490a-906d-af6482f27032",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0202a738-5515-490a-906d-af6482f27032",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.121741Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "8b9205ba-e4e2-4594-b4c1-51127ac137fe",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"change_back_cash_amount\" : 20,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"tender_id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"external\",\n    \"location_id\" : \"12345\",\n    \"external_payment_id\" : \"12345\",\n    \"approved\" : 37.5,\n    \"total\" : 37.5,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"app_fee\" : 3,\n    \"currency\" : \"USD\",\n    \"refunded\" : 37.5,\n    \"tip\" : 7,\n    \"id\" : \"12345\",\n    \"cash\" : {\n      \"amount\" : { },\n      \"charge_back_amount\" : { }\n    },\n    \"external_details\" : {\n      \"source_fee_amount\" : 2.5,\n      \"source\" : \"nyaylejhshuqlhinndlty1rhzbc688xta1nwd60zksqxwk65czm11ts3zqf11fvxd8hsgulo9gdjknb07b225yuv40uph5jv9uggji9s15hy1cwuhgdobqt5fg9frdafyvwh06cnmmv0x1dxubjbpnl8vvnm757yj81656724c8e6gb\",\n      \"source_id\" : \"qlw9\",\n      \"type\" : \"emoney\"\n    },\n    \"bank_account\" : {\n      \"country\" : \"US\",\n      \"account_ownership_type\" : \"x32jy781sau4d76jvxwabrl8simnjuk1f5sf9f9c\",\n      \"bank_name\" : \"Sari Rempel\",\n      \"fingerprint\" : \"mhbg9256kkfkiqwktscl0x5dce5islqpvt6jx4yifj5w31lniwga9lq384dmz5ctzitm3pwbokwlksot07co68vt0ahorcmms8ycpal69cu7p8nm663nw0w3axeqxiussgonsnnod\",\n      \"transfer_type\" : \"h9yqbx13i57yri3vc\",\n      \"ach_details\" : {\n        \"account_type\" : \"2p6qlkswejj02xcf0e3g70r0ct6vf2qlr\",\n        \"routing_number\" : \"epbmdl7n5l4wczrc09s7mpaqndlq09x2wyobf3drot8mj4yv7\",\n        \"account_number_suffix\" : \"ai36\"\n      },\n      \"statement_description\" : \"Est sed sit error omnis atque. Ullam voluptas voluptatem. Enim nesciunt voluptatem velit amet. Culpa atque neque animi nostrum non.\"\n    },\n    \"card_details\" : {\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"discover\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    },\n    \"amount\" : 27.5,\n    \"wallet\" : {\n      \"status\" : \"authorized\"\n    },\n    \"device_id\" : \"12345\",\n    \"processing_fees\" : [ {\n      \"amount\" : 1.05,\n      \"effective_at\" : \"2020-09-30T07:43:32.000Z\",\n      \"processing_type\" : \"initial\"\n    } ],\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"tax\" : 20,\n    \"created_by\" : \"12345\",\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"source_id\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"order_id\" : \"12345\",\n    \"status\" : \"approved\"\n  }, {\n    \"change_back_cash_amount\" : 20,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"tender_id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"external\",\n    \"location_id\" : \"12345\",\n    \"external_payment_id\" : \"12345\",\n    \"approved\" : 37.5,\n    \"total\" : 37.5,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"app_fee\" : 3,\n    \"currency\" : \"USD\",\n    \"refunded\" : 37.5,\n    \"tip\" : 7,\n    \"id\" : \"12345\",\n    \"cash\" : {\n      \"amount\" : { },\n      \"charge_back_amount\" : { }\n    },\n    \"external_details\" : {\n      \"source_fee_amount\" : 2.5,\n      \"source\" : \"s743zmo4oc2j58v2mkdj1dhc2xiqghn2vhg8p9tbjitdhn1amycjnu2h3691gw6yxwl73pjyv\",\n      \"source_id\" : \"c84f\",\n      \"type\" : \"other\"\n    },\n    \"bank_account\" : {\n      \"country\" : \"US\",\n      \"account_ownership_type\" : \"cfsoz787udhz6jwwqvszppqecdbpaywki0n\",\n      \"bank_name\" : \"Lucy Dooley\",\n      \"fingerprint\" : \"4eunpiogfiwt237c2rqogjn2qit00w17mwkqjknfk064v602s1541z6rzpifcfpxgqtnhg6amydn1vaygox75f66bfsip8lnvb6u899txs8g0rg6l4nqsskjyb4a59rz54eunto51av4azr8tie5h4wag9ff830v38lk7yuxeai6c5jvfx6rl3a0w2x8nu8qyg7ofawp85i30yfbj2wp3\",\n      \"transfer_type\" : \"02655vu2fs89tp38fwu1b4qk3yv40cli5q23nej1l3celn9\",\n      \"ach_details\" : {\n        \"account_type\" : \"bzfbv5jm3oneno3vu86ibvnc6amd1puoph8v15s0joonva2rk\",\n        \"routing_number\" : \"vg5tuacazwjoj1ab009bwi\",\n        \"account_number_suffix\" : \"0t5g\"\n      },\n      \"statement_description\" : \"Qui mollitia voluptatem nulla. Alias deleniti nihil sint natus optio. Ducimus quis repudiandae natus atque. Et veniam quo reiciendis veritatis sit vel. Aliquid temporibus qui corporis.\"\n    },\n    \"card_details\" : {\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"discover-diners\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    },\n    \"amount\" : 27.5,\n    \"wallet\" : {\n      \"status\" : \"other\"\n    },\n    \"device_id\" : \"12345\",\n    \"processing_fees\" : [ {\n      \"amount\" : 1.05,\n      \"effective_at\" : \"2020-09-30T07:43:32.000Z\",\n      \"processing_type\" : \"initial\"\n    } ],\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"tax\" : 20,\n    \"created_by\" : \"12345\",\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"source_id\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"order_id\" : \"12345\",\n    \"status\" : \"approved\"\n  }, {\n    \"change_back_cash_amount\" : 20,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"tender_id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"external\",\n    \"location_id\" : \"12345\",\n    \"external_payment_id\" : \"12345\",\n    \"approved\" : 37.5,\n    \"total\" : 37.5,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"app_fee\" : 3,\n    \"currency\" : \"USD\",\n    \"refunded\" : 37.5,\n    \"tip\" : 7,\n    \"id\" : \"12345\",\n    \"cash\" : {\n      \"amount\" : { },\n      \"charge_back_amount\" : { }\n    },\n    \"external_details\" : {\n      \"source_fee_amount\" : 2.5,\n      \"source\" : \"i3o8f2eae9hmm0n74kxte8kfwwnpa1r5ynvm4\",\n      \"source_id\" : \"t536\",\n      \"type\" : \"external\"\n    },\n    \"bank_account\" : {\n      \"country\" : \"US\",\n      \"account_ownership_type\" : \"h3nwh6h4j6j\",\n      \"bank_name\" : \"Lauran Shanahan\",\n      \"fingerprint\" : \"k2i35ssw69n7u45mtzrp2dus7iq23dt26ighw072z6vufuuxa0p65xdk\",\n      \"transfer_type\" : \"fui24i13yhyx81b7l6axwygat2nnefew2j2vr32d7yrtxhegi7\",\n      \"ach_details\" : {\n        \"account_type\" : \"iqubdo3wemyb4\",\n        \"routing_number\" : \"c3brrw4vwbl\",\n        \"account_number_suffix\" : \"txhc\"\n      },\n      \"statement_description\" : \"Autem ipsum neque aut nihil optio ipsam a. Esse velit praesentium sint minus. Dolores nam ut error eum. Velit sit voluptas temporibus laudantium. Quia error sint maiores ipsam molestiae.\"\n    },\n    \"card_details\" : {\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"square-capital-card\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    },\n    \"amount\" : 27.5,\n    \"wallet\" : {\n      \"status\" : \"other\"\n    },\n    \"device_id\" : \"12345\",\n    \"processing_fees\" : [ {\n      \"amount\" : 1.05,\n      \"effective_at\" : \"2020-09-30T07:43:32.000Z\",\n      \"processing_type\" : \"initial\"\n    } ],\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"tax\" : 20,\n    \"created_by\" : \"12345\",\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"source_id\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"order_id\" : \"12345\",\n    \"status\" : \"approved\"\n  }, {\n    \"change_back_cash_amount\" : 20,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"tender_id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"external\",\n    \"location_id\" : \"12345\",\n    \"external_payment_id\" : \"12345\",\n    \"approved\" : 37.5,\n    \"total\" : 37.5,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"app_fee\" : 3,\n    \"currency\" : \"USD\",\n    \"refunded\" : 37.5,\n    \"tip\" : 7,\n    \"id\" : \"12345\",\n    \"cash\" : {\n      \"amount\" : { },\n      \"charge_back_amount\" : { }\n    },\n    \"external_details\" : {\n      \"source_fee_amount\" : 2.5,\n      \"source\" : \"t7y8du6vylqay28eu7bhvtj0u6srzkx17gw2sq0qi2sx7qs60sgl4zv8z5tdrmcrzhhgkdlsgkikropciipuctl1wvw6cmarwmcaivxlxnc8ii\",\n      \"source_id\" : \"ei43\",\n      \"type\" : \"card\"\n    },\n    \"bank_account\" : {\n      \"country\" : \"US\",\n      \"account_ownership_type\" : \"enkxn5l2629gkpj7xbnqbo1tuoyn63izhy7j\",\n      \"bank_name\" : \"Tad Lang PhD\",\n      \"fingerprint\" : \"r9sib9sp2bvhez71gxsrb6a8phk2n9j9b4wfplmq7v7wmtprrfwbrr7f4ugwgii23jaqhyq5hiaaaelj5kxe00iz2q5vwjkvojrvonmel1iaio7et46t23pvw6sidbf5xzu1i1ghetp92c3do5sj1tjamk8qc4qdung4rc\",\n      \"transfer_type\" : \"2oa2ys45npxbsxardh3m8sbei502m4j9sg\",\n      \"ach_details\" : {\n        \"account_type\" : \"w1rjlj954frsjkwv3mudc0e54gdfj1i8\",\n        \"routing_number\" : \"p47aog99xilwg2qf7r50vbg5t9l7gj3sacgb15\",\n        \"account_number_suffix\" : \"m5nh\"\n      },\n      \"statement_description\" : \"Praesentium et ducimus voluptatem cupiditate molestiae eius non. Et et est ab. Vitae quisquam rerum. Sunt architecto sapiente.\"\n    },\n    \"card_details\" : {\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"felica\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    },\n    \"amount\" : 27.5,\n    \"wallet\" : {\n      \"status\" : \"failed\"\n    },\n    \"device_id\" : \"12345\",\n    \"processing_fees\" : [ {\n      \"amount\" : 1.05,\n      \"effective_at\" : \"2020-09-30T07:43:32.000Z\",\n      \"processing_type\" : \"initial\"\n    } ],\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"tax\" : 20,\n    \"created_by\" : \"12345\",\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"source_id\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"order_id\" : \"12345\",\n    \"status\" : \"approved\"\n  }, {\n    \"change_back_cash_amount\" : 20,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"tender_id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"external\",\n    \"location_id\" : \"12345\",\n    \"external_payment_id\" : \"12345\",\n    \"approved\" : 37.5,\n    \"total\" : 37.5,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"app_fee\" : 3,\n    \"currency\" : \"USD\",\n    \"refunded\" : 37.5,\n    \"tip\" : 7,\n    \"id\" : \"12345\",\n    \"cash\" : {\n      \"amount\" : { },\n      \"charge_back_amount\" : { }\n    },\n    \"external_details\" : {\n      \"source_fee_amount\" : 2.5,\n      \"source\" : \"3h2mae2blyxmeyk9215x3ehloqkckxcnfezeeloua2xe00n81zn0l1h9u7vcjkj9qum5o06e7p7niofclbs24dbzbue4811k92aaojh8d10erw4enzweu7b1asiblln7bg8r56nyzikva9n7m1ptczppk8aiw\",\n      \"source_id\" : \"74gj\",\n      \"type\" : \"check\"\n    },\n    \"bank_account\" : {\n      \"country\" : \"US\",\n      \"account_ownership_type\" : \"90dx2x619m79i6xo6l6jdyervy5fi35aqzce0co\",\n      \"bank_name\" : \"Ms. Taylor Funk\",\n      \"fingerprint\" : \"sn99g9mtygxx10ziey8twfy28ku16ea7av81eoygjoz0i182tf5exusazj8140t9f3ebfo4y1vlmslhbf4mvzljkn3lvimddxh44wa8zf8cg6bpvpse008eunuwy2x6vgku76j6j2zkul988vvju7nhhf\",\n      \"transfer_type\" : \"ydmn58d7hrj85l4wboe7tv99dsxvyhvs6qu9w8x5\",\n      \"ach_details\" : {\n        \"account_type\" : \"jykgtskvdmk42ua5tul3jf\",\n        \"routing_number\" : \"f218g6e2rr4qeu\",\n        \"account_number_suffix\" : \"uri8\"\n      },\n      \"statement_description\" : \"Quos itaque expedita voluptate officiis consequuntur. Quis corrupti blanditiis assumenda. Delectus provident provident illum est explicabo iusto. Optio ea unde praesentium.\"\n    },\n    \"card_details\" : {\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"discover-diners\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    },\n    \"amount\" : 27.5,\n    \"wallet\" : {\n      \"status\" : \"other\"\n    },\n    \"device_id\" : \"12345\",\n    \"processing_fees\" : [ {\n      \"amount\" : 1.05,\n      \"effective_at\" : \"2020-09-30T07:43:32.000Z\",\n      \"processing_type\" : \"initial\"\n    } ],\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"tax\" : 20,\n    \"created_by\" : \"12345\",\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"source_id\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"order_id\" : \"12345\",\n    \"status\" : \"approved\"\n  }, {\n    \"change_back_cash_amount\" : 20,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"tender_id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"external\",\n    \"location_id\" : \"12345\",\n    \"external_payment_id\" : \"12345\",\n    \"approved\" : 37.5,\n    \"total\" : 37.5,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"app_fee\" : 3,\n    \"currency\" : \"USD\",\n    \"refunded\" : 37.5,\n    \"tip\" : 7,\n    \"id\" : \"12345\",\n    \"cash\" : {\n      \"amount\" : { },\n      \"charge_back_amount\" : { }\n    },\n    \"external_details\" : {\n      \"source_fee_amount\" : 2.5,\n      \"source\" : \"qvss72vqln7i8h50zoxrwgyioo\",\n      \"source_id\" : \"1px7\",\n      \"type\" : \"stored_balance\"\n    },\n    \"bank_account\" : {\n      \"country\" : \"US\",\n      \"account_ownership_type\" : \"sjh2xejclfl0hy71ey9ar36ug5h9agwxld0g0n85\",\n      \"bank_name\" : \"Jodie Cummings II\",\n      \"fingerprint\" : \"aycieiinjrnfhyyxcp9m4innhovw97\",\n      \"transfer_type\" : \"q62f1rji29vtyc9jn5p62o19lymvvi\",\n      \"ach_details\" : {\n        \"account_type\" : \"e6x\",\n        \"routing_number\" : \"yyz2hhqxhmt4ayes7dlqlc0j6b5lr65mubhjaxv2d9kf0\",\n        \"account_number_suffix\" : \"rydv\"\n      },\n      \"statement_description\" : \"Alias voluptas non repellendus cum mollitia. Eos natus ducimus ut et totam. Quae reprehenderit odio. Sapiente perferendis iure voluptate. Nulla alias eos est quas autem.\"\n    },\n    \"card_details\" : {\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"visa\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    },\n    \"amount\" : 27.5,\n    \"wallet\" : {\n      \"status\" : \"captured\"\n    },\n    \"device_id\" : \"12345\",\n    \"processing_fees\" : [ {\n      \"amount\" : 1.05,\n      \"effective_at\" : \"2020-09-30T07:43:32.000Z\",\n      \"processing_type\" : \"initial\"\n    } ],\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"tax\" : 20,\n    \"created_by\" : \"12345\",\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"source_id\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"order_id\" : \"12345\",\n    \"status\" : \"approved\"\n  }, {\n    \"change_back_cash_amount\" : 20,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"tender_id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"external\",\n    \"location_id\" : \"12345\",\n    \"external_payment_id\" : \"12345\",\n    \"approved\" : 37.5,\n    \"total\" : 37.5,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"app_fee\" : 3,\n    \"currency\" : \"USD\",\n    \"refunded\" : 37.5,\n    \"tip\" : 7,\n    \"id\" : \"12345\",\n    \"cash\" : {\n      \"amount\" : { },\n      \"charge_back_amount\" : { }\n    },\n    \"external_details\" : {\n      \"source_fee_amount\" : 2.5,\n      \"source\" : \"xko36n2pn02op0kt0h9kf0395ovh1yghe1vxxnsu3et2o3ctapnq4qb2ab8lu98sd1hg8kaav7aubgups15u637iyf769cr6su9b22657ob03ytd0moe2n8ynlnabbz9pv37gplrb4c746gtd7qjfainfspezy8f6mj0ixv47wf499ipedlgqch645fhqt83y3uyn24xzq6fytoaxuxzydht83f0zga9lqr8gg3xn9sv\",\n      \"source_id\" : \"l792\",\n      \"type\" : \"check\"\n    },\n    \"bank_account\" : {\n      \"country\" : \"US\",\n      \"account_ownership_type\" : \"x0mv02eugoux3b3\",\n      \"bank_name\" : \"Alva Morissette\",\n      \"fingerprint\" : \"3hruj7yh50ygnywoqnujpiubkv42otff4vsbrd3dx7v3b415oqhpy61mi127go94upmup6poqj7qoa778337vv56kskhii4b9q5xbohyl4w9416kymob6mfvl3m6un34lr5qr69ni9n8hu9mkyg3e3yeisgcw8vnpbe\",\n      \"transfer_type\" : \"ynzsotv35v9yticbgjksp6yg4b2t1xlyfi5umtap9ubv\",\n      \"ach_details\" : {\n        \"account_type\" : \"mz2bxd56virp34z8ett2mxi0zca5fy\",\n        \"routing_number\" : \"mx5cy43yp5xv5mp6vdx1c6ctxbc3mj5pw7gztopwdaz1o0p\",\n        \"account_number_suffix\" : \"v2v2\"\n      },\n      \"statement_description\" : \"Quis debitis in et aliquam eveniet. Eos eveniet porro totam. Mollitia accusantium ut cum quaerat eveniet tenetur omnis. Aliquid illo ullam dicta voluptatem quia. Repudiandae aut sint.\"\n    },\n    \"card_details\" : {\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"discover\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    },\n    \"amount\" : 27.5,\n    \"wallet\" : {\n      \"status\" : \"voided\"\n    },\n    \"device_id\" : \"12345\",\n    \"processing_fees\" : [ {\n      \"amount\" : 1.05,\n      \"effective_at\" : \"2020-09-30T07:43:32.000Z\",\n      \"processing_type\" : \"initial\"\n    } ],\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"tax\" : 20,\n    \"created_by\" : \"12345\",\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"source_id\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"order_id\" : \"12345\",\n    \"status\" : \"approved\"\n  } ],\n  \"resource\" : \"PosPayments\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8b9205ba-e4e2-4594-b4c1-51127ac137fe",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.121576Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/PosPayment"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "PosPayments",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetPosPaymentsResponse",
            "x-graphql-type-name" : "PosPaymentList"
          }
        }
      }
    }
  }, {
    "id" : "05526bb7-f5de-4608-ae5e-d52583ba63bc",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/lryp/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "05526bb7-f5de-4608-ae5e-d52583ba63bc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.116979Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "18c41ba4-abf4-4cdf-8ad6-49f14b6fa625",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/35o1/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "18c41ba4-abf4-4cdf-8ad6-49f14b6fa625",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.116848Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "ddf5a979-0a28-40d8-9d54-2de1a1bf5607",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/3yo6/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ddf5a979-0a28-40d8-9d54-2de1a1bf5607",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.116695Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "038b68e6-b499-4542-92d4-a044804947de",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/5t6d/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "038b68e6-b499-4542-92d4-a044804947de",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.116562Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "5d62ff04-4867-48f5-b4e9-8bfc0c0bfe54",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/b1qa/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5d62ff04-4867-48f5-b4e9-8bfc0c0bfe54",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.116426Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "4f14accd-5343-45a4-9691-732587022fc9",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/tc8b/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"orders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4f14accd-5343-45a4-9691-732587022fc9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.116276Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateOrderResponse"
          }
        }
      }
    }
  }, {
    "id" : "ed8ffdaa-d602-46a1-b430-fd92dbe2749f",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/7541",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ed8ffdaa-d602-46a1-b430-fd92dbe2749f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.116108Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "966f1b21-2911-4d14-8eaa-0404a34c765f",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/9t16",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "966f1b21-2911-4d14-8eaa-0404a34c765f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.11598Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "b6b4c771-099c-468c-988a-2b2222942a43",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/uhiq",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b6b4c771-099c-468c-988a-2b2222942a43",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.115823Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "4011f4f1-dff3-4c47-81af-77ef40526165",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/9qs3",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4011f4f1-dff3-4c47-81af-77ef40526165",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.115688Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "aeef02e1-6ab2-40b5-9b42-5d1ef5ed108e",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/xolp",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "aeef02e1-6ab2-40b5-9b42-5d1ef5ed108e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.115555Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "788ddf0e-a582-4f60-9a08-a615a164bca2",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/o10p",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"orders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "788ddf0e-a582-4f60-9a08-a615a164bca2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.115399Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateOrderResponse"
          }
        }
      }
    }
  }, {
    "id" : "39f1237e-c998-4236-81cf-9e057639f8c9",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/2iss",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "39f1237e-c998-4236-81cf-9e057639f8c9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.115222Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "2679c436-6b58-4f41-9319-d70b3c43bdae",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/zb42",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2679c436-6b58-4f41-9319-d70b3c43bdae",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.115058Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "2c5b4a85-2437-4189-943d-f5dc4cd11baa",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/8637",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2c5b4a85-2437-4189-943d-f5dc4cd11baa",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.114864Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "5d521751-40a8-45cd-9e61-9bd85c2890d7",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/08i1",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5d521751-40a8-45cd-9e61-9bd85c2890d7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.114712Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "4b521b7d-1c62-479e-8901-c5fd197252af",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/t52i",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4b521b7d-1c62-479e-8901-c5fd197252af",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.114549Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "1952c35f-2c6e-4957-8b9c-8cea6827bb0f",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/2nu8",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"note\" : \"tify6qtqnhr67dzewfirh\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Qui aut et.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"pending\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : {\n          \"curbside_details\" : \"mmvy019smjq2obbkupularslvagabbm6on4ff64q1rja3i6du2ca190xvjlvpjc2cul575lmge4h17wtfjwp77vh51c4ebeqyygzsfs7q7x9ss0bwssv0testrwdsd4jrcaiii8t472ne3av6s5hcfkau1jtzbj7rfvuxkd0aujvaub5l3v9g954lsvu1zb8e473m3gtr6gxosaiw6azifm8yo9mg0ze3yy5jh4fg6dsck\",\n          \"buyer_arrived_at\" : \"2016-09-04T23:59:33.123Z\"\n        },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : {\n          \"address\" : { },\n          \"phone_number\" : {\n            \"number\" : \"111-111-1111\"\n          },\n          \"customer_id\" : \"12345\",\n          \"display_name\" : \"Elon Musk\",\n          \"email\" : {\n            \"email\" : \"elon@musk.com\"\n          }\n        },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"other\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : {\n          \"curbside_details\" : \"n1zquvyatrwf3cx04fm6vhctyro64ht72udfvma09uoc2gbhzrsw9m9f1ijw2sjtzbd7myxw9a30sznp7f226jsi7xnu4bopri2hjko6ls\",\n          \"buyer_arrived_at\" : \"2016-09-04T23:59:33.123Z\"\n        },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : {\n          \"address\" : { },\n          \"phone_number\" : {\n            \"number\" : \"111-111-1111\"\n          },\n          \"customer_id\" : \"12345\",\n          \"display_name\" : \"Elon Musk\",\n          \"email\" : {\n            \"email\" : \"elon@musk.com\"\n          }\n        },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"prepared\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : {\n          \"curbside_details\" : \"bc3q65ee1jr1pgt9vjutjlzq1228bog03xtrftxhrop9q5rdi5j6yc8c597sdh6sepspml1sa9iy347uekdppdf242k4ptk8lkdn7s49m7lqeyktkgmgo7o2l1a41cxoaavahbkulpfaw2mjbirwc4bu1m1fyu5j04ruy2cxmjnldn9ur13gnidsj20h42cbgt5\",\n          \"buyer_arrived_at\" : \"2016-09-04T23:59:33.123Z\"\n        },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : {\n          \"address\" : { },\n          \"phone_number\" : {\n            \"number\" : \"111-111-1111\"\n          },\n          \"customer_id\" : \"12345\",\n          \"display_name\" : \"Elon Musk\",\n          \"email\" : {\n            \"email\" : \"elon@musk.com\"\n          }\n        },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"other\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : {\n          \"curbside_details\" : \"kz6w2wqy258t3vk6m17ewqp\",\n          \"buyer_arrived_at\" : \"2016-09-04T23:59:33.123Z\"\n        },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : {\n          \"address\" : { },\n          \"phone_number\" : {\n            \"number\" : \"111-111-1111\"\n          },\n          \"customer_id\" : \"12345\",\n          \"display_name\" : \"Elon Musk\",\n          \"email\" : {\n            \"email\" : \"elon@musk.com\"\n          }\n        },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"failed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : {\n          \"curbside_details\" : \"rjw5y4vlwsdc02py8923q7s5bxl5dllwwlg81ppophsw64yqpxlnplj716klbkkl19nrcyn5skkpldce0ui2bed9mhhwliehjrmelz65hv98fmred2k6gld7e0iyrsnxd2l5z9cnrou37hvd1ahh0773jt9\",\n          \"buyer_arrived_at\" : \"2016-09-04T23:59:33.123Z\"\n        },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : {\n          \"address\" : { },\n          \"phone_number\" : {\n            \"number\" : \"111-111-1111\"\n          },\n          \"customer_id\" : \"12345\",\n          \"display_name\" : \"Elon Musk\",\n          \"email\" : {\n            \"email\" : \"elon@musk.com\"\n          }\n        },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"failed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : {\n          \"curbside_details\" : \"4aj7ivbwyb369u75h4zt3xwro7d\",\n          \"buyer_arrived_at\" : \"2016-09-04T23:59:33.123Z\"\n        },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : {\n          \"address\" : { },\n          \"phone_number\" : {\n            \"number\" : \"111-111-1111\"\n          },\n          \"customer_id\" : \"12345\",\n          \"display_name\" : \"Elon Musk\",\n          \"email\" : {\n            \"email\" : \"elon@musk.com\"\n          }\n        },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"other\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : {\n          \"curbside_details\" : \"us8o711b6ptoi8fm5rq2dyd995s8btd5zxueu4gsers1hgjry7nyn729p0ru2wr7pt3kpo3v3k4gu1z3tby3se45x5te2ogqbfwixse1u81v\",\n          \"buyer_arrived_at\" : \"2016-09-04T23:59:33.123Z\"\n        },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : {\n          \"address\" : { },\n          \"phone_number\" : {\n            \"number\" : \"111-111-1111\"\n          },\n          \"customer_id\" : \"12345\",\n          \"display_name\" : \"Elon Musk\",\n          \"email\" : {\n            \"email\" : \"elon@musk.com\"\n          }\n        },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"proposed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : {\n          \"curbside_details\" : \"x4ph2nqg8otfv4gquxrrctss4d2sw00cuk6uap3652y5o0ywa1o5jm8d8akikbakmaxk6rfbeb2h93cqjii3om04fsjlvehi5jb2ladc83dbbwadd70jzud703gz5pumb6m9gnqc1noqheb7cpe2r8n4jwaop05ocfwcrw6neqyn4ntmwblrslue82tiwbywgjcdkeht4c0m8hyh1x3bzlidzqiapm8n3\",\n          \"buyer_arrived_at\" : \"2016-09-04T23:59:33.123Z\"\n        },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : {\n          \"address\" : { },\n          \"phone_number\" : {\n            \"number\" : \"111-111-1111\"\n          },\n          \"customer_id\" : \"12345\",\n          \"display_name\" : \"Elon Musk\",\n          \"email\" : {\n            \"email\" : \"elon@musk.com\"\n          }\n        },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"prepared\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"amex\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"china-unionpay\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"visa\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"eftpos\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"eftpos\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"other\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"china-unionpay\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  },\n  \"resource\" : \"orders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1952c35f-2c6e-4957-8b9c-8cea6827bb0f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.114332Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Order"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetOrderResponse",
            "x-graphql-type-name" : "Order"
          }
        }
      }
    }
  }, {
    "id" : "23779f66-1a46-49af-b776-123eefc6b36f",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/up16",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "23779f66-1a46-49af-b776-123eefc6b36f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.11101Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "60677880-d6be-4208-8687-09bb0b628714",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/65a9",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "60677880-d6be-4208-8687-09bb0b628714",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.110873Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "02e3f13c-0f03-460b-a856-ca38cef46932",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/39d9",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "02e3f13c-0f03-460b-a856-ca38cef46932",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.110718Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "a3b5b26e-6884-4a89-8c06-ded3ea895b76",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/02mc",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a3b5b26e-6884-4a89-8c06-ded3ea895b76",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.110589Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "cd86263f-ede7-4aca-b5e8-a7d6ac72f24f",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/ycbs",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "cd86263f-ede7-4aca-b5e8-a7d6ac72f24f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.11045Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "9843b9f4-44b1-4969-87a3-16305a43fee8",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/s35w",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"orders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9843b9f4-44b1-4969-87a3-16305a43fee8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.110271Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteOrderResponse"
          }
        }
      }
    }
  }, {
    "id" : "857bebb6-f211-4c7d-83af-d9433c2f53da",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "857bebb6-f211-4c7d-83af-d9433c2f53da",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.110004Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "2599f467-0da6-4797-92f0-03fee2ff432a",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2599f467-0da6-4797-92f0-03fee2ff432a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.109916Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "9fdbe9fa-7919-4289-a0b4-021390dc5886",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9fdbe9fa-7919-4289-a0b4-021390dc5886",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.109799Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "a1a097b9-331c-4c5a-b255-09745c72eaa0",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a1a097b9-331c-4c5a-b255-09745c72eaa0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.109667Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "9511d558-0a7d-47a9-9ce2-876840026e10",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9511d558-0a7d-47a9-9ce2-876840026e10",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.109518Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "67c95510-68f8-47a9-8604-890d5a492bab",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"orders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "67c95510-68f8-47a9-8604-890d5a492bab",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.109422Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateOrderResponse"
          }
        }
      }
    }
  }, {
    "id" : "92c1aabe-58a7-4c4e-bbf6-6e8159881058",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "92c1aabe-58a7-4c4e-bbf6-6e8159881058",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.109297Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "5d788b0c-f83e-4634-8d3a-27feb7a103c0",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5d788b0c-f83e-4634-8d3a-27feb7a103c0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.109203Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "8fddabc0-38be-4ec8-8f0e-ea07396db5d4",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8fddabc0-38be-4ec8-8f0e-ea07396db5d4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.109081Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "df6ef540-66aa-4888-8948-377f45dc9fbb",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "df6ef540-66aa-4888-8948-377f45dc9fbb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.108993Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "4cdb4580-5493-4a5f-8bf0-e64db46a66f7",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4cdb4580-5493-4a5f-8bf0-e64db46a66f7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.108896Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "ec244d7a-5360-441b-961e-4f2912479eab",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"note\" : \"3cchsfcz2n6vv5vp8q7hlro4sd1e6qapn0cf5f6p0j7gagmru1oj3p4vflizd3fn9kcqi0aumntne4xncf\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Cum quas aliquam quam.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"reserved\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"proposed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"failed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"cancelled\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"cancelled\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"square-gift-card\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"amex\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"discover-diners\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"amex\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"visa\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"discover-diners\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"amex\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  } ],\n  \"resource\" : \"orders\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"clover\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ec244d7a-5360-441b-961e-4f2912479eab",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.108759Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Order"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetOrdersResponse",
            "x-graphql-type-name" : "OrderList"
          }
        }
      }
    }
  }, {
    "id" : "cfc9a875-3823-41ef-9c55-73384f352905",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/412f",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "cfc9a875-3823-41ef-9c55-73384f352905",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.106318Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "53d31f1b-c6a2-4188-9afe-12da1c8aca36",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/9qwi",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "53d31f1b-c6a2-4188-9afe-12da1c8aca36",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.106175Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "09386d94-3af0-48cc-bedb-0317f88fc2ae",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/r9j8",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "09386d94-3af0-48cc-bedb-0317f88fc2ae",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.106021Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "f31a5b81-38ec-45c9-9699-4767c2eedd75",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/9l7f",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f31a5b81-38ec-45c9-9699-4767c2eedd75",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.105884Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "73e0f729-95c7-468c-8ccd-8bcd7680e996",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/9i62",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "73e0f729-95c7-468c-8ccd-8bcd7680e996",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.105753Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "d32802e0-a8f5-4315-8bc9-82a99fff9b4d",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/y7wp",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"OrderTypes\",\n  \"service\" : \"clover\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d32802e0-a8f5-4315-8bc9-82a99fff9b4d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.105594Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "OrderTypes",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateOrderTypeResponse"
          }
        }
      }
    }
  }, {
    "id" : "0c5046c5-8e38-405e-8257-14cc4bb5bd13",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/e8d7",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0c5046c5-8e38-405e-8257-14cc4bb5bd13",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.105418Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "63e2a795-1443-4871-a143-5a0afc8bddc8",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/r201",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "63e2a795-1443-4871-a143-5a0afc8bddc8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.105274Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "b160eda6-913e-4cc0-b7e0-eca43c12f3ec",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/5nl9",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b160eda6-913e-4cc0-b7e0-eca43c12f3ec",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.105112Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "83515f33-b525-4c93-9f1f-35ffaf34fe8b",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/v2y3",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "83515f33-b525-4c93-9f1f-35ffaf34fe8b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.104976Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "6f62fb37-8768-4113-bf3c-2f03b0e3a2f8",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/g55l",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6f62fb37-8768-4113-bf3c-2f03b0e3a2f8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.104818Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "6b89ddfc-7aa5-4335-8e64-ec42d0b0932d",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/389d",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"default\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Default order type\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  },\n  \"resource\" : \"OrderTypes\",\n  \"service\" : \"clover\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6b89ddfc-7aa5-4335-8e64-ec42d0b0932d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.10464Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/OrderType"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "OrderTypes",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetOrderTypeResponse",
            "x-graphql-type-name" : "OrderType"
          }
        }
      }
    }
  }, {
    "id" : "f2f745cc-274b-4993-8bea-566c396bfb10",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/y503",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f2f745cc-274b-4993-8bea-566c396bfb10",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.104449Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "b7b67575-1908-4ad4-a12e-1e494ccc34e8",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/jn8m",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b7b67575-1908-4ad4-a12e-1e494ccc34e8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.104294Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "02a17260-0e4c-40ee-a8b2-aac54507feec",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/8k9d",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "02a17260-0e4c-40ee-a8b2-aac54507feec",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.104111Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "1341d277-4edd-4a5b-b6a8-4b24d6f3fe61",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/x7c5",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1341d277-4edd-4a5b-b6a8-4b24d6f3fe61",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.103962Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "e72be986-9880-4195-b941-2d0010233e22",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/r0mn",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e72be986-9880-4195-b941-2d0010233e22",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.103829Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "5eac2329-8ded-47e5-a746-12a705fe434d",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/7u29",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"OrderTypes\",\n  \"service\" : \"clover\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5eac2329-8ded-47e5-a746-12a705fe434d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.103677Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "OrderTypes",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteOrderTypeResponse"
          }
        }
      }
    }
  }, {
    "id" : "5c231b12-eea8-49d7-a7c8-ab7f427163e2",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5c231b12-eea8-49d7-a7c8-ab7f427163e2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.103484Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "e7c8369b-9176-4eb9-8b7f-9e34438970a3",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e7c8369b-9176-4eb9-8b7f-9e34438970a3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.103415Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "4c639fe5-64e8-4681-bcf7-ff870f8e4557",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4c639fe5-64e8-4681-bcf7-ff870f8e4557",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.103327Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "36f7804e-3c66-4f7d-bd7f-2ec6441cc6bb",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "36f7804e-3c66-4f7d-bd7f-2ec6441cc6bb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.103259Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "60a1d045-5af4-47d9-8bbe-125a5a776e03",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "60a1d045-5af4-47d9-8bbe-125a5a776e03",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.103189Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "70df73e2-9016-4147-b00e-f512ec252494",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"OrderTypes\",\n  \"service\" : \"clover\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "70df73e2-9016-4147-b00e-f512ec252494",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.1031Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "OrderTypes",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateOrderTypeResponse"
          }
        }
      }
    }
  }, {
    "id" : "5608ac5d-d132-4736-af98-5cd226842cd6",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5608ac5d-d132-4736-af98-5cd226842cd6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.102994Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "944798ce-4a3a-4da7-b19f-28e8ee5e6470",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "944798ce-4a3a-4da7-b19f-28e8ee5e6470",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.102924Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "113935ed-0142-4748-bc89-ad4b8bbee6c1",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "113935ed-0142-4748-bc89-ad4b8bbee6c1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.102836Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "4f347442-acdf-45df-a8e2-8e959b8c15b5",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4f347442-acdf-45df-a8e2-8e959b8c15b5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.10277Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "1127154b-3cf0-45c6-b609-fa7e77e94c26",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1127154b-3cf0-45c6-b609-fa7e77e94c26",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.1027Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "ba9a3c8e-be44-4dba-9500-e0ae82a4f7ce",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"default\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Default order type\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"default\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Default order type\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  } ],\n  \"resource\" : \"OrderTypes\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"clover\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ba9a3c8e-be44-4dba-9500-e0ae82a4f7ce",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.102614Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/OrderType"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "OrderTypes",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetOrderTypesResponse",
            "x-graphql-type-name" : "OrderTypeList"
          }
        }
      }
    }
  }, {
    "id" : "659aa00a-94e0-4556-81eb-5a462d037b83",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/z613",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "659aa00a-94e0-4556-81eb-5a462d037b83",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.102431Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "44c48104-3a63-4ce8-a080-4ba77471de33",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/zkfw",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "44c48104-3a63-4ce8-a080-4ba77471de33",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.102305Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "ea94f050-175d-4ef8-815d-f8707c8c4be8",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/rat6",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ea94f050-175d-4ef8-815d-f8707c8c4be8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.10216Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "e66c3831-63ab-48ba-8546-aa0160f879ac",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/q8g1",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e66c3831-63ab-48ba-8546-aa0160f879ac",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.102037Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "3b024bcc-ca7f-4806-916a-a48294c9ded6",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/o481",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3b024bcc-ca7f-4806-916a-a48294c9ded6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.101913Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "3a287432-24ef-4283-8b24-22598c4fc91d",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/t4qv",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Modifiers\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3a287432-24ef-4283-8b24-22598c4fc91d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.101767Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Modifiers",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateModifierResponse"
          }
        }
      }
    }
  }, {
    "id" : "4d5177c2-ebd5-496a-a8f6-51b0a3704c92",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/q9p7",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4d5177c2-ebd5-496a-a8f6-51b0a3704c92",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.1016Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "5aa22832-b646-4e30-b238-5e7bff71a226",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/m7t9",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5aa22832-b646-4e30-b238-5e7bff71a226",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.101472Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "b55159a3-2a95-463e-9cd2-ca8c96cac9dc",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/k5t3",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b55159a3-2a95-463e-9cd2-ca8c96cac9dc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.101321Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "13955ec2-dee9-461a-8382-cc9f3482ef31",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/c8r6",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "13955ec2-dee9-461a-8382-cc9f3482ef31",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.1012Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "1649570a-3594-4f28-9386-733c56fd0a43",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/y3r2",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1649570a-3594-4f28-9386-733c56fd0a43",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.10107Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "9cadb126-8442-4a60-8a3e-6b915c18598f",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/55os",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  },\n  \"resource\" : \"Modifiers\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9cadb126-8442-4a60-8a3e-6b915c18598f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.100924Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Modifier"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Modifiers",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetModifierResponse",
            "x-graphql-type-name" : "Modifier"
          }
        }
      }
    }
  }, {
    "id" : "f74e07c4-0470-4aba-a9de-4c671c993307",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/8cqs",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f74e07c4-0470-4aba-a9de-4c671c993307",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.100726Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "43a5a46a-25d9-4b04-a844-4f3abc0fd36d",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/r46x",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "43a5a46a-25d9-4b04-a844-4f3abc0fd36d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.100599Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "de9c1dce-9548-4035-9033-ddc5cdbb7d53",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/5g5f",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "de9c1dce-9548-4035-9033-ddc5cdbb7d53",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.100449Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "c0e10544-86ff-43cd-a8ca-8bf68d765118",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/4500",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c0e10544-86ff-43cd-a8ca-8bf68d765118",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.100317Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "e8836007-031e-4874-85ff-e2b64b24fb2a",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/d626",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e8836007-031e-4874-85ff-e2b64b24fb2a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.100185Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "571ae2e7-c623-46d1-9484-fe685ba3da08",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/8l61",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Modifiers\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "571ae2e7-c623-46d1-9484-fe685ba3da08",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.100029Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Modifiers",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteModifierResponse"
          }
        }
      }
    }
  }, {
    "id" : "283e8bce-17a0-4342-a884-79a077a1ed55",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "283e8bce-17a0-4342-a884-79a077a1ed55",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.099825Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "90151fa5-d475-4efb-a86d-485d732177b7",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "90151fa5-d475-4efb-a86d-485d732177b7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.099754Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "a114effa-f6d4-41b8-8780-110f7f64b0b3",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a114effa-f6d4-41b8-8780-110f7f64b0b3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.099655Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "893e88cf-dc99-415f-85d6-c7545dc1e1d4",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "893e88cf-dc99-415f-85d6-c7545dc1e1d4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.099584Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "7e21c382-0aec-4ebd-9107-61709c7bb456",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7e21c382-0aec-4ebd-9107-61709c7bb456",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.09951Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "1d2e2219-623f-4e70-a9bc-cba2ba5ae0a8",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Modifiers\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1d2e2219-623f-4e70-a9bc-cba2ba5ae0a8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.099395Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Modifiers",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateModifierResponse"
          }
        }
      }
    }
  }, {
    "id" : "984715f7-35c3-4479-9ad7-beac735c1b5f",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "984715f7-35c3-4479-9ad7-beac735c1b5f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.099282Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "bf280490-f1a5-45b3-ae83-90f78d13e466",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "bf280490-f1a5-45b3-ae83-90f78d13e466",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.099208Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "3d1a4d1d-531f-427e-b7a6-0f2faa6c978b",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3d1a4d1d-531f-427e-b7a6-0f2faa6c978b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.099112Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "f5d22c35-e614-4c1a-bfa9-bac934586e2a",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f5d22c35-e614-4c1a-bfa9-bac934586e2a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.099037Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "1f9a19a1-ea9d-456b-b30c-0031742c2524",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1f9a19a1-ea9d-456b-b30c-0031742c2524",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.098958Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "7f95ec22-fd8d-404f-8a68-3d96dde58c0d",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  } ],\n  \"resource\" : \"Modifiers\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7f95ec22-fd8d-404f-8a68-3d96dde58c0d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.098854Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Modifier"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Modifiers",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetModifiersResponse",
            "x-graphql-type-name" : "ModifierList"
          }
        }
      }
    }
  }, {
    "id" : "dd13e329-e270-4aa1-a71d-275f67e8ad0f",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/3onn",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "dd13e329-e270-4aa1-a71d-275f67e8ad0f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.098625Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "3394abce-83c5-401d-a687-2ad55b6f517f",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/m852",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3394abce-83c5-401d-a687-2ad55b6f517f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.098489Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "79d6f88d-d934-4dad-8954-d5ae0396d13e",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/i906",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "79d6f88d-d934-4dad-8954-d5ae0396d13e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.098322Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "4111293a-3a69-4ab5-a3a7-0031ddafdaa4",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/zi0z",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4111293a-3a69-4ab5-a3a7-0031ddafdaa4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.098174Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "435aa0a9-1be7-4ce9-9bc9-14b0eca7b306",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/tn40",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "435aa0a9-1be7-4ce9-9bc9-14b0eca7b306",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.097965Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "e80dd4a1-6a6d-4892-b554-efe8bcf1323a",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/1jm1",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"ModifierGroups\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e80dd4a1-6a6d-4892-b554-efe8bcf1323a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.097814Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "ModifierGroups",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateModifierGroupResponse"
          }
        }
      }
    }
  }, {
    "id" : "e00b30e8-a983-4792-bfc2-8c68e09e1560",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/i96z",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e00b30e8-a983-4792-bfc2-8c68e09e1560",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.09765Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "b069e673-2216-44af-b293-aa2f76e08d63",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/2a81",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b069e673-2216-44af-b293-aa2f76e08d63",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.097517Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "01e413e6-8722-4077-98f0-d59ee65e4e5d",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/x98q",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "01e413e6-8722-4077-98f0-d59ee65e4e5d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.097359Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "60fbc137-a34d-4b38-89b5-689d43756a16",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/0qex",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "60fbc137-a34d-4b38-89b5-689d43756a16",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.097218Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "e783acb8-9830-45bc-87bd-6c9945ddb2ab",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/e06l",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e783acb8-9830-45bc-87bd-6c9945ddb2ab",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.097073Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "31bdac8c-6495-428d-8717-7a5096829917",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/l659",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"alternate_name\" : \"Modifier New\",\n    \"maximum_allowed\" : 5,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"modifiers\" : [ {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"created_by\" : \"12345\",\n    \"present_at_all_locations\" : false,\n    \"selection_type\" : \"single\",\n    \"deleted\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"row_version\" : \"1-12345\",\n    \"minimum_required\" : 1,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"ModifierGroups\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "31bdac8c-6495-428d-8717-7a5096829917",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.09691Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/ModifierGroup"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "ModifierGroups",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetModifierGroupResponse",
            "x-graphql-type-name" : "ModifierGroup"
          }
        }
      }
    }
  }, {
    "id" : "7f279fe1-be7a-4f87-8be7-ea70bc7a0037",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/has3",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7f279fe1-be7a-4f87-8be7-ea70bc7a0037",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.096624Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "759295b8-12e6-4e78-b0e2-bf189364674f",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/ux2k",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "759295b8-12e6-4e78-b0e2-bf189364674f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.096482Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "5d6b190d-b986-4338-969e-7e221009b72d",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/n13w",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5d6b190d-b986-4338-969e-7e221009b72d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.09632Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "b9f8dac5-007c-4f58-9efa-1862a75a27a1",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/1180",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b9f8dac5-007c-4f58-9efa-1862a75a27a1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.096182Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "ba54e02b-b3f3-4800-9f7b-792ced76989c",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/cq6v",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ba54e02b-b3f3-4800-9f7b-792ced76989c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.096044Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "8e3b6cec-85d0-4259-9474-f25c4dd93f0b",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/70cz",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"ModifierGroups\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8e3b6cec-85d0-4259-9474-f25c4dd93f0b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.095892Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "ModifierGroups",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteModifierGroupResponse"
          }
        }
      }
    }
  }, {
    "id" : "b9604af9-6680-4afd-a137-50273d189403",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b9604af9-6680-4afd-a137-50273d189403",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.095717Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "d2756ed3-3de1-4e7c-81f2-9de3bc7218f2",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d2756ed3-3de1-4e7c-81f2-9de3bc7218f2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.095644Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "5e6904e7-c48a-415a-aa1c-a8c574bc1ac8",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5e6904e7-c48a-415a-aa1c-a8c574bc1ac8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.095545Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "d715a71b-e750-478d-a3a4-b9a372483afa",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d715a71b-e750-478d-a3a4-b9a372483afa",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.095473Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "18a1855f-38d5-4a26-955e-b64070f051be",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "18a1855f-38d5-4a26-955e-b64070f051be",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.095403Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "914588e3-8022-4843-8206-a8884a9d26d5",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"ModifierGroups\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "914588e3-8022-4843-8206-a8884a9d26d5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.09531Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "ModifierGroups",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateModifierGroupResponse"
          }
        }
      }
    }
  }, {
    "id" : "e10fe51b-74e4-435c-9920-b4c21e85c936",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e10fe51b-74e4-435c-9920-b4c21e85c936",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.095198Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "37b418f0-5ce0-4777-8afe-ab72b483d8dc",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "37b418f0-5ce0-4777-8afe-ab72b483d8dc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.095113Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "2c218393-9306-4d71-9760-6cc2da21cf35",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2c218393-9306-4d71-9760-6cc2da21cf35",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.095003Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "d061232f-83b2-4292-bb7a-d84156fc4692",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d061232f-83b2-4292-bb7a-d84156fc4692",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.094916Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "4a14df0d-2cb4-46ac-b55d-f55fdcee7229",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4a14df0d-2cb4-46ac-b55d-f55fdcee7229",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.094833Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "6cbf2a1b-8d71-4fdf-a2f0-6efdf71abe99",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"alternate_name\" : \"Modifier New\",\n    \"maximum_allowed\" : 5,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"modifiers\" : [ {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"created_by\" : \"12345\",\n    \"present_at_all_locations\" : false,\n    \"selection_type\" : \"single\",\n    \"deleted\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"row_version\" : \"1-12345\",\n    \"minimum_required\" : 1,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"id\" : \"12345\"\n  }, {\n    \"alternate_name\" : \"Modifier New\",\n    \"maximum_allowed\" : 5,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"modifiers\" : [ {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"created_by\" : \"12345\",\n    \"present_at_all_locations\" : false,\n    \"selection_type\" : \"single\",\n    \"deleted\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"row_version\" : \"1-12345\",\n    \"minimum_required\" : 1,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"id\" : \"12345\"\n  }, {\n    \"alternate_name\" : \"Modifier New\",\n    \"maximum_allowed\" : 5,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"modifiers\" : [ {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"created_by\" : \"12345\",\n    \"present_at_all_locations\" : false,\n    \"selection_type\" : \"single\",\n    \"deleted\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"row_version\" : \"1-12345\",\n    \"minimum_required\" : 1,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"id\" : \"12345\"\n  }, {\n    \"alternate_name\" : \"Modifier New\",\n    \"maximum_allowed\" : 5,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"modifiers\" : [ {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"created_by\" : \"12345\",\n    \"present_at_all_locations\" : false,\n    \"selection_type\" : \"single\",\n    \"deleted\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"row_version\" : \"1-12345\",\n    \"minimum_required\" : 1,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"id\" : \"12345\"\n  }, {\n    \"alternate_name\" : \"Modifier New\",\n    \"maximum_allowed\" : 5,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"modifiers\" : [ {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"created_by\" : \"12345\",\n    \"present_at_all_locations\" : false,\n    \"selection_type\" : \"single\",\n    \"deleted\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"row_version\" : \"1-12345\",\n    \"minimum_required\" : 1,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"id\" : \"12345\"\n  }, {\n    \"alternate_name\" : \"Modifier New\",\n    \"maximum_allowed\" : 5,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"modifiers\" : [ {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"created_by\" : \"12345\",\n    \"present_at_all_locations\" : false,\n    \"selection_type\" : \"single\",\n    \"deleted\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"row_version\" : \"1-12345\",\n    \"minimum_required\" : 1,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"id\" : \"12345\"\n  }, {\n    \"alternate_name\" : \"Modifier New\",\n    \"maximum_allowed\" : 5,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"modifiers\" : [ {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"created_by\" : \"12345\",\n    \"present_at_all_locations\" : false,\n    \"selection_type\" : \"single\",\n    \"deleted\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"row_version\" : \"1-12345\",\n    \"minimum_required\" : 1,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"id\" : \"12345\"\n  } ],\n  \"resource\" : \"ModifierGroups\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6cbf2a1b-8d71-4fdf-a2f0-6efdf71abe99",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.094702Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/ModifierGroup"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "ModifierGroups",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetModifierGroupsResponse",
            "x-graphql-type-name" : "ModifierGroupList"
          }
        }
      }
    }
  }, {
    "id" : "88e35121-c0ef-4600-bd89-00a0e6121188",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/7or6",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "88e35121-c0ef-4600-bd89-00a0e6121188",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.094037Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "fcf9369d-1e15-435b-a511-17a50acbc4b2",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/yk6m",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fcf9369d-1e15-435b-a511-17a50acbc4b2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.093895Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "23b2a9f8-444a-47d6-91b8-af8ea38c6089",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/l776",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "23b2a9f8-444a-47d6-91b8-af8ea38c6089",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.093732Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "2ffd9eee-7e9a-4136-b8bc-428f3fed4b60",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/e64l",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2ffd9eee-7e9a-4136-b8bc-428f3fed4b60",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.093595Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "4a777412-3c3b-43b5-9242-268dc76d4f75",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/xfp0",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4a777412-3c3b-43b5-9242-268dc76d4f75",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.093451Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "0eba4acf-c0e6-4056-8594-cb3f3b92cc4a",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/t2s1",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Merchants\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0eba4acf-c0e6-4056-8594-cb3f3b92cc4a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.09328Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Merchants",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateMerchantResponse"
          }
        }
      }
    }
  }, {
    "id" : "c978a6ac-7db8-4c70-884b-b8c7709eb3c4",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/53h7",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c978a6ac-7db8-4c70-884b-b8c7709eb3c4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.09311Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "476a4aba-cf8d-4a95-9609-29b2f2324751",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/qr74",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "476a4aba-cf8d-4a95-9609-29b2f2324751",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.092962Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "3bfcbd80-8e18-49f6-acfa-324f09166445",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/wi00",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3bfcbd80-8e18-49f6-acfa-324f09166445",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.092791Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "45d47fe9-dafd-4eea-b2f8-5e783e6d2620",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/u8zk",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "45d47fe9-dafd-4eea-b2f8-5e783e6d2620",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.092652Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "17231333-e6cc-4bd3-b0a6-835d8a46da17",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/u0u2",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "17231333-e6cc-4bd3-b0a6-835d8a46da17",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.092513Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "b2bb5835-befd-4990-91c8-2089aafd68ae",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/k723",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"main_location_id\" : \"12345\",\n    \"owner_id\" : \"12345\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"language\" : \"EN\",\n    \"created_by\" : \"12345\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"status\" : \"active\"\n  },\n  \"resource\" : \"Merchants\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b2bb5835-befd-4990-91c8-2089aafd68ae",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.092345Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Merchant"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Merchants",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetMerchantResponse",
            "x-graphql-type-name" : "Merchant"
          }
        }
      }
    }
  }, {
    "id" : "2b764248-ad08-42d2-b3fb-822e9996ea13",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/n3pr",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2b764248-ad08-42d2-b3fb-822e9996ea13",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.091989Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "c5f11ac0-8cec-4ec5-8908-5e92530fca33",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/hy8o",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c5f11ac0-8cec-4ec5-8908-5e92530fca33",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.091851Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "1449b8d2-c57e-49a8-8de4-2b5037922a4a",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/n402",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1449b8d2-c57e-49a8-8de4-2b5037922a4a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.091677Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "d7a7beb7-0dda-4f9a-aaf1-540f74a7e6bf",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/x73z",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d7a7beb7-0dda-4f9a-aaf1-540f74a7e6bf",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.09153Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "a66ed053-b31a-4fb2-ba97-fdf91ce12248",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/xe1q",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a66ed053-b31a-4fb2-ba97-fdf91ce12248",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.091387Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "25bc856f-c40a-4f95-be9c-869ba31758f5",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/j293",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Merchants\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "25bc856f-c40a-4f95-be9c-869ba31758f5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.091212Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Merchants",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteMerchantResponse"
          }
        }
      }
    }
  }, {
    "id" : "dc0a6b9a-0e8d-4613-b3f6-6bff4f11d828",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "dc0a6b9a-0e8d-4613-b3f6-6bff4f11d828",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.091038Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "b29e0833-236d-402a-bd9d-130639ebbaa6",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b29e0833-236d-402a-bd9d-130639ebbaa6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.090905Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "5a5a0cb6-0108-4b69-8fba-ba0bc2200e43",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5a5a0cb6-0108-4b69-8fba-ba0bc2200e43",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.090815Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "081747a9-c590-426a-b218-b404667e708d",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "081747a9-c590-426a-b218-b404667e708d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.090747Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "b2d796e0-54ca-4ccb-9cc3-6b3d4524b6a0",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b2d796e0-54ca-4ccb-9cc3-6b3d4524b6a0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.090676Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "376451ee-8e3f-42f8-9179-0efce9acb97b",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Merchants\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "376451ee-8e3f-42f8-9179-0efce9acb97b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.090581Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Merchants",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateMerchantResponse"
          }
        }
      }
    }
  }, {
    "id" : "e96e1b1f-ce8a-4e2c-8642-79d113a58865",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e96e1b1f-ce8a-4e2c-8642-79d113a58865",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.090464Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "855fb224-b8da-4427-88a9-d666a791d5a9",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "855fb224-b8da-4427-88a9-d666a791d5a9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.090372Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "8ce699d4-d1e0-4162-9d06-cbc1a6cbdb68",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8ce699d4-d1e0-4162-9d06-cbc1a6cbdb68",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.090253Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "f7290769-66ff-4071-9805-be25322dfca1",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f7290769-66ff-4071-9805-be25322dfca1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.090168Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "fd3e5525-a281-4cff-a834-d83bc45c13dd",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fd3e5525-a281-4cff-a834-d83bc45c13dd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.090077Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "b66876df-9c2b-4262-8cbf-fe6369c96f82",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"main_location_id\" : \"12345\",\n    \"owner_id\" : \"12345\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"language\" : \"EN\",\n    \"created_by\" : \"12345\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"status\" : \"active\"\n  }, {\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"main_location_id\" : \"12345\",\n    \"owner_id\" : \"12345\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"language\" : \"EN\",\n    \"created_by\" : \"12345\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"status\" : \"active\"\n  } ],\n  \"resource\" : \"Merchants\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b66876df-9c2b-4262-8cbf-fe6369c96f82",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.089941Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Merchant"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Merchants",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetMerchantsResponse",
            "x-graphql-type-name" : "MerchantList"
          }
        }
      }
    }
  }, {
    "id" : "1775d37d-d673-4fc8-bafa-b94f6f955f9c",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/66nr",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1775d37d-d673-4fc8-bafa-b94f6f955f9c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.089324Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "1eac9472-4cd6-47ea-9de8-1b7a1fc144dc",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/s8i6",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1eac9472-4cd6-47ea-9de8-1b7a1fc144dc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.089174Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "3e5e3470-2e78-4aff-9d62-83e4e44a0848",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/flnf",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3e5e3470-2e78-4aff-9d62-83e4e44a0848",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.089011Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "ec7d062c-34ca-43a2-b1ae-8f1f40abfaec",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/53b9",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ec7d062c-34ca-43a2-b1ae-8f1f40abfaec",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.08888Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "1fde4cbe-b517-4517-a869-b3f7a635aec6",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/v9r7",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1fde4cbe-b517-4517-a869-b3f7a635aec6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.088737Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "11b5e9aa-ea3a-42b1-b3f3-a1421fb79559",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/93a5",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Locations\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "11b5e9aa-ea3a-42b1-b3f3-a1421fb79559",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.088576Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Locations",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateLocationResponse"
          }
        }
      }
    }
  }, {
    "id" : "23ac1c83-1390-472d-ab4b-422c719fcb8c",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/1od9",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "23ac1c83-1390-472d-ab4b-422c719fcb8c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.088405Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "8eea382d-2725-4585-832b-884a315f7215",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/4518",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8eea382d-2725-4585-832b-884a315f7215",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.088263Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "e68927b1-5958-407a-916e-4293820f960b",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/3iq9",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e68927b1-5958-407a-916e-4293820f960b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.088096Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "c7f557b9-5f9f-41ca-a3bf-0ee637a7e25e",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/ms9r",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c7f557b9-5f9f-41ca-a3bf-0ee637a7e25e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.087958Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "e5db46f7-a5ce-43d9-8c90-dcbffc5ab94f",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/4h6r",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e5db46f7-a5ce-43d9-8c90-dcbffc5ab94f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.087812Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "cc01ff6d-94e1-405c-abf8-45871a8a7e26",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/0flt",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"business_name\" : \"Dunkin Donuts LLC\",\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"created_by\" : \"12345\",\n    \"status\" : \"active\"\n  },\n  \"resource\" : \"Locations\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "cc01ff6d-94e1-405c-abf8-45871a8a7e26",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.087646Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Location"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Locations",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetLocationResponse",
            "x-graphql-type-name" : "Location"
          }
        }
      }
    }
  }, {
    "id" : "3d4396aa-b31b-4f27-93e0-53b84ec01734",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/owcj",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3d4396aa-b31b-4f27-93e0-53b84ec01734",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.087383Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "f0cebe4c-a0ab-424b-a571-9acdf4d339dc",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/w401",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f0cebe4c-a0ab-424b-a571-9acdf4d339dc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.087247Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "6a430f93-be93-464c-bf07-ca2af3224d37",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/b8t1",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6a430f93-be93-464c-bf07-ca2af3224d37",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.087085Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "aadd0446-5962-47a1-beeb-edfe94f901df",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/5d40",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "aadd0446-5962-47a1-beeb-edfe94f901df",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.086952Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "3f96abe5-0bec-4b12-9725-63007c62220e",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/r4o5",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3f96abe5-0bec-4b12-9725-63007c62220e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.08681Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "e7256900-3dda-403d-8c09-d5d746cdbd04",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/p5k6",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Locations\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e7256900-3dda-403d-8c09-d5d746cdbd04",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.08665Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Locations",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteLocationResponse"
          }
        }
      }
    }
  }, {
    "id" : "a500dde8-b724-4c84-a18a-2267699036c0",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a500dde8-b724-4c84-a18a-2267699036c0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.086469Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "dc6c5ada-408f-49ee-8a6c-2494d0cae524",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "dc6c5ada-408f-49ee-8a6c-2494d0cae524",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.086396Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "46788928-37de-4533-aea7-5138f2d33e07",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "46788928-37de-4533-aea7-5138f2d33e07",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.086301Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "c5b73a0e-d1e3-4bb6-95ac-1f9a6e2d1591",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c5b73a0e-d1e3-4bb6-95ac-1f9a6e2d1591",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.086228Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "b3d73d99-4ff2-45c5-a62c-92efd0353a42",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b3d73d99-4ff2-45c5-a62c-92efd0353a42",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.086154Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "2ad42d84-78ad-4ed5-b55b-6d8201661cc4",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Locations\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2ad42d84-78ad-4ed5-b55b-6d8201661cc4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.086058Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Locations",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateLocationResponse"
          }
        }
      }
    }
  }, {
    "id" : "9d0fe53f-03c7-4e6d-9b78-c609ffdbacfa",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9d0fe53f-03c7-4e6d-9b78-c609ffdbacfa",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.085954Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "12387d2a-4db0-4965-a45f-4e18a0fbb821",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "12387d2a-4db0-4965-a45f-4e18a0fbb821",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.085866Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "18bbfe8f-c283-473f-864b-6867cb69bb79",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "18bbfe8f-c283-473f-864b-6867cb69bb79",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.085754Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "3a6e20da-a628-4f38-94ec-3abced722947",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3a6e20da-a628-4f38-94ec-3abced722947",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.085673Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "178058fa-9d45-4860-95ea-8fdc2bdf8674",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "178058fa-9d45-4860-95ea-8fdc2bdf8674",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.085586Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "5bf89594-51ec-425a-88ec-2fde474dcc86",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"business_name\" : \"Dunkin Donuts LLC\",\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"created_by\" : \"12345\",\n    \"status\" : \"active\"\n  }, {\n    \"business_name\" : \"Dunkin Donuts LLC\",\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"created_by\" : \"12345\",\n    \"status\" : \"active\"\n  }, {\n    \"business_name\" : \"Dunkin Donuts LLC\",\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"created_by\" : \"12345\",\n    \"status\" : \"active\"\n  }, {\n    \"business_name\" : \"Dunkin Donuts LLC\",\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"created_by\" : \"12345\",\n    \"status\" : \"active\"\n  }, {\n    \"business_name\" : \"Dunkin Donuts LLC\",\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"created_by\" : \"12345\",\n    \"status\" : \"active\"\n  } ],\n  \"resource\" : \"Locations\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5bf89594-51ec-425a-88ec-2fde474dcc86",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.085472Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Location"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Locations",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetLocationsResponse",
            "x-graphql-type-name" : "LocationList"
          }
        }
      }
    }
  }, {
    "id" : "79547d9e-03c1-40f7-bc64-7b75143d64ae",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/083a",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "79547d9e-03c1-40f7-bc64-7b75143d64ae",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.084951Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "179014ed-c64f-4b1f-87e2-baa2b1d6bf57",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/y9z9",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "179014ed-c64f-4b1f-87e2-baa2b1d6bf57",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.084811Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "5dfb32c9-2726-434f-970b-22a217a564a0",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/o9yx",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5dfb32c9-2726-434f-970b-22a217a564a0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.084653Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "8cc5758d-5c5f-427f-91f3-90d4a5b2166e",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/k62m",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8cc5758d-5c5f-427f-91f3-90d4a5b2166e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.084521Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "ed8eb80b-5597-4d0f-8e5e-d0ded763f4dc",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/3959",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ed8eb80b-5597-4d0f-8e5e-d0ded763f4dc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.08438Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "ef63a4c6-1c19-494c-8480-f7cc47c34328",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/2v9l",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Items\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ef63a4c6-1c19-494c-8480-f7cc47c34328",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.084214Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Items",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateItemResponse"
          }
        }
      }
    }
  }, {
    "id" : "27dced3d-a5c2-4b6f-819d-2d7c51b05952",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/n7a0",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "27dced3d-a5c2-4b6f-819d-2d7c51b05952",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.084038Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "498766ea-a2fc-4eac-93e1-8917cbb3bb0a",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/8dwi",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "498766ea-a2fc-4eac-93e1-8917cbb3bb0a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.083892Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "3afa5694-33d8-41ea-893d-08c126131bb7",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/s406",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3afa5694-33d8-41ea-893d-08c126131bb7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.083725Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "ecf8e8cd-83dd-4836-ba3a-4b636a4d580e",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/xy2j",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ecf8e8cd-83dd-4836-ba3a-4b636a4d580e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.083585Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "34e8af02-37aa-4ba3-a04d-f9dec2c61a7d",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/b3jc",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "34e8af02-37aa-4ba3-a04d-f9dec2c61a7d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.083434Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "f1a56107-312c-4ebe-8923-ef848e2fb821",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/64vw",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  },\n  \"resource\" : \"Items\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f1a56107-312c-4ebe-8923-ef848e2fb821",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.083267Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Item"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Items",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetItemResponse",
            "x-graphql-type-name" : "Item"
          }
        }
      }
    }
  }, {
    "id" : "aee70cce-bafc-43a5-979c-e9a2d44e4c89",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/4i4l",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "aee70cce-bafc-43a5-979c-e9a2d44e4c89",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.082979Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "8e4b6169-537f-4c4b-ac81-736200c5509d",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/g43f",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8e4b6169-537f-4c4b-ac81-736200c5509d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.082829Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "8602a658-9d9d-4c85-9f04-d8e80c5c8443",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/3pt1",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8602a658-9d9d-4c85-9f04-d8e80c5c8443",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.082667Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "5ca6ab7a-712d-4052-ac27-df630096a112",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/i1s6",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5ca6ab7a-712d-4052-ac27-df630096a112",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.082528Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "7352b727-98fb-436a-8646-e2efd1548b46",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/30zj",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7352b727-98fb-436a-8646-e2efd1548b46",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.082368Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "2c0f643e-56bf-4084-9a26-28f4e4707f7b",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/9p9y",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Items\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2c0f643e-56bf-4084-9a26-28f4e4707f7b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.0822Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Items",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteItemResponse"
          }
        }
      }
    }
  }, {
    "id" : "2ecc1245-e7c6-4962-b754-113bc75fc1bf",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2ecc1245-e7c6-4962-b754-113bc75fc1bf",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.081996Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "d9cb15c3-a6b2-4c1f-ab31-2e21bac175b6",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d9cb15c3-a6b2-4c1f-ab31-2e21bac175b6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.081925Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "597486ba-ed02-488f-ad2d-e0a43e8986a3",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "597486ba-ed02-488f-ad2d-e0a43e8986a3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.081831Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "d4be90b8-a460-4b74-bdc4-1be95e93ab20",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d4be90b8-a460-4b74-bdc4-1be95e93ab20",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.081761Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "212c13ca-7c35-452b-8653-f8de8abf970b",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "212c13ca-7c35-452b-8653-f8de8abf970b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.081686Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "70ca8626-c145-4038-adc8-82f9d4776a10",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Items\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "70ca8626-c145-4038-adc8-82f9d4776a10",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.081587Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Items",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateItemResponse"
          }
        }
      }
    }
  }, {
    "id" : "4ce5d9b7-170f-48c3-bb46-5a33d46e7457",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4ce5d9b7-170f-48c3-bb46-5a33d46e7457",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.08147Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    }
  }, {
    "id" : "7c767c4b-dc6b-4e93-a18a-c6e39efdac78",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7c767c4b-dc6b-4e93-a18a-c6e39efdac78",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.081363Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    }
  }, {
    "id" : "79245b5c-aace-4708-a853-4d3ba7ee8545",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "79245b5c-aace-4708-a853-4d3ba7ee8545",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.081224Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    }
  }, {
    "id" : "1f2ba149-6837-4d76-a708-31385a7d87ba",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1f2ba149-6837-4d76-a708-31385a7d87ba",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.081111Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    }
  }, {
    "id" : "039d3649-2349-4a20-ae9a-32f9c1fc7581",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "039d3649-2349-4a20-ae9a-32f9c1fc7581",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.081Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    }
  }, {
    "id" : "39abc227-6c85-4bd7-8241-241b5020e83c",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  }, {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  }, {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  }, {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  }, {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  }, {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  }, {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  } ],\n  \"resource\" : \"Items\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "39abc227-6c85-4bd7-8241-241b5020e83c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-06T18:54:29.080862Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Item"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Items",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetItemsResponse",
            "x-graphql-type-name" : "ItemList"
          }
        }
      }
    }
  } ]
}