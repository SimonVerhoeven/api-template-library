{
  "mappings" : [ {
    "id" : "e1885ad4-a111-4780-9a84-184798322057",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/n9xj",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e1885ad4-a111-4780-9a84-184798322057",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.403954Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 0
  }, {
    "id" : "5519351e-262c-4ff5-a2c5-eea9c9e135d2",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/pncy",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5519351e-262c-4ff5-a2c5-eea9c9e135d2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.403806Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 1
  }, {
    "id" : "d514069d-469e-46b0-abdd-9963e5d9a174",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/3ae7",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d514069d-469e-46b0-abdd-9963e5d9a174",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.403637Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 2
  }, {
    "id" : "3d65b311-a9e8-406a-8acd-1ca3e518d463",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/ek17",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3d65b311-a9e8-406a-8acd-1ca3e518d463",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.403495Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 3
  }, {
    "id" : "e267467b-57ad-4120-8ed8-c6d5b69c7bf9",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/q6p6",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e267467b-57ad-4120-8ed8-c6d5b69c7bf9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.403358Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 4
  }, {
    "id" : "7f4d0208-8054-4370-a604-d883d89124dd",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/a7a3",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Tenders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7f4d0208-8054-4370-a604-d883d89124dd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.403181Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Tenders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateTenderResponse"
          }
        }
      }
    },
    "insertionIndex" : 5
  }, {
    "id" : "0bc7879d-68e4-478a-b3b6-5d4c7ad7a51a",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/72z7",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0bc7879d-68e4-478a-b3b6-5d4c7ad7a51a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.402996Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 6
  }, {
    "id" : "d535129d-eaaa-49f1-b900-6fe4b03b55e2",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/1nl7",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d535129d-eaaa-49f1-b900-6fe4b03b55e2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.402851Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 7
  }, {
    "id" : "79232828-8c9d-47c9-b32f-493b275f5336",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/ttdm",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "79232828-8c9d-47c9-b32f-493b275f5336",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.402675Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 8
  }, {
    "id" : "33094123-9401-40b2-96b9-2c54d315efce",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/l638",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "33094123-9401-40b2-96b9-2c54d315efce",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.402529Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 9
  }, {
    "id" : "1442cb1b-52b2-4787-b061-fe068ba8f706",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/p2ax",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1442cb1b-52b2-4787-b061-fe068ba8f706",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.402383Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 10
  }, {
    "id" : "84212eeb-d3a6-4767-8697-5b0019235449",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/d31y",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"allows_tipping\" : false,\n    \"opens_cash_drawer\" : false,\n    \"hidden\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"editable\" : true,\n    \"updated_by\" : \"12345\",\n    \"active\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"label\" : \"Cash\",\n    \"created_by\" : \"12345\",\n    \"key\" : \"com.clover.tender.cash\"\n  },\n  \"resource\" : \"Tenders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "84212eeb-d3a6-4767-8697-5b0019235449",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.402198Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Tender"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Tenders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetTenderResponse",
            "x-graphql-type-name" : "Tender"
          }
        }
      }
    },
    "insertionIndex" : 11
  }, {
    "id" : "894774a0-ab9a-4337-84f3-eb2607cd8bc4",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/75q4",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "894774a0-ab9a-4337-84f3-eb2607cd8bc4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.401971Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 12
  }, {
    "id" : "4bac9f80-81e9-45cb-8092-5dc60afe44a9",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/ep24",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4bac9f80-81e9-45cb-8092-5dc60afe44a9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.401818Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 13
  }, {
    "id" : "c8aef6c6-a4ab-4abf-ab96-007b0b4cf5d7",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/e6hy",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c8aef6c6-a4ab-4abf-ab96-007b0b4cf5d7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.401641Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 14
  }, {
    "id" : "3f19ff04-9091-4546-b180-8e0affee68fd",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/8609",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3f19ff04-9091-4546-b180-8e0affee68fd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.401493Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 15
  }, {
    "id" : "ae74600a-44c0-4127-9a4d-787a0e944799",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/wz9p",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ae74600a-44c0-4127-9a4d-787a0e944799",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.401348Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 16
  }, {
    "id" : "aa444f9a-3c56-4bb7-abae-ae863ded278a",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/b604",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Tenders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "aa444f9a-3c56-4bb7-abae-ae863ded278a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.401169Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Tenders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteTenderResponse"
          }
        }
      }
    },
    "insertionIndex" : 17
  }, {
    "id" : "69457f25-706d-4ce8-9466-e53c6b21f5f4",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "69457f25-706d-4ce8-9466-e53c6b21f5f4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.400948Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 18
  }, {
    "id" : "438d0849-13a1-4bdf-900b-0837090dabb1",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "438d0849-13a1-4bdf-900b-0837090dabb1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.400868Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 19
  }, {
    "id" : "ce7cf3c4-1123-4ae5-bc6d-3e3cbbdcf76f",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ce7cf3c4-1123-4ae5-bc6d-3e3cbbdcf76f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.400763Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 20
  }, {
    "id" : "238b3bdc-6728-41a0-a4b6-d26411ab812e",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "238b3bdc-6728-41a0-a4b6-d26411ab812e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.400688Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 21
  }, {
    "id" : "c0d2f743-3860-4f30-8776-ef949470bc4b",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c0d2f743-3860-4f30-8776-ef949470bc4b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.400605Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 22
  }, {
    "id" : "13ee694d-0f11-4b75-9fd8-98d020a54376",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Tenders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "13ee694d-0f11-4b75-9fd8-98d020a54376",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.400502Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Tenders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateTenderResponse"
          }
        }
      }
    },
    "insertionIndex" : 23
  }, {
    "id" : "01db4fe6-47a3-4eee-9f19-544990704a67",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "01db4fe6-47a3-4eee-9f19-544990704a67",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.400387Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 24
  }, {
    "id" : "b67d9f39-3b34-45e7-8800-14a7de9c859c",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b67d9f39-3b34-45e7-8800-14a7de9c859c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.400304Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 25
  }, {
    "id" : "07e8a293-7cc2-450b-ac16-707063df9739",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "07e8a293-7cc2-450b-ac16-707063df9739",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.400202Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 26
  }, {
    "id" : "7b289b98-07fd-41e4-ab1d-6ef3ab514e65",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7b289b98-07fd-41e4-ab1d-6ef3ab514e65",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.400117Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 27
  }, {
    "id" : "995e4a02-9017-4d08-8467-748e6b6fe207",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "995e4a02-9017-4d08-8467-748e6b6fe207",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.400031Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 28
  }, {
    "id" : "dea6f367-79cb-4698-84a5-612cbf380173",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"allows_tipping\" : true,\n    \"opens_cash_drawer\" : false,\n    \"hidden\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"editable\" : true,\n    \"updated_by\" : \"12345\",\n    \"active\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"label\" : \"Cash\",\n    \"created_by\" : \"12345\",\n    \"key\" : \"com.clover.tender.cash\"\n  }, {\n    \"allows_tipping\" : true,\n    \"opens_cash_drawer\" : true,\n    \"hidden\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"editable\" : true,\n    \"updated_by\" : \"12345\",\n    \"active\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"label\" : \"Cash\",\n    \"created_by\" : \"12345\",\n    \"key\" : \"com.clover.tender.cash\"\n  } ],\n  \"resource\" : \"Tenders\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"clover\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "dea6f367-79cb-4698-84a5-612cbf380173",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.399921Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Tender"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Tenders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetTendersResponse",
            "x-graphql-type-name" : "TenderList"
          }
        }
      }
    },
    "insertionIndex" : 29
  }, {
    "id" : "026914e2-8a34-4eb0-a387-72706a376a96",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/4427",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "026914e2-8a34-4eb0-a387-72706a376a96",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.399669Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 30
  }, {
    "id" : "0b29881e-f069-4fd9-965f-7a07069eb427",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/3714",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0b29881e-f069-4fd9-965f-7a07069eb427",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.39952Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 31
  }, {
    "id" : "70edf40b-b501-40e7-923f-35ad00ffe92e",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/6605",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "70edf40b-b501-40e7-923f-35ad00ffe92e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.399358Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 32
  }, {
    "id" : "6a6501db-5db0-4d0e-acfe-abcdc5285b25",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/opvs",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6a6501db-5db0-4d0e-acfe-abcdc5285b25",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.399212Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 33
  }, {
    "id" : "b5d7caa8-83e4-42a5-9091-bfbdea665f59",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/swk9",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b5d7caa8-83e4-42a5-9091-bfbdea665f59",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.39906Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 34
  }, {
    "id" : "3e8f88ac-6568-4386-93a8-756b1e8276ce",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/3my7",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"PosPayments\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3e8f88ac-6568-4386-93a8-756b1e8276ce",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.398885Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "PosPayments",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdatePosPaymentResponse"
          }
        }
      }
    },
    "insertionIndex" : 35
  }, {
    "id" : "1f3b463b-bc6f-4072-9af6-40adf4e37fd8",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/8r13",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1f3b463b-bc6f-4072-9af6-40adf4e37fd8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.398708Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 36
  }, {
    "id" : "f2430817-fe13-446f-a1a1-63cfbb079b4f",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/3fr4",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f2430817-fe13-446f-a1a1-63cfbb079b4f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.398554Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 37
  }, {
    "id" : "6e8e76ce-423c-4fb0-b417-3941b5a54600",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/i68d",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6e8e76ce-423c-4fb0-b417-3941b5a54600",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.398367Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 38
  }, {
    "id" : "a5804e26-fc38-4ded-bd79-0d6a74471bdc",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/8jq7",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a5804e26-fc38-4ded-bd79-0d6a74471bdc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.398217Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 39
  }, {
    "id" : "49b97b69-56ff-4863-9022-15dec43d7633",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/7248",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "49b97b69-56ff-4863-9022-15dec43d7633",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.398058Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 40
  }, {
    "id" : "b8145bad-7ac1-4736-bd6b-dbafaa66378e",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/j859",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"change_back_cash_amount\" : 20,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"tender_id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"external\",\n    \"location_id\" : \"12345\",\n    \"external_payment_id\" : \"12345\",\n    \"approved\" : 37.5,\n    \"total\" : 37.5,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"app_fee\" : 3,\n    \"currency\" : \"USD\",\n    \"refunded\" : 37.5,\n    \"tip\" : 7,\n    \"id\" : \"12345\",\n    \"cash\" : {\n      \"amount\" : { },\n      \"charge_back_amount\" : { }\n    },\n    \"external_details\" : {\n      \"source_fee_amount\" : 2.5,\n      \"source\" : \"ekxx5fxu0jh2l8kqms9eprrmhz1wqnpmr7q7mdn82b7r19cw8wyw0p5frspvwhdfzsjq99xwhrav9yv08oc6glmk7z4q3h3gnkwvjs8qwmujsr10dp47gltly32ijnr73f8yeb638x3wa7jnsiyc8qk2riz3c7orzspf84fuk\",\n      \"source_id\" : \"am2x\",\n      \"type\" : \"stored_balance\"\n    },\n    \"bank_account\" : {\n      \"country\" : \"US\",\n      \"account_ownership_type\" : \"hwofo7kehkrfacswcue08gyjm3foky8u1komdz5gq\",\n      \"bank_name\" : \"Young Mante\",\n      \"fingerprint\" : \"1sgs1r5r3hprlq215uuq5ggsqqzpt680v9l40nbb3eoah2ucrmlets43hnswaiw1zys8zwho\",\n      \"transfer_type\" : \"pmgzpw8\",\n      \"ach_details\" : {\n        \"account_type\" : \"l2i4xex7wh28u6brh8pmv2c3pa7b2jsz1gztnd7jlm\",\n        \"routing_number\" : \"tbm264gm2bwi56ef\",\n        \"account_number_suffix\" : \"zwjn\"\n      },\n      \"statement_description\" : \"Impedit cumque iste dolor dignissimos corrupti. Illum et error ab tempore. Atque et sit placeat.\"\n    },\n    \"card_details\" : {\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"eftpos\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    },\n    \"amount\" : 27.5,\n    \"wallet\" : {\n      \"status\" : \"voided\"\n    },\n    \"device_id\" : \"12345\",\n    \"processing_fees\" : [ {\n      \"amount\" : 1.05,\n      \"effective_at\" : \"2020-09-30T07:43:32.000Z\",\n      \"processing_type\" : \"initial\"\n    } ],\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"tax\" : 20,\n    \"created_by\" : \"12345\",\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"source_id\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"order_id\" : \"12345\",\n    \"status\" : \"approved\"\n  },\n  \"resource\" : \"PosPayments\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b8145bad-7ac1-4736-bd6b-dbafaa66378e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.397863Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/PosPayment"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "PosPayments",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetPosPaymentResponse",
            "x-graphql-type-name" : "PosPayment"
          }
        }
      }
    },
    "insertionIndex" : 41
  }, {
    "id" : "20b5b7b5-fc73-4441-9ef7-cb4c1959e59d",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/0174",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "20b5b7b5-fc73-4441-9ef7-cb4c1959e59d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.396964Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 42
  }, {
    "id" : "f4c01b0c-db49-4ba6-b5df-cce904ee0f05",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/p3j8",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f4c01b0c-db49-4ba6-b5df-cce904ee0f05",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.396816Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 43
  }, {
    "id" : "1073d286-2382-48d2-aeef-5a2efda7a09a",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/h57g",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1073d286-2382-48d2-aeef-5a2efda7a09a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.396649Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 44
  }, {
    "id" : "303013a9-7e04-4918-8c69-4a175dacb351",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/actd",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "303013a9-7e04-4918-8c69-4a175dacb351",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.396504Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 45
  }, {
    "id" : "72b59fb6-df24-4a30-afc8-bcda5ff79b8b",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/dr38",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "72b59fb6-df24-4a30-afc8-bcda5ff79b8b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.396347Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 46
  }, {
    "id" : "d5aa9b23-ff47-4c3c-bd8a-cb8f1d757f9e",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/w3vp",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"PosPayments\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d5aa9b23-ff47-4c3c-bd8a-cb8f1d757f9e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.396164Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "PosPayments",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeletePosPaymentResponse"
          }
        }
      }
    },
    "insertionIndex" : 47
  }, {
    "id" : "f58dff83-3d17-465c-827a-e411be7ff502",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f58dff83-3d17-465c-827a-e411be7ff502",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.395942Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 48
  }, {
    "id" : "1ad0b0a1-b13e-4cd6-a426-d1b301acc7dd",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1ad0b0a1-b13e-4cd6-a426-d1b301acc7dd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.395866Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 49
  }, {
    "id" : "ecc16bf0-be37-427c-ba1e-83029b988d4a",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ecc16bf0-be37-427c-ba1e-83029b988d4a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.395767Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 50
  }, {
    "id" : "ec2bacd9-bb69-4e85-8ec1-c2c4ae720b76",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ec2bacd9-bb69-4e85-8ec1-c2c4ae720b76",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.39569Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 51
  }, {
    "id" : "7f80e9e9-922c-4267-b712-4f47466c783f",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7f80e9e9-922c-4267-b712-4f47466c783f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.395609Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 52
  }, {
    "id" : "fa00f628-11fe-4fba-ad32-17366b89b621",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"PosPayments\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fa00f628-11fe-4fba-ad32-17366b89b621",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.395504Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "PosPayments",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreatePosPaymentResponse"
          }
        }
      }
    },
    "insertionIndex" : 53
  }, {
    "id" : "41755cbd-9066-49d8-8fa3-0256319bf702",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "41755cbd-9066-49d8-8fa3-0256319bf702",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.395389Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 54
  }, {
    "id" : "74d6bd03-8d7f-43e6-899d-e3e8b17a250b",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "74d6bd03-8d7f-43e6-899d-e3e8b17a250b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.395299Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 55
  }, {
    "id" : "c5c7f987-6f1b-40d7-9f97-0fdbbd9f4280",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c5c7f987-6f1b-40d7-9f97-0fdbbd9f4280",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.395188Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 56
  }, {
    "id" : "90650cd8-214c-4300-bfca-2c9631e5babf",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "90650cd8-214c-4300-bfca-2c9631e5babf",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.395103Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 57
  }, {
    "id" : "20f360e3-7d51-422e-ab18-741352562726",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "20f360e3-7d51-422e-ab18-741352562726",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.395012Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 58
  }, {
    "id" : "bdff07b8-ff6b-4d6f-8057-40e5ada37a8f",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"change_back_cash_amount\" : 20,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"tender_id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"external\",\n    \"location_id\" : \"12345\",\n    \"external_payment_id\" : \"12345\",\n    \"approved\" : 37.5,\n    \"total\" : 37.5,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"app_fee\" : 3,\n    \"currency\" : \"USD\",\n    \"refunded\" : 37.5,\n    \"tip\" : 7,\n    \"id\" : \"12345\",\n    \"cash\" : {\n      \"amount\" : { },\n      \"charge_back_amount\" : { }\n    },\n    \"external_details\" : {\n      \"source_fee_amount\" : 2.5,\n      \"source\" : \"sz5ontom5fjmej80rxte67mbamkdhhegkxvft00mggwnyky4dv75dxm61u9rd6m3vzio6b9x79pwob1je2e5f11ysh27y6qo000ktp77wmwgc1ey3tdyjai2x11smgly335y0me4xb8f1cl9t6k6e1j0no2axd1ewyoin31fpw65kg207c0nn2zuexgh1tw804tp4smlo54z5opy9nwwfb59irz2sbgoplt9to7e\",\n      \"source_id\" : \"05nq\",\n      \"type\" : \"card\"\n    },\n    \"bank_account\" : {\n      \"country\" : \"US\",\n      \"account_ownership_type\" : \"kc7puhi1ydlf5v8jfub9rlpli4qg0pfnrbtk5yz2efl\",\n      \"bank_name\" : \"Mandie Ferry\",\n      \"fingerprint\" : \"4t9qs0207zaepdi8fnf6zvcp917zfkj4voy990s\",\n      \"transfer_type\" : \"18wqmf\",\n      \"ach_details\" : {\n        \"account_type\" : \"91v4t7dsvranh4wb\",\n        \"routing_number\" : \"5q705rkzruahlzk3d4rbo29yb1suhtlzz1w\",\n        \"account_number_suffix\" : \"j5h7\"\n      },\n      \"statement_description\" : \"Aut ut eos et consequuntur nobis architecto. Rem perferendis qui saepe non sed. Nam autem possimus et possimus vel qui. Qui deleniti quia voluptates earum ullam.\"\n    },\n    \"card_details\" : {\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"ebt\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    },\n    \"amount\" : 27.5,\n    \"wallet\" : {\n      \"status\" : \"failed\"\n    },\n    \"device_id\" : \"12345\",\n    \"processing_fees\" : [ {\n      \"amount\" : 1.05,\n      \"effective_at\" : \"2020-09-30T07:43:32.000Z\",\n      \"processing_type\" : \"initial\"\n    } ],\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"tax\" : 20,\n    \"created_by\" : \"12345\",\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"source_id\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"order_id\" : \"12345\",\n    \"status\" : \"approved\"\n  } ],\n  \"resource\" : \"PosPayments\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "bdff07b8-ff6b-4d6f-8057-40e5ada37a8f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.394872Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/PosPayment"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "PosPayments",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetPosPaymentsResponse",
            "x-graphql-type-name" : "PosPaymentList"
          }
        }
      }
    },
    "insertionIndex" : 59
  }, {
    "id" : "c7e09793-cac4-4f52-8ed8-2e217b3840da",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/ic50/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c7e09793-cac4-4f52-8ed8-2e217b3840da",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.393865Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 60
  }, {
    "id" : "7cdf38a6-b451-497f-9f97-a1e116717aad",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/95l6/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7cdf38a6-b451-497f-9f97-a1e116717aad",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.39371Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 61
  }, {
    "id" : "dce7a8a6-c4e6-4ba2-819c-733dd0dc0767",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/f18n/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "dce7a8a6-c4e6-4ba2-819c-733dd0dc0767",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.393524Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 62
  }, {
    "id" : "90f03e76-4e71-459d-96a1-5ce01911cc85",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/fz4p/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "90f03e76-4e71-459d-96a1-5ce01911cc85",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.393377Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 63
  }, {
    "id" : "1e4e242d-f77a-465a-9439-f35111647dc1",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/hlpl/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1e4e242d-f77a-465a-9439-f35111647dc1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.393223Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 64
  }, {
    "id" : "d2cee137-cf77-4b29-ad57-91c01461621b",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/e7b6/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"orders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d2cee137-cf77-4b29-ad57-91c01461621b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.393027Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateOrderResponse"
          }
        }
      }
    },
    "insertionIndex" : 65
  }, {
    "id" : "2edeaa22-c342-4313-8f8a-742882b676d3",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/rz19",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2edeaa22-c342-4313-8f8a-742882b676d3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.39283Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 66
  }, {
    "id" : "0188546f-598b-4198-a5b8-18137aa40e3a",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/95j9",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0188546f-598b-4198-a5b8-18137aa40e3a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.392679Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 67
  }, {
    "id" : "7a81f1a4-d80b-4a23-896a-c7f3eef17d78",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/7yff",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7a81f1a4-d80b-4a23-896a-c7f3eef17d78",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.392503Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 68
  }, {
    "id" : "e4eafe74-e664-44eb-8210-c4d2ff143fc4",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/8f7w",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e4eafe74-e664-44eb-8210-c4d2ff143fc4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.392352Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 69
  }, {
    "id" : "696d1e0d-f1c3-4b4b-9f88-a73d0faa7bbf",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/n90m",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "696d1e0d-f1c3-4b4b-9f88-a73d0faa7bbf",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.392206Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 70
  }, {
    "id" : "ab64bd10-40dd-411f-95f9-565dd69999e7",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/okj0",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"orders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ab64bd10-40dd-411f-95f9-565dd69999e7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.39203Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateOrderResponse"
          }
        }
      }
    },
    "insertionIndex" : 71
  }, {
    "id" : "4c27c708-b267-4b7d-8e15-426d68cae6c9",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/4uso",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4c27c708-b267-4b7d-8e15-426d68cae6c9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.39184Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 72
  }, {
    "id" : "0de2c8cf-e008-49c5-9420-1f6713e3ff5e",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/195q",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0de2c8cf-e008-49c5-9420-1f6713e3ff5e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.391659Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 73
  }, {
    "id" : "882ca5d3-4032-419b-874e-a3c4c647ff6e",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/7906",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "882ca5d3-4032-419b-874e-a3c4c647ff6e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.391442Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 74
  }, {
    "id" : "f9f7f866-e65d-4194-b8c1-fec092df2155",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/jhh6",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f9f7f866-e65d-4194-b8c1-fec092df2155",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.391266Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 75
  }, {
    "id" : "3cf3d91e-d895-47d5-8475-10b006773f1c",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/8p15",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3cf3d91e-d895-47d5-8475-10b006773f1c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.39108Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 76
  }, {
    "id" : "afe2a737-b430-4d56-b972-176cdc443bc6",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/r6e3",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"note\" : \"ljghfxnx82c4lizrm9msscvnt9mq590h0qqn3dhh9avccfovczgrow467pbri5ish10wklqs9vngwd07joyjfih3j4q70mtq29p8nmg069blc0bsvbvwryiyxi09ym57yo27obprn07hmaptco5idlj22fgqptqnyzqy6l7x8skzr06cmb\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Et est at voluptatem ea vel ut.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"pending\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : {\n          \"curbside_details\" : \"900bppbmwek9fr9lik7env0hx0fbgp3h7ypcvzlgud6lg7bd416h2wvsii0eo9hjp3rez47xyvczcchtjr64xybkl1gl1j867e0664qwp8rk7sj14ptekeboae8x7vg6hg942fk6yycoi97\",\n          \"buyer_arrived_at\" : \"2016-09-04T23:59:33.123Z\"\n        },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : {\n          \"address\" : { },\n          \"phone_number\" : {\n            \"number\" : \"111-111-1111\"\n          },\n          \"customer_id\" : \"12345\",\n          \"display_name\" : \"Elon Musk\",\n          \"email\" : {\n            \"email\" : \"elon@musk.com\"\n          }\n        },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"completed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : {\n          \"curbside_details\" : \"wp16qqh3mckmhqcpfjwshy6okkai3rae3c3xehzpxd63j8swbz09dr7uyv7jbtgd5yy6f2h836dpe2k0bbytspa6mvcyy4f35q5o0i5q1mhffz4lk4w92g9cfots681wvw55vh51eur5akhrh9j0i4e89nqchfyco5hlam032t7gbpezuay72xcy5\",\n          \"buyer_arrived_at\" : \"2016-09-04T23:59:33.123Z\"\n        },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : {\n          \"address\" : { },\n          \"phone_number\" : {\n            \"number\" : \"111-111-1111\"\n          },\n          \"customer_id\" : \"12345\",\n          \"display_name\" : \"Elon Musk\",\n          \"email\" : {\n            \"email\" : \"elon@musk.com\"\n          }\n        },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"prepared\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : {\n          \"curbside_details\" : \"o9mulmo0ezzkvccjy6ep0j68xtkeb8ydj4fvkt7y0rwmp6gaxaqiz87zvlolcxat8gtm0duuf08r2udly4vgphpmu88x92tvopx8mv0p9n5khd3f7peqb8ptoolb73iqgj93tq6r7zpr25h5tdwzg3qps71dhcefaeycxi8jle7ta88ucv2hlliy5qd4s2xyzdhz7baxrq3jkxfbkdzfdv6r8wiljs66ni5sii3a4\",\n          \"buyer_arrived_at\" : \"2016-09-04T23:59:33.123Z\"\n        },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : {\n          \"address\" : { },\n          \"phone_number\" : {\n            \"number\" : \"111-111-1111\"\n          },\n          \"customer_id\" : \"12345\",\n          \"display_name\" : \"Elon Musk\",\n          \"email\" : {\n            \"email\" : \"elon@musk.com\"\n          }\n        },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"proposed\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"discover\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"felica\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"square-gift-card\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"square-gift-card\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  },\n  \"resource\" : \"orders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "afe2a737-b430-4d56-b972-176cdc443bc6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.390823Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Order"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetOrderResponse",
            "x-graphql-type-name" : "Order"
          }
        }
      }
    },
    "insertionIndex" : 77
  }, {
    "id" : "ba3e25e5-6124-4208-ae93-36de56945e31",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/c241",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ba3e25e5-6124-4208-ae93-36de56945e31",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.387463Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 78
  }, {
    "id" : "92b1f0d6-c229-4e4d-8363-1834b4377dc8",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/rp4k",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "92b1f0d6-c229-4e4d-8363-1834b4377dc8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.387308Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 79
  }, {
    "id" : "1d4053be-5c94-46f4-8d56-29a961d8a7d0",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/0cin",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1d4053be-5c94-46f4-8d56-29a961d8a7d0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.387123Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 80
  }, {
    "id" : "b019a9b1-212c-4464-9189-dfc001934db3",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/w625",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b019a9b1-212c-4464-9189-dfc001934db3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.386961Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 81
  }, {
    "id" : "bef9a473-5cdd-42cf-ae92-35a6accce64d",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/l9b9",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "bef9a473-5cdd-42cf-ae92-35a6accce64d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.386802Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 82
  }, {
    "id" : "8e0abe68-882b-4b6c-9aee-2141d196e527",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/d999",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"orders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8e0abe68-882b-4b6c-9aee-2141d196e527",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.386609Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteOrderResponse"
          }
        }
      }
    },
    "insertionIndex" : 83
  }, {
    "id" : "9358bdad-1504-4bae-92f4-9d98356f9bff",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9358bdad-1504-4bae-92f4-9d98356f9bff",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.386346Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 84
  }, {
    "id" : "66f62987-eb9d-44a3-a895-a07d4f1d0f54",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "66f62987-eb9d-44a3-a895-a07d4f1d0f54",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.386268Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 85
  }, {
    "id" : "7de6c825-fb94-4c3c-a8e5-66259d4ea081",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7de6c825-fb94-4c3c-a8e5-66259d4ea081",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.386165Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 86
  }, {
    "id" : "800cf384-8ba0-4d28-8e0b-041470e087d3",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "800cf384-8ba0-4d28-8e0b-041470e087d3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.386084Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 87
  }, {
    "id" : "37e366bc-611c-4863-980c-fc0e96048faa",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "37e366bc-611c-4863-980c-fc0e96048faa",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.386006Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 88
  }, {
    "id" : "c32fdd8c-b9bd-48fb-ab75-9d148eeae711",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"orders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c32fdd8c-b9bd-48fb-ab75-9d148eeae711",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.385872Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateOrderResponse"
          }
        }
      }
    },
    "insertionIndex" : 89
  }, {
    "id" : "0174e0dd-adda-4ad5-9913-d68715c41b0c",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0174e0dd-adda-4ad5-9913-d68715c41b0c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.385743Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 90
  }, {
    "id" : "378dc01f-c7c1-494b-90c1-1e598d99cb00",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "378dc01f-c7c1-494b-90c1-1e598d99cb00",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.385623Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 91
  }, {
    "id" : "a5c0fc0b-4617-42dd-aace-398969f41c99",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a5c0fc0b-4617-42dd-aace-398969f41c99",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.385476Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 92
  }, {
    "id" : "12c48e90-529b-472c-83c3-05873065ef1d",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "12c48e90-529b-472c-83c3-05873065ef1d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.385366Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 93
  }, {
    "id" : "26b6e1ab-d804-407f-b0c7-628a0a453a87",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "26b6e1ab-d804-407f-b0c7-628a0a453a87",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.385231Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 94
  }, {
    "id" : "fe1d9066-07f6-4ee6-ad2c-a200feadc441",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"note\" : \"83dru0crzyfx2v0wozkzzl6a89fx66eopgyyvaauext3nl7076outj8ukr3nn48hy55y3d6bbmzj854rc30co\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Non voluptate reiciendis.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"pending\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"reserved\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"other\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"cancelled\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"cancelled\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"prepared\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"prepared\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"failed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"prepared\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"discover-diners\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"jcb\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"eftpos\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  }, {\n    \"note\" : \"5rk35plipacra9tcoyocr0tjxnoe0vdoodu6cy1p05lt7dedgtdushitfa9yvps3iuni88db11v2dn7e1x77s16h\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Quaerat id et dignissimos exercitationem vel.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"pending\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"failed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"other\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"failed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"reserved\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"interac\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  }, {\n    \"note\" : \"kx6w1y9e40m711yp687wss2aa93g0pqf4x\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Doloribus unde ut nemo ut quisquam aperiam.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"prepared\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"failed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"other\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"prepared\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"proposed\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"china-unionpay\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"mastercard\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"other\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"discover-diners\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"discover\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"felica\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"visa\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  }, {\n    \"note\" : \"slmhvvi3niuuc4s4a5jnezqc1mmkif2pfjancpg2ww01k85piw1sb5zqtlc2de5a5k30qmlxo6n3fn70qbe7j7lybeaigjyqhb9pl\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Est aut voluptatibus nam.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"pending\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"pending\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"cancelled\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"completed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"proposed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"proposed\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"other\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"jcb\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"other\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"mastercard\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"eftpos\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"discover\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"mastercard\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"discover-diners\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  }, {\n    \"note\" : \"qhkq98veh6yg8kgi6b9cz03u5ojqrebc13s28qv7zlobh9ulq58wo2ewdz7hwsht2d6y4lkzrqlfnciu4xi53bicyivjce4xs4y\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Est eum eligendi asperiores inventore.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"pending\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"cancelled\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"completed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"cancelled\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"cancelled\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"interac\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"visa\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"visa\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  }, {\n    \"note\" : \"o01qagkv2ctriw4cbjcfh4r09xizsht2ytrwje3kx5crsrwors9m7cah3aopehg524w4mx3yjhq9w0hj4x4k1mumunk5uofsgooqwgdusl1gobav0zz0fvgltuavjfo7rnofkon27bj1fboi4cnvyb8jaxypplnyx02i60x7hp\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Perspiciatis delectus sit.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"pending\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"other\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"proposed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"reserved\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"completed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"reserved\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"amex\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"jcb\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"jcb\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"discover\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"china-unionpay\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"ebt\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  }, {\n    \"note\" : \"mpcodn3f4457qj1eyu11ustcbd8adtwiwjac53do6b3nxgbr8n38au2cjm3jxj0635tarx5msgsak00y67prw2v44ee5sfy5uvrfd\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Possimus rerum temporibus quibusdam commodi excepturi eos.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"pending\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"completed\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"discover-diners\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"discover\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"other\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"discover\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"interac\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"china-unionpay\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"china-unionpay\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  }, {\n    \"note\" : \"rl7eavok7uf2az\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Eum repellendus consequatur recusandae.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"cancelled\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"proposed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"completed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"prepared\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"reserved\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"failed\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"china-unionpay\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"felica\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"other\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  } ],\n  \"resource\" : \"orders\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"clover\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fe1d9066-07f6-4ee6-ad2c-a200feadc441",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.38502Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Order"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetOrdersResponse",
            "x-graphql-type-name" : "OrderList"
          }
        }
      }
    },
    "insertionIndex" : 95
  }, {
    "id" : "aa96958e-1b20-484d-a12d-9c0291aa4a2e",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/3ryp",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "aa96958e-1b20-484d-a12d-9c0291aa4a2e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.368757Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 96
  }, {
    "id" : "78ce9b0d-5a32-4b92-919c-0ec08d2f1af7",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/3j3u",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "78ce9b0d-5a32-4b92-919c-0ec08d2f1af7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.36861Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 97
  }, {
    "id" : "0093f165-1ad9-47dc-ba24-ab03212494d0",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/24dy",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0093f165-1ad9-47dc-ba24-ab03212494d0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.36843Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 98
  }, {
    "id" : "f7209d5e-01a6-4877-bd5e-0469bd857611",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/ef37",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f7209d5e-01a6-4877-bd5e-0469bd857611",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.368284Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 99
  }, {
    "id" : "96cc8bc2-98e3-42e2-b17c-924ec8ac75ba",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/2bv2",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "96cc8bc2-98e3-42e2-b17c-924ec8ac75ba",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.36813Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 100
  }, {
    "id" : "5a7ba005-9494-47e0-9afe-aaf576048a2a",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/sswc",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"OrderTypes\",\n  \"service\" : \"clover\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5a7ba005-9494-47e0-9afe-aaf576048a2a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.36794Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "OrderTypes",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateOrderTypeResponse"
          }
        }
      }
    },
    "insertionIndex" : 101
  }, {
    "id" : "2814b41b-272d-4b5b-9f89-f03ff2fa0bd2",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/9j07",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2814b41b-272d-4b5b-9f89-f03ff2fa0bd2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.36775Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 102
  }, {
    "id" : "db8d33e3-8718-48ad-8642-d10cd9520b5b",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/08g2",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "db8d33e3-8718-48ad-8642-d10cd9520b5b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.367598Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 103
  }, {
    "id" : "f625899c-ff81-4127-aebb-b8f7c2d8a395",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/t403",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f625899c-ff81-4127-aebb-b8f7c2d8a395",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.367415Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 104
  }, {
    "id" : "c73ccf63-d540-4bcf-8bd9-4ea6e70976e6",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/7chf",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c73ccf63-d540-4bcf-8bd9-4ea6e70976e6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.367263Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 105
  }, {
    "id" : "2da51691-81ec-49c5-8406-6d1b82f33070",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/7x20",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2da51691-81ec-49c5-8406-6d1b82f33070",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.367099Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 106
  }, {
    "id" : "7f2110f4-2c03-4ad3-9e6d-ac49e179e8d6",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/8kls",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"default\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Default order type\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  },\n  \"resource\" : \"OrderTypes\",\n  \"service\" : \"clover\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7f2110f4-2c03-4ad3-9e6d-ac49e179e8d6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.366902Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/OrderType"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "OrderTypes",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetOrderTypeResponse",
            "x-graphql-type-name" : "OrderType"
          }
        }
      }
    },
    "insertionIndex" : 107
  }, {
    "id" : "436db904-6c02-4ed9-ba1d-2e46fafeb8db",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/kf3n",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "436db904-6c02-4ed9-ba1d-2e46fafeb8db",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.366646Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 108
  }, {
    "id" : "ccbb5e82-ddf1-46ab-9270-42104afd4b2f",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/06mi",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ccbb5e82-ddf1-46ab-9270-42104afd4b2f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.366356Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 109
  }, {
    "id" : "ef213f9f-01bd-484a-8840-7e78d21bf861",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/n0r4",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ef213f9f-01bd-484a-8840-7e78d21bf861",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.366184Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 110
  }, {
    "id" : "deb2eb0d-4bee-4ecc-b7cd-a7c22b24d1c1",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/e88r",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "deb2eb0d-4bee-4ecc-b7cd-a7c22b24d1c1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.366038Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 111
  }, {
    "id" : "df5a6d12-7d56-4de4-9282-bdb15640d928",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/2q7s",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "df5a6d12-7d56-4de4-9282-bdb15640d928",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.365897Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 112
  }, {
    "id" : "9dee2788-c540-4e72-a4bd-0df2f088a62d",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/4651",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"OrderTypes\",\n  \"service\" : \"clover\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9dee2788-c540-4e72-a4bd-0df2f088a62d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.365725Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "OrderTypes",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteOrderTypeResponse"
          }
        }
      }
    },
    "insertionIndex" : 113
  }, {
    "id" : "87c1c0b4-031b-420a-b6a4-3a4ee46e37c2",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "87c1c0b4-031b-420a-b6a4-3a4ee46e37c2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.365509Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 114
  }, {
    "id" : "2077d2e6-6dca-4e84-b6d3-4e5c0e56b9ed",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2077d2e6-6dca-4e84-b6d3-4e5c0e56b9ed",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.365434Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 115
  }, {
    "id" : "88d4e27f-27e8-4bc1-80ea-3613896ff9d7",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "88d4e27f-27e8-4bc1-80ea-3613896ff9d7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.36534Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 116
  }, {
    "id" : "12a22914-a1a6-4d72-919b-798b1399494d",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "12a22914-a1a6-4d72-919b-798b1399494d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.365268Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 117
  }, {
    "id" : "c4bf932a-433b-48a9-a58c-ab9cc4e3c35e",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c4bf932a-433b-48a9-a58c-ab9cc4e3c35e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.365193Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 118
  }, {
    "id" : "d15a8db1-37f8-4945-a76a-e18f87bb15a6",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"OrderTypes\",\n  \"service\" : \"clover\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d15a8db1-37f8-4945-a76a-e18f87bb15a6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.365092Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "OrderTypes",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateOrderTypeResponse"
          }
        }
      }
    },
    "insertionIndex" : 119
  }, {
    "id" : "3f1cd8c7-9e73-4421-b646-1be065a75223",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3f1cd8c7-9e73-4421-b646-1be065a75223",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.364975Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 120
  }, {
    "id" : "ca38968e-3870-406e-af43-b158e11f8ac0",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ca38968e-3870-406e-af43-b158e11f8ac0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.364901Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 121
  }, {
    "id" : "e473684b-f52f-4b56-b935-ebdadf715cdd",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e473684b-f52f-4b56-b935-ebdadf715cdd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.364796Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 122
  }, {
    "id" : "b94d3fd0-30e8-48bd-b349-da137eca964c",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b94d3fd0-30e8-48bd-b349-da137eca964c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.364716Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 123
  }, {
    "id" : "efb212cf-85a2-4750-9a32-099e8425cbf4",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "efb212cf-85a2-4750-9a32-099e8425cbf4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.364632Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 124
  }, {
    "id" : "470cf2e2-1ea0-406f-a512-a2e90287d323",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"default\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Default order type\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"default\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Default order type\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"default\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Default order type\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"default\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Default order type\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"default\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Default order type\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"default\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Default order type\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"default\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Default order type\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  } ],\n  \"resource\" : \"OrderTypes\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"clover\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "470cf2e2-1ea0-406f-a512-a2e90287d323",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.364515Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/OrderType"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "OrderTypes",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetOrderTypesResponse",
            "x-graphql-type-name" : "OrderTypeList"
          }
        }
      }
    },
    "insertionIndex" : 125
  }, {
    "id" : "bc284396-1527-47e3-8614-481f71119155",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/olc9",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "bc284396-1527-47e3-8614-481f71119155",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.364235Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 126
  }, {
    "id" : "459a580e-e5d1-47db-ad4d-642a41013b63",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/jn3d",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "459a580e-e5d1-47db-ad4d-642a41013b63",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.364093Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 127
  }, {
    "id" : "55569401-3c4b-49ba-9161-9ab87f50bec1",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/65bd",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "55569401-3c4b-49ba-9161-9ab87f50bec1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.363922Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 128
  }, {
    "id" : "00f7959c-c5af-4a84-b297-85c7c070702f",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/0798",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "00f7959c-c5af-4a84-b297-85c7c070702f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.363769Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 129
  }, {
    "id" : "24e2898e-2d01-47c2-8951-34a9b929dce3",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/479z",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "24e2898e-2d01-47c2-8951-34a9b929dce3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.363612Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 130
  }, {
    "id" : "6994fabc-0d92-452a-8b76-fa4a123df156",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/7d96",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Modifiers\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6994fabc-0d92-452a-8b76-fa4a123df156",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.363428Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Modifiers",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateModifierResponse"
          }
        }
      }
    },
    "insertionIndex" : 131
  }, {
    "id" : "ff2b0c6b-2129-42c2-8ce3-0532b5f50d6d",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/g3bb",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ff2b0c6b-2129-42c2-8ce3-0532b5f50d6d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.363241Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 132
  }, {
    "id" : "394d3924-e0ca-461a-be06-b3046e85a28b",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/87m9",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "394d3924-e0ca-461a-be06-b3046e85a28b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.363081Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 133
  }, {
    "id" : "69544429-d74c-4ada-b81f-56cd95c0083d",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/e122",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "69544429-d74c-4ada-b81f-56cd95c0083d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.362907Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 134
  }, {
    "id" : "3fa1a2f7-94f2-4502-9564-649cd9c1bef8",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/455x",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3fa1a2f7-94f2-4502-9564-649cd9c1bef8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.362764Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 135
  }, {
    "id" : "597fef6d-73e8-49f4-9584-62180d93fedf",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/28c8",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "597fef6d-73e8-49f4-9584-62180d93fedf",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.362618Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 136
  }, {
    "id" : "45629d4a-b1d8-4fa1-a16c-214b04dcfc45",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/3sq1",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  },\n  \"resource\" : \"Modifiers\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "45629d4a-b1d8-4fa1-a16c-214b04dcfc45",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.362441Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Modifier"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Modifiers",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetModifierResponse",
            "x-graphql-type-name" : "Modifier"
          }
        }
      }
    },
    "insertionIndex" : 137
  }, {
    "id" : "1f8adfed-127f-45d0-8fee-040b9376cf87",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/j5d9",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1f8adfed-127f-45d0-8fee-040b9376cf87",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.362212Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 138
  }, {
    "id" : "0bc7a781-f601-4e01-9f49-8fd6f712bb31",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/9cfv",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0bc7a781-f601-4e01-9f49-8fd6f712bb31",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.362058Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 139
  }, {
    "id" : "9aeac0bb-0a40-4b6a-82cb-cecefb62505f",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/i99g",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9aeac0bb-0a40-4b6a-82cb-cecefb62505f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.361887Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 140
  }, {
    "id" : "da8620f1-f9e1-4083-a954-aeec69e541ff",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/9ehi",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "da8620f1-f9e1-4083-a954-aeec69e541ff",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.361739Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 141
  }, {
    "id" : "3b751314-94e3-4577-91b3-cb81d81b3853",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/7v8r",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3b751314-94e3-4577-91b3-cb81d81b3853",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.361589Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 142
  }, {
    "id" : "cf5c50b4-91e6-4daa-bc1c-65f11bbefccb",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/nm7j",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Modifiers\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "cf5c50b4-91e6-4daa-bc1c-65f11bbefccb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.361415Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Modifiers",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteModifierResponse"
          }
        }
      }
    },
    "insertionIndex" : 143
  }, {
    "id" : "04d62564-5989-4ad9-918b-4580baf5f04c",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "04d62564-5989-4ad9-918b-4580baf5f04c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.361194Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 144
  }, {
    "id" : "32c4a72e-e967-4d45-93d9-609b3827a4e0",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "32c4a72e-e967-4d45-93d9-609b3827a4e0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.361121Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 145
  }, {
    "id" : "dbf16884-8009-4197-804c-93dff3d4e4cc",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "dbf16884-8009-4197-804c-93dff3d4e4cc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.361025Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 146
  }, {
    "id" : "11e067d4-deb7-4cf7-8890-63da68add3db",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "11e067d4-deb7-4cf7-8890-63da68add3db",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.360953Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 147
  }, {
    "id" : "1e0daf79-4d48-4a2a-ba6d-0a5e21def0c1",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1e0daf79-4d48-4a2a-ba6d-0a5e21def0c1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.360879Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 148
  }, {
    "id" : "c94e6ead-f60e-49e4-bb89-76543c10f9b5",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Modifiers\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c94e6ead-f60e-49e4-bb89-76543c10f9b5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.360774Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Modifiers",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateModifierResponse"
          }
        }
      }
    },
    "insertionIndex" : 149
  }, {
    "id" : "f9a846df-49fa-4b20-ae31-624130f9b26a",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f9a846df-49fa-4b20-ae31-624130f9b26a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.360662Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 150
  }, {
    "id" : "b65cb092-41f2-4e23-95da-7ddc7cde3396",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b65cb092-41f2-4e23-95da-7ddc7cde3396",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.360576Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 151
  }, {
    "id" : "9f66eb80-128b-410c-aa81-dc4d493cfadc",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9f66eb80-128b-410c-aa81-dc4d493cfadc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.360468Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 152
  }, {
    "id" : "b40cb71d-7354-46df-b518-e1d3bcf622c7",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b40cb71d-7354-46df-b518-e1d3bcf622c7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.360383Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 153
  }, {
    "id" : "0f37e5c6-f00a-436f-865d-c1373e23ef2d",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0f37e5c6-f00a-436f-865d-c1373e23ef2d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.360295Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 154
  }, {
    "id" : "aefa9476-968d-48a3-b261-9682a2250cc3",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  } ],\n  \"resource\" : \"Modifiers\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "aefa9476-968d-48a3-b261-9682a2250cc3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.360164Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Modifier"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Modifiers",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetModifiersResponse",
            "x-graphql-type-name" : "ModifierList"
          }
        }
      }
    },
    "insertionIndex" : 155
  }, {
    "id" : "f4588b4d-04a8-4138-b385-8fd884641644",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/igzx",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f4588b4d-04a8-4138-b385-8fd884641644",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.3597Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 156
  }, {
    "id" : "449368b9-03c6-4127-9440-ba9f69145aaf",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/2hov",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "449368b9-03c6-4127-9440-ba9f69145aaf",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.359549Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 157
  }, {
    "id" : "08018443-a635-442f-b39c-528be5c64989",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/xp54",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "08018443-a635-442f-b39c-528be5c64989",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.359375Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 158
  }, {
    "id" : "f1f56713-91d5-49b6-85bb-7d5df7340deb",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/27o0",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f1f56713-91d5-49b6-85bb-7d5df7340deb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.359234Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 159
  }, {
    "id" : "68361f3a-fe23-4db5-a18f-33ce4d42cd69",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/9i5f",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "68361f3a-fe23-4db5-a18f-33ce4d42cd69",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.359076Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 160
  }, {
    "id" : "da1a90db-ca3a-45bb-a6b6-0b56925e21b5",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/xpaj",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"ModifierGroups\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "da1a90db-ca3a-45bb-a6b6-0b56925e21b5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.358893Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "ModifierGroups",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateModifierGroupResponse"
          }
        }
      }
    },
    "insertionIndex" : 161
  }, {
    "id" : "0fb7ef29-ac44-4048-9638-0d743fea8cbd",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/r16j",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0fb7ef29-ac44-4048-9638-0d743fea8cbd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.35871Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 162
  }, {
    "id" : "47a13da5-0d3c-4fa0-99cf-f3fadb3f8a21",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/12e8",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "47a13da5-0d3c-4fa0-99cf-f3fadb3f8a21",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.35856Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 163
  }, {
    "id" : "cda4c250-821b-4bf6-b61f-1e9763905900",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/q5bt",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "cda4c250-821b-4bf6-b61f-1e9763905900",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.358375Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 164
  }, {
    "id" : "ccc7b2b8-c801-45ec-8de5-6f2c3c857e20",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/b25d",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ccc7b2b8-c801-45ec-8de5-6f2c3c857e20",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.358229Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 165
  }, {
    "id" : "c4de04e3-368e-4959-8efc-470d2bd981c3",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/9r7h",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c4de04e3-368e-4959-8efc-470d2bd981c3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.35808Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 166
  }, {
    "id" : "c43b2dfa-eef7-445d-974f-112c0a610528",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/23z6",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"alternate_name\" : \"Modifier New\",\n    \"maximum_allowed\" : 5,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"modifiers\" : [ {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"created_by\" : \"12345\",\n    \"present_at_all_locations\" : false,\n    \"selection_type\" : \"single\",\n    \"deleted\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"row_version\" : \"1-12345\",\n    \"minimum_required\" : 1,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"ModifierGroups\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c43b2dfa-eef7-445d-974f-112c0a610528",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.357911Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/ModifierGroup"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "ModifierGroups",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetModifierGroupResponse",
            "x-graphql-type-name" : "ModifierGroup"
          }
        }
      }
    },
    "insertionIndex" : 167
  }, {
    "id" : "fd436d9e-1659-4f51-8cc9-6ef707122f7c",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/f161",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fd436d9e-1659-4f51-8cc9-6ef707122f7c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.35761Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 168
  }, {
    "id" : "e20c3483-54e2-4e1f-9f07-51c8f6366b33",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/54r5",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e20c3483-54e2-4e1f-9f07-51c8f6366b33",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.357467Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 169
  }, {
    "id" : "cd601b73-b10a-4532-8d96-1289da184316",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/iva0",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "cd601b73-b10a-4532-8d96-1289da184316",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.357303Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 170
  }, {
    "id" : "dedc0a68-d80f-4ed5-87cc-5ff2d9079645",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/0705",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "dedc0a68-d80f-4ed5-87cc-5ff2d9079645",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.357163Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 171
  }, {
    "id" : "fc82cff1-2c30-416a-8cb6-35a187b9316a",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/41bj",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fc82cff1-2c30-416a-8cb6-35a187b9316a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.35702Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 172
  }, {
    "id" : "f19a9f67-8fc1-4f87-833f-7153f65656ed",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/aj6s",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"ModifierGroups\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f19a9f67-8fc1-4f87-833f-7153f65656ed",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.356804Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "ModifierGroups",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteModifierGroupResponse"
          }
        }
      }
    },
    "insertionIndex" : 173
  }, {
    "id" : "8eb358b8-04b1-4685-b45e-825969e5e842",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8eb358b8-04b1-4685-b45e-825969e5e842",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.356583Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 174
  }, {
    "id" : "60013ae9-d571-4adc-9edf-d271621337d8",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "60013ae9-d571-4adc-9edf-d271621337d8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.356509Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 175
  }, {
    "id" : "70e3ba0c-9009-4172-87af-22954cd988d2",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "70e3ba0c-9009-4172-87af-22954cd988d2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.356415Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 176
  }, {
    "id" : "eab821ce-eadf-45d9-a675-e5814cfeedb3",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "eab821ce-eadf-45d9-a675-e5814cfeedb3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.356343Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 177
  }, {
    "id" : "23078f23-d256-40ad-8e74-36772f772fbd",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "23078f23-d256-40ad-8e74-36772f772fbd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.35627Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 178
  }, {
    "id" : "55d89125-01a3-4d95-b3e5-165996b8a3cb",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"ModifierGroups\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "55d89125-01a3-4d95-b3e5-165996b8a3cb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.356171Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "ModifierGroups",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateModifierGroupResponse"
          }
        }
      }
    },
    "insertionIndex" : 179
  }, {
    "id" : "5af49012-fa8c-402f-a6df-b591330bf8b6",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5af49012-fa8c-402f-a6df-b591330bf8b6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.356058Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 180
  }, {
    "id" : "5e327701-2b97-4e89-8efb-f1dd5b4c3f95",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5e327701-2b97-4e89-8efb-f1dd5b4c3f95",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.355976Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 181
  }, {
    "id" : "d331c820-11f2-49ab-a7c3-1f40eebb6453",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d331c820-11f2-49ab-a7c3-1f40eebb6453",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.355868Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 182
  }, {
    "id" : "23fc50a5-f6a8-4e27-9ee6-8628242530e6",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "23fc50a5-f6a8-4e27-9ee6-8628242530e6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.355786Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 183
  }, {
    "id" : "40831cb6-dccb-444a-b665-f9bfc42ad553",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "40831cb6-dccb-444a-b665-f9bfc42ad553",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.355699Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 184
  }, {
    "id" : "1e8141b6-4469-4363-8fec-c575251784a0",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"alternate_name\" : \"Modifier New\",\n    \"maximum_allowed\" : 5,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"modifiers\" : [ {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"created_by\" : \"12345\",\n    \"present_at_all_locations\" : false,\n    \"selection_type\" : \"single\",\n    \"deleted\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"row_version\" : \"1-12345\",\n    \"minimum_required\" : 1,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"id\" : \"12345\"\n  }, {\n    \"alternate_name\" : \"Modifier New\",\n    \"maximum_allowed\" : 5,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"modifiers\" : [ {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"created_by\" : \"12345\",\n    \"present_at_all_locations\" : false,\n    \"selection_type\" : \"single\",\n    \"deleted\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"row_version\" : \"1-12345\",\n    \"minimum_required\" : 1,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"id\" : \"12345\"\n  }, {\n    \"alternate_name\" : \"Modifier New\",\n    \"maximum_allowed\" : 5,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"modifiers\" : [ {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"created_by\" : \"12345\",\n    \"present_at_all_locations\" : false,\n    \"selection_type\" : \"single\",\n    \"deleted\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"row_version\" : \"1-12345\",\n    \"minimum_required\" : 1,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"id\" : \"12345\"\n  }, {\n    \"alternate_name\" : \"Modifier New\",\n    \"maximum_allowed\" : 5,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"modifiers\" : [ {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"created_by\" : \"12345\",\n    \"present_at_all_locations\" : false,\n    \"selection_type\" : \"single\",\n    \"deleted\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"row_version\" : \"1-12345\",\n    \"minimum_required\" : 1,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"id\" : \"12345\"\n  }, {\n    \"alternate_name\" : \"Modifier New\",\n    \"maximum_allowed\" : 5,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"modifiers\" : [ {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"created_by\" : \"12345\",\n    \"present_at_all_locations\" : false,\n    \"selection_type\" : \"single\",\n    \"deleted\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"row_version\" : \"1-12345\",\n    \"minimum_required\" : 1,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"id\" : \"12345\"\n  }, {\n    \"alternate_name\" : \"Modifier New\",\n    \"maximum_allowed\" : 5,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"modifiers\" : [ {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"created_by\" : \"12345\",\n    \"present_at_all_locations\" : false,\n    \"selection_type\" : \"single\",\n    \"deleted\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"row_version\" : \"1-12345\",\n    \"minimum_required\" : 1,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"id\" : \"12345\"\n  } ],\n  \"resource\" : \"ModifierGroups\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1e8141b6-4469-4363-8fec-c575251784a0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.35556Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/ModifierGroup"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "ModifierGroups",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetModifierGroupsResponse",
            "x-graphql-type-name" : "ModifierGroupList"
          }
        }
      }
    },
    "insertionIndex" : 185
  }, {
    "id" : "fe24d238-f275-4d59-81df-914b51f64f55",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/4373",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fe24d238-f275-4d59-81df-914b51f64f55",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.354829Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 186
  }, {
    "id" : "9b49bf92-6901-4bdb-817c-6c672e8e77a3",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/3688",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9b49bf92-6901-4bdb-817c-6c672e8e77a3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.35468Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 187
  }, {
    "id" : "ad0e8839-2c00-4323-a085-5d96d648f940",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/n013",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ad0e8839-2c00-4323-a085-5d96d648f940",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.354503Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 188
  }, {
    "id" : "6bbd8c01-22a8-4635-9f1b-e2d103afff04",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/310c",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6bbd8c01-22a8-4635-9f1b-e2d103afff04",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.354354Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 189
  }, {
    "id" : "1b184fef-3e03-4027-98f2-4045b256d019",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/327h",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1b184fef-3e03-4027-98f2-4045b256d019",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.35421Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 190
  }, {
    "id" : "21ace843-db3d-4f42-9495-9bef2a08a764",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/6gbn",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Merchants\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "21ace843-db3d-4f42-9495-9bef2a08a764",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.35402Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Merchants",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateMerchantResponse"
          }
        }
      }
    },
    "insertionIndex" : 191
  }, {
    "id" : "0ef23648-05d3-400d-9e45-9add846c458f",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/0sz9",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0ef23648-05d3-400d-9e45-9add846c458f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.353822Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 192
  }, {
    "id" : "f58f7753-0159-44c3-b891-83ec35d32a89",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/0t0h",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f58f7753-0159-44c3-b891-83ec35d32a89",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.353651Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 193
  }, {
    "id" : "39aa7be0-8214-4e18-b54a-cc6ba3e5e909",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/e4ej",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "39aa7be0-8214-4e18-b54a-cc6ba3e5e909",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.35344Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 194
  }, {
    "id" : "726486d6-2792-4f31-812a-c5158069389f",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/2374",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "726486d6-2792-4f31-812a-c5158069389f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.353285Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 195
  }, {
    "id" : "00fea20f-f170-4703-ac00-f313076aa04b",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/48m0",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "00fea20f-f170-4703-ac00-f313076aa04b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.353124Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 196
  }, {
    "id" : "d3e2868e-a3e1-4d51-b564-23aa360dec5a",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/268f",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"main_location_id\" : \"12345\",\n    \"owner_id\" : \"12345\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"language\" : \"EN\",\n    \"created_by\" : \"12345\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"status\" : \"active\"\n  },\n  \"resource\" : \"Merchants\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d3e2868e-a3e1-4d51-b564-23aa360dec5a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.352915Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Merchant"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Merchants",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetMerchantResponse",
            "x-graphql-type-name" : "Merchant"
          }
        }
      }
    },
    "insertionIndex" : 197
  }, {
    "id" : "34b4c149-392f-444d-a2c5-037b780b5dfc",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/t776",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "34b4c149-392f-444d-a2c5-037b780b5dfc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.352386Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 198
  }, {
    "id" : "698631f1-203a-4f6c-b386-a79cfdde1cf4",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/of48",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "698631f1-203a-4f6c-b386-a79cfdde1cf4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.352084Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 199
  }, {
    "id" : "6e2792ad-dca4-4efa-8918-36dff952950f",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/67yc",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6e2792ad-dca4-4efa-8918-36dff952950f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.35191Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 200
  }, {
    "id" : "09739b59-82c1-4483-a7dd-d87422a060c6",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/3u47",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "09739b59-82c1-4483-a7dd-d87422a060c6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.351755Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 201
  }, {
    "id" : "ac4c5a4d-8d54-4295-8e6c-ca9349a9f8e3",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/1o67",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ac4c5a4d-8d54-4295-8e6c-ca9349a9f8e3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.351604Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 202
  }, {
    "id" : "efb66410-d3da-4093-92aa-286eb72178f6",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/ta52",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Merchants\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "efb66410-d3da-4093-92aa-286eb72178f6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.351425Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Merchants",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteMerchantResponse"
          }
        }
      }
    },
    "insertionIndex" : 203
  }, {
    "id" : "9b5bafd2-a1a7-488a-871e-13ef57f0f707",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9b5bafd2-a1a7-488a-871e-13ef57f0f707",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.351232Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 204
  }, {
    "id" : "531776a3-a25e-4d8e-a044-3d1bd1ef2e4f",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "531776a3-a25e-4d8e-a044-3d1bd1ef2e4f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.351158Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 205
  }, {
    "id" : "a0624616-f2bc-4af7-ab8e-d6c898b1fdc7",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a0624616-f2bc-4af7-ab8e-d6c898b1fdc7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.351055Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 206
  }, {
    "id" : "2ac6ef60-a0f1-452f-a750-64ff9f6873e6",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2ac6ef60-a0f1-452f-a750-64ff9f6873e6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.350978Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 207
  }, {
    "id" : "73e8c9b5-5d88-4763-9dae-51d825be6216",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "73e8c9b5-5d88-4763-9dae-51d825be6216",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.3509Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 208
  }, {
    "id" : "6c875db8-cc78-4d24-b6dd-9e31a9144466",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Merchants\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6c875db8-cc78-4d24-b6dd-9e31a9144466",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.350792Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Merchants",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateMerchantResponse"
          }
        }
      }
    },
    "insertionIndex" : 209
  }, {
    "id" : "74ab3ff2-df02-4f23-834a-29ab991d5ee3",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "74ab3ff2-df02-4f23-834a-29ab991d5ee3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.350667Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 210
  }, {
    "id" : "92356d5d-fae0-4805-a64f-ef85420110e0",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "92356d5d-fae0-4805-a64f-ef85420110e0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.350547Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 211
  }, {
    "id" : "f93da939-fb91-4b22-8755-e4361bbcbce5",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f93da939-fb91-4b22-8755-e4361bbcbce5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.350431Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 212
  }, {
    "id" : "b156c92c-749a-4bbc-9646-1cc1f583eda0",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b156c92c-749a-4bbc-9646-1cc1f583eda0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.350343Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 213
  }, {
    "id" : "21e66648-6754-4d23-9e0e-5553a5810474",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "21e66648-6754-4d23-9e0e-5553a5810474",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.350246Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 214
  }, {
    "id" : "04b293c6-1593-451a-a5f7-ad6ce081ac31",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"main_location_id\" : \"12345\",\n    \"owner_id\" : \"12345\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"language\" : \"EN\",\n    \"created_by\" : \"12345\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"status\" : \"active\"\n  }, {\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"main_location_id\" : \"12345\",\n    \"owner_id\" : \"12345\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"language\" : \"EN\",\n    \"created_by\" : \"12345\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"status\" : \"active\"\n  }, {\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"main_location_id\" : \"12345\",\n    \"owner_id\" : \"12345\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"language\" : \"EN\",\n    \"created_by\" : \"12345\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"status\" : \"active\"\n  }, {\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"main_location_id\" : \"12345\",\n    \"owner_id\" : \"12345\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"language\" : \"EN\",\n    \"created_by\" : \"12345\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"status\" : \"active\"\n  }, {\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"main_location_id\" : \"12345\",\n    \"owner_id\" : \"12345\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"language\" : \"EN\",\n    \"created_by\" : \"12345\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"status\" : \"active\"\n  } ],\n  \"resource\" : \"Merchants\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "04b293c6-1593-451a-a5f7-ad6ce081ac31",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.350103Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Merchant"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Merchants",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetMerchantsResponse",
            "x-graphql-type-name" : "MerchantList"
          }
        }
      }
    },
    "insertionIndex" : 215
  }, {
    "id" : "6dcd04f7-6841-48f4-8832-6fb7dbaa3746",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/4r4n",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6dcd04f7-6841-48f4-8832-6fb7dbaa3746",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.349089Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 216
  }, {
    "id" : "c6866189-3282-4ea4-aa8a-8c8cc656c9a9",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/wo7o",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c6866189-3282-4ea4-aa8a-8c8cc656c9a9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.34892Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 217
  }, {
    "id" : "76cbd8ec-931b-413d-b928-636ad4367b0c",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/p58i",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "76cbd8ec-931b-413d-b928-636ad4367b0c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.348712Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 218
  }, {
    "id" : "44e02725-d613-4418-a41d-e9963d5a9099",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/v158",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "44e02725-d613-4418-a41d-e9963d5a9099",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.34845Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 219
  }, {
    "id" : "d0542909-fe27-46db-ab8f-9477066685bb",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/285g",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d0542909-fe27-46db-ab8f-9477066685bb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.348228Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 220
  }, {
    "id" : "142cdc56-a1cd-4f29-a73c-ee4036baa7bb",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/j9o0",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Locations\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "142cdc56-a1cd-4f29-a73c-ee4036baa7bb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.348053Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Locations",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateLocationResponse"
          }
        }
      }
    },
    "insertionIndex" : 221
  }, {
    "id" : "21dffd84-a0fd-41fd-b3a3-da956f3a04ab",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/553z",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "21dffd84-a0fd-41fd-b3a3-da956f3a04ab",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.347876Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 222
  }, {
    "id" : "56264e01-5206-4ee4-8be4-e732e23e9584",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/qi2w",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "56264e01-5206-4ee4-8be4-e732e23e9584",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.347726Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 223
  }, {
    "id" : "a20a9704-ea09-4a6c-8dd8-1bced6f7c9e7",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/mei8",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a20a9704-ea09-4a6c-8dd8-1bced6f7c9e7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.347554Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 224
  }, {
    "id" : "e78ee1f6-f06d-4c56-b01a-3e12d3391e7c",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/f4l5",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e78ee1f6-f06d-4c56-b01a-3e12d3391e7c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.347409Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 225
  }, {
    "id" : "566e759c-57f8-4417-9fc1-06ce4508d082",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/uqh8",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "566e759c-57f8-4417-9fc1-06ce4508d082",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.347256Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 226
  }, {
    "id" : "d46f7904-cf45-4ae5-aa71-22af2275d443",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/189x",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"business_name\" : \"Dunkin Donuts LLC\",\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"created_by\" : \"12345\",\n    \"status\" : \"active\"\n  },\n  \"resource\" : \"Locations\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d46f7904-cf45-4ae5-aa71-22af2275d443",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.347076Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Location"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Locations",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetLocationResponse",
            "x-graphql-type-name" : "Location"
          }
        }
      }
    },
    "insertionIndex" : 227
  }, {
    "id" : "2e97add0-d0cc-4238-8b8c-2232012cc593",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/9w3l",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2e97add0-d0cc-4238-8b8c-2232012cc593",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.346784Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 228
  }, {
    "id" : "e2a85479-836c-46fa-be00-7c9092625ed1",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/agjz",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e2a85479-836c-46fa-be00-7c9092625ed1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.346631Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 229
  }, {
    "id" : "87f3f2ad-65e7-4439-8a0a-cdfdbcf8b462",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/5i2m",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "87f3f2ad-65e7-4439-8a0a-cdfdbcf8b462",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.346461Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 230
  }, {
    "id" : "46346a93-05de-4a29-b2a4-1bd2e8121a37",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/9rop",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "46346a93-05de-4a29-b2a4-1bd2e8121a37",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.34632Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 231
  }, {
    "id" : "9cb61259-6ef0-48d0-8e2d-99cfdca74a8b",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/oyjt",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9cb61259-6ef0-48d0-8e2d-99cfdca74a8b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.346167Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 232
  }, {
    "id" : "05fca2d1-e498-4e32-8e94-f5c360f24454",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/774a",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Locations\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "05fca2d1-e498-4e32-8e94-f5c360f24454",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.345985Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Locations",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteLocationResponse"
          }
        }
      }
    },
    "insertionIndex" : 233
  }, {
    "id" : "026044cb-d7cc-4533-a17d-80b3fc3b0cce",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "026044cb-d7cc-4533-a17d-80b3fc3b0cce",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.345778Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 234
  }, {
    "id" : "5840a49f-1252-4096-b7ec-772c8675099c",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5840a49f-1252-4096-b7ec-772c8675099c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.345698Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 235
  }, {
    "id" : "e911a01f-9b4d-40dc-9a32-648d0193e0c4",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e911a01f-9b4d-40dc-9a32-648d0193e0c4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.345599Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 236
  }, {
    "id" : "ce26db89-c58f-4b90-8b28-a56fe4a98a88",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ce26db89-c58f-4b90-8b28-a56fe4a98a88",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.345521Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 237
  }, {
    "id" : "89084e59-36d2-4290-9364-565df4dbc081",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "89084e59-36d2-4290-9364-565df4dbc081",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.345444Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 238
  }, {
    "id" : "0a0180e7-b07d-4243-b650-3933315ea83f",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Locations\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0a0180e7-b07d-4243-b650-3933315ea83f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.345338Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Locations",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateLocationResponse"
          }
        }
      }
    },
    "insertionIndex" : 239
  }, {
    "id" : "d2c227e2-9924-4a69-a2b3-18d985afbd2c",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d2c227e2-9924-4a69-a2b3-18d985afbd2c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.345221Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 240
  }, {
    "id" : "04248380-29bd-4686-b86b-9decd8a3afed",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "04248380-29bd-4686-b86b-9decd8a3afed",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.345126Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 241
  }, {
    "id" : "be49e314-6f1d-4778-b4f3-dc752b9c0085",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "be49e314-6f1d-4778-b4f3-dc752b9c0085",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.345007Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 242
  }, {
    "id" : "aec72ab5-6e04-44e0-9739-5f92b49dac88",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "aec72ab5-6e04-44e0-9739-5f92b49dac88",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.344912Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 243
  }, {
    "id" : "7457ef9b-5b2e-47d8-b0c8-94ed0a182183",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7457ef9b-5b2e-47d8-b0c8-94ed0a182183",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.344809Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 244
  }, {
    "id" : "ba926bec-254f-4564-b102-79f1c904018d",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"business_name\" : \"Dunkin Donuts LLC\",\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"created_by\" : \"12345\",\n    \"status\" : \"active\"\n  }, {\n    \"business_name\" : \"Dunkin Donuts LLC\",\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"created_by\" : \"12345\",\n    \"status\" : \"active\"\n  }, {\n    \"business_name\" : \"Dunkin Donuts LLC\",\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"created_by\" : \"12345\",\n    \"status\" : \"active\"\n  }, {\n    \"business_name\" : \"Dunkin Donuts LLC\",\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"created_by\" : \"12345\",\n    \"status\" : \"active\"\n  } ],\n  \"resource\" : \"Locations\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ba926bec-254f-4564-b102-79f1c904018d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.344667Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Location"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Locations",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetLocationsResponse",
            "x-graphql-type-name" : "LocationList"
          }
        }
      }
    },
    "insertionIndex" : 245
  }, {
    "id" : "3e36b861-88a1-4fad-85e1-7e10ef6c2412",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/7wn1",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3e36b861-88a1-4fad-85e1-7e10ef6c2412",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.344099Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 246
  }, {
    "id" : "37eed784-4c7d-40ac-9ae7-34c852d58a97",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/4d2j",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "37eed784-4c7d-40ac-9ae7-34c852d58a97",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.34395Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 247
  }, {
    "id" : "da1decf5-922d-497a-b4ac-68ff5f2d0788",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/2zwc",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "da1decf5-922d-497a-b4ac-68ff5f2d0788",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.34378Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 248
  }, {
    "id" : "6a417da7-ca23-45a7-ae11-442fc3d71893",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/wak2",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6a417da7-ca23-45a7-ae11-442fc3d71893",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.343635Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 249
  }, {
    "id" : "89c5dd21-6289-4e6a-bb59-f4078514a4d4",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/f588",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "89c5dd21-6289-4e6a-bb59-f4078514a4d4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.343485Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 250
  }, {
    "id" : "c0e3a331-e70e-42b6-9f53-520214453fd7",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/5hlb",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Items\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c0e3a331-e70e-42b6-9f53-520214453fd7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.343303Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Items",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateItemResponse"
          }
        }
      }
    },
    "insertionIndex" : 251
  }, {
    "id" : "02a454f7-6c54-46d9-8f1c-e4975f7811f4",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/s230",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "02a454f7-6c54-46d9-8f1c-e4975f7811f4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.343123Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 252
  }, {
    "id" : "fceb863f-8158-4144-ba8d-763ad70eff99",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/vqna",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fceb863f-8158-4144-ba8d-763ad70eff99",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.342974Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 253
  }, {
    "id" : "81bc1ba6-c262-4a49-be19-d2ee9ecb05d0",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/t387",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "81bc1ba6-c262-4a49-be19-d2ee9ecb05d0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.342797Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 254
  }, {
    "id" : "746e80ca-3d78-4f7d-a380-a0d63710e3e0",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/95i5",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "746e80ca-3d78-4f7d-a380-a0d63710e3e0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.342645Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 255
  }, {
    "id" : "90b42e83-f677-4bc2-a874-b58ac7af9b73",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/d3kq",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "90b42e83-f677-4bc2-a874-b58ac7af9b73",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.342488Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 256
  }, {
    "id" : "cf36ac31-6e95-46ca-8fd8-483088b07ac3",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/0plz",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  },\n  \"resource\" : \"Items\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "cf36ac31-6e95-46ca-8fd8-483088b07ac3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.342301Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Item"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Items",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetItemResponse",
            "x-graphql-type-name" : "Item"
          }
        }
      }
    },
    "insertionIndex" : 257
  }, {
    "id" : "112141fa-3fd7-4db4-bc3f-a15b0df21132",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/pi7m",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "112141fa-3fd7-4db4-bc3f-a15b0df21132",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.341981Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 258
  }, {
    "id" : "06e18c37-8a85-47d3-9f43-3004a885daeb",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/3zk0",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "06e18c37-8a85-47d3-9f43-3004a885daeb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.341831Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 259
  }, {
    "id" : "597fffe2-49e7-4639-aed4-6ed5274e874d",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/fnc3",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "597fffe2-49e7-4639-aed4-6ed5274e874d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.341659Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 260
  }, {
    "id" : "40404847-b6d0-4af5-91f0-895e5def96a0",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/aiqx",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "40404847-b6d0-4af5-91f0-895e5def96a0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.341507Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 261
  }, {
    "id" : "9e56d093-0d87-4b87-a4d0-1c1df0dc4d16",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/o5q2",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9e56d093-0d87-4b87-a4d0-1c1df0dc4d16",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.341353Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 262
  }, {
    "id" : "98a38db4-e337-447c-9639-435e15929717",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/r52g",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Items\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "98a38db4-e337-447c-9639-435e15929717",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.34115Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Items",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteItemResponse"
          }
        }
      }
    },
    "insertionIndex" : 263
  }, {
    "id" : "17415b77-4578-41de-ab57-f5352a360dda",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "17415b77-4578-41de-ab57-f5352a360dda",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.340925Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 264
  }, {
    "id" : "117fca30-e482-4728-bbad-98bf1552ba78",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "117fca30-e482-4728-bbad-98bf1552ba78",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.340848Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 265
  }, {
    "id" : "f4d01cb1-11c8-47aa-ae2f-7d264c2dd2d1",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f4d01cb1-11c8-47aa-ae2f-7d264c2dd2d1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.340748Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 266
  }, {
    "id" : "7ff48514-fc30-4390-bed3-f303ad53e5d6",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7ff48514-fc30-4390-bed3-f303ad53e5d6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.340669Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 267
  }, {
    "id" : "b3bb3255-535e-4f5f-b318-b98bc9d083f6",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b3bb3255-535e-4f5f-b318-b98bc9d083f6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.340592Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 268
  }, {
    "id" : "5b8699d6-55c6-4c47-89a7-63159c163a6b",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Items\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5b8699d6-55c6-4c47-89a7-63159c163a6b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.340482Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Items",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateItemResponse"
          }
        }
      }
    },
    "insertionIndex" : 269
  }, {
    "id" : "81cce2a9-4a4f-479e-b710-33fc5ea3fd69",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "81cce2a9-4a4f-479e-b710-33fc5ea3fd69",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.340361Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 270
  }, {
    "id" : "e04ee821-d395-4696-9a6f-0326b998afe2",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e04ee821-d395-4696-9a6f-0326b998afe2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.340248Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 271
  }, {
    "id" : "3d937647-2081-40c1-84c6-b2e6eb583f6a",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3d937647-2081-40c1-84c6-b2e6eb583f6a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.340115Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 272
  }, {
    "id" : "4873d0cd-9d43-4a99-b8fe-d0e18bb100ac",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4873d0cd-9d43-4a99-b8fe-d0e18bb100ac",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.340008Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 273
  }, {
    "id" : "a8d06d71-1ed8-4b49-9153-7848ce7a2d61",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a8d06d71-1ed8-4b49-9153-7848ce7a2d61",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.339893Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 274
  }, {
    "id" : "6152e1ae-822d-4219-b244-ddd20074c642",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  }, {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  }, {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  }, {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  }, {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  }, {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  } ],\n  \"resource\" : \"Items\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6152e1ae-822d-4219-b244-ddd20074c642",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:40.339721Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Item"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Items",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetItemsResponse",
            "x-graphql-type-name" : "ItemList"
          }
        }
      }
    },
    "insertionIndex" : 275
  } ]
}