{
  "mappings" : [ {
    "id" : "3ade224f-3c86-4656-8404-57283b6160c5",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/6vhr",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3ade224f-3c86-4656-8404-57283b6160c5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.65516Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 0
  }, {
    "id" : "d23a3331-3f5d-46c3-8c7b-593084ee6c5e",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/kq9y",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d23a3331-3f5d-46c3-8c7b-593084ee6c5e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.655038Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 1
  }, {
    "id" : "12b1faa1-bfd5-4ad0-afe0-fc614721fa55",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/b8vz",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "12b1faa1-bfd5-4ad0-afe0-fc614721fa55",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.654895Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 2
  }, {
    "id" : "0daedeba-0953-4688-b6ee-7f2ce8e0091c",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/1kry",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0daedeba-0953-4688-b6ee-7f2ce8e0091c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.65477Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 3
  }, {
    "id" : "be9a4c2f-7c08-45a6-adb1-43fbf8205f60",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/30v1",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "be9a4c2f-7c08-45a6-adb1-43fbf8205f60",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.654648Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 4
  }, {
    "id" : "3600c59b-e122-4c1a-ae87-572af917d77b",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/h4a1",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Tenders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3600c59b-e122-4c1a-ae87-572af917d77b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.654502Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Tenders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateTenderResponse"
          }
        }
      }
    },
    "insertionIndex" : 5
  }, {
    "id" : "6cc46616-e3db-4cc5-81f7-72a969b1d2a1",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/v71s",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6cc46616-e3db-4cc5-81f7-72a969b1d2a1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.654341Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 6
  }, {
    "id" : "3bda2a6a-13d5-451a-a899-1dd4edf71843",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/xp3l",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3bda2a6a-13d5-451a-a899-1dd4edf71843",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.654211Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 7
  }, {
    "id" : "cee2a5f0-1a27-43e9-9a1f-995d25334737",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/b3lj",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "cee2a5f0-1a27-43e9-9a1f-995d25334737",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.654064Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 8
  }, {
    "id" : "1ffd65a2-eb22-49ae-8d79-f4bd3151e4f7",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/ex8a",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1ffd65a2-eb22-49ae-8d79-f4bd3151e4f7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.653941Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 9
  }, {
    "id" : "1ff5a3b5-0667-4f9f-ad10-55822d2829f2",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/f01b",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1ff5a3b5-0667-4f9f-ad10-55822d2829f2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.653814Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 10
  }, {
    "id" : "b94a6aa4-c637-4e8d-a5a5-4a681c492236",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/13y3",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"allows_tipping\" : false,\n    \"opens_cash_drawer\" : false,\n    \"hidden\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"editable\" : true,\n    \"updated_by\" : \"12345\",\n    \"active\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"label\" : \"Cash\",\n    \"created_by\" : \"12345\",\n    \"key\" : \"com.clover.tender.cash\"\n  },\n  \"resource\" : \"Tenders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b94a6aa4-c637-4e8d-a5a5-4a681c492236",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.653669Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Tender"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Tenders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetTenderResponse",
            "x-graphql-type-name" : "Tender"
          }
        }
      }
    },
    "insertionIndex" : 11
  }, {
    "id" : "c059f0d1-887d-4b97-9026-77b197ba650e",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/5kf3",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c059f0d1-887d-4b97-9026-77b197ba650e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.653492Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 12
  }, {
    "id" : "09fd8dde-3a5b-41e2-b57c-f72067f9ab8c",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/a56f",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "09fd8dde-3a5b-41e2-b57c-f72067f9ab8c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.653368Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 13
  }, {
    "id" : "e9cb13b7-6c9a-4f38-b8ab-24df2f850e91",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/wxob",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e9cb13b7-6c9a-4f38-b8ab-24df2f850e91",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.653229Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 14
  }, {
    "id" : "3c3ff8e2-230c-446e-a157-fac0f033c849",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/329k",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3c3ff8e2-230c-446e-a157-fac0f033c849",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.653107Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 15
  }, {
    "id" : "8fd9e8ca-ac12-4e54-a02a-daeddd5629a9",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/5n42",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8fd9e8ca-ac12-4e54-a02a-daeddd5629a9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.65298Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 16
  }, {
    "id" : "0d33e1fe-8a45-4bdd-a92a-ea49410d7c72",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/x9a2",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Tenders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0d33e1fe-8a45-4bdd-a92a-ea49410d7c72",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.652841Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Tenders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteTenderResponse"
          }
        }
      }
    },
    "insertionIndex" : 17
  }, {
    "id" : "15977f3f-66ac-4164-8437-deaf47c1b8b5",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "15977f3f-66ac-4164-8437-deaf47c1b8b5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.652673Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 18
  }, {
    "id" : "ee4a169b-cc18-4204-9cb3-7265739242a9",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ee4a169b-cc18-4204-9cb3-7265739242a9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.652608Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 19
  }, {
    "id" : "f817d7d3-a67e-4479-be3b-fd19a19147d1",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f817d7d3-a67e-4479-be3b-fd19a19147d1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.652524Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 20
  }, {
    "id" : "4432aa89-6c32-44f9-8e54-ba761f3f8ecc",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4432aa89-6c32-44f9-8e54-ba761f3f8ecc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.652461Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 21
  }, {
    "id" : "9d5a44ff-f422-4503-b9dd-7423bccafdfa",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9d5a44ff-f422-4503-b9dd-7423bccafdfa",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.652395Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 22
  }, {
    "id" : "3045602d-c1e7-43ef-a11f-34ec58caad69",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Tenders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3045602d-c1e7-43ef-a11f-34ec58caad69",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.652295Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Tenders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateTenderResponse"
          }
        }
      }
    },
    "insertionIndex" : 23
  }, {
    "id" : "812c0336-c87a-48eb-83b4-076b89276cbe",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "812c0336-c87a-48eb-83b4-076b89276cbe",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.652197Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 24
  }, {
    "id" : "17c8263e-9021-4b26-891a-c68e55ebcc7b",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "17c8263e-9021-4b26-891a-c68e55ebcc7b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.652131Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 25
  }, {
    "id" : "4ebf3959-d12e-4886-abd6-f258f430f79d",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4ebf3959-d12e-4886-abd6-f258f430f79d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.652044Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 26
  }, {
    "id" : "5890c79b-bd5e-4ac8-91b5-c29df2f46206",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5890c79b-bd5e-4ac8-91b5-c29df2f46206",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.651978Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 27
  }, {
    "id" : "3e841a6d-0bf6-4b08-b9b0-9a3dc1e7f370",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3e841a6d-0bf6-4b08-b9b0-9a3dc1e7f370",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.651912Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 28
  }, {
    "id" : "786cc6c4-c7b5-47ba-b36f-d6dc60cc023a",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"allows_tipping\" : true,\n    \"opens_cash_drawer\" : true,\n    \"hidden\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"editable\" : true,\n    \"updated_by\" : \"12345\",\n    \"active\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"label\" : \"Cash\",\n    \"created_by\" : \"12345\",\n    \"key\" : \"com.clover.tender.cash\"\n  }, {\n    \"allows_tipping\" : true,\n    \"opens_cash_drawer\" : false,\n    \"hidden\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"editable\" : true,\n    \"updated_by\" : \"12345\",\n    \"active\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"label\" : \"Cash\",\n    \"created_by\" : \"12345\",\n    \"key\" : \"com.clover.tender.cash\"\n  }, {\n    \"allows_tipping\" : false,\n    \"opens_cash_drawer\" : false,\n    \"hidden\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"editable\" : true,\n    \"updated_by\" : \"12345\",\n    \"active\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"label\" : \"Cash\",\n    \"created_by\" : \"12345\",\n    \"key\" : \"com.clover.tender.cash\"\n  }, {\n    \"allows_tipping\" : false,\n    \"opens_cash_drawer\" : false,\n    \"hidden\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"editable\" : true,\n    \"updated_by\" : \"12345\",\n    \"active\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"label\" : \"Cash\",\n    \"created_by\" : \"12345\",\n    \"key\" : \"com.clover.tender.cash\"\n  }, {\n    \"allows_tipping\" : true,\n    \"opens_cash_drawer\" : true,\n    \"hidden\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"editable\" : true,\n    \"updated_by\" : \"12345\",\n    \"active\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"label\" : \"Cash\",\n    \"created_by\" : \"12345\",\n    \"key\" : \"com.clover.tender.cash\"\n  }, {\n    \"allows_tipping\" : false,\n    \"opens_cash_drawer\" : false,\n    \"hidden\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"editable\" : true,\n    \"updated_by\" : \"12345\",\n    \"active\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"label\" : \"Cash\",\n    \"created_by\" : \"12345\",\n    \"key\" : \"com.clover.tender.cash\"\n  } ],\n  \"resource\" : \"Tenders\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"clover\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "786cc6c4-c7b5-47ba-b36f-d6dc60cc023a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.651824Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Tender"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Tenders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetTendersResponse",
            "x-graphql-type-name" : "TenderList"
          }
        }
      }
    },
    "insertionIndex" : 29
  }, {
    "id" : "c821f744-25a7-49a8-b443-250b802e571f",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/944e",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c821f744-25a7-49a8-b443-250b802e571f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.65154Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 30
  }, {
    "id" : "e4c5a318-483f-46da-a071-65a28ed40015",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/m09u",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e4c5a318-483f-46da-a071-65a28ed40015",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.651415Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 31
  }, {
    "id" : "8d17b6c2-511b-411e-bf6d-a3e13bec3e75",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/w06b",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8d17b6c2-511b-411e-bf6d-a3e13bec3e75",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.651269Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 32
  }, {
    "id" : "25f60d26-8d60-4892-8f34-d4ad3252929c",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/7bzm",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "25f60d26-8d60-4892-8f34-d4ad3252929c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.651147Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 33
  }, {
    "id" : "e232d5eb-016d-450c-9e9c-e1ccc682b5d6",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/xvm6",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e232d5eb-016d-450c-9e9c-e1ccc682b5d6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.651022Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 34
  }, {
    "id" : "5675225a-bb8e-4b12-8b79-db45b10f4c04",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/3r29",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"PosPayments\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5675225a-bb8e-4b12-8b79-db45b10f4c04",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.650876Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "PosPayments",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdatePosPaymentResponse"
          }
        }
      }
    },
    "insertionIndex" : 35
  }, {
    "id" : "8bd6bed5-7a28-43df-9499-3e61ede9219a",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/r51x",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8bd6bed5-7a28-43df-9499-3e61ede9219a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.65071Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 36
  }, {
    "id" : "f995d2f9-2620-47c9-8d85-89e8fb0120b9",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/tl07",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f995d2f9-2620-47c9-8d85-89e8fb0120b9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.650584Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 37
  }, {
    "id" : "6691877c-b045-4f61-b449-b03bbb7d9021",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/h9l8",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6691877c-b045-4f61-b449-b03bbb7d9021",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.65044Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 38
  }, {
    "id" : "28a9a1e2-9901-4ef8-9c2a-c6dd0098124e",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/a178",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "28a9a1e2-9901-4ef8-9c2a-c6dd0098124e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.650316Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 39
  }, {
    "id" : "a4d6cb99-3489-4ef8-adcf-734b7933da0c",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/u412",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a4d6cb99-3489-4ef8-adcf-734b7933da0c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.650182Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 40
  }, {
    "id" : "4e0bb2b7-7d85-4893-9c52-18da941bde2f",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/z3ns",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"change_back_cash_amount\" : 20,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"tender_id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"external\",\n    \"location_id\" : \"12345\",\n    \"external_payment_id\" : \"12345\",\n    \"approved\" : 37.5,\n    \"total\" : 37.5,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"app_fee\" : 3,\n    \"currency\" : \"USD\",\n    \"refunded\" : 37.5,\n    \"tip\" : 7,\n    \"id\" : \"12345\",\n    \"cash\" : {\n      \"amount\" : { },\n      \"charge_back_amount\" : { }\n    },\n    \"external_details\" : {\n      \"source_fee_amount\" : 2.5,\n      \"source\" : \"5dkbtrl7kifobv10fuevragglujj4jw1r4mb92rk0slnq63aq6me08d3w9w20z66p\",\n      \"source_id\" : \"lq3q\",\n      \"type\" : \"social\"\n    },\n    \"bank_account\" : {\n      \"country\" : \"US\",\n      \"account_ownership_type\" : \"0d0sxdvzmv7kwu17ha09hrrkirvhfo3z932q1xdpc40u0bbs04\",\n      \"bank_name\" : \"Rana Kemmer\",\n      \"fingerprint\" : \"jd83u6p7nlnexx39ppxth2qp48atbdru2ripw10drmmuy2qcyxdkdm1tc9k88xoyyyy20zy4rw490ydtcn14f6dg55rz7fxp6ofqvm187ipy5uvsyr9vxeeugjyoct8d8brvppj4qisbbs4tsxprovymxwaqbddvohsyu1b5laaz1bwf7pwbkdrkqls9kniy3\",\n      \"transfer_type\" : \"467jw61msx\",\n      \"ach_details\" : {\n        \"account_type\" : \"ulg7x9yhnfoi40aq0cujvvoswqux19hu\",\n        \"routing_number\" : \"j5wvu5hywf6zths9jb\",\n        \"account_number_suffix\" : \"rsgr\"\n      },\n      \"statement_description\" : \"Quae dolorem vero sed velit voluptas consequatur. Autem ea consequatur in neque. Soluta voluptas quos neque velit dolore voluptas. In autem sequi.\"\n    },\n    \"card_details\" : {\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"other\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    },\n    \"amount\" : 27.5,\n    \"wallet\" : {\n      \"status\" : \"voided\"\n    },\n    \"device_id\" : \"12345\",\n    \"processing_fees\" : [ {\n      \"amount\" : 1.05,\n      \"effective_at\" : \"2020-09-30T07:43:32.000Z\",\n      \"processing_type\" : \"initial\"\n    } ],\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"tax\" : 20,\n    \"created_by\" : \"12345\",\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"source_id\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"order_id\" : \"12345\",\n    \"status\" : \"approved\"\n  },\n  \"resource\" : \"PosPayments\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4e0bb2b7-7d85-4893-9c52-18da941bde2f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.65003Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/PosPayment"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "PosPayments",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetPosPaymentResponse",
            "x-graphql-type-name" : "PosPayment"
          }
        }
      }
    },
    "insertionIndex" : 41
  }, {
    "id" : "561d8b74-ffeb-4592-9cba-c1338e4fcad5",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/lcs1",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "561d8b74-ffeb-4592-9cba-c1338e4fcad5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.649174Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 42
  }, {
    "id" : "bf2cf0eb-7ae1-43a0-95ef-11e790898756",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/17fg",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "bf2cf0eb-7ae1-43a0-95ef-11e790898756",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.649041Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 43
  }, {
    "id" : "af8cc744-f911-433d-999b-1750a0a5c59d",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/6i0b",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "af8cc744-f911-433d-999b-1750a0a5c59d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.648886Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 44
  }, {
    "id" : "198b921d-9e89-44c6-9e61-98853f2ffcb8",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/8ep2",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "198b921d-9e89-44c6-9e61-98853f2ffcb8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.648756Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 45
  }, {
    "id" : "566e890a-12b7-4678-afa6-fe34cabb73ef",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/0408",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "566e890a-12b7-4678-afa6-fe34cabb73ef",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.648625Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 46
  }, {
    "id" : "ca0f13a9-a13f-4517-b92b-b26fba79d111",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/5x0t",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"PosPayments\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ca0f13a9-a13f-4517-b92b-b26fba79d111",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.64847Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "PosPayments",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeletePosPaymentResponse"
          }
        }
      }
    },
    "insertionIndex" : 47
  }, {
    "id" : "6aeb483d-c143-4244-a095-bfa93b4a7c75",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6aeb483d-c143-4244-a095-bfa93b4a7c75",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.648293Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 48
  }, {
    "id" : "2135354b-6b0e-46c9-8646-461e665d880d",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2135354b-6b0e-46c9-8646-461e665d880d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.648222Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 49
  }, {
    "id" : "c0f5f7d3-f3ff-4ab1-8ed0-aaca4b6e0a79",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c0f5f7d3-f3ff-4ab1-8ed0-aaca4b6e0a79",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.648129Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 50
  }, {
    "id" : "a5f57c96-38bb-4866-affc-518519b071ad",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a5f57c96-38bb-4866-affc-518519b071ad",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.648064Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 51
  }, {
    "id" : "2b143c4d-d3e0-4061-a2fb-5e15a6b2ecdf",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2b143c4d-d3e0-4061-a2fb-5e15a6b2ecdf",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.647985Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 52
  }, {
    "id" : "3021599c-ffd6-4b2e-977a-37bffdac70dc",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"PosPayments\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3021599c-ffd6-4b2e-977a-37bffdac70dc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.647901Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "PosPayments",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreatePosPaymentResponse"
          }
        }
      }
    },
    "insertionIndex" : 53
  }, {
    "id" : "041c3d7b-bb42-48c6-91c4-6631f881efae",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "041c3d7b-bb42-48c6-91c4-6631f881efae",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.647794Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 54
  }, {
    "id" : "f13052cd-1a13-46d3-98df-4f93707cd9db",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f13052cd-1a13-46d3-98df-4f93707cd9db",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.647726Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 55
  }, {
    "id" : "9991d414-b2d9-450e-b060-a3361da23d84",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9991d414-b2d9-450e-b060-a3361da23d84",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.647635Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 56
  }, {
    "id" : "fd3b1e6b-3fd4-47fb-afd4-99a3a63be508",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fd3b1e6b-3fd4-47fb-afd4-99a3a63be508",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.647567Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 57
  }, {
    "id" : "19bd5b32-2d6d-4ae6-b3df-27fa434b6489",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "19bd5b32-2d6d-4ae6-b3df-27fa434b6489",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.647497Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 58
  }, {
    "id" : "6307dc97-31e7-4ec8-b453-c4501a909294",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"change_back_cash_amount\" : 20,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"tender_id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"external\",\n    \"location_id\" : \"12345\",\n    \"external_payment_id\" : \"12345\",\n    \"approved\" : 37.5,\n    \"total\" : 37.5,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"app_fee\" : 3,\n    \"currency\" : \"USD\",\n    \"refunded\" : 37.5,\n    \"tip\" : 7,\n    \"id\" : \"12345\",\n    \"cash\" : {\n      \"amount\" : { },\n      \"charge_back_amount\" : { }\n    },\n    \"external_details\" : {\n      \"source_fee_amount\" : 2.5,\n      \"source\" : \"uk180yw0x1vi5rjk49an5krqshwfuhe8nggjkq1ju8spgptu4jjwaqg8zvtgs90ygzchy6014s7luoopn1e0zxzgmujfkw8ymykqcjcyxx0wlkrg9al2ubk0k18cym35kta2lbu732f37h7vabulu3di2l2237ca8bksxs8zywcaycj\",\n      \"source_id\" : \"r6cd\",\n      \"type\" : \"square_cash\"\n    },\n    \"bank_account\" : {\n      \"country\" : \"US\",\n      \"account_ownership_type\" : \"hr3q0l40q9990p\",\n      \"bank_name\" : \"Caryn Lubowitz\",\n      \"fingerprint\" : \"uiq655bsuc6e8boq2ns9yv0fn2f9pprn3m36v12a08p2la4dipop20qf84sh6vtonnbvohfl4muveogq8e7n5t8mrzxlg1b1gapg4g4xtqs6eg70ka7gyeg4q56sgdwq8pqpqzbez0kuf3e57pvv\",\n      \"transfer_type\" : \"f5vg5vovmn6hp7cemx2yxe4f874xhhtin0rtvpgxgcs2sp2\",\n      \"ach_details\" : {\n        \"account_type\" : \"n8t1\",\n        \"routing_number\" : \"pt6wpbzcgbki3yoc5qknmrwk\",\n        \"account_number_suffix\" : \"nm37\"\n      },\n      \"statement_description\" : \"Tempore ex amet fuga. Totam enim voluptates autem. Doloribus assumenda blanditiis. Ullam et sed asperiores esse dolorum. Aut qui iste quo aliquid.\"\n    },\n    \"card_details\" : {\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"ebt\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    },\n    \"amount\" : 27.5,\n    \"wallet\" : {\n      \"status\" : \"voided\"\n    },\n    \"device_id\" : \"12345\",\n    \"processing_fees\" : [ {\n      \"amount\" : 1.05,\n      \"effective_at\" : \"2020-09-30T07:43:32.000Z\",\n      \"processing_type\" : \"initial\"\n    } ],\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"tax\" : 20,\n    \"created_by\" : \"12345\",\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"source_id\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"order_id\" : \"12345\",\n    \"status\" : \"approved\"\n  }, {\n    \"change_back_cash_amount\" : 20,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"tender_id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"external\",\n    \"location_id\" : \"12345\",\n    \"external_payment_id\" : \"12345\",\n    \"approved\" : 37.5,\n    \"total\" : 37.5,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"app_fee\" : 3,\n    \"currency\" : \"USD\",\n    \"refunded\" : 37.5,\n    \"tip\" : 7,\n    \"id\" : \"12345\",\n    \"cash\" : {\n      \"amount\" : { },\n      \"charge_back_amount\" : { }\n    },\n    \"external_details\" : {\n      \"source_fee_amount\" : 2.5,\n      \"source\" : \"jlz3kgj4qlsm7vw7wo80dyd5zzbly5s8zye9j1kin4cpytahxd6gax8hca9w4vxgxlspif6icsmfc2ounwb158r88v42aq8jugy4qiyjbnvdrcddlfxnj1mjnpcpve77kkzi7vh58tuq7183c3tuo1xam90qk\",\n      \"source_id\" : \"wrzp\",\n      \"type\" : \"other\"\n    },\n    \"bank_account\" : {\n      \"country\" : \"US\",\n      \"account_ownership_type\" : \"2u308je0ptppmtl4rikjw9o3vrru9iijk5yzn\",\n      \"bank_name\" : \"Johnson Swift\",\n      \"fingerprint\" : \"dubx2l0fe7fsfvki27kzne9nugfhjxs976ar3r7ymq6r3rdg1neigacnmjmnqibl8u7x6ya9fuzcyzvl6r08hksqokrw226qxcqc2sp5fiouso2v0h5webfxw0oszt77ly3jd2wehfza5hr3f42vz18q3uulxmcj1r5vl0o1ircwt4w9s\",\n      \"transfer_type\" : \"ix57ojsopsc3t29bw5ohrpff399g0mp19kejofqy8k3lya\",\n      \"ach_details\" : {\n        \"account_type\" : \"mnocauxzw9iloqvukx2inzb6az0wu9q7\",\n        \"routing_number\" : \"yo5qikkmnb3qqtzy2xzmo2b8fb2h89dwqg9qbjldr2\",\n        \"account_number_suffix\" : \"0or\"\n      },\n      \"statement_description\" : \"Sunt molestias eum voluptate. Expedita distinctio quia id aut. Placeat nihil distinctio facilis libero saepe iusto ipsam. Voluptates in labore. Eos voluptate iure.\"\n    },\n    \"card_details\" : {\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"discover\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    },\n    \"amount\" : 27.5,\n    \"wallet\" : {\n      \"status\" : \"voided\"\n    },\n    \"device_id\" : \"12345\",\n    \"processing_fees\" : [ {\n      \"amount\" : 1.05,\n      \"effective_at\" : \"2020-09-30T07:43:32.000Z\",\n      \"processing_type\" : \"initial\"\n    } ],\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"tax\" : 20,\n    \"created_by\" : \"12345\",\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"source_id\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"order_id\" : \"12345\",\n    \"status\" : \"approved\"\n  } ],\n  \"resource\" : \"PosPayments\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6307dc97-31e7-4ec8-b453-c4501a909294",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.647404Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/PosPayment"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "PosPayments",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetPosPaymentsResponse",
            "x-graphql-type-name" : "PosPaymentList"
          }
        }
      }
    },
    "insertionIndex" : 59
  }, {
    "id" : "3e298937-bfd6-4256-ad93-924944ee2af8",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/e44g/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3e298937-bfd6-4256-ad93-924944ee2af8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.646027Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 60
  }, {
    "id" : "fcebb04a-eba7-407a-8424-f0b6d880d694",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/zm8o/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fcebb04a-eba7-407a-8424-f0b6d880d694",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.645901Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 61
  }, {
    "id" : "d19c7468-811b-464b-809c-16acb0e398f6",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/5677/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d19c7468-811b-464b-809c-16acb0e398f6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.645751Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 62
  }, {
    "id" : "ea8456b3-9313-4188-90a2-8a547d90bdca",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/uwe2/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ea8456b3-9313-4188-90a2-8a547d90bdca",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.645625Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 63
  }, {
    "id" : "c0b1b805-95a9-47b5-8ab9-403bf5968cab",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/a2z9/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c0b1b805-95a9-47b5-8ab9-403bf5968cab",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.645499Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 64
  }, {
    "id" : "86b2dc80-b780-4b5a-bbe7-7a95d0b88f6c",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/1eo7/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"orders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "86b2dc80-b780-4b5a-bbe7-7a95d0b88f6c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.645347Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateOrderResponse"
          }
        }
      }
    },
    "insertionIndex" : 65
  }, {
    "id" : "b632ba3b-bbec-4f1f-9b88-d87371b8a4b7",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/9vy0",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b632ba3b-bbec-4f1f-9b88-d87371b8a4b7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.645195Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 66
  }, {
    "id" : "00f35141-9b6c-4175-9ac9-f05f28e55df7",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/sj15",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "00f35141-9b6c-4175-9ac9-f05f28e55df7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.645064Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 67
  }, {
    "id" : "f16d124f-b93c-4195-bfdc-b93e73a36609",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/wy4b",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f16d124f-b93c-4195-bfdc-b93e73a36609",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.64492Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 68
  }, {
    "id" : "849a2b97-3110-4f0a-9744-fe88efae0149",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/1zwc",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "849a2b97-3110-4f0a-9744-fe88efae0149",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.644794Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 69
  }, {
    "id" : "4d4be1e7-3bb1-4654-b5ca-21f74496311d",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/945d",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4d4be1e7-3bb1-4654-b5ca-21f74496311d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.644664Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 70
  }, {
    "id" : "b572a233-5ec6-4b88-863d-96249a1bbbf3",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/3l33",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"orders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b572a233-5ec6-4b88-863d-96249a1bbbf3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.644514Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateOrderResponse"
          }
        }
      }
    },
    "insertionIndex" : 71
  }, {
    "id" : "1643cb95-aa9b-425f-96fb-8dd2a6330004",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/8ulw",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1643cb95-aa9b-425f-96fb-8dd2a6330004",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.64435Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 72
  }, {
    "id" : "4e10e59e-3546-46e0-bed2-71189cc332fd",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/q06u",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4e10e59e-3546-46e0-bed2-71189cc332fd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.644212Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 73
  }, {
    "id" : "34d268b2-b833-4d76-9e3e-aeb90a466b88",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/2zrj",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "34d268b2-b833-4d76-9e3e-aeb90a466b88",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.644049Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 74
  }, {
    "id" : "25d381b8-cfd0-4bc1-b244-47e763a25c71",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/om73",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "25d381b8-cfd0-4bc1-b244-47e763a25c71",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.643911Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 75
  }, {
    "id" : "1b8fa467-d3b9-416b-8bde-fcedd023c738",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/v613",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1b8fa467-d3b9-416b-8bde-fcedd023c738",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.643755Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 76
  }, {
    "id" : "0f2dfd14-f7b5-469a-a748-b393907d6058",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/eeh1",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"note\" : \"s6fp07n6r8tq966ynmz8fk9t437zgimb3k0aclwoq27n7ko848vl6anf3gte6mxjt0k37o5r1e9oaeqgc6b7bluwcshw4jv5qpuzvdhst8n6bc0cw69yeyn5c5yvgwbj3mwamq4yug1o0rfa3evijg2yz9lozupqwcc0eqqn7az\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Ipsam magnam commodi eos sunt nemo ipsa.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"pending\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"pending\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : {\n          \"curbside_details\" : \"d2669h0n5tktqa9vhu5vdvtrgp5cpga4gyhvty3il8npbr14b6vd8nd8a3b30vo5pjwvcx6bupmpa1ev3k48e49d8clgggqr6kj2j0ukpnn0kal0f5j3sxvgm02n5y705lr3k9vbnvabg71nt0ozxjnfsobfy306gfabjm5zyot2q8wsnx\",\n          \"buyer_arrived_at\" : \"2016-09-04T23:59:33.123Z\"\n        },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : {\n          \"address\" : { },\n          \"phone_number\" : {\n            \"number\" : \"111-111-1111\"\n          },\n          \"customer_id\" : \"12345\",\n          \"display_name\" : \"Elon Musk\",\n          \"email\" : {\n            \"email\" : \"elon@musk.com\"\n          }\n        },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"other\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : {\n          \"curbside_details\" : \"d9km5bnj6ocra4gry6he\",\n          \"buyer_arrived_at\" : \"2016-09-04T23:59:33.123Z\"\n        },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : {\n          \"address\" : { },\n          \"phone_number\" : {\n            \"number\" : \"111-111-1111\"\n          },\n          \"customer_id\" : \"12345\",\n          \"display_name\" : \"Elon Musk\",\n          \"email\" : {\n            \"email\" : \"elon@musk.com\"\n          }\n        },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"prepared\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : {\n          \"curbside_details\" : \"9xr0qbx2e7rvp5\",\n          \"buyer_arrived_at\" : \"2016-09-04T23:59:33.123Z\"\n        },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : {\n          \"address\" : { },\n          \"phone_number\" : {\n            \"number\" : \"111-111-1111\"\n          },\n          \"customer_id\" : \"12345\",\n          \"display_name\" : \"Elon Musk\",\n          \"email\" : {\n            \"email\" : \"elon@musk.com\"\n          }\n        },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"cancelled\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"felica\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"amex\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"eftpos\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"jcb\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"jcb\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"felica\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"square-gift-card\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"interac\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  },\n  \"resource\" : \"orders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0f2dfd14-f7b5-469a-a748-b393907d6058",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.643567Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Order"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetOrderResponse",
            "x-graphql-type-name" : "Order"
          }
        }
      }
    },
    "insertionIndex" : 77
  }, {
    "id" : "28c40ca8-29e0-43ee-8574-7e89f7c51347",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/9526",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "28c40ca8-29e0-43ee-8574-7e89f7c51347",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.639772Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 78
  }, {
    "id" : "50c43633-75fb-48ba-b84d-fbf7dd0ded29",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/5u4v",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "50c43633-75fb-48ba-b84d-fbf7dd0ded29",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.639645Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 79
  }, {
    "id" : "5f1d65d7-e059-4de5-820c-48681e593944",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/ol54",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5f1d65d7-e059-4de5-820c-48681e593944",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.639498Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 80
  }, {
    "id" : "bfd74acd-4014-41a8-9796-76f128895948",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/i4s9",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "bfd74acd-4014-41a8-9796-76f128895948",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.639371Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 81
  }, {
    "id" : "537591e4-60e1-41a9-9305-6dcbd5556383",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/cn7q",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "537591e4-60e1-41a9-9305-6dcbd5556383",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.639244Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 82
  }, {
    "id" : "6dbf5cd8-bc86-4bea-8b0e-77443040b117",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/9176",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"orders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6dbf5cd8-bc86-4bea-8b0e-77443040b117",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.639091Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteOrderResponse"
          }
        }
      }
    },
    "insertionIndex" : 83
  }, {
    "id" : "58c8acd8-9da6-4ca5-91f2-d2df0fc335a0",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "58c8acd8-9da6-4ca5-91f2-d2df0fc335a0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.638897Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 84
  }, {
    "id" : "657aef94-2bd4-4b59-b6f9-58650bda4f28",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "657aef94-2bd4-4b59-b6f9-58650bda4f28",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.63883Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 85
  }, {
    "id" : "4ba6cb36-e760-49a2-af98-d8d0a53386fa",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4ba6cb36-e760-49a2-af98-d8d0a53386fa",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.638741Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 86
  }, {
    "id" : "820675e4-9026-40de-8fdc-87e746a0c645",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "820675e4-9026-40de-8fdc-87e746a0c645",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.638675Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 87
  }, {
    "id" : "a4c12b6a-e98b-4461-bce6-32e465b09407",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a4c12b6a-e98b-4461-bce6-32e465b09407",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.638608Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 88
  }, {
    "id" : "c2af19f9-4272-4c66-8959-c507d26bcfe3",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"orders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c2af19f9-4272-4c66-8959-c507d26bcfe3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.638521Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateOrderResponse"
          }
        }
      }
    },
    "insertionIndex" : 89
  }, {
    "id" : "c68056cf-cf71-486e-8e69-d98a73512dbc",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c68056cf-cf71-486e-8e69-d98a73512dbc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.638415Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 90
  }, {
    "id" : "48ad4297-ab3a-48c5-bdd7-c39ca1a97f2c",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "48ad4297-ab3a-48c5-bdd7-c39ca1a97f2c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.638333Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 91
  }, {
    "id" : "36b53ce7-269e-4aa2-b70a-5c818a0a5d2c",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "36b53ce7-269e-4aa2-b70a-5c818a0a5d2c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.638223Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 92
  }, {
    "id" : "17648b37-f41e-4142-a085-9b2cc907c33d",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "17648b37-f41e-4142-a085-9b2cc907c33d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.638128Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 93
  }, {
    "id" : "5a45513a-a01f-40fa-8fa9-6129052c3ce7",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5a45513a-a01f-40fa-8fa9-6129052c3ce7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.638044Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 94
  }, {
    "id" : "ad947eac-8033-43d7-89c1-cbc17755b54e",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"note\" : \"kitesm1qclxfapqs14nmob96huv4yzvti1sni9enu3rqescp5jsc13ip7wrnaymyr3se7f0pcmvdzzejv101780jm5cboufuederbgxzpvyznd33984vux58f5yssv2\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Voluptas laboriosam quia et et doloremque.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"reserved\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"reserved\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"other\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"cancelled\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"prepared\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"reserved\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"felica\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"other\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"interac\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"square-gift-card\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"visa\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"mastercard\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"discover-diners\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  }, {\n    \"note\" : \"wphfmqlv1qp0b7uyanj4a2hfgi1gtkkhs6htjzwcd0js2tc94zlo514rex99fjr1edrgyy4pc56p4li963vgk8fd2apl2u7l576hi6p9tirxhbph30j2waocpodlddjzdd9mpow\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Deleniti neque consequatur dolorem reprehenderit veniam architecto modi.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"pending\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"other\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"other\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"completed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"reserved\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"completed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"proposed\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"mastercard\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"discover\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"felica\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"other\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"china-unionpay\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"felica\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  }, {\n    \"note\" : \"4343jzgf4muoa2y5o542fwnip2oc5uyklh0yeyqkyzg1mwrb3s2apwyrcgib3h3euh8c7mmjpqz\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Dolorem dolor repellendus ea exercitationem accusantium eius.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"pending\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"cancelled\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"proposed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"completed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"cancelled\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"completed\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"other\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"felica\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"interac\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"mastercard\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"interac\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  } ],\n  \"resource\" : \"orders\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"clover\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ad947eac-8033-43d7-89c1-cbc17755b54e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.637917Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Order"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetOrdersResponse",
            "x-graphql-type-name" : "OrderList"
          }
        }
      }
    },
    "insertionIndex" : 95
  }, {
    "id" : "62022f64-f804-44fd-a5e9-f210a7c64859",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/q9a2",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "62022f64-f804-44fd-a5e9-f210a7c64859",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.632526Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 96
  }, {
    "id" : "df0cd69d-520e-49d1-9c17-72a42e339805",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/dc44",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "df0cd69d-520e-49d1-9c17-72a42e339805",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.6324Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 97
  }, {
    "id" : "e4a3b01e-c56e-4af9-9c3b-3deb51c69801",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/5880",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e4a3b01e-c56e-4af9-9c3b-3deb51c69801",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.632254Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 98
  }, {
    "id" : "a766f861-1394-40e2-8aa3-954428584381",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/9641",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a766f861-1394-40e2-8aa3-954428584381",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.632136Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 99
  }, {
    "id" : "2eb62000-f8af-4205-9d10-ba9d4a0d3813",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/8wjv",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2eb62000-f8af-4205-9d10-ba9d4a0d3813",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.632013Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 100
  }, {
    "id" : "0aea9e14-5b16-4ef3-9641-62c5997f92f4",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/1m4h",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"OrderTypes\",\n  \"service\" : \"clover\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0aea9e14-5b16-4ef3-9641-62c5997f92f4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.631873Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "OrderTypes",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateOrderTypeResponse"
          }
        }
      }
    },
    "insertionIndex" : 101
  }, {
    "id" : "435d4b95-bfb4-4270-b5ea-561ca709e265",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/64j1",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "435d4b95-bfb4-4270-b5ea-561ca709e265",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.631717Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 102
  }, {
    "id" : "7bbadaf4-0563-4c14-8e47-e5f63d52d0dc",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/818d",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7bbadaf4-0563-4c14-8e47-e5f63d52d0dc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.631591Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 103
  }, {
    "id" : "dcbf9b93-684e-4414-be5e-cfcc2752b4ad",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/563w",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "dcbf9b93-684e-4414-be5e-cfcc2752b4ad",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.631446Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 104
  }, {
    "id" : "576092dc-f32f-4551-999f-663abf6cf8bc",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/7ksy",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "576092dc-f32f-4551-999f-663abf6cf8bc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.63132Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 105
  }, {
    "id" : "ded2f695-6dc1-4e6a-8c81-72d9a6ad8448",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/8764",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ded2f695-6dc1-4e6a-8c81-72d9a6ad8448",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.631194Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 106
  }, {
    "id" : "e5c20c85-3f22-4f83-8a05-54bbcec20f90",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/2xmt",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"default\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Default order type\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  },\n  \"resource\" : \"OrderTypes\",\n  \"service\" : \"clover\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e5c20c85-3f22-4f83-8a05-54bbcec20f90",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.631042Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/OrderType"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "OrderTypes",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetOrderTypeResponse",
            "x-graphql-type-name" : "OrderType"
          }
        }
      }
    },
    "insertionIndex" : 107
  }, {
    "id" : "28fa694a-5768-4fb5-a892-09f64d29c419",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/s3l9",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "28fa694a-5768-4fb5-a892-09f64d29c419",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.630871Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 108
  }, {
    "id" : "5a2a2d43-4951-4566-b509-523e853c4da0",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/0tn2",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5a2a2d43-4951-4566-b509-523e853c4da0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.630751Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 109
  }, {
    "id" : "6a5aef2e-8e18-4ece-9563-8503217f7423",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/2k4g",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6a5aef2e-8e18-4ece-9563-8503217f7423",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.630608Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 110
  }, {
    "id" : "516ba630-7c6c-4840-9a89-e49dfbec0b49",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/5dtx",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "516ba630-7c6c-4840-9a89-e49dfbec0b49",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.63048Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 111
  }, {
    "id" : "b26f5f48-c729-4f95-be26-21cfea6f0c9d",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/736g",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b26f5f48-c729-4f95-be26-21cfea6f0c9d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.630355Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 112
  }, {
    "id" : "6dd4c5f9-225d-4d1e-abec-6e58407ab4ab",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/u617",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"OrderTypes\",\n  \"service\" : \"clover\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6dd4c5f9-225d-4d1e-abec-6e58407ab4ab",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.630209Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "OrderTypes",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteOrderTypeResponse"
          }
        }
      }
    },
    "insertionIndex" : 113
  }, {
    "id" : "7daf2e15-8e5f-4cbb-8b60-55282f6022d6",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7daf2e15-8e5f-4cbb-8b60-55282f6022d6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.630043Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 114
  }, {
    "id" : "920eb262-b454-4a12-a176-e1cd5011b178",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "920eb262-b454-4a12-a176-e1cd5011b178",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.629976Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 115
  }, {
    "id" : "59c25df0-30ac-4209-b1cb-3b8946014863",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "59c25df0-30ac-4209-b1cb-3b8946014863",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.629886Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 116
  }, {
    "id" : "9cf8abbb-c10b-45db-bdf6-d24b11a21a59",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9cf8abbb-c10b-45db-bdf6-d24b11a21a59",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.629821Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 117
  }, {
    "id" : "c36a6dc0-be87-4032-911c-18b30f306866",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c36a6dc0-be87-4032-911c-18b30f306866",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.629757Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 118
  }, {
    "id" : "c51d7de5-4e1a-4e83-821f-9f8713489f19",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"OrderTypes\",\n  \"service\" : \"clover\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c51d7de5-4e1a-4e83-821f-9f8713489f19",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.629671Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "OrderTypes",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateOrderTypeResponse"
          }
        }
      }
    },
    "insertionIndex" : 119
  }, {
    "id" : "eb0f9827-8723-48ea-bb7b-127d98732822",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "eb0f9827-8723-48ea-bb7b-127d98732822",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.629571Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 120
  }, {
    "id" : "1a19530f-bc37-4192-aeca-c0aefb9c934c",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1a19530f-bc37-4192-aeca-c0aefb9c934c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.629504Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 121
  }, {
    "id" : "17914788-10e0-4344-b2b0-599761db69c0",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "17914788-10e0-4344-b2b0-599761db69c0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.629416Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 122
  }, {
    "id" : "0865b9b4-0850-4a22-9208-7aa901deac21",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0865b9b4-0850-4a22-9208-7aa901deac21",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.629351Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 123
  }, {
    "id" : "57b3eaf1-9203-4088-9ae0-f077f637ccef",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "57b3eaf1-9203-4088-9ae0-f077f637ccef",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.629285Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 124
  }, {
    "id" : "adc21906-f297-46aa-956e-d4e54bed821b",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"default\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Default order type\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"default\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Default order type\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"default\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Default order type\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"default\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Default order type\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"default\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Default order type\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"default\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Default order type\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"default\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Default order type\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  } ],\n  \"resource\" : \"OrderTypes\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"clover\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "adc21906-f297-46aa-956e-d4e54bed821b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.629193Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/OrderType"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "OrderTypes",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetOrderTypesResponse",
            "x-graphql-type-name" : "OrderTypeList"
          }
        }
      }
    },
    "insertionIndex" : 125
  }, {
    "id" : "007e6bb8-faa3-4b9e-8487-d267fe2437bc",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/0f36",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "007e6bb8-faa3-4b9e-8487-d267fe2437bc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.628965Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 126
  }, {
    "id" : "cbedc8d9-24bf-41b9-a3b4-cd4c38409c8b",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/1qu5",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "cbedc8d9-24bf-41b9-a3b4-cd4c38409c8b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.62884Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 127
  }, {
    "id" : "d43c1843-b092-4bcd-a5cc-42a502872feb",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/2frg",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d43c1843-b092-4bcd-a5cc-42a502872feb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.628695Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 128
  }, {
    "id" : "1243c7eb-a8ef-4dad-86fe-240ca35e7e17",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/20wm",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1243c7eb-a8ef-4dad-86fe-240ca35e7e17",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.628568Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 129
  }, {
    "id" : "ee643711-1538-406b-81e7-80a67b7a133c",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/d1y9",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ee643711-1538-406b-81e7-80a67b7a133c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.628439Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 130
  }, {
    "id" : "f340de5e-ed71-4fa2-a297-e8ed3565c71c",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/041k",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Modifiers\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f340de5e-ed71-4fa2-a297-e8ed3565c71c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.628288Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Modifiers",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateModifierResponse"
          }
        }
      }
    },
    "insertionIndex" : 131
  }, {
    "id" : "9ea2080c-45a0-48b0-90b3-0a9007eaf21f",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/1rh4",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9ea2080c-45a0-48b0-90b3-0a9007eaf21f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.628115Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 132
  }, {
    "id" : "5c5774c0-0eab-41c5-8a8c-3525b980b100",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/8ikh",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5c5774c0-0eab-41c5-8a8c-3525b980b100",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.627987Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 133
  }, {
    "id" : "babbd5ca-e4bc-4846-b80e-cdf418f390aa",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/grfy",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "babbd5ca-e4bc-4846-b80e-cdf418f390aa",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.627832Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 134
  }, {
    "id" : "f93b2583-1b8b-49e5-91bc-6663f3068df3",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/v5n4",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f93b2583-1b8b-49e5-91bc-6663f3068df3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.627704Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 135
  }, {
    "id" : "0a14a734-7886-49c2-a216-8ff130759360",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/w0mb",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0a14a734-7886-49c2-a216-8ff130759360",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.627577Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 136
  }, {
    "id" : "428850ff-3897-495b-b629-7c0ec6d0564a",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/ob1t",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  },\n  \"resource\" : \"Modifiers\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "428850ff-3897-495b-b629-7c0ec6d0564a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.627419Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Modifier"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Modifiers",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetModifierResponse",
            "x-graphql-type-name" : "Modifier"
          }
        }
      }
    },
    "insertionIndex" : 137
  }, {
    "id" : "9d166411-0a70-4f2a-9620-94f0e9592553",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/z1fj",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9d166411-0a70-4f2a-9620-94f0e9592553",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.627228Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 138
  }, {
    "id" : "574c9862-7997-4f4f-b835-731a78948f0a",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/iv1c",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "574c9862-7997-4f4f-b835-731a78948f0a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.627079Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 139
  }, {
    "id" : "a1a9ca95-7eb6-439b-b590-aaa0d3febc3f",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/482p",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a1a9ca95-7eb6-439b-b590-aaa0d3febc3f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.626927Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 140
  }, {
    "id" : "a5390e88-752e-4b6b-9ed6-58f1f136e81b",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/59aj",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a5390e88-752e-4b6b-9ed6-58f1f136e81b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.626798Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 141
  }, {
    "id" : "32a905e0-abd0-4fb6-a763-93e0dab5e47f",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/1qe6",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "32a905e0-abd0-4fb6-a763-93e0dab5e47f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.626666Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 142
  }, {
    "id" : "4c5ea2ec-3068-4e43-ab56-c0b28dcd6ea8",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/l57m",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Modifiers\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4c5ea2ec-3068-4e43-ab56-c0b28dcd6ea8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.62652Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Modifiers",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteModifierResponse"
          }
        }
      }
    },
    "insertionIndex" : 143
  }, {
    "id" : "8d6e6122-c6bb-468d-a18d-67c6dfd3e92d",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8d6e6122-c6bb-468d-a18d-67c6dfd3e92d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.62634Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 144
  }, {
    "id" : "a36b24b3-71ef-4126-8073-029ffae92aba",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a36b24b3-71ef-4126-8073-029ffae92aba",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.626271Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 145
  }, {
    "id" : "745aff7a-760d-4de4-9bc0-ac5b2657765d",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "745aff7a-760d-4de4-9bc0-ac5b2657765d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.626182Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 146
  }, {
    "id" : "36299a73-660b-430c-a864-3ad7dccf03e8",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "36299a73-660b-430c-a864-3ad7dccf03e8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.626114Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 147
  }, {
    "id" : "d73c6197-5de8-44e8-a74b-af0dff1925dc",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d73c6197-5de8-44e8-a74b-af0dff1925dc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.626044Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 148
  }, {
    "id" : "c0988b4b-aba5-444d-bf58-17c85cb7658c",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Modifiers\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c0988b4b-aba5-444d-bf58-17c85cb7658c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.625951Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Modifiers",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateModifierResponse"
          }
        }
      }
    },
    "insertionIndex" : 149
  }, {
    "id" : "0cae30eb-8d30-4c4a-aaec-f717fc3d5348",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0cae30eb-8d30-4c4a-aaec-f717fc3d5348",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.625837Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 150
  }, {
    "id" : "21b00dec-8f18-4691-ac32-cd6f46f8ae74",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "21b00dec-8f18-4691-ac32-cd6f46f8ae74",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.625768Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 151
  }, {
    "id" : "29b67d9b-e034-49cf-828f-8f14e6840153",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "29b67d9b-e034-49cf-828f-8f14e6840153",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.625669Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 152
  }, {
    "id" : "6f4db7e1-6fd6-4ffc-be21-1f82b31e5d86",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6f4db7e1-6fd6-4ffc-be21-1f82b31e5d86",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.6256Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 153
  }, {
    "id" : "42da0fe0-e992-4fff-aaad-3bff4f66c5f8",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "42da0fe0-e992-4fff-aaad-3bff4f66c5f8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.625532Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 154
  }, {
    "id" : "a78d23f8-5c25-49c8-bf09-52dec3120fcb",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  } ],\n  \"resource\" : \"Modifiers\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a78d23f8-5c25-49c8-bf09-52dec3120fcb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.625442Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Modifier"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Modifiers",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetModifiersResponse",
            "x-graphql-type-name" : "ModifierList"
          }
        }
      }
    },
    "insertionIndex" : 155
  }, {
    "id" : "881615cd-2729-46aa-8ac0-8079da6f12bb",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/or05",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "881615cd-2729-46aa-8ac0-8079da6f12bb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.625114Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 156
  }, {
    "id" : "583ab9f4-bf0f-40aa-9d91-b4118ab3031a",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/48ze",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "583ab9f4-bf0f-40aa-9d91-b4118ab3031a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.624986Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 157
  }, {
    "id" : "a155f921-eb67-48ae-8ebc-805dac787a2b",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/9vzc",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a155f921-eb67-48ae-8ebc-805dac787a2b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.624832Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 158
  }, {
    "id" : "7ba7d3cd-11f0-47d9-a1cb-84d5c318f68c",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/3c2t",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7ba7d3cd-11f0-47d9-a1cb-84d5c318f68c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.624703Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 159
  }, {
    "id" : "d5e17272-d8c9-432d-b787-dc526308deb7",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/o328",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d5e17272-d8c9-432d-b787-dc526308deb7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.624574Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 160
  }, {
    "id" : "181b23d1-faec-4acd-b5e8-9fdae71df545",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/jo83",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"ModifierGroups\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "181b23d1-faec-4acd-b5e8-9fdae71df545",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.624425Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "ModifierGroups",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateModifierGroupResponse"
          }
        }
      }
    },
    "insertionIndex" : 161
  }, {
    "id" : "67da2af5-9974-437a-a09b-e3e1778a5d52",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/26xq",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "67da2af5-9974-437a-a09b-e3e1778a5d52",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.624254Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 162
  }, {
    "id" : "700ac9f5-1e93-43fa-971b-3d39b6e05474",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/t5v7",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "700ac9f5-1e93-43fa-971b-3d39b6e05474",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.62412Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 163
  }, {
    "id" : "cad9f775-879b-41e4-81d5-69882e2f8681",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/a7si",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "cad9f775-879b-41e4-81d5-69882e2f8681",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.623966Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 164
  }, {
    "id" : "75205a95-943b-4375-894a-47531f0d0766",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/g388",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "75205a95-943b-4375-894a-47531f0d0766",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.623837Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 165
  }, {
    "id" : "75ec4c6b-47cc-439c-8863-c1e955b10e5a",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/ofc8",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "75ec4c6b-47cc-439c-8863-c1e955b10e5a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.623708Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 166
  }, {
    "id" : "0801af56-b949-4e46-b9ac-dc4eee7cce77",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/j2fq",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"alternate_name\" : \"Modifier New\",\n    \"maximum_allowed\" : 5,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"modifiers\" : [ {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"created_by\" : \"12345\",\n    \"present_at_all_locations\" : false,\n    \"selection_type\" : \"single\",\n    \"deleted\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"row_version\" : \"1-12345\",\n    \"minimum_required\" : 1,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"ModifierGroups\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0801af56-b949-4e46-b9ac-dc4eee7cce77",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.623558Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/ModifierGroup"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "ModifierGroups",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetModifierGroupResponse",
            "x-graphql-type-name" : "ModifierGroup"
          }
        }
      }
    },
    "insertionIndex" : 167
  }, {
    "id" : "f3f3f5f5-2a4f-427a-b752-7feef8fcc91d",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/mh8u",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f3f3f5f5-2a4f-427a-b752-7feef8fcc91d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.623329Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 168
  }, {
    "id" : "09d7896f-54fb-4a5c-a1db-e79fa81d9755",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/6100",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "09d7896f-54fb-4a5c-a1db-e79fa81d9755",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.623199Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 169
  }, {
    "id" : "2bdf3acf-cbc8-4798-a791-4ccac41798ad",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/zb70",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2bdf3acf-cbc8-4798-a791-4ccac41798ad",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.62305Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 170
  }, {
    "id" : "0773ecda-f89d-428f-8a39-6b7a7267916e",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/02qa",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0773ecda-f89d-428f-8a39-6b7a7267916e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.622908Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 171
  }, {
    "id" : "71f6ba81-980e-4e1b-8597-8750e4064e56",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/2k36",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "71f6ba81-980e-4e1b-8597-8750e4064e56",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.622778Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 172
  }, {
    "id" : "646224cb-c3c2-4deb-968c-8e0b6517473d",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/uu83",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"ModifierGroups\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "646224cb-c3c2-4deb-968c-8e0b6517473d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.622624Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "ModifierGroups",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteModifierGroupResponse"
          }
        }
      }
    },
    "insertionIndex" : 173
  }, {
    "id" : "00be39f7-e89d-4558-ac08-c6c29233c3bb",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "00be39f7-e89d-4558-ac08-c6c29233c3bb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.622441Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 174
  }, {
    "id" : "299d2866-a300-4634-a024-1163584508e0",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "299d2866-a300-4634-a024-1163584508e0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.622373Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 175
  }, {
    "id" : "3dde841e-b814-4460-bffd-72d693efe6d5",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3dde841e-b814-4460-bffd-72d693efe6d5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.622283Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 176
  }, {
    "id" : "d33a1e8f-0ebc-4d67-856e-0de0a27cca07",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d33a1e8f-0ebc-4d67-856e-0de0a27cca07",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.622216Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 177
  }, {
    "id" : "7cf3a45f-f174-4d59-bab6-f3c05353b0fd",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7cf3a45f-f174-4d59-bab6-f3c05353b0fd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.622148Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 178
  }, {
    "id" : "8526536d-4f65-4cb9-82a6-23bab71957ee",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"ModifierGroups\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8526536d-4f65-4cb9-82a6-23bab71957ee",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.622059Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "ModifierGroups",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateModifierGroupResponse"
          }
        }
      }
    },
    "insertionIndex" : 179
  }, {
    "id" : "d82d2490-2b81-49ad-bb55-59e32af5bed0",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d82d2490-2b81-49ad-bb55-59e32af5bed0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.62195Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 180
  }, {
    "id" : "a14e6ec5-7b46-463b-9e8f-b0c1e0ba6679",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a14e6ec5-7b46-463b-9e8f-b0c1e0ba6679",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.621882Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 181
  }, {
    "id" : "befb330c-4525-45e0-8d1e-9d59bd63c46f",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "befb330c-4525-45e0-8d1e-9d59bd63c46f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.62179Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 182
  }, {
    "id" : "ecd84797-97d3-474c-b6b5-9a46486ef888",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ecd84797-97d3-474c-b6b5-9a46486ef888",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.621721Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 183
  }, {
    "id" : "2edbbb84-dcdf-459a-abcc-de2290e635e1",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2edbbb84-dcdf-459a-abcc-de2290e635e1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.621652Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 184
  }, {
    "id" : "75cb2392-c040-4156-9eff-71a9fdf27d10",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"alternate_name\" : \"Modifier New\",\n    \"maximum_allowed\" : 5,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"modifiers\" : [ {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"created_by\" : \"12345\",\n    \"present_at_all_locations\" : false,\n    \"selection_type\" : \"single\",\n    \"deleted\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"row_version\" : \"1-12345\",\n    \"minimum_required\" : 1,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"id\" : \"12345\"\n  }, {\n    \"alternate_name\" : \"Modifier New\",\n    \"maximum_allowed\" : 5,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"modifiers\" : [ {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"created_by\" : \"12345\",\n    \"present_at_all_locations\" : false,\n    \"selection_type\" : \"single\",\n    \"deleted\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"row_version\" : \"1-12345\",\n    \"minimum_required\" : 1,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"id\" : \"12345\"\n  } ],\n  \"resource\" : \"ModifierGroups\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "75cb2392-c040-4156-9eff-71a9fdf27d10",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.621557Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/ModifierGroup"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "ModifierGroups",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetModifierGroupsResponse",
            "x-graphql-type-name" : "ModifierGroupList"
          }
        }
      }
    },
    "insertionIndex" : 185
  }, {
    "id" : "eab34414-20c5-4f1c-8328-af907600309a",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/9z5b",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "eab34414-20c5-4f1c-8328-af907600309a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.621221Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 186
  }, {
    "id" : "48eba32d-6423-45d5-b79d-7d9c903563a0",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/53p4",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "48eba32d-6423-45d5-b79d-7d9c903563a0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.621085Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 187
  }, {
    "id" : "9100aa21-fdb6-4759-8a52-0008214db61d",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/k60r",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9100aa21-fdb6-4759-8a52-0008214db61d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.620938Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 188
  }, {
    "id" : "9f8c3c17-badf-4c3e-96b4-8b7366be45c2",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/vb28",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9f8c3c17-badf-4c3e-96b4-8b7366be45c2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.620812Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 189
  }, {
    "id" : "b960f06f-489e-4212-b27a-9cbb5d641163",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/77h1",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b960f06f-489e-4212-b27a-9cbb5d641163",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.620681Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 190
  }, {
    "id" : "03c4ecdd-7a85-414a-aede-3ec16035030f",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/roz2",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Merchants\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "03c4ecdd-7a85-414a-aede-3ec16035030f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.620528Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Merchants",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateMerchantResponse"
          }
        }
      }
    },
    "insertionIndex" : 191
  }, {
    "id" : "fb75ac71-8c63-4526-aa9a-b168ca0971ee",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/gjz8",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fb75ac71-8c63-4526-aa9a-b168ca0971ee",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.620363Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 192
  }, {
    "id" : "589db480-c272-4184-86d8-e38f1dace916",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/2323",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "589db480-c272-4184-86d8-e38f1dace916",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.620236Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 193
  }, {
    "id" : "aece4653-eaca-48c2-84c0-e95d0152713a",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/144p",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "aece4653-eaca-48c2-84c0-e95d0152713a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.620081Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 194
  }, {
    "id" : "b213ca1e-fa91-44c3-adcd-5c99167db736",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/lqu5",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b213ca1e-fa91-44c3-adcd-5c99167db736",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.619951Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 195
  }, {
    "id" : "43a87efb-2c94-41b5-852a-bb5a7edeaea6",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/bwd7",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "43a87efb-2c94-41b5-852a-bb5a7edeaea6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.619817Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 196
  }, {
    "id" : "791edc62-adb2-49b6-8323-26dc70e94b2d",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/gp8k",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"main_location_id\" : \"12345\",\n    \"owner_id\" : \"12345\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"language\" : \"EN\",\n    \"created_by\" : \"12345\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"status\" : \"active\"\n  },\n  \"resource\" : \"Merchants\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "791edc62-adb2-49b6-8323-26dc70e94b2d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.619656Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Merchant"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Merchants",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetMerchantResponse",
            "x-graphql-type-name" : "Merchant"
          }
        }
      }
    },
    "insertionIndex" : 197
  }, {
    "id" : "364a0598-909e-45d3-adea-9b72ba53e3ce",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/ftpq",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "364a0598-909e-45d3-adea-9b72ba53e3ce",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.61928Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 198
  }, {
    "id" : "82dca952-cfc5-4d7f-b8ce-768d067d71eb",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/qn8e",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "82dca952-cfc5-4d7f-b8ce-768d067d71eb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.619147Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 199
  }, {
    "id" : "c7dcfa38-84da-4c55-8020-a8e8b55c738a",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/983g",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c7dcfa38-84da-4c55-8020-a8e8b55c738a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.618997Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 200
  }, {
    "id" : "29c20c2b-1562-434c-9785-0b7e17853eee",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/lfhi",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "29c20c2b-1562-434c-9785-0b7e17853eee",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.618867Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 201
  }, {
    "id" : "3a29e8b1-5dfa-4554-9a5b-29a9a6a77fdc",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/l255",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3a29e8b1-5dfa-4554-9a5b-29a9a6a77fdc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.618733Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 202
  }, {
    "id" : "ed8f6292-4b02-4932-8b02-388cbc685cd9",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/883y",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Merchants\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ed8f6292-4b02-4932-8b02-388cbc685cd9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.618569Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Merchants",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteMerchantResponse"
          }
        }
      }
    },
    "insertionIndex" : 203
  }, {
    "id" : "c209bc2b-dd13-4717-ba58-9be122b84e07",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c209bc2b-dd13-4717-ba58-9be122b84e07",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.618382Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 204
  }, {
    "id" : "f34f9060-49bf-4994-974b-235978508407",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f34f9060-49bf-4994-974b-235978508407",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.618314Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 205
  }, {
    "id" : "c3811aa6-2725-4cdb-8485-ffd92bdacb36",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c3811aa6-2725-4cdb-8485-ffd92bdacb36",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.618225Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 206
  }, {
    "id" : "5f3523f7-7cc6-4fc5-bbf2-4cc8150ac8da",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5f3523f7-7cc6-4fc5-bbf2-4cc8150ac8da",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.618156Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 207
  }, {
    "id" : "8c09ccbf-bc7a-4ace-ba84-239cae6c950f",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8c09ccbf-bc7a-4ace-ba84-239cae6c950f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.61809Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 208
  }, {
    "id" : "33937b1e-abbb-499a-bbb7-c6de8be5d1bf",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Merchants\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "33937b1e-abbb-499a-bbb7-c6de8be5d1bf",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.618Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Merchants",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateMerchantResponse"
          }
        }
      }
    },
    "insertionIndex" : 209
  }, {
    "id" : "4a9c3ae3-08c5-4ed8-813f-c9a209b7d5b7",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4a9c3ae3-08c5-4ed8-813f-c9a209b7d5b7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.6179Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 210
  }, {
    "id" : "9b92edf5-6a0f-4a21-aec5-6ae2ccdcf4d7",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9b92edf5-6a0f-4a21-aec5-6ae2ccdcf4d7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.617833Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 211
  }, {
    "id" : "a553afad-8e06-4e2d-8c4a-2399ce7543db",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a553afad-8e06-4e2d-8c4a-2399ce7543db",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.617746Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 212
  }, {
    "id" : "80389643-c091-4bc0-bdce-0b4afa0002fd",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "80389643-c091-4bc0-bdce-0b4afa0002fd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.617682Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 213
  }, {
    "id" : "dfe183c1-882c-426a-8d50-7c65a94300d7",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "dfe183c1-882c-426a-8d50-7c65a94300d7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.617615Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 214
  }, {
    "id" : "9814ac62-8f4c-4126-8245-20d4be1f191a",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"main_location_id\" : \"12345\",\n    \"owner_id\" : \"12345\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"language\" : \"EN\",\n    \"created_by\" : \"12345\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"status\" : \"active\"\n  } ],\n  \"resource\" : \"Merchants\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9814ac62-8f4c-4126-8245-20d4be1f191a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.617525Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Merchant"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Merchants",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetMerchantsResponse",
            "x-graphql-type-name" : "MerchantList"
          }
        }
      }
    },
    "insertionIndex" : 215
  }, {
    "id" : "5bad7ea4-b296-4966-bbf9-920f556b9f5f",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/479j",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5bad7ea4-b296-4966-bbf9-920f556b9f5f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.617179Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 216
  }, {
    "id" : "58b3921d-a106-4464-b80f-bea8ae5257ab",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/ql31",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "58b3921d-a106-4464-b80f-bea8ae5257ab",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.617048Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 217
  }, {
    "id" : "5a4d5cc6-abdb-47bc-9247-40a7a8c9cf1e",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/ud23",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5a4d5cc6-abdb-47bc-9247-40a7a8c9cf1e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.616901Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 218
  }, {
    "id" : "effe55c6-9ba4-4b36-8b63-88a6a5dad08f",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/365j",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "effe55c6-9ba4-4b36-8b63-88a6a5dad08f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.616771Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 219
  }, {
    "id" : "eac151ea-33a0-4ce2-9031-8bff9f807405",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/e5n6",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "eac151ea-33a0-4ce2-9031-8bff9f807405",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.616645Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 220
  }, {
    "id" : "a6e15660-8c64-45dc-8f4a-905ff2fddc7a",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/1l9f",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Locations\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a6e15660-8c64-45dc-8f4a-905ff2fddc7a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.616496Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Locations",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateLocationResponse"
          }
        }
      }
    },
    "insertionIndex" : 221
  }, {
    "id" : "1fded200-01c0-4061-99dc-024470499118",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/7512",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1fded200-01c0-4061-99dc-024470499118",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.616328Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 222
  }, {
    "id" : "66e00d44-3674-435a-a75d-c3eaad19a9e7",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/0zj9",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "66e00d44-3674-435a-a75d-c3eaad19a9e7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.616196Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 223
  }, {
    "id" : "fcc007df-d47c-493d-8c9f-4eab546d63d2",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/16xk",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fcc007df-d47c-493d-8c9f-4eab546d63d2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.616042Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 224
  }, {
    "id" : "8c51d08f-2513-4c6b-a73b-1b4eb734bf2b",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/8svw",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8c51d08f-2513-4c6b-a73b-1b4eb734bf2b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.615915Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 225
  }, {
    "id" : "7caba7b7-72bc-406a-9bf1-dcb2a21d0f44",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/i71z",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7caba7b7-72bc-406a-9bf1-dcb2a21d0f44",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.615778Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 226
  }, {
    "id" : "a9ccc371-bcdd-4696-8020-e2ba2d0302bb",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/h6po",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"business_name\" : \"Dunkin Donuts LLC\",\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"created_by\" : \"12345\",\n    \"status\" : \"active\"\n  },\n  \"resource\" : \"Locations\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a9ccc371-bcdd-4696-8020-e2ba2d0302bb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.615622Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Location"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Locations",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetLocationResponse",
            "x-graphql-type-name" : "Location"
          }
        }
      }
    },
    "insertionIndex" : 227
  }, {
    "id" : "20b7ef07-76bf-4d15-bc8d-06e37d418308",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/7v31",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "20b7ef07-76bf-4d15-bc8d-06e37d418308",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.615374Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 228
  }, {
    "id" : "f88d098c-c8c6-404a-8329-0778673109f6",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/1vlu",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f88d098c-c8c6-404a-8329-0778673109f6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.615245Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 229
  }, {
    "id" : "81fcfdc3-211e-4237-a633-545df412ca19",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/vl03",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "81fcfdc3-211e-4237-a633-545df412ca19",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.615091Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 230
  }, {
    "id" : "6a9d1222-e412-4dfa-ae74-380dec338c84",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/12ax",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6a9d1222-e412-4dfa-ae74-380dec338c84",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.614947Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 231
  }, {
    "id" : "5e5e3643-3891-46de-9679-606bfd6090cf",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/8dc2",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5e5e3643-3891-46de-9679-606bfd6090cf",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.614819Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 232
  }, {
    "id" : "142f74bc-01ee-4865-b34f-1336a28ce9c0",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/umd4",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Locations\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "142f74bc-01ee-4865-b34f-1336a28ce9c0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.614667Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Locations",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteLocationResponse"
          }
        }
      }
    },
    "insertionIndex" : 233
  }, {
    "id" : "f021b10d-5316-460d-b68d-2acdd2716ac0",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f021b10d-5316-460d-b68d-2acdd2716ac0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.614475Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 234
  }, {
    "id" : "30c11e18-e59e-4baf-9ef6-26c96ccd5317",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "30c11e18-e59e-4baf-9ef6-26c96ccd5317",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.614406Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 235
  }, {
    "id" : "7be2c8e1-ef26-4809-a24a-dd876ffddd9f",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7be2c8e1-ef26-4809-a24a-dd876ffddd9f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.614318Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 236
  }, {
    "id" : "5b63174b-3c76-4d47-82a0-2cf091d12539",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5b63174b-3c76-4d47-82a0-2cf091d12539",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.61425Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 237
  }, {
    "id" : "6cd9e03a-4c6c-43b8-87a2-2dbb2c482b87",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6cd9e03a-4c6c-43b8-87a2-2dbb2c482b87",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.614177Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 238
  }, {
    "id" : "c0af2797-1241-43e1-9dec-be4eddf3f304",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Locations\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c0af2797-1241-43e1-9dec-be4eddf3f304",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.614085Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Locations",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateLocationResponse"
          }
        }
      }
    },
    "insertionIndex" : 239
  }, {
    "id" : "756321c2-1e95-48db-96ca-fa0e8803310c",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "756321c2-1e95-48db-96ca-fa0e8803310c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.61398Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 240
  }, {
    "id" : "ba4a5300-4457-471b-9ab0-3357c1dcca1e",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ba4a5300-4457-471b-9ab0-3357c1dcca1e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.613909Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 241
  }, {
    "id" : "386c6496-8ac6-4da1-a913-12355ccc3a68",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "386c6496-8ac6-4da1-a913-12355ccc3a68",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.613813Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 242
  }, {
    "id" : "0f5c8267-69f2-4873-93ee-800881798ded",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0f5c8267-69f2-4873-93ee-800881798ded",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.613742Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 243
  }, {
    "id" : "fb6727d8-2cd2-4dc5-ab31-d90e0e2659bf",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fb6727d8-2cd2-4dc5-ab31-d90e0e2659bf",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.613672Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 244
  }, {
    "id" : "126fb269-bd6a-4bd9-ac5e-36b061452688",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"business_name\" : \"Dunkin Donuts LLC\",\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"created_by\" : \"12345\",\n    \"status\" : \"active\"\n  }, {\n    \"business_name\" : \"Dunkin Donuts LLC\",\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"created_by\" : \"12345\",\n    \"status\" : \"active\"\n  }, {\n    \"business_name\" : \"Dunkin Donuts LLC\",\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"created_by\" : \"12345\",\n    \"status\" : \"active\"\n  }, {\n    \"business_name\" : \"Dunkin Donuts LLC\",\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"created_by\" : \"12345\",\n    \"status\" : \"active\"\n  } ],\n  \"resource\" : \"Locations\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "126fb269-bd6a-4bd9-ac5e-36b061452688",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.613579Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Location"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Locations",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetLocationsResponse",
            "x-graphql-type-name" : "LocationList"
          }
        }
      }
    },
    "insertionIndex" : 245
  }, {
    "id" : "ce3539d7-c5a2-4b96-938f-283baa42a4f1",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/7z0z",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ce3539d7-c5a2-4b96-938f-283baa42a4f1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.613138Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 246
  }, {
    "id" : "553ed345-3e9b-499e-9a71-85f60b06cc9d",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/j4x4",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "553ed345-3e9b-499e-9a71-85f60b06cc9d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.613007Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 247
  }, {
    "id" : "14585895-eebd-4153-a8e3-1830373ef529",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/encd",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "14585895-eebd-4153-a8e3-1830373ef529",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.612863Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 248
  }, {
    "id" : "ec3fd843-a1c7-4f98-be63-ff316cfd0967",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/owr5",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ec3fd843-a1c7-4f98-be63-ff316cfd0967",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.612732Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 249
  }, {
    "id" : "a4bb623a-393c-4e96-ba36-a204cd39c3d9",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/svi9",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a4bb623a-393c-4e96-ba36-a204cd39c3d9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.612601Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 250
  }, {
    "id" : "d1ff6f4c-61d8-4af8-a878-ed8cbd027fa1",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/38q0",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Items\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d1ff6f4c-61d8-4af8-a878-ed8cbd027fa1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.612444Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Items",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateItemResponse"
          }
        }
      }
    },
    "insertionIndex" : 251
  }, {
    "id" : "8b8dd49c-20ba-4e4a-89df-7c38c428d271",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/l30j",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8b8dd49c-20ba-4e4a-89df-7c38c428d271",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.61227Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 252
  }, {
    "id" : "6d99ece6-8a1b-4883-bdf2-0c3f43d3000f",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/vx1h",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6d99ece6-8a1b-4883-bdf2-0c3f43d3000f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.612137Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 253
  }, {
    "id" : "ce91de45-ec9a-462c-9a91-5803d7735e25",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/537h",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ce91de45-ec9a-462c-9a91-5803d7735e25",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.611981Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 254
  }, {
    "id" : "16c9efbe-8e36-4d9d-a4f0-f3426174b63a",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/v506",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "16c9efbe-8e36-4d9d-a4f0-f3426174b63a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.61185Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 255
  }, {
    "id" : "9ae42a55-fcda-4f1e-b207-0f13b8c6f56c",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/gq47",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9ae42a55-fcda-4f1e-b207-0f13b8c6f56c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.611724Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 256
  }, {
    "id" : "e5db41da-723c-4d04-865f-b4583ecc811e",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/o226",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  },\n  \"resource\" : \"Items\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e5db41da-723c-4d04-865f-b4583ecc811e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.611574Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Item"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Items",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetItemResponse",
            "x-graphql-type-name" : "Item"
          }
        }
      }
    },
    "insertionIndex" : 257
  }, {
    "id" : "db629b99-6163-4b4d-be63-1b46fea04dfb",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/8098",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "db629b99-6163-4b4d-be63-1b46fea04dfb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.611295Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 258
  }, {
    "id" : "97ea78bd-4c68-4ff6-ab42-457a598b0ef6",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/08y6",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "97ea78bd-4c68-4ff6-ab42-457a598b0ef6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.611162Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 259
  }, {
    "id" : "86b0e48a-2622-4b9e-994d-cb902951e8a2",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/g557",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "86b0e48a-2622-4b9e-994d-cb902951e8a2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.611013Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 260
  }, {
    "id" : "01f579e7-f196-42b5-bfcb-af792535364a",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/32q2",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "01f579e7-f196-42b5-bfcb-af792535364a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.610883Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 261
  }, {
    "id" : "dcda401d-6db5-42ea-9b92-16f37445a53d",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/q734",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "dcda401d-6db5-42ea-9b92-16f37445a53d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.610743Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 262
  }, {
    "id" : "e12c55a4-c8a9-4c2f-bd00-65d74fd7e564",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/5s39",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Items\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e12c55a4-c8a9-4c2f-bd00-65d74fd7e564",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.61057Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Items",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteItemResponse"
          }
        }
      }
    },
    "insertionIndex" : 263
  }, {
    "id" : "93c585e7-a18d-4f07-a736-414eb41ac1fc",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "93c585e7-a18d-4f07-a736-414eb41ac1fc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.610338Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 264
  }, {
    "id" : "821b0c15-72d3-4b7c-91b0-920665bbefb7",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "821b0c15-72d3-4b7c-91b0-920665bbefb7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.610272Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 265
  }, {
    "id" : "d30d59c2-d968-4d73-89d9-3750aca2184c",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d30d59c2-d968-4d73-89d9-3750aca2184c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.610184Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 266
  }, {
    "id" : "6e6760dd-89af-4547-aa9f-a241b9e61705",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6e6760dd-89af-4547-aa9f-a241b9e61705",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.610119Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 267
  }, {
    "id" : "7c4a691d-2eb4-4ef6-b4d5-ee5aa51cb695",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7c4a691d-2eb4-4ef6-b4d5-ee5aa51cb695",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.610053Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 268
  }, {
    "id" : "78ad7303-41ba-4a9b-b052-a5655a23e653",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Items\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "78ad7303-41ba-4a9b-b052-a5655a23e653",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.609964Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Items",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateItemResponse"
          }
        }
      }
    },
    "insertionIndex" : 269
  }, {
    "id" : "efca5f14-6e43-4cab-9f7d-86577cc134a2",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "efca5f14-6e43-4cab-9f7d-86577cc134a2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.609851Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 270
  }, {
    "id" : "2688753a-fd75-4187-aa66-563a171b361f",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2688753a-fd75-4187-aa66-563a171b361f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.609749Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 271
  }, {
    "id" : "caff3741-de87-4bcd-a19a-3b046c7e12bd",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "caff3741-de87-4bcd-a19a-3b046c7e12bd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.609615Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 272
  }, {
    "id" : "ff65dad9-0cf2-40d7-b36a-ec443ce2b254",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ff65dad9-0cf2-40d7-b36a-ec443ce2b254",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.609515Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 273
  }, {
    "id" : "b9eedea2-2897-4a65-9aac-86ead4a635d0",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b9eedea2-2897-4a65-9aac-86ead4a635d0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.609411Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 274
  }, {
    "id" : "3f62fc58-14f8-4417-b738-c4e3e4c599d3",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  }, {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  }, {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  }, {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  }, {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  }, {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  } ],\n  \"resource\" : \"Items\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3f62fc58-14f8-4417-b738-c4e3e4c599d3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:03.609251Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Item"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Items",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetItemsResponse",
            "x-graphql-type-name" : "ItemList"
          }
        }
      }
    },
    "insertionIndex" : 275
  } ]
}