{
  "mappings" : [ {
    "id" : "874597d9-650c-4829-8f88-7e701bab583a",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/247h",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "874597d9-650c-4829-8f88-7e701bab583a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.212137Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 0
  }, {
    "id" : "4c01d77b-1b8d-4106-ac58-1e96c8af3d33",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/589g",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4c01d77b-1b8d-4106-ac58-1e96c8af3d33",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.211829Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 1
  }, {
    "id" : "70f33838-e384-499a-b334-799237195850",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/3272",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "70f33838-e384-499a-b334-799237195850",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.2116Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 2
  }, {
    "id" : "6312ac5c-6e77-4934-b3fa-2766a5c3d152",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/k0n9",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6312ac5c-6e77-4934-b3fa-2766a5c3d152",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.211391Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 3
  }, {
    "id" : "c8beccc6-e257-4d93-b33a-3816aab80a96",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/6er1",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c8beccc6-e257-4d93-b33a-3816aab80a96",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.211018Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 4
  }, {
    "id" : "1948614b-c6b4-446f-b834-baa85a8ba51f",
    "name" : "Update Tender",
    "request" : {
      "urlPath" : "/pos/tenders/566a",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Tenders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1948614b-c6b4-446f-b834-baa85a8ba51f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.21053Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Tenders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateTenderResponse"
          }
        }
      }
    },
    "insertionIndex" : 5
  }, {
    "id" : "a66c75c2-a540-4ffb-9415-eb9162de2358",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/j717",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a66c75c2-a540-4ffb-9415-eb9162de2358",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.210165Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 6
  }, {
    "id" : "6f01dab1-a4f8-45ff-9d50-34adaf0c71a6",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/p8qm",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6f01dab1-a4f8-45ff-9d50-34adaf0c71a6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.209964Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 7
  }, {
    "id" : "e063014a-fbf7-486d-9cca-1c379d789e3b",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/fbw6",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e063014a-fbf7-486d-9cca-1c379d789e3b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.209726Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 8
  }, {
    "id" : "bd9bf316-b8dd-43e8-8318-ba039ecc8a31",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/p7uy",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "bd9bf316-b8dd-43e8-8318-ba039ecc8a31",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.209449Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 9
  }, {
    "id" : "7a33a860-6342-426d-a054-d4041687943c",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/01ro",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7a33a860-6342-426d-a054-d4041687943c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.209086Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 10
  }, {
    "id" : "bf3f7d66-8f74-48e7-af3e-521f6d6507f7",
    "name" : "Get Tender",
    "request" : {
      "urlPath" : "/pos/tenders/gv4q",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"allows_tipping\" : true,\n    \"opens_cash_drawer\" : true,\n    \"hidden\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"editable\" : true,\n    \"updated_by\" : \"12345\",\n    \"active\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"label\" : \"Cash\",\n    \"created_by\" : \"12345\",\n    \"key\" : \"com.clover.tender.cash\"\n  },\n  \"resource\" : \"Tenders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "bf3f7d66-8f74-48e7-af3e-521f6d6507f7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.208719Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Tender"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Tenders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetTenderResponse",
            "x-graphql-type-name" : "Tender"
          }
        }
      }
    },
    "insertionIndex" : 11
  }, {
    "id" : "26c87371-d9bc-4ad4-af4f-ae9ba09dffd3",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/plyr",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "26c87371-d9bc-4ad4-af4f-ae9ba09dffd3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.207841Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 12
  }, {
    "id" : "a9f2c4a9-d60f-4a97-bfff-88fec62acf05",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/742o",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a9f2c4a9-d60f-4a97-bfff-88fec62acf05",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.207679Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 13
  }, {
    "id" : "90e66ed3-b961-4404-bd00-4ae5746f0f8f",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/cmfl",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "90e66ed3-b961-4404-bd00-4ae5746f0f8f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.207491Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 14
  }, {
    "id" : "cdce718d-56fa-4f29-84e8-c8d2ea4786fa",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/1a3s",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "cdce718d-56fa-4f29-84e8-c8d2ea4786fa",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.207333Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 15
  }, {
    "id" : "9edbdf2d-e25e-41ca-9939-493c6739bb13",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/b60g",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9edbdf2d-e25e-41ca-9939-493c6739bb13",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.207062Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 16
  }, {
    "id" : "e3dcdfae-29b9-4988-a4a7-bcccb541ab20",
    "name" : "Delete Tender",
    "request" : {
      "urlPath" : "/pos/tenders/43id",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Tenders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e3dcdfae-29b9-4988-a4a7-bcccb541ab20",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.206822Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Tenders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteTenderResponse"
          }
        }
      }
    },
    "insertionIndex" : 17
  }, {
    "id" : "64a8bf6b-9586-4f99-a95e-4bc1ef5d20ae",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "64a8bf6b-9586-4f99-a95e-4bc1ef5d20ae",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.206621Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 18
  }, {
    "id" : "ef012738-0a59-45fb-a470-5b6826f85c8f",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ef012738-0a59-45fb-a470-5b6826f85c8f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.206535Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 19
  }, {
    "id" : "31d32ae4-44fb-40f9-80e2-3bf4f90ce021",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "31d32ae4-44fb-40f9-80e2-3bf4f90ce021",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.206371Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 20
  }, {
    "id" : "d3725c29-02e6-46f1-8e41-046c0e13b4ab",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d3725c29-02e6-46f1-8e41-046c0e13b4ab",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.206291Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 21
  }, {
    "id" : "28148157-b478-4a04-89a3-c2934017f56b",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "28148157-b478-4a04-89a3-c2934017f56b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.206207Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 22
  }, {
    "id" : "9af0f2a7-f1b9-4200-8357-4e06b1bba1d2",
    "name" : "Create Tender",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Tenders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9af0f2a7-f1b9-4200-8357-4e06b1bba1d2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.206093Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Tenders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateTenderResponse"
          }
        }
      }
    },
    "insertionIndex" : 23
  }, {
    "id" : "1c0aded3-5a5d-4684-b526-3d843506923d",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1c0aded3-5a5d-4684-b526-3d843506923d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.205966Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 24
  }, {
    "id" : "79904a8e-5cc5-4b5c-b6c4-9d17c4222f04",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "79904a8e-5cc5-4b5c-b6c4-9d17c4222f04",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.205876Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 25
  }, {
    "id" : "b9155748-901b-4aad-b3e3-a4a9faca8ed3",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b9155748-901b-4aad-b3e3-a4a9faca8ed3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.205755Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 26
  }, {
    "id" : "abe4feb6-62e7-4027-b38d-2e5c12ef4dff",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "abe4feb6-62e7-4027-b38d-2e5c12ef4dff",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.205667Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 27
  }, {
    "id" : "7d009b69-ea33-4eaf-8fe7-b7e8a93aad0a",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7d009b69-ea33-4eaf-8fe7-b7e8a93aad0a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.205575Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 28
  }, {
    "id" : "70c32fd8-eeb0-4cec-8104-aaec80119214",
    "name" : "List Tenders",
    "request" : {
      "urlPath" : "/pos/tenders",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"allows_tipping\" : false,\n    \"opens_cash_drawer\" : true,\n    \"hidden\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"editable\" : true,\n    \"updated_by\" : \"12345\",\n    \"active\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"label\" : \"Cash\",\n    \"created_by\" : \"12345\",\n    \"key\" : \"com.clover.tender.cash\"\n  } ],\n  \"resource\" : \"Tenders\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"clover\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "70c32fd8-eeb0-4cec-8104-aaec80119214",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.205451Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "tendersAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Tender"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Tenders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetTendersResponse",
            "x-graphql-type-name" : "TenderList"
          }
        }
      }
    },
    "insertionIndex" : 29
  }, {
    "id" : "292058b5-c8b3-46de-9c17-a4b4eb4eff0b",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/8lyw",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "292058b5-c8b3-46de-9c17-a4b4eb4eff0b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.205219Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 30
  }, {
    "id" : "bd26ad6a-5f1e-4f01-a68e-0c983a96020c",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/3658",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "bd26ad6a-5f1e-4f01-a68e-0c983a96020c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.205053Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 31
  }, {
    "id" : "340ab8f4-aecf-44d6-ac7a-5e4325b28878",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/v0ac",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "340ab8f4-aecf-44d6-ac7a-5e4325b28878",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.204863Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 32
  }, {
    "id" : "cae38f8b-e3c0-43df-84ad-a8908a65d8c6",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/70v8",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "cae38f8b-e3c0-43df-84ad-a8908a65d8c6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.204703Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 33
  }, {
    "id" : "ea9e0399-7edb-4775-a351-77d75610fa8b",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/v1an",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ea9e0399-7edb-4775-a351-77d75610fa8b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.204535Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 34
  }, {
    "id" : "aa8a7b5b-9a08-4215-92e2-9f9273d544b4",
    "name" : "Update Payment",
    "request" : {
      "urlPath" : "/pos/payments/b99r",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"PosPayments\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "aa8a7b5b-9a08-4215-92e2-9f9273d544b4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.204294Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "PosPayments",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdatePosPaymentResponse"
          }
        }
      }
    },
    "insertionIndex" : 35
  }, {
    "id" : "62d880c0-6632-4be7-a3d2-62d428d5f680",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/0f5n",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "62d880c0-6632-4be7-a3d2-62d428d5f680",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.204012Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 36
  }, {
    "id" : "61761513-3c71-466f-acf1-4a8931ad63a3",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/4r1n",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "61761513-3c71-466f-acf1-4a8931ad63a3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.203783Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 37
  }, {
    "id" : "e248f147-0fc1-44f1-a797-be5a5590af78",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/rvh1",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e248f147-0fc1-44f1-a797-be5a5590af78",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.203547Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 38
  }, {
    "id" : "182b10a6-fba6-4b83-bca4-8d9bd18c781a",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/5ybk",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "182b10a6-fba6-4b83-bca4-8d9bd18c781a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.203369Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 39
  }, {
    "id" : "fdbf3bed-e7e6-449f-ae20-c5e64bebda4f",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/7087",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fdbf3bed-e7e6-449f-ae20-c5e64bebda4f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.203159Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 40
  }, {
    "id" : "7bba9f95-61f5-4b42-bce7-1cc7fa34808a",
    "name" : "Get Payment",
    "request" : {
      "urlPath" : "/pos/payments/2rqd",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"change_back_cash_amount\" : 20,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"tender_id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"external\",\n    \"location_id\" : \"12345\",\n    \"external_payment_id\" : \"12345\",\n    \"approved\" : 37.5,\n    \"total\" : 37.5,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"app_fee\" : 3,\n    \"currency\" : \"USD\",\n    \"refunded\" : 37.5,\n    \"tip\" : 7,\n    \"id\" : \"12345\",\n    \"cash\" : {\n      \"amount\" : { },\n      \"charge_back_amount\" : { }\n    },\n    \"external_details\" : {\n      \"source_fee_amount\" : 2.5,\n      \"source\" : \"m49zzflz27ht4o2w27lo1o9b65zylds95oiu7rjjdcfquzed0ozzp0jpmf5c5hq0fqy3gpz04c2li5gcmwt9schbkux66i9gkp00iggu6eoykxk12jliuxmn8pjbbw4sbm6adm2q0rfh5x7pyn5mvp2fxp3o4ub9llak522venhak8gnyln1ndq2gd496qrx59qgnjzizdbw1i7r0k9mf5yhdu067fjqcmc42r5twhx84\",\n      \"source_id\" : \"zw69\",\n      \"type\" : \"emoney\"\n    },\n    \"bank_account\" : {\n      \"country\" : \"US\",\n      \"account_ownership_type\" : \"c5qls7c2jf2t3ggdaovyn68ooehyu6b3zty\",\n      \"bank_name\" : \"Kareem McLaughlin\",\n      \"fingerprint\" : \"95pbsk0wx8ebu6zfm1p6teae8jr093n7uphpi6vhq20ob75qg5vpsh4po59w1q0p69z2n0tfrscn2k5f09li72gfrcortjj2qbmhahoelynvcamq1riaq9ms92r1azy75p7smmbu35kphp7rvygh9ar0\",\n      \"transfer_type\" : \"evd1mv2y09s1jh\",\n      \"ach_details\" : {\n        \"account_type\" : \"2r5k8csemdaqt4na0ic09ecqglhc74epjzf7oa33gl2yn0z32y\",\n        \"routing_number\" : \"cam7hjqxgrk5izv0k8\",\n        \"account_number_suffix\" : \"0thl\"\n      },\n      \"statement_description\" : \"Neque quisquam sint quam. Debitis et occaecati. Et rerum officia odio eius ut blanditiis maiores.\"\n    },\n    \"card_details\" : {\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"amex\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    },\n    \"amount\" : 27.5,\n    \"wallet\" : {\n      \"status\" : \"voided\"\n    },\n    \"device_id\" : \"12345\",\n    \"processing_fees\" : [ {\n      \"amount\" : 1.05,\n      \"effective_at\" : \"2020-09-30T07:43:32.000Z\",\n      \"processing_type\" : \"initial\"\n    } ],\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"tax\" : 20,\n    \"created_by\" : \"12345\",\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"source_id\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"order_id\" : \"12345\",\n    \"status\" : \"approved\"\n  },\n  \"resource\" : \"PosPayments\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7bba9f95-61f5-4b42-bce7-1cc7fa34808a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.202799Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/PosPayment"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "PosPayments",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetPosPaymentResponse",
            "x-graphql-type-name" : "PosPayment"
          }
        }
      }
    },
    "insertionIndex" : 41
  }, {
    "id" : "499d256e-4b8a-4892-81ff-ee1cb4405d9c",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/uu6d",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "499d256e-4b8a-4892-81ff-ee1cb4405d9c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.201437Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 42
  }, {
    "id" : "a05ea83a-dfed-402a-924c-ad650ef240f8",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/881e",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a05ea83a-dfed-402a-924c-ad650ef240f8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.201228Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 43
  }, {
    "id" : "7db6fd83-d5b6-4e09-a46a-93c0e04af18f",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/y3gl",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7db6fd83-d5b6-4e09-a46a-93c0e04af18f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.20102Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 44
  }, {
    "id" : "a77deadb-0e50-4cb3-a30f-8a500ca0bbf6",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/7g57",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a77deadb-0e50-4cb3-a30f-8a500ca0bbf6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.200838Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 45
  }, {
    "id" : "d01a1b80-76f4-4588-be3d-de23c7a2cc09",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/69p3",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d01a1b80-76f4-4588-be3d-de23c7a2cc09",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.200617Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 46
  }, {
    "id" : "4d382600-4506-4c4a-a4b2-538be49f6e4f",
    "name" : "Delete Payment",
    "request" : {
      "urlPath" : "/pos/payments/i4ej",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"PosPayments\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4d382600-4506-4c4a-a4b2-538be49f6e4f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.200413Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "PosPayments",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeletePosPaymentResponse"
          }
        }
      }
    },
    "insertionIndex" : 47
  }, {
    "id" : "90c70864-8c33-41d4-b53d-0507596f4536",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "90c70864-8c33-41d4-b53d-0507596f4536",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.2002Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 48
  }, {
    "id" : "f4e444f5-6fb5-4f3b-a3ca-80988f0311a5",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f4e444f5-6fb5-4f3b-a3ca-80988f0311a5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.200113Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 49
  }, {
    "id" : "86fc1d26-870c-4bce-a46f-056acb51f24f",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "86fc1d26-870c-4bce-a46f-056acb51f24f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.200003Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 50
  }, {
    "id" : "d8b61abc-8df0-4c9e-8c34-3bf4c2735dee",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d8b61abc-8df0-4c9e-8c34-3bf4c2735dee",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.199915Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 51
  }, {
    "id" : "b569862f-6791-4099-a754-17230f4a5cf5",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b569862f-6791-4099-a754-17230f4a5cf5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.199822Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 52
  }, {
    "id" : "411a73d3-8930-4d0a-b56b-977f83919667",
    "name" : "Create Payment",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"PosPayments\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "411a73d3-8930-4d0a-b56b-977f83919667",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.199714Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "PosPayments",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreatePosPaymentResponse"
          }
        }
      }
    },
    "insertionIndex" : 53
  }, {
    "id" : "8f3383f5-dad9-4a4e-b133-0f1ab16b989a",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8f3383f5-dad9-4a4e-b133-0f1ab16b989a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.199583Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 54
  }, {
    "id" : "5d1e15ad-293e-4c91-85da-46d744f467a1",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5d1e15ad-293e-4c91-85da-46d744f467a1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.199488Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 55
  }, {
    "id" : "afbbf8b3-605e-47a1-af0c-a705d41a454e",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "afbbf8b3-605e-47a1-af0c-a705d41a454e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.199359Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 56
  }, {
    "id" : "8b312a34-3f1a-4289-89a2-a3efd6c5c28b",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8b312a34-3f1a-4289-89a2-a3efd6c5c28b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.199264Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 57
  }, {
    "id" : "244f1129-a97c-42f6-a989-1ab594fc7a94",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "244f1129-a97c-42f6-a989-1ab594fc7a94",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.199159Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 58
  }, {
    "id" : "1de501f6-5bd9-4863-b612-7485d7a63238",
    "name" : "List Payments",
    "request" : {
      "urlPath" : "/pos/payments",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"change_back_cash_amount\" : 20,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"tender_id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"external\",\n    \"location_id\" : \"12345\",\n    \"external_payment_id\" : \"12345\",\n    \"approved\" : 37.5,\n    \"total\" : 37.5,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"app_fee\" : 3,\n    \"currency\" : \"USD\",\n    \"refunded\" : 37.5,\n    \"tip\" : 7,\n    \"id\" : \"12345\",\n    \"cash\" : {\n      \"amount\" : { },\n      \"charge_back_amount\" : { }\n    },\n    \"external_details\" : {\n      \"source_fee_amount\" : 2.5,\n      \"source\" : \"etemb7lpi8mgcuc0a30skofrkzawlhvqk0toqrc6wgyqwrylc5gyl8dat2pvaq3rfqywufzxqbygdl5bi43aw1b688a069v1lfe7yjfqevddlnj484f92objbvdmmrvyhcb0rukzi3kh\",\n      \"source_id\" : \"2748\",\n      \"type\" : \"emoney\"\n    },\n    \"bank_account\" : {\n      \"country\" : \"US\",\n      \"account_ownership_type\" : \"bn193atbih8rcho5b8zjks1n21n0ryulg9ohc\",\n      \"bank_name\" : \"Daniela Bode MD\",\n      \"fingerprint\" : \"dyamv7s1vwpfqlcle4wa5mgmuj3c6heypobrnwhhumiwgk8gbp3flpejnf6na1g0cwec1u0oa0lffhx31qjurzsl6gvmxp453jo3sheiy2con92ltzggzwzs4bx1ncqr84fh1gnj9j6aoeeohx4dc0vw3jo8f8qg0f61bxj3pjvt01yvbrpsem7x4s4epnzqg1adbbtu9uc7eq6n5hya6oh4sjeru3ajy69qsxy99p4uk5\",\n      \"transfer_type\" : \"wz3l8cjptd7t5o07y5qss5lsnud1\",\n      \"ach_details\" : {\n        \"account_type\" : \"mkv3njr7md5cb90vlpsnyjh6igmi16ewe2e0ic7fy6hhpxtn98\",\n        \"routing_number\" : \"ap02eq8capkddt4mp419epw9nlpao\",\n        \"account_number_suffix\" : \"v3k\"\n      },\n      \"statement_description\" : \"Maiores repellendus tenetur quia nihil incidunt sit et. Esse esse facere dicta culpa blanditiis cumque culpa. Ut atque autem sit. Quod expedita delectus facere temporibus consequuntur. Et voluptas quidem perspiciatis repellat numquam illum.\"\n    },\n    \"card_details\" : {\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"square-capital-card\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    },\n    \"amount\" : 27.5,\n    \"wallet\" : {\n      \"status\" : \"authorized\"\n    },\n    \"device_id\" : \"12345\",\n    \"processing_fees\" : [ {\n      \"amount\" : 1.05,\n      \"effective_at\" : \"2020-09-30T07:43:32.000Z\",\n      \"processing_type\" : \"initial\"\n    } ],\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"tax\" : 20,\n    \"created_by\" : \"12345\",\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"source_id\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"order_id\" : \"12345\",\n    \"status\" : \"approved\"\n  } ],\n  \"resource\" : \"PosPayments\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1de501f6-5bd9-4863-b612-7485d7a63238",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.199008Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "paymentsAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/PosPayment"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "PosPayments",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetPosPaymentsResponse",
            "x-graphql-type-name" : "PosPaymentList"
          }
        }
      }
    },
    "insertionIndex" : 59
  }, {
    "id" : "30fcfb3f-8ad7-443d-aed2-edfb64e75ccd",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/k09f/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "30fcfb3f-8ad7-443d-aed2-edfb64e75ccd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.197884Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 60
  }, {
    "id" : "8a120c1b-e71a-4d63-bca1-061022dea629",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/k807/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8a120c1b-e71a-4d63-bca1-061022dea629",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.197707Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 61
  }, {
    "id" : "a538fd93-545f-4114-bbb8-e914c34d81c2",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/fq51/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a538fd93-545f-4114-bbb8-e914c34d81c2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.197495Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 62
  }, {
    "id" : "d9aa8bf5-ba4c-4ca3-a82e-0d0de56e6c6f",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/y08l/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d9aa8bf5-ba4c-4ca3-a82e-0d0de56e6c6f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.197247Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 63
  }, {
    "id" : "c938fae5-b946-4958-b4f6-5bd2ffa5cf75",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/50hm/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c938fae5-b946-4958-b4f6-5bd2ffa5cf75",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.197087Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 64
  }, {
    "id" : "4f06c763-17b5-404f-b77e-491f5f6afb55",
    "name" : "Pay Order",
    "request" : {
      "urlPath" : "/pos/orders/l0m0/pay",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"orders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4f06c763-17b5-404f-b77e-491f5f6afb55",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.196889Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersPay",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateOrderResponse"
          }
        }
      }
    },
    "insertionIndex" : 65
  }, {
    "id" : "b5cbbd4d-131b-45de-94d6-2c3f6d6916f5",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/76xd",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b5cbbd4d-131b-45de-94d6-2c3f6d6916f5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.19668Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 66
  }, {
    "id" : "3d15afdc-ad31-45b5-a22b-f6bb4ecc2fd7",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/xu53",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3d15afdc-ad31-45b5-a22b-f6bb4ecc2fd7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.196516Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 67
  }, {
    "id" : "49f0f3bb-f0c9-4718-81ac-464914f9e6de",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/ecst",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "49f0f3bb-f0c9-4718-81ac-464914f9e6de",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.19631Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 68
  }, {
    "id" : "d253eaf7-c7bf-459a-a413-eb31c5485ac9",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/b0ye",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d253eaf7-c7bf-459a-a413-eb31c5485ac9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.196143Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 69
  }, {
    "id" : "b9a517a4-b984-4af7-870e-815a64e84087",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/8dru",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b9a517a4-b984-4af7-870e-815a64e84087",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.195951Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 70
  }, {
    "id" : "4ed6b5f4-d456-4e0c-999c-490081a40da8",
    "name" : "Update Order",
    "request" : {
      "urlPath" : "/pos/orders/8goy",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"orders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4ed6b5f4-d456-4e0c-999c-490081a40da8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.19569Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateOrderResponse"
          }
        }
      }
    },
    "insertionIndex" : 71
  }, {
    "id" : "24aca970-e0bb-4ae8-b772-428af12d7130",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/r3h2",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "24aca970-e0bb-4ae8-b772-428af12d7130",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.195428Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 72
  }, {
    "id" : "1ce4ab82-6de7-4411-b9af-25040b85fad4",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/eq4t",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1ce4ab82-6de7-4411-b9af-25040b85fad4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.195234Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 73
  }, {
    "id" : "a1a1b58e-33ab-4dd0-b2e3-a0ae758d7d2f",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/gn69",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a1a1b58e-33ab-4dd0-b2e3-a0ae758d7d2f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.195004Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 74
  }, {
    "id" : "9bcbc233-5dda-4aad-8997-057d27b75f20",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/65pm",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9bcbc233-5dda-4aad-8997-057d27b75f20",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.194795Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 75
  }, {
    "id" : "73f4f8e6-ce93-4f49-bd04-6413b9abdc69",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/pde9",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "73f4f8e6-ce93-4f49-bd04-6413b9abdc69",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.194585Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 76
  }, {
    "id" : "7066226e-0cc6-4589-8c8f-d11e90226b95",
    "name" : "Get Order",
    "request" : {
      "urlPath" : "/pos/orders/k803",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"note\" : \"baddqw1gnyicjf5oqml6btjrohdjjwzi969s6y02sky2hlxce30bo8712ucqzxs8ssd8eynt9tiz8exas19g4ux5sh263qgmzacirj23rneno1mohon4309bo3eby9vjagaidvgqva7hfb\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"tax_id\" : \"sales-tax\"\n      } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      }, {\n        \"modifier_group_id\" : \"123\",\n        \"alternate_name\" : \"Modifier New\",\n        \"amount\" : 27500,\n        \"name\" : \"New York Strip Steak - no cheese\",\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\"\n      } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      }, {\n        \"amount\" : 27500,\n        \"currency\" : \"USD\",\n        \"id\" : \"12345\",\n        \"discount_id\" : \"12345\"\n      } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Suscipit perspiciatis sunt.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"pending\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"pending\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : {\n          \"curbside_details\" : \"sq6qvb1hkxsoglqqietizivq6874llvd70eifal9uwqopa9puovhc8xs63bs2bqygbrqzxyta8k4n5ddsoxfcpiorqbi6w52mu79fxjio6k9yuf23b\",\n          \"buyer_arrived_at\" : \"2016-09-04T23:59:33.123Z\"\n        },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : {\n          \"address\" : { },\n          \"phone_number\" : {\n            \"number\" : \"111-111-1111\"\n          },\n          \"customer_id\" : \"12345\",\n          \"display_name\" : \"Elon Musk\",\n          \"email\" : {\n            \"email\" : \"elon@musk.com\"\n          }\n        },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"prepared\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : {\n          \"curbside_details\" : \"t0906iqv5mptvembd2li9pnitew7un6t565w9xcyuq97hmhmivrajbryq1zuqom77n5twp0zjs5p8q72uvq6j23enk1412cui4dabjdgtgy34fhbt6ncywcwgnx3vp2g7zkgeyhrzvrgxwurc1mp2a43yi1j0p63lr3yooviq81gbsxj776b001e5\",\n          \"buyer_arrived_at\" : \"2016-09-04T23:59:33.123Z\"\n        },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : {\n          \"address\" : { },\n          \"phone_number\" : {\n            \"number\" : \"111-111-1111\"\n          },\n          \"customer_id\" : \"12345\",\n          \"display_name\" : \"Elon Musk\",\n          \"email\" : {\n            \"email\" : \"elon@musk.com\"\n          }\n        },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"reserved\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : {\n          \"curbside_details\" : \"v3vxe6finll3yhx378zacbdzehktx1xdx5opzl0ilvj331z9fquwcmzv7824b1b03naemejjjoedjb69ha0ssh1iwfwi7vv2i316d8mxfmixbl8jpqsytjkg0e5scp0k9\",\n          \"buyer_arrived_at\" : \"2016-09-04T23:59:33.123Z\"\n        },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : {\n          \"address\" : { },\n          \"phone_number\" : {\n            \"number\" : \"111-111-1111\"\n          },\n          \"customer_id\" : \"12345\",\n          \"display_name\" : \"Elon Musk\",\n          \"email\" : {\n            \"email\" : \"elon@musk.com\"\n          }\n        },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"failed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : {\n          \"curbside_details\" : \"6m5zkb5h1wn39zv5ibkcor3pfw6fehnt637bbsv091m43418lk0bdov1ekl04n\",\n          \"buyer_arrived_at\" : \"2016-09-04T23:59:33.123Z\"\n        },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : {\n          \"address\" : { },\n          \"phone_number\" : {\n            \"number\" : \"111-111-1111\"\n          },\n          \"customer_id\" : \"12345\",\n          \"display_name\" : \"Elon Musk\",\n          \"email\" : {\n            \"email\" : \"elon@musk.com\"\n          }\n        },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"cancelled\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : {\n          \"curbside_details\" : \"1qmir9odozq3hzhdhe0nxs6ixed32ync70x78ulab8se0eho6\",\n          \"buyer_arrived_at\" : \"2016-09-04T23:59:33.123Z\"\n        },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : {\n          \"address\" : { },\n          \"phone_number\" : {\n            \"number\" : \"111-111-1111\"\n          },\n          \"customer_id\" : \"12345\",\n          \"display_name\" : \"Elon Musk\",\n          \"email\" : {\n            \"email\" : \"elon@musk.com\"\n          }\n        },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"proposed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : {\n          \"curbside_details\" : \"rm54lhk177vrghlltxsif3vrk739dk4a0wwvmrfbyuu7lvmt2rw3v5o1gnicurdmwrv3d6ip37msdozmi8m7za91eusp6bot8zurguzwl93vxckpsw7w8\",\n          \"buyer_arrived_at\" : \"2016-09-04T23:59:33.123Z\"\n        },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : {\n          \"address\" : { },\n          \"phone_number\" : {\n            \"number\" : \"111-111-1111\"\n          },\n          \"customer_id\" : \"12345\",\n          \"display_name\" : \"Elon Musk\",\n          \"email\" : {\n            \"email\" : \"elon@musk.com\"\n          }\n        },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"reserved\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : {\n          \"curbside_details\" : \"tngel5iek747yajz59r00d6i4jyah8i0gjjte35rhfanqt8y6zn86hhd\",\n          \"buyer_arrived_at\" : \"2016-09-04T23:59:33.123Z\"\n        },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : {\n          \"address\" : { },\n          \"phone_number\" : {\n            \"number\" : \"111-111-1111\"\n          },\n          \"customer_id\" : \"12345\",\n          \"display_name\" : \"Elon Musk\",\n          \"email\" : {\n            \"email\" : \"elon@musk.com\"\n          }\n        },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"other\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"id\" : \"123\",\n        \"type\" : \"primary\",\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      }, {\n        \"country_code\" : \"1\",\n        \"number\" : \"111-111-1111\",\n        \"extension\" : \"105\",\n        \"area_code\" : \"323\",\n        \"id\" : \"12345\",\n        \"type\" : \"primary\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"ebt\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"felica\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"other\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"mastercard\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : {\n          \"country\" : \"US\",\n          \"contact_name\" : \"Elon Musk\",\n          \"website\" : \"https://elonmusk.com\",\n          \"line4\" : \"delivery instructions\",\n          \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n          \"city\" : \"San Francisco\",\n          \"latitude\" : \"40.759211\",\n          \"county\" : \"Santa Clara\",\n          \"type\" : \"primary\",\n          \"row_version\" : \"1-12345\",\n          \"name\" : \"HQ US\",\n          \"street_number\" : \"25\",\n          \"phone_number\" : \"111-111-1111\",\n          \"id\" : \"123\",\n          \"salutation\" : \"Mr\",\n          \"state\" : \"CA\",\n          \"fax\" : \"122-111-1111\",\n          \"line3\" : \"Suite #\",\n          \"postal_code\" : \"94104\",\n          \"line2\" : \"apt #\",\n          \"email\" : \"elon@musk.com\",\n          \"line1\" : \"Main street\",\n          \"longitude\" : \"-73.984638\"\n        },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"eftpos\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  },\n  \"resource\" : \"orders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7066226e-0cc6-4589-8c8f-d11e90226b95",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.19428Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Order"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetOrderResponse",
            "x-graphql-type-name" : "Order"
          }
        }
      }
    },
    "insertionIndex" : 77
  }, {
    "id" : "283596d1-82f9-4f40-b76b-e4faf82057a0",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/e518",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "283596d1-82f9-4f40-b76b-e4faf82057a0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.190151Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 78
  }, {
    "id" : "9526e93b-9769-48cc-80e9-050bc00d49c2",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/49da",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9526e93b-9769-48cc-80e9-050bc00d49c2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.18996Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 79
  }, {
    "id" : "ce0a3981-b8d9-43a8-ad13-3628c66ee7c9",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/886p",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ce0a3981-b8d9-43a8-ad13-3628c66ee7c9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.189762Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 80
  }, {
    "id" : "fe8f8d6b-caad-4e61-ad37-64afe9a85013",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/wb44",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fe8f8d6b-caad-4e61-ad37-64afe9a85013",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.189598Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 81
  }, {
    "id" : "a902ff01-729b-4d8f-aa1d-c5ea0c4ab5b2",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/8lso",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a902ff01-729b-4d8f-aa1d-c5ea0c4ab5b2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.189419Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 82
  }, {
    "id" : "ff5e936a-2b4c-40e8-a9d9-ef90886504ae",
    "name" : "Delete Order",
    "request" : {
      "urlPath" : "/pos/orders/d190",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"orders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ff5e936a-2b4c-40e8-a9d9-ef90886504ae",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.189214Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteOrderResponse"
          }
        }
      }
    },
    "insertionIndex" : 83
  }, {
    "id" : "119667b0-5853-4c2e-82fa-33b18cab758d",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "119667b0-5853-4c2e-82fa-33b18cab758d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.188985Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 84
  }, {
    "id" : "10d43841-7928-4769-97bc-e838c9952d98",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "10d43841-7928-4769-97bc-e838c9952d98",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.188894Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 85
  }, {
    "id" : "dfcdb9c2-b85b-493b-850f-754ae44004f7",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "dfcdb9c2-b85b-493b-850f-754ae44004f7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.188775Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 86
  }, {
    "id" : "27ce3727-1407-42ac-9b1a-553d06076cf7",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "27ce3727-1407-42ac-9b1a-553d06076cf7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.188685Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 87
  }, {
    "id" : "fbd142b8-7941-4589-82ba-34a846523174",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fbd142b8-7941-4589-82ba-34a846523174",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.188591Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 88
  }, {
    "id" : "29c5da70-b780-418e-be06-795c9a5946a8",
    "name" : "Create Order",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"orders\",\n  \"service\" : \"clover\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "29c5da70-b780-418e-be06-795c9a5946a8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.188475Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateOrderResponse"
          }
        }
      }
    },
    "insertionIndex" : 89
  }, {
    "id" : "dd7df451-b21d-4fc4-b3f1-edd346b830df",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "dd7df451-b21d-4fc4-b3f1-edd346b830df",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.188337Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 90
  }, {
    "id" : "55e37cc1-3343-4e64-85ea-ee54f4fb75ce",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "55e37cc1-3343-4e64-85ea-ee54f4fb75ce",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.188214Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 91
  }, {
    "id" : "a706ebeb-8c58-485d-99bc-efd1fc01f543",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a706ebeb-8c58-485d-99bc-efd1fc01f543",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.188061Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 92
  }, {
    "id" : "886d0603-155b-40c8-af9c-f71a0bdaa7b5",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "886d0603-155b-40c8-af9c-f71a0bdaa7b5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.187946Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 93
  }, {
    "id" : "75390550-d536-4f0f-aede-db43827edfe2",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "75390550-d536-4f0f-aede-db43827edfe2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.187823Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 94
  }, {
    "id" : "13c37c11-9f88-4159-8a7a-01ec2ee96695",
    "name" : "List Orders",
    "request" : {
      "urlPath" : "/pos/orders",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"note\" : \"cy37sv6ciqh2vg07q1eyuht86iksg2lh0vdwlmrkgl9f0fnirmcszwfbbr555gwvrf3omyvxjfc4yo5j6ipjv2hvqhu3y6ldo6s7tr4jge1lncd70ghvhjzhttk464ic4jdlwxcz68letpx242dwy097kebunepfd\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Dolorum ut dolorum aliquid doloribus voluptatem corporis.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"pending\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"pending\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"pending\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"other\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"completed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"other\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"square-gift-card\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"china-unionpay\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"square-capital-card\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"china-unionpay\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"interac\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"square-gift-card\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  }, {\n    \"note\" : \"zqzuhea3p21wae09\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Dolor sint et et atque alias sed debitis.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"pending\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"pending\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"prepared\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"proposed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"other\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"failed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"prepared\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"completed\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"amex\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"amex\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"square-capital-card\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"square-gift-card\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  }, {\n    \"note\" : \"qoutyidlljurn9dtr4y33p7lig8rb02awf0ndszx8sxgmwhtbgx2bq8yd76q6rr7fgp4fc8lcpci1fg1ec9n0cplzvbci85wfpul84qxql3t0ilv4uuxur14ud619b3kcgdzpr9iyu6t4exj98h22\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Voluptate reprehenderit ut enim.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"proposed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"prepared\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"other\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"other\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"prepared\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"square-gift-card\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"discover-diners\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  }, {\n    \"note\" : \"vbn5iq\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Quo quod consequatur eum non repellat cumque molestiae.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"cancelled\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"failed\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"completed\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"mastercard\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"interac\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"china-unionpay\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"square-gift-card\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  }, {\n    \"note\" : \"6ad3uqxzzg5z5q8om5rnqdrow25g6iyqyb34v3qkbbsluiahtzmaeuew3g933ovsc3kebsh4vpuqo0zxx52c89z\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Non earum ut vel iste maiores reprehenderit voluptatibus.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"pending\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"pending\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"pending\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"prepared\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"jcb\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"felica\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"interac\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"square-capital-card\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"square-gift-card\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"china-unionpay\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"square-gift-card\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  }, {\n    \"note\" : \"cc9ymqw1qs9vim23shaf2qgeh5rg4kxm5w20w090ihm4qri8224l3rz6uii6fdsuus3ladmyxq8i9u901kh2xcoe8ggddrq3960mi7c9obudx35n1c3ndkg6x9k74xw1ekx1ybjm3x\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Consectetur reprehenderit voluptas quo at atque eveniet impedit.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"rejected\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"approved\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"other\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"cancelled\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"square-capital-card\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"ebt\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"discover\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"discover\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"square-capital-card\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"interac\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"visa\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"ebt\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  }, {\n    \"note\" : \"5v4wv1dq2zdie775wsyvxbmhbpuy2oa5pdof06suf00fd\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Dolor voluptatem quae.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"pending\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"other\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"cancelled\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"other\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : false,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"other\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"mastercard\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"ebt\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"china-unionpay\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"square-gift-card\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"eftpos\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"eftpos\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  }, {\n    \"note\" : \"dsw08gbvw8hpyawqemun5fj72hkhfnp7nxi6ye3i9nxu80oi2dzl1pzijzlbt90zqine71jub80ae7fktd1rh6ywrzs5gj35tba7sct1qi0g4dni98flyh8br7p0mxajt4x63kdxftrxm4ey9dmmovai6jrs92\",\n    \"voided_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"closed_date\" : \"2022-08-13\",\n    \"total_discount\" : 300,\n    \"reference_id\" : \"my-order-001\",\n    \"order_number\" : \"1F\",\n    \"payments\" : [ {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"amount\" : 27500,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"total_refund\" : 0,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"taxes\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"additive\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"order\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"unknown\",\n      \"auto_applied\" : true\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 15,\n      \"scope\" : \"line_item\",\n      \"name\" : \"State Sales Tax\",\n      \"currency\" : \"USD\",\n      \"id\" : \"state-sales-tax\",\n      \"type\" : \"inclusive\",\n      \"auto_applied\" : true\n    } ],\n    \"line_items\" : [ {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { }, { }, { } ]\n    }, {\n      \"item\" : {\n        \"id\" : \"12345\"\n      },\n      \"quantity\" : 1,\n      \"total_discount\" : 3000,\n      \"total_amount\" : 27500,\n      \"name\" : \"New York Strip Steak\",\n      \"applied_taxes\" : [ { }, { }, { }, { }, { } ],\n      \"id\" : \"12345\",\n      \"modifiers\" : [ { }, { }, { }, { }, { } ],\n      \"total_tax\" : 2000,\n      \"unit_price\" : 27500.5,\n      \"applied_discounts\" : [ { } ]\n    } ],\n    \"merchant_id\" : \"12345\",\n    \"source\" : \"api\",\n    \"title\" : \"Quo perspiciatis nihil quisquam est et rem.\",\n    \"location_id\" : \"12345\",\n    \"refunds\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"reason\" : \"The reason for the refund being issued.\",\n      \"amount\" : 27500,\n      \"tender_id\" : \"12345\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"location_id\" : \"12345\",\n      \"status\" : \"failed\"\n    } ],\n    \"fulfillments\" : [ {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"cancelled\"\n    }, {\n      \"pickup_details\" : {\n        \"note\" : \"Pickup in the back.\",\n        \"rejected_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"schedule_type\" : \"scheduled\",\n        \"canceled_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"pickup_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"is_curbside_pickup\" : true,\n        \"pickup_window_duration\" : \"P1W3D\",\n        \"expired_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"placed_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"accepted_at\" : \"2020-09-30T07:43:32.000Z\",\n        \"curbside_pickup_details\" : { },\n        \"cancel_reason\" : \"Not hungry\",\n        \"expires_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"ready_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"picked_up_at\" : \"2016-09-04T23:59:33.123Z\",\n        \"recipient\" : { },\n        \"auto_complete_duration\" : \"P1W3D\",\n        \"prep_time_duration\" : \"P1W3D\"\n      },\n      \"shipment_details\" : { },\n      \"id\" : \"12345\",\n      \"type\" : \"shipment\",\n      \"status\" : \"failed\"\n    } ],\n    \"discounts\" : [ {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    }, {\n      \"amount\" : 27500,\n      \"product_id\" : \"12345\",\n      \"scope\" : \"order\",\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"percentage\"\n    } ],\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"currency\" : \"USD\",\n    \"refunded\" : false,\n    \"voided\" : false,\n    \"customers\" : [ {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    }, {\n      \"emails\" : [ {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      }, {\n        \"email\" : \"elon@musk.com\"\n      } ],\n      \"phone_numbers\" : [ {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      }, {\n        \"number\" : \"111-111-1111\"\n      } ],\n      \"last_name\" : \"Musk\",\n      \"id\" : \"12345\",\n      \"middle_name\" : \"D.\",\n      \"first_name\" : \"Elon\"\n    } ],\n    \"id\" : \"12345\",\n    \"table\" : \"1F\",\n    \"order_type_id\" : \"12345\",\n    \"payment_status\" : \"open\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"total_service_charge\" : 0,\n    \"total_tax\" : 275,\n    \"created_by\" : \"12345\",\n    \"version\" : \"230320320320\",\n    \"seat\" : \"23F\",\n    \"order_date\" : \"2022-08-12\",\n    \"total_amount\" : 275,\n    \"tenders\" : [ {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"other\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"amex\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"other\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    }, {\n      \"transaction_id\" : \"12345\",\n      \"note\" : \"An optional note associated with the tender at the time of payment.\",\n      \"amount\" : 27500,\n      \"total_discount\" : 3,\n      \"total_processing_fee\" : 0,\n      \"change_back_cash_amount\" : 27500,\n      \"total_refund\" : 0,\n      \"total_service_charge\" : 0,\n      \"total_tax\" : 2.75,\n      \"type\" : \"cash\",\n      \"location_id\" : \"12345\",\n      \"card_entry_method\" : \"swiped\",\n      \"card_status\" : \"authorized\",\n      \"total_amount\" : 27.5,\n      \"payment_id\" : \"12345\",\n      \"percentage\" : 10,\n      \"name\" : \"10% off\",\n      \"currency\" : \"USD\",\n      \"buyer_tendered_cash_amount\" : 27500,\n      \"id\" : \"12345\",\n      \"total_tip\" : 7,\n      \"card\" : {\n        \"reference_id\" : \"card-001\",\n        \"bin\" : \"41111\",\n        \"exp_month\" : 1,\n        \"billing_address\" : { },\n        \"exp_year\" : 2022,\n        \"merchant_id\" : \"12345\",\n        \"card_type\" : \"credit\",\n        \"cardholder_name\" : \"John Doe\",\n        \"version\" : \"230320320320\",\n        \"enabled\" : true,\n        \"last_4\" : \"The last 4 digits of the card number.\",\n        \"card_brand\" : \"jcb\",\n        \"fingerprint\" : \" Intended as a POS-assigned identifier, based on the card number, to identify the card across multiple locations within a single application.\",\n        \"prepaid_type\" : \"prepaid\",\n        \"id\" : \"12345\",\n        \"customer_id\" : \"12345\"\n      }\n    } ],\n    \"employee_id\" : \"12345\",\n    \"updated_by\" : \"12345\",\n    \"customer_id\" : \"12345\",\n    \"total_tip\" : 700,\n    \"status\" : \"open\"\n  } ],\n  \"resource\" : \"orders\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"clover\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "13c37c11-9f88-4159-8a7a-01ec2ee96695",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.187622Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "ordersAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Order"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "orders",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetOrdersResponse",
            "x-graphql-type-name" : "OrderList"
          }
        }
      }
    },
    "insertionIndex" : 95
  }, {
    "id" : "305b5707-ff1d-492d-a09e-f25a820379e8",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/09i2",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "305b5707-ff1d-492d-a09e-f25a820379e8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.170491Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 96
  }, {
    "id" : "c0362085-29df-4bec-a0df-e80b3a4f8963",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/4ak4",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c0362085-29df-4bec-a0df-e80b3a4f8963",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.17031Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 97
  }, {
    "id" : "a50f8477-0c86-44bb-b2f2-15fc9e17072a",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/4lab",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a50f8477-0c86-44bb-b2f2-15fc9e17072a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.170083Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 98
  }, {
    "id" : "07871af0-4432-4b66-ba64-381a7eb1c098",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/t81o",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "07871af0-4432-4b66-ba64-381a7eb1c098",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.169888Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 99
  }, {
    "id" : "99aae43a-e8a6-4758-8501-9488e29f736b",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/np69",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "99aae43a-e8a6-4758-8501-9488e29f736b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.16969Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 100
  }, {
    "id" : "026dbf13-8ea8-45dd-8157-f0045bdaace6",
    "name" : "Update Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/k718",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"OrderTypes\",\n  \"service\" : \"clover\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "026dbf13-8ea8-45dd-8157-f0045bdaace6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.169512Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "OrderTypes",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateOrderTypeResponse"
          }
        }
      }
    },
    "insertionIndex" : 101
  }, {
    "id" : "6146c384-d5f1-4333-9c8f-a8a68f4a00d3",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/j43p",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6146c384-d5f1-4333-9c8f-a8a68f4a00d3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.169331Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 102
  }, {
    "id" : "9854aaf8-34df-4f90-b412-7cf5ef43e281",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/6033",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9854aaf8-34df-4f90-b412-7cf5ef43e281",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.169169Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 103
  }, {
    "id" : "b9c018d4-fddf-42b1-8f90-93b0b9789680",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/y64n",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b9c018d4-fddf-42b1-8f90-93b0b9789680",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.168989Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 104
  }, {
    "id" : "067fa1c8-fd4f-4274-ad03-a84e7903a7e7",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/457x",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "067fa1c8-fd4f-4274-ad03-a84e7903a7e7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.168839Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 105
  }, {
    "id" : "2cf79379-9cef-45ab-b9a6-3d7b4a8d3957",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/cvps",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2cf79379-9cef-45ab-b9a6-3d7b4a8d3957",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.168682Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 106
  }, {
    "id" : "f9df62ef-a688-4b45-bab8-96f4893283e4",
    "name" : "Get Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/8229",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"default\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Default order type\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  },\n  \"resource\" : \"OrderTypes\",\n  \"service\" : \"clover\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f9df62ef-a688-4b45-bab8-96f4893283e4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.168498Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/OrderType"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "OrderTypes",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetOrderTypeResponse",
            "x-graphql-type-name" : "OrderType"
          }
        }
      }
    },
    "insertionIndex" : 107
  }, {
    "id" : "df5912b5-1205-4a78-a0c7-e94f0efbdc5a",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/o5o3",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "df5912b5-1205-4a78-a0c7-e94f0efbdc5a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.168297Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 108
  }, {
    "id" : "b279832c-903e-403a-b0a6-322d33dec178",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/lh98",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b279832c-903e-403a-b0a6-322d33dec178",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.168149Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 109
  }, {
    "id" : "87779b2f-8cf5-4676-beb9-f798096869d6",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/3nv2",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "87779b2f-8cf5-4676-beb9-f798096869d6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.167974Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 110
  }, {
    "id" : "a3295dab-2a26-4fb1-b9b3-aa80e03bb2c8",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/xvwp",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a3295dab-2a26-4fb1-b9b3-aa80e03bb2c8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.167822Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 111
  }, {
    "id" : "f09d1d97-7f5a-4fcc-b301-a4cb2be957cd",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/94v3",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f09d1d97-7f5a-4fcc-b301-a4cb2be957cd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.167665Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 112
  }, {
    "id" : "bfb098d2-6bcd-48c4-a440-46dd9032f5e7",
    "name" : "Delete Order Type",
    "request" : {
      "urlPath" : "/pos/order-types/53q0",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"OrderTypes\",\n  \"service\" : \"clover\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "bfb098d2-6bcd-48c4-a440-46dd9032f5e7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.167489Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "OrderTypes",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteOrderTypeResponse"
          }
        }
      }
    },
    "insertionIndex" : 113
  }, {
    "id" : "4ed04da2-7dd6-48a8-952b-9feb719b5bde",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4ed04da2-7dd6-48a8-952b-9feb719b5bde",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.167276Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 114
  }, {
    "id" : "85c2da95-d903-45ed-88d2-da496caf892c",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "85c2da95-d903-45ed-88d2-da496caf892c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.167191Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 115
  }, {
    "id" : "c423eccd-adfe-449b-833a-3b9907742399",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c423eccd-adfe-449b-833a-3b9907742399",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.16708Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 116
  }, {
    "id" : "7f5b4c60-b3f0-4837-85ef-828afe6c9c4c",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7f5b4c60-b3f0-4837-85ef-828afe6c9c4c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.166996Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 117
  }, {
    "id" : "50f21cec-bc65-41b3-9a55-be8f2a867de6",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "50f21cec-bc65-41b3-9a55-be8f2a867de6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.166914Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 118
  }, {
    "id" : "c28cbbe9-d91b-4ffe-9cfe-c1995051315a",
    "name" : "Create Order Type",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"OrderTypes\",\n  \"service\" : \"clover\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c28cbbe9-d91b-4ffe-9cfe-c1995051315a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.166806Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "OrderTypes",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateOrderTypeResponse"
          }
        }
      }
    },
    "insertionIndex" : 119
  }, {
    "id" : "e7825baf-a94c-4c0e-ae39-92af4e08c1ff",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e7825baf-a94c-4c0e-ae39-92af4e08c1ff",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.166686Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 120
  }, {
    "id" : "7dd730eb-9475-4d54-b1fd-dd23a3aa3e5e",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7dd730eb-9475-4d54-b1fd-dd23a3aa3e5e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.1666Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 121
  }, {
    "id" : "4ade3779-b141-49a4-acee-d798149b6963",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4ade3779-b141-49a4-acee-d798149b6963",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.166484Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 122
  }, {
    "id" : "c768f5b1-ea6f-47ff-b396-9b288033224c",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c768f5b1-ea6f-47ff-b396-9b288033224c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.166397Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 123
  }, {
    "id" : "c8e0d01a-bd7d-4aa2-acf5-17af67bbe3a5",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c8e0d01a-bd7d-4aa2-acf5-17af67bbe3a5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.166306Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 124
  }, {
    "id" : "ecd73391-56be-4ad5-b01e-66325685b792",
    "name" : "List Order Types",
    "request" : {
      "urlPath" : "/pos/order-types",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"default\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Default order type\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"default\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Default order type\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"default\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Default order type\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  } ],\n  \"resource\" : \"OrderTypes\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"clover\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ecd73391-56be-4ad5-b01e-66325685b792",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.16618Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "orderTypesAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/OrderType"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "OrderTypes",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "clover",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetOrderTypesResponse",
            "x-graphql-type-name" : "OrderTypeList"
          }
        }
      }
    },
    "insertionIndex" : 125
  }, {
    "id" : "db80da40-d5c0-415b-8876-d5396a14703d",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/i766",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "db80da40-d5c0-415b-8876-d5396a14703d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.165927Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 126
  }, {
    "id" : "ad336190-3555-4fd3-8696-2a60d4871a1b",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/7zp6",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ad336190-3555-4fd3-8696-2a60d4871a1b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.165698Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 127
  }, {
    "id" : "9e0ea3fe-4f79-4b42-b865-0ad00e25f044",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/f4sg",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9e0ea3fe-4f79-4b42-b865-0ad00e25f044",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.165517Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 128
  }, {
    "id" : "baad0079-65d6-419f-ab9d-132f99da076a",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/15zt",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "baad0079-65d6-419f-ab9d-132f99da076a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.16537Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 129
  }, {
    "id" : "e7c6019b-3504-46a1-b6b6-fd016155e7ff",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/b179",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e7c6019b-3504-46a1-b6b6-fd016155e7ff",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.165218Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 130
  }, {
    "id" : "d521f7a9-917a-4f39-bb59-03040ca01d7e",
    "name" : "Update Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/qe0u",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Modifiers\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d521f7a9-917a-4f39-bb59-03040ca01d7e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.165035Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Modifiers",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateModifierResponse"
          }
        }
      }
    },
    "insertionIndex" : 131
  }, {
    "id" : "4715a34a-af40-4417-a1bf-67b6214f508b",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/t672",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4715a34a-af40-4417-a1bf-67b6214f508b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.16485Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 132
  }, {
    "id" : "0d9716a9-dd20-4cb6-a875-14b0bb27eba7",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/5wi4",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0d9716a9-dd20-4cb6-a875-14b0bb27eba7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.164697Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 133
  }, {
    "id" : "c7062f1c-e12d-41e2-9803-fd17cb43e743",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/a07n",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c7062f1c-e12d-41e2-9803-fd17cb43e743",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.164508Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 134
  }, {
    "id" : "4fa998b4-00a9-43b7-802f-fe97d4357ecc",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/91xb",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4fa998b4-00a9-43b7-802f-fe97d4357ecc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.164336Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 135
  }, {
    "id" : "d348697b-08b3-4781-924b-ae5c33151ca4",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/73c5",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d348697b-08b3-4781-924b-ae5c33151ca4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.164176Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 136
  }, {
    "id" : "68b18a5e-6a79-423c-ae90-3bedab019e8f",
    "name" : "Get Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/lxe8",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  },\n  \"resource\" : \"Modifiers\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "68b18a5e-6a79-423c-ae90-3bedab019e8f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.163984Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Modifier"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Modifiers",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetModifierResponse",
            "x-graphql-type-name" : "Modifier"
          }
        }
      }
    },
    "insertionIndex" : 137
  }, {
    "id" : "03bd66d6-778e-4c55-bc2b-a0b315a12cf7",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/v674",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "03bd66d6-778e-4c55-bc2b-a0b315a12cf7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.163738Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 138
  }, {
    "id" : "18207867-4e94-4917-939c-33cae54014d3",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/l718",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "18207867-4e94-4917-939c-33cae54014d3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.163539Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 139
  }, {
    "id" : "50c65023-86dd-4b5b-8f07-ddf93aa1fca3",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/2o4e",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "50c65023-86dd-4b5b-8f07-ddf93aa1fca3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.163357Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 140
  }, {
    "id" : "8e7854c7-a53d-4d8c-9514-bebcef6cd891",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/p13q",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8e7854c7-a53d-4d8c-9514-bebcef6cd891",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.163203Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 141
  }, {
    "id" : "fa8fa74e-54dd-437e-a915-c37909a1e1e7",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/69rg",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fa8fa74e-54dd-437e-a915-c37909a1e1e7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.163043Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 142
  }, {
    "id" : "c1e05c44-b3ca-4b70-b73d-e1e0a141c4c6",
    "name" : "Delete Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers/a8lt",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Modifiers\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c1e05c44-b3ca-4b70-b73d-e1e0a141c4c6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.162858Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Modifiers",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteModifierResponse"
          }
        }
      }
    },
    "insertionIndex" : 143
  }, {
    "id" : "7af7c500-93a4-409e-8fa1-ebc8d8f82a71",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7af7c500-93a4-409e-8fa1-ebc8d8f82a71",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.162639Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 144
  }, {
    "id" : "d979cc70-719a-42b6-9e45-0e12dfc8bb3c",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d979cc70-719a-42b6-9e45-0e12dfc8bb3c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.162545Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 145
  }, {
    "id" : "18c5ef83-33fe-48fc-8743-e3b33c37cc30",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "18c5ef83-33fe-48fc-8743-e3b33c37cc30",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.162426Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 146
  }, {
    "id" : "0a67559f-6cdc-40d4-b914-7a9af0a3833b",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0a67559f-6cdc-40d4-b914-7a9af0a3833b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.16233Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 147
  }, {
    "id" : "64f9daba-230e-493e-98ba-0798902ab92e",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "64f9daba-230e-493e-98ba-0798902ab92e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.16218Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 148
  }, {
    "id" : "68b314e5-21da-44c9-96bf-44dcf9257a50",
    "name" : "Create Modifier",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Modifiers\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "68b314e5-21da-44c9-96bf-44dcf9257a50",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.162046Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Modifiers",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateModifierResponse"
          }
        }
      }
    },
    "insertionIndex" : 149
  }, {
    "id" : "b7c44d4e-f0b3-4b39-8624-476afc8df37c",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b7c44d4e-f0b3-4b39-8624-476afc8df37c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.161884Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 150
  }, {
    "id" : "dbf2565a-0a2c-42b2-815a-368d7403cd65",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "dbf2565a-0a2c-42b2-815a-368d7403cd65",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.161796Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 151
  }, {
    "id" : "05a5eb06-a885-494c-9e4e-c5b80f4e63a5",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "05a5eb06-a885-494c-9e4e-c5b80f4e63a5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.161681Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 152
  }, {
    "id" : "65ced14f-a476-4e10-b8bb-228595ac0550",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "65ced14f-a476-4e10-b8bb-228595ac0550",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.161595Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 153
  }, {
    "id" : "369dbbc2-a64a-4c31-9f23-d95b72d5d8eb",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "369dbbc2-a64a-4c31-9f23-d95b72d5d8eb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.161501Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 154
  }, {
    "id" : "5ed95b07-b89f-4589-9876-6f0da8cc368f",
    "name" : "List Modifiers",
    "request" : {
      "urlPath" : "/pos/modifiers",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  }, {\n    \"modifier_group_id\" : \"123\",\n    \"alternate_name\" : \"Modifier New\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"available\" : true,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"idempotency_key\" : \"random_string\",\n    \"price_amount\" : 10,\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"created_by\" : \"12345\"\n  } ],\n  \"resource\" : \"Modifiers\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5ed95b07-b89f-4589-9876-6f0da8cc368f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.16138Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifiersAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Modifier"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Modifiers",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetModifiersResponse",
            "x-graphql-type-name" : "ModifierList"
          }
        }
      }
    },
    "insertionIndex" : 155
  }, {
    "id" : "5dd2f8ae-c35d-4324-b2bb-f12cda124fea",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/f4t6",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5dd2f8ae-c35d-4324-b2bb-f12cda124fea",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.16112Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 156
  }, {
    "id" : "2c00b328-ac9c-4c9a-9797-a8c8779de6aa",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/8q90",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2c00b328-ac9c-4c9a-9797-a8c8779de6aa",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.160964Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 157
  }, {
    "id" : "66a7b7cb-90c1-4d13-8e9e-76369e2f521e",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/0xwt",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "66a7b7cb-90c1-4d13-8e9e-76369e2f521e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.160785Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 158
  }, {
    "id" : "10074860-7b75-46fd-8bf4-4d6ed80c471b",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/1v20",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "10074860-7b75-46fd-8bf4-4d6ed80c471b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.160635Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 159
  }, {
    "id" : "4117fc5c-e839-495b-98f5-4af2062aea3f",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/9992",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4117fc5c-e839-495b-98f5-4af2062aea3f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.160477Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 160
  }, {
    "id" : "6beab577-83ae-4b29-a331-9fb33ec8e38b",
    "name" : "Update Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/2lll",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"ModifierGroups\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6beab577-83ae-4b29-a331-9fb33ec8e38b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.160286Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "ModifierGroups",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateModifierGroupResponse"
          }
        }
      }
    },
    "insertionIndex" : 161
  }, {
    "id" : "93591e0c-773b-40dc-bbff-f14a40152a19",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/43xd",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "93591e0c-773b-40dc-bbff-f14a40152a19",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.160006Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 162
  }, {
    "id" : "a98fbe54-0148-4afc-8fc3-603e35ade76e",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/31h0",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a98fbe54-0148-4afc-8fc3-603e35ade76e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.15984Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 163
  }, {
    "id" : "11c013a6-4f71-46dc-8ce0-8290d92d9a36",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/q558",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "11c013a6-4f71-46dc-8ce0-8290d92d9a36",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.159579Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 164
  }, {
    "id" : "aeaae58e-0344-450e-9c89-e0322b36fb83",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/683f",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "aeaae58e-0344-450e-9c89-e0322b36fb83",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.159427Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 165
  }, {
    "id" : "8d732197-81e5-45be-ad5c-796e2b10fc15",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/9os9",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8d732197-81e5-45be-ad5c-796e2b10fc15",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.159264Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 166
  }, {
    "id" : "27e57855-0c95-496c-b61b-c74f5e8fe214",
    "name" : "Get Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/0988",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"alternate_name\" : \"Modifier New\",\n    \"maximum_allowed\" : 5,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"modifiers\" : [ {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"created_by\" : \"12345\",\n    \"present_at_all_locations\" : false,\n    \"selection_type\" : \"single\",\n    \"deleted\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"row_version\" : \"1-12345\",\n    \"minimum_required\" : 1,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"ModifierGroups\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "27e57855-0c95-496c-b61b-c74f5e8fe214",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.159044Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/ModifierGroup"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "ModifierGroups",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetModifierGroupResponse",
            "x-graphql-type-name" : "ModifierGroup"
          }
        }
      }
    },
    "insertionIndex" : 167
  }, {
    "id" : "c20d588c-ebc4-4f83-8dcf-832d4d42d916",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/5o24",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c20d588c-ebc4-4f83-8dcf-832d4d42d916",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.158735Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 168
  }, {
    "id" : "5b843be7-4379-4f87-95aa-95ab8ba9f0d8",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/1n13",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5b843be7-4379-4f87-95aa-95ab8ba9f0d8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.15857Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 169
  }, {
    "id" : "3b16eed7-f8da-459a-b997-bc92e2ad02de",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/g7m4",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3b16eed7-f8da-459a-b997-bc92e2ad02de",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.158358Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 170
  }, {
    "id" : "e59e66ce-b2f1-43cb-946f-7003fee64be3",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/r958",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e59e66ce-b2f1-43cb-946f-7003fee64be3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.158185Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 171
  }, {
    "id" : "4a814a9d-d207-4390-9b1a-5525b4b360fd",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/4ej8",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4a814a9d-d207-4390-9b1a-5525b4b360fd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.158011Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 172
  }, {
    "id" : "09d40009-2b8d-48a5-a656-aa6dafb32a08",
    "name" : "Delete Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups/57g7",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"ModifierGroups\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "09d40009-2b8d-48a5-a656-aa6dafb32a08",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.157798Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "ModifierGroups",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteModifierGroupResponse"
          }
        }
      }
    },
    "insertionIndex" : 173
  }, {
    "id" : "21566f70-3055-4ee5-9acb-e53c6c994305",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "21566f70-3055-4ee5-9acb-e53c6c994305",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.157546Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 174
  }, {
    "id" : "4c1f4545-7f9f-4d33-84e3-597006466712",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4c1f4545-7f9f-4d33-84e3-597006466712",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.157449Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 175
  }, {
    "id" : "319ca9c9-d9cb-44ca-b3a7-bac324ddbf2e",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "319ca9c9-d9cb-44ca-b3a7-bac324ddbf2e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.157315Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 176
  }, {
    "id" : "1d8f6c8a-39b6-403d-b103-1c266e80c788",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1d8f6c8a-39b6-403d-b103-1c266e80c788",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.157201Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 177
  }, {
    "id" : "e3e00f74-81b2-493b-b912-560b9c6d7ee1",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e3e00f74-81b2-493b-b912-560b9c6d7ee1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.157039Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 178
  }, {
    "id" : "741f44b1-677d-4187-86bb-86d6924c7aaa",
    "name" : "Create Modifier Group",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"ModifierGroups\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "741f44b1-677d-4187-86bb-86d6924c7aaa",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.156922Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "ModifierGroups",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateModifierGroupResponse"
          }
        }
      }
    },
    "insertionIndex" : 179
  }, {
    "id" : "0e5b2f82-2faa-4818-a3eb-22f924ac129d",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0e5b2f82-2faa-4818-a3eb-22f924ac129d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.156796Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 180
  }, {
    "id" : "1f8c90b7-11d0-44d4-8eba-f58cd34a0e85",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1f8c90b7-11d0-44d4-8eba-f58cd34a0e85",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.156696Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 181
  }, {
    "id" : "195fd5bc-3c32-4770-90f7-4c58dce748f1",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "195fd5bc-3c32-4770-90f7-4c58dce748f1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.156564Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 182
  }, {
    "id" : "f401cb31-516f-4f0a-8cb9-a3dbca9240e2",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f401cb31-516f-4f0a-8cb9-a3dbca9240e2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.15646Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 183
  }, {
    "id" : "a9667b1c-ef25-4ca4-8521-e9b4291f0572",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a9667b1c-ef25-4ca4-8521-e9b4291f0572",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.156353Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 184
  }, {
    "id" : "5eb48285-29a8-4bdb-9777-25b5836cea38",
    "name" : "List Modifier Groups",
    "request" : {
      "urlPath" : "/pos/modifier-groups",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"alternate_name\" : \"Modifier New\",\n    \"maximum_allowed\" : 5,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"modifiers\" : [ {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"created_by\" : \"12345\",\n    \"present_at_all_locations\" : false,\n    \"selection_type\" : \"single\",\n    \"deleted\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"row_version\" : \"1-12345\",\n    \"minimum_required\" : 1,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"id\" : \"12345\"\n  }, {\n    \"alternate_name\" : \"Modifier New\",\n    \"maximum_allowed\" : 5,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"modifiers\" : [ {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"created_by\" : \"12345\",\n    \"present_at_all_locations\" : false,\n    \"selection_type\" : \"single\",\n    \"deleted\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"row_version\" : \"1-12345\",\n    \"minimum_required\" : 1,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"id\" : \"12345\"\n  }, {\n    \"alternate_name\" : \"Modifier New\",\n    \"maximum_allowed\" : 5,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"modifiers\" : [ {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    }, {\n      \"alternate_name\" : \"Modifier New\",\n      \"available\" : true,\n      \"name\" : \"Modifier\",\n      \"price_amount\" : 10,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\"\n    } ],\n    \"created_by\" : \"12345\",\n    \"present_at_all_locations\" : false,\n    \"selection_type\" : \"single\",\n    \"deleted\" : true,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"row_version\" : \"1-12345\",\n    \"minimum_required\" : 1,\n    \"name\" : \"Modifier\",\n    \"updated_by\" : \"12345\",\n    \"id\" : \"12345\"\n  } ],\n  \"resource\" : \"ModifierGroups\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5eb48285-29a8-4bdb-9777-25b5836cea38",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.156201Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "modifierGroupsAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/ModifierGroup"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "ModifierGroups",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetModifierGroupsResponse",
            "x-graphql-type-name" : "ModifierGroupList"
          }
        }
      }
    },
    "insertionIndex" : 185
  }, {
    "id" : "3b96d946-74ba-41ed-8bbc-5020eb1400c4",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/2j72",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3b96d946-74ba-41ed-8bbc-5020eb1400c4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.155651Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 186
  }, {
    "id" : "8f2c3e87-f7f0-4cf8-88ca-df93b6405edc",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/cwq8",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8f2c3e87-f7f0-4cf8-88ca-df93b6405edc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.155474Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 187
  }, {
    "id" : "d47829ef-8f8b-4bd2-9602-330edf6b9267",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/13f7",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d47829ef-8f8b-4bd2-9602-330edf6b9267",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.155265Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 188
  }, {
    "id" : "c77dc899-18b8-489c-9662-88c0359bbb34",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/697m",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c77dc899-18b8-489c-9662-88c0359bbb34",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.155066Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 189
  }, {
    "id" : "16795f4b-beb1-4fb4-a5eb-2f10aec89b57",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/k5kn",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "16795f4b-beb1-4fb4-a5eb-2f10aec89b57",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.154889Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 190
  }, {
    "id" : "85eb3bd5-146b-453f-87c1-cff4fbf13299",
    "name" : "Update Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/9i0l",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Merchants\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "85eb3bd5-146b-453f-87c1-cff4fbf13299",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.154683Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Merchants",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateMerchantResponse"
          }
        }
      }
    },
    "insertionIndex" : 191
  }, {
    "id" : "b0fd0e53-1b1d-49ca-85a4-d9c2f6f37956",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/w7n5",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b0fd0e53-1b1d-49ca-85a4-d9c2f6f37956",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.154477Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 192
  }, {
    "id" : "2d3ef30b-b7cd-4d22-9d60-0a429ef49255",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/cm88",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2d3ef30b-b7cd-4d22-9d60-0a429ef49255",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.154288Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 193
  }, {
    "id" : "86e36948-600f-4719-8f6b-cb75919ed048",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/2d1f",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "86e36948-600f-4719-8f6b-cb75919ed048",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.154073Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 194
  }, {
    "id" : "550e2714-3dc4-4e01-a808-54871dd1eadc",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/1n22",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "550e2714-3dc4-4e01-a808-54871dd1eadc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.153888Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 195
  }, {
    "id" : "bade8e95-9cff-4531-b02e-8a8fcce52f15",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/e6j5",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "bade8e95-9cff-4531-b02e-8a8fcce52f15",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.15369Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 196
  }, {
    "id" : "e522e198-1555-457e-ba38-103fdb624831",
    "name" : "Get Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/4ua8",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"main_location_id\" : \"12345\",\n    \"owner_id\" : \"12345\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"language\" : \"EN\",\n    \"created_by\" : \"12345\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"status\" : \"active\"\n  },\n  \"resource\" : \"Merchants\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e522e198-1555-457e-ba38-103fdb624831",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.1534Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Merchant"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Merchants",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetMerchantResponse",
            "x-graphql-type-name" : "Merchant"
          }
        }
      }
    },
    "insertionIndex" : 197
  }, {
    "id" : "a429d3e2-8b00-4fcc-9a0c-e077aca6ede3",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/l709",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a429d3e2-8b00-4fcc-9a0c-e077aca6ede3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.152889Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 198
  }, {
    "id" : "8025eed2-6c33-4c5d-8b7b-88b2bef36991",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/sb5t",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8025eed2-6c33-4c5d-8b7b-88b2bef36991",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.152715Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 199
  }, {
    "id" : "07f73637-11e2-4302-a36a-2dd668e819a9",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/539f",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "07f73637-11e2-4302-a36a-2dd668e819a9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.152504Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 200
  }, {
    "id" : "92465fc3-dc3a-4f61-8b9d-033d8c23f575",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/ap14",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "92465fc3-dc3a-4f61-8b9d-033d8c23f575",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.152347Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 201
  }, {
    "id" : "ab4eeb2f-4565-4a28-9163-9fdf7c7badcb",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/0n29",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ab4eeb2f-4565-4a28-9163-9fdf7c7badcb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.152188Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 202
  }, {
    "id" : "11746802-aa10-4434-bb55-754edb9b2037",
    "name" : "Delete Merchant",
    "request" : {
      "urlPath" : "/pos/merchants/co2v",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Merchants\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "11746802-aa10-4434-bb55-754edb9b2037",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.151999Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Merchants",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteMerchantResponse"
          }
        }
      }
    },
    "insertionIndex" : 203
  }, {
    "id" : "c6518350-3538-4c5d-9616-49263fb570b7",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c6518350-3538-4c5d-9616-49263fb570b7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.151759Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 204
  }, {
    "id" : "395da77a-6d0c-4476-8d25-1a7574d43d5a",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "395da77a-6d0c-4476-8d25-1a7574d43d5a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.151679Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 205
  }, {
    "id" : "01435ece-7b4a-434d-a2f6-9fe09b47529b",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "01435ece-7b4a-434d-a2f6-9fe09b47529b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.15157Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 206
  }, {
    "id" : "f456c571-4dbb-416e-94bc-645b5b909fda",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f456c571-4dbb-416e-94bc-645b5b909fda",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.151486Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 207
  }, {
    "id" : "431f0517-93cd-4ee3-b9f3-c924857f30e6",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "431f0517-93cd-4ee3-b9f3-c924857f30e6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.151402Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 208
  }, {
    "id" : "a139e378-8e25-466a-9fb2-00537752b217",
    "name" : "Create Merchant",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Merchants\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a139e378-8e25-466a-9fb2-00537752b217",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.151291Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Merchants",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateMerchantResponse"
          }
        }
      }
    },
    "insertionIndex" : 209
  }, {
    "id" : "b6d3a472-62b6-41a1-b7d9-1172963e32f9",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b6d3a472-62b6-41a1-b7d9-1172963e32f9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.15116Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 210
  }, {
    "id" : "66976e5d-9ed2-46a0-8727-819160fe380d",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "66976e5d-9ed2-46a0-8727-819160fe380d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.151056Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 211
  }, {
    "id" : "d1bd161f-760a-4b4b-84f7-a69e46c7d1e3",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d1bd161f-760a-4b4b-84f7-a69e46c7d1e3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.150919Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 212
  }, {
    "id" : "618fb5c0-dd6a-4319-ab52-5027a25a7aa6",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "618fb5c0-dd6a-4319-ab52-5027a25a7aa6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.150814Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 213
  }, {
    "id" : "4053d6f9-3bbd-467c-ba32-56348f012188",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4053d6f9-3bbd-467c-ba32-56348f012188",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.150709Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 214
  }, {
    "id" : "185916d9-1fe7-4bc5-9a30-bc92f004d1d8",
    "name" : "List Merchants",
    "request" : {
      "urlPath" : "/pos/merchants",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"main_location_id\" : \"12345\",\n    \"owner_id\" : \"12345\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"language\" : \"EN\",\n    \"created_by\" : \"12345\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"status\" : \"active\"\n  }, {\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"main_location_id\" : \"12345\",\n    \"owner_id\" : \"12345\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"language\" : \"EN\",\n    \"created_by\" : \"12345\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"status\" : \"active\"\n  }, {\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"main_location_id\" : \"12345\",\n    \"owner_id\" : \"12345\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    }, {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"auto_gratuity\"\n    } ],\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"language\" : \"EN\",\n    \"created_by\" : \"12345\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"status\" : \"active\"\n  }, {\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"main_location_id\" : \"12345\",\n    \"owner_id\" : \"12345\",\n    \"service_charges\" : [ {\n      \"amount\" : 27500,\n      \"percentage\" : 12.5,\n      \"name\" : \"Charge for delivery\",\n      \"active\" : true,\n      \"currency\" : \"USD\",\n      \"id\" : \"12345\",\n      \"type\" : \"custom\"\n    } ],\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"language\" : \"EN\",\n    \"created_by\" : \"12345\",\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"status\" : \"active\"\n  } ],\n  \"resource\" : \"Merchants\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "185916d9-1fe7-4bc5-9a30-bc92f004d1d8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.150559Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "merchantsAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Merchant"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Merchants",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetMerchantsResponse",
            "x-graphql-type-name" : "MerchantList"
          }
        }
      }
    },
    "insertionIndex" : 215
  }, {
    "id" : "b49ff255-d888-440b-bf0d-ebb1a0091b73",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/lpgm",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b49ff255-d888-440b-bf0d-ebb1a0091b73",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.149683Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 216
  }, {
    "id" : "2835fe12-4f58-4d48-8c6a-b9a731f83f0b",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/cli5",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2835fe12-4f58-4d48-8c6a-b9a731f83f0b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.149528Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 217
  }, {
    "id" : "b1f8d3f4-892e-4da5-b4a5-2419e1774d02",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/6b8o",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b1f8d3f4-892e-4da5-b4a5-2419e1774d02",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.149343Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 218
  }, {
    "id" : "27c8c529-82a4-42e2-b01f-0bd3b0dba6d3",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/ycrf",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "27c8c529-82a4-42e2-b01f-0bd3b0dba6d3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.149187Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 219
  }, {
    "id" : "58a39b16-4efb-4843-a0fb-c66447d39895",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/go5b",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "58a39b16-4efb-4843-a0fb-c66447d39895",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.149031Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 220
  }, {
    "id" : "4e679f02-5651-4f62-ad38-6613f9027826",
    "name" : "Update Location",
    "request" : {
      "urlPath" : "/pos/locations/5468",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Locations\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4e679f02-5651-4f62-ad38-6613f9027826",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.148844Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Locations",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateLocationResponse"
          }
        }
      }
    },
    "insertionIndex" : 221
  }, {
    "id" : "3c2d2adf-dd2f-4438-8878-6f0b94e24e83",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/0b82",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3c2d2adf-dd2f-4438-8878-6f0b94e24e83",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.148655Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 222
  }, {
    "id" : "9d05b22f-9085-465c-ab53-6c58fe197e17",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/c7km",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9d05b22f-9085-465c-ab53-6c58fe197e17",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.148503Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 223
  }, {
    "id" : "62388593-fd96-4e04-a19a-b6df16d4a838",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/t269",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "62388593-fd96-4e04-a19a-b6df16d4a838",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.148313Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 224
  }, {
    "id" : "e221b453-98d3-4088-a247-36181676a2a4",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/r3bv",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e221b453-98d3-4088-a247-36181676a2a4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.148162Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 225
  }, {
    "id" : "3253396d-f978-4b94-b3a8-6668e84192f6",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/ka2z",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3253396d-f978-4b94-b3a8-6668e84192f6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.14801Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 226
  }, {
    "id" : "04482a35-57b9-4657-822a-1d87370371b8",
    "name" : "Get Location",
    "request" : {
      "urlPath" : "/pos/locations/921u",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"business_name\" : \"Dunkin Donuts LLC\",\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"created_by\" : \"12345\",\n    \"status\" : \"active\"\n  },\n  \"resource\" : \"Locations\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "04482a35-57b9-4657-822a-1d87370371b8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.147823Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Location"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Locations",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetLocationResponse",
            "x-graphql-type-name" : "Location"
          }
        }
      }
    },
    "insertionIndex" : 227
  }, {
    "id" : "b8552bd0-1002-4672-bd09-43000692adc7",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/i86t",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b8552bd0-1002-4672-bd09-43000692adc7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.147543Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 228
  }, {
    "id" : "f61ba00b-a2be-437c-a70a-0c09e69b9e4b",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/4204",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f61ba00b-a2be-437c-a70a-0c09e69b9e4b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.147385Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 229
  }, {
    "id" : "c77aaebc-8b38-4943-b032-d240603b4fb9",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/3ox1",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c77aaebc-8b38-4943-b032-d240603b4fb9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.147202Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 230
  }, {
    "id" : "a17d55ae-86c9-40d0-b15f-d16011cf1111",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/g7u8",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a17d55ae-86c9-40d0-b15f-d16011cf1111",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.147051Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 231
  }, {
    "id" : "7425c452-ed7f-4958-a45f-808f157a62c5",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/c5wt",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7425c452-ed7f-4958-a45f-808f157a62c5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.146879Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 232
  }, {
    "id" : "a4302b62-f749-462d-b2df-a8174766ae2f",
    "name" : "Delete Location",
    "request" : {
      "urlPath" : "/pos/locations/0bbr",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Locations\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a4302b62-f749-462d-b2df-a8174766ae2f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.146704Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Locations",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteLocationResponse"
          }
        }
      }
    },
    "insertionIndex" : 233
  }, {
    "id" : "213eddf5-3e70-42fd-ad20-d16c288ab315",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "213eddf5-3e70-42fd-ad20-d16c288ab315",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.146508Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 234
  }, {
    "id" : "a627f9da-c0de-447c-8595-e86fe4231b74",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a627f9da-c0de-447c-8595-e86fe4231b74",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.146429Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 235
  }, {
    "id" : "33b0e404-f049-4a05-86fc-41b80a4a5df1",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "33b0e404-f049-4a05-86fc-41b80a4a5df1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.146325Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 236
  }, {
    "id" : "a5d9e4ac-502e-4588-97dd-f03d6bf0e0d7",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a5d9e4ac-502e-4588-97dd-f03d6bf0e0d7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.146243Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 237
  }, {
    "id" : "8ad25ccd-1425-4a46-a3a1-0819ab295f5f",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8ad25ccd-1425-4a46-a3a1-0819ab295f5f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.146162Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 238
  }, {
    "id" : "db9eeb90-7a37-48f8-a887-4038def06f4c",
    "name" : "Create Location",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Locations\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "db9eeb90-7a37-48f8-a887-4038def06f4c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.146049Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Locations",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateLocationResponse"
          }
        }
      }
    },
    "insertionIndex" : 239
  }, {
    "id" : "cc79bd24-321c-4409-9446-6626be9c5bf4",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "cc79bd24-321c-4409-9446-6626be9c5bf4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.145924Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 240
  }, {
    "id" : "019114f2-0aa5-42ec-81e8-6f7da246e97b",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : \"Could not find widget with id: '123'\",\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "019114f2-0aa5-42ec-81e8-6f7da246e97b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.145837Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 241
  }, {
    "id" : "31fa3536-d93a-449d-909e-80f1da250c52",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "31fa3536-d93a-449d-909e-80f1da250c52",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.145714Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 242
  }, {
    "id" : "31ea99cf-8223-4ec2-9e43-a79dfae871cf",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "31ea99cf-8223-4ec2-9e43-a79dfae871cf",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.145622Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 243
  }, {
    "id" : "1e5565a5-c3f4-45a5-bfdd-6ec4410cf8c8",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1e5565a5-c3f4-45a5-bfdd-6ec4410cf8c8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.145527Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 244
  }, {
    "id" : "9dc6de01-7814-4602-938d-4f57934ea947",
    "name" : "List Locations",
    "request" : {
      "urlPath" : "/pos/locations",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"business_name\" : \"Dunkin Donuts LLC\",\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"created_by\" : \"12345\",\n    \"status\" : \"active\"\n  }, {\n    \"business_name\" : \"Dunkin Donuts LLC\",\n    \"address\" : {\n      \"country\" : \"US\",\n      \"contact_name\" : \"Elon Musk\",\n      \"website\" : \"https://elonmusk.com\",\n      \"line4\" : \"delivery instructions\",\n      \"string\" : \"25 Spring Street, Blackburn, VIC 3130\",\n      \"city\" : \"San Francisco\",\n      \"latitude\" : \"40.759211\",\n      \"county\" : \"Santa Clara\",\n      \"type\" : \"primary\",\n      \"row_version\" : \"1-12345\",\n      \"name\" : \"HQ US\",\n      \"street_number\" : \"25\",\n      \"phone_number\" : \"111-111-1111\",\n      \"id\" : \"123\",\n      \"salutation\" : \"Mr\",\n      \"state\" : \"CA\",\n      \"fax\" : \"122-111-1111\",\n      \"line3\" : \"Suite #\",\n      \"postal_code\" : \"94104\",\n      \"line2\" : \"apt #\",\n      \"email\" : \"elon@musk.com\",\n      \"line1\" : \"Main street\",\n      \"longitude\" : \"-73.984638\"\n    },\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"name\" : \"Dunkin Donuts\",\n    \"updated_by\" : \"12345\",\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"currency\" : \"USD\",\n    \"id\" : \"12345\",\n    \"merchant_id\" : \"12345\",\n    \"created_by\" : \"12345\",\n    \"status\" : \"active\"\n  } ],\n  \"resource\" : \"Locations\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9dc6de01-7814-4602-938d-4f57934ea947",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.145385Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "locationsAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Location"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Locations",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetLocationsResponse",
            "x-graphql-type-name" : "LocationList"
          }
        }
      }
    },
    "insertionIndex" : 245
  }, {
    "id" : "cbb7e847-cf7f-4838-a162-26efe4b48a76",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/8yv7",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "cbb7e847-cf7f-4838-a162-26efe4b48a76",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.144988Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 246
  }, {
    "id" : "684fda7e-90d6-41b3-9924-230e07942d28",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/tp5l",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "684fda7e-90d6-41b3-9924-230e07942d28",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.144814Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 247
  }, {
    "id" : "02500ac4-e3ef-4fe2-9422-4632ff5d809c",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/wc6f",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "02500ac4-e3ef-4fe2-9422-4632ff5d809c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.144594Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 248
  }, {
    "id" : "0b1f6625-4eda-4231-8cf1-3f66dabe9b72",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/7v42",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0b1f6625-4eda-4231-8cf1-3f66dabe9b72",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.144401Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 249
  }, {
    "id" : "ee4e76df-f0f7-4309-8952-8d14450be1f8",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/64c4",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ee4e76df-f0f7-4309-8952-8d14450be1f8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.144184Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 250
  }, {
    "id" : "e2463205-7126-4785-9257-1a8f17d77d86",
    "name" : "Update Item",
    "request" : {
      "urlPath" : "/pos/items/575e",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Items\",\n  \"service\" : \"square\",\n  \"operation\" : \"update\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e2463205-7126-4785-9257-1a8f17d77d86",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.143991Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsUpdate",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "update",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Items",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "UpdateItemResponse"
          }
        }
      }
    },
    "insertionIndex" : 251
  }, {
    "id" : "598b2906-fbeb-444f-995d-ca1e0c2ea410",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/18z9",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "598b2906-fbeb-444f-995d-ca1e0c2ea410",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.1438Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 252
  }, {
    "id" : "fb7022e3-411d-47de-b1c6-e5a5fa40cf5e",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/0r15",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fb7022e3-411d-47de-b1c6-e5a5fa40cf5e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.143644Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 253
  }, {
    "id" : "462e5050-224d-49ea-bee1-c2bf2872e6e3",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/682q",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "462e5050-224d-49ea-bee1-c2bf2872e6e3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.143443Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 254
  }, {
    "id" : "60c88b0a-60d1-46b4-ba18-31c13777198c",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/2r9w",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "60c88b0a-60d1-46b4-ba18-31c13777198c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.143293Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 255
  }, {
    "id" : "fa468beb-efa5-4055-9e30-2eb8435a8d85",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/m547",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fa468beb-efa5-4055-9e30-2eb8435a8d85",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.143136Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 256
  }, {
    "id" : "370e8d5b-a452-4b34-9236-c3f17cfd2643",
    "name" : "Get Item",
    "request" : {
      "urlPath" : "/pos/items/1747",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  },\n  \"resource\" : \"Items\",\n  \"service\" : \"square\",\n  \"operation\" : \"one\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "370e8d5b-a452-4b34-9236-c3f17cfd2643",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.14295Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsOne",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/Item"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "one",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Items",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetItemResponse",
            "x-graphql-type-name" : "Item"
          }
        }
      }
    },
    "insertionIndex" : 257
  }, {
    "id" : "1862f0cf-4d10-4a0f-89d4-df13c450301d",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/k048",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1862f0cf-4d10-4a0f-89d4-df13c450301d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.142618Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 258
  }, {
    "id" : "8a8d73c8-067e-47bb-bf13-d25c64e130a6",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/4n66",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8a8d73c8-067e-47bb-bf13-d25c64e130a6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.142464Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 259
  }, {
    "id" : "379b427a-c7c8-47f0-a067-3c80fba4c1a9",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/r551",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "379b427a-c7c8-47f0-a067-3c80fba4c1a9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.142283Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 260
  }, {
    "id" : "2cb19d53-c355-475f-bfd5-289efda6fa1f",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/63t9",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2cb19d53-c355-475f-bfd5-289efda6fa1f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.142126Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 261
  }, {
    "id" : "cad727b6-6a52-4ab0-9fbf-94119512ae5a",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/v2lg",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : \"Missing property foobar\",\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "cad727b6-6a52-4ab0-9fbf-94119512ae5a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.141964Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 262
  }, {
    "id" : "7b7f9261-0fcf-4915-aa66-dc2540403646",
    "name" : "Delete Item",
    "request" : {
      "urlPath" : "/pos/items/b314",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Items\",\n  \"service\" : \"square\",\n  \"operation\" : \"delete\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7b7f9261-0fcf-4915-aa66-dc2540403646",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.141783Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsDelete",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "delete",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Items",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "DeleteItemResponse"
          }
        }
      }
    },
    "insertionIndex" : 263
  }, {
    "id" : "ab9e542c-2da3-4679-b4f0-9b54b0105601",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ab9e542c-2da3-4679-b4f0-9b54b0105601",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.141574Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 264
  }, {
    "id" : "7b926665-5f7d-4947-89c1-a4f5914d79c2",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7b926665-5f7d-4947-89c1-a4f5914d79c2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.141489Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 265
  }, {
    "id" : "2676f036-a538-43b9-8f70-1f300baa532b",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2676f036-a538-43b9-8f70-1f300baa532b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.14138Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 266
  }, {
    "id" : "bc738648-4de6-4cf7-b525-517f58977ee3",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "bc738648-4de6-4cf7-b525-517f58977ee3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.141294Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 267
  }, {
    "id" : "d63ff052-fbd9-40fa-a44a-ebebb140d164",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d63ff052-fbd9-40fa-a44a-ebebb140d164",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.141205Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 268
  }, {
    "id" : "df4159ce-c90d-4fc0-bcd3-331cd66d3870",
    "name" : "Create Item",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "POST"
    },
    "response" : {
      "status" : 201,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : {\n    \"id\" : \"12345\"\n  },\n  \"resource\" : \"Items\",\n  \"service\" : \"square\",\n  \"operation\" : \"add\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "df4159ce-c90d-4fc0-bcd3-331cd66d3870",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.141081Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAdd",
          "schema" : {
            "properties" : {
              "data" : {
                "$ref" : "#/components/schemas/UnifiedId"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "add",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Items",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "CreateItemResponse"
          }
        }
      }
    },
    "insertionIndex" : 269
  }, {
    "id" : "4163db4a-1ee9-47d7-bc03-308d712d8239",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 422,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#invalidstateerror\",\n  \"type_name\" : \"InvalidStateError\",\n  \"status_code\" : 422,\n  \"detail\" : \"Unprocessable request, please verify your request headers and body.\",\n  \"error\" : \"Unprocessable Entity\",\n  \"message\" : \"Invalid State\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4163db4a-1ee9-47d7-bc03-308d712d8239",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.14095Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Unprocessable request, please verify your request headers and body.",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unprocessable Entity",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid State",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#invalidstateerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 422,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "InvalidStateError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unprocessable"
          }
        }
      }
    },
    "insertionIndex" : 270
  }, {
    "id" : "8b419652-90ad-4480-a6ef-2f860917dbf6",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 404,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#entitynotfounderror\",\n  \"type_name\" : \"EntityNotFoundError\",\n  \"status_code\" : 404,\n  \"detail\" : {\n    \"not_found\" : {\n      \"entity\" : \"widget\",\n      \"id\" : \"123\"\n    }\n  },\n  \"error\" : \"Not Found\",\n  \"message\" : \"Unknown Widget\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8b419652-90ad-4480-a6ef-2f860917dbf6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.140836Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Could not find widget with id: '123'",
                  "type" : "string"
                }, {
                  "example" : {
                    "not_found" : {
                      "entity" : "widget",
                      "id" : "123"
                    }
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Not Found",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unknown Widget",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#entitynotfounderror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 404,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "EntityNotFoundError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "NotFound"
          }
        }
      }
    },
    "insertionIndex" : 271
  }, {
    "id" : "0a250f79-86c7-4922-a815-163e7c04053a",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 402,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestlimiterror\",\n  \"type_name\" : \"RequestLimitError\",\n  \"status_code\" : 402,\n  \"detail\" : \"You have reached your limit of 2000\",\n  \"error\" : \"Payment Required\",\n  \"message\" : \"Request Limit Reached\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0a250f79-86c7-4922-a815-163e7c04053a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.140676Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "You have reached your limit of 2000",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Payment Required",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Request Limit Reached",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestlimiterror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 402,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestLimitError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "PaymentRequired"
          }
        }
      }
    },
    "insertionIndex" : 272
  }, {
    "id" : "6baa7a02-c65d-4c08-9a9a-f45f97bab9fc",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 401,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#unauthorizederror\",\n  \"type_name\" : \"UnauthorizedError\",\n  \"status_code\" : 401,\n  \"detail\" : \"Failed to generate valid JWT Session. Verify applicationId is correct\",\n  \"error\" : \"Unauthorized\",\n  \"message\" : \"Unauthorized Request\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6baa7a02-c65d-4c08-9a9a-f45f97bab9fc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.140552Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "description" : "Contains parameter or domain specific information related to the error and why it occurred.",
                "example" : "Failed to generate valid JWT Session. Verify applicationId is correct",
                "type" : "string"
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Unauthorized",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Unauthorized Request",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#unauthorizederror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 401,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "UnauthorizedError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "Unauthorized"
          }
        }
      }
    },
    "insertionIndex" : 273
  }, {
    "id" : "916c71e0-3ac0-4ed1-b6bd-371654efb008",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 400,
      "body" : "{\n  \"ref\" : \"https://developers.apideck.com/errors#requestvalidationerror\",\n  \"type_name\" : \"RequestValidationError\",\n  \"status_code\" : 400,\n  \"detail\" : {\n    \"missing\" : [ {\n      \"foobar\" : \"required\"\n    } ]\n  },\n  \"error\" : \"Bad Request\",\n  \"message\" : \"Invalid Params\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "916c71e0-3ac0-4ed1-b6bd-371654efb008",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.140341Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "detail" : {
                "anyOf" : [ {
                  "example" : "Missing property foobar",
                  "type" : "string"
                }, {
                  "example" : {
                    "missing" : [ {
                      "foobar" : "required"
                    } ]
                  },
                  "type" : "object"
                } ],
                "description" : "Contains parameter or domain specific information related to the error and why it occurred."
              },
              "error" : {
                "description" : "Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
                "example" : "Bad Request",
                "type" : "string"
              },
              "message" : {
                "description" : "A human-readable message providing more details about the error.",
                "example" : "Invalid Params",
                "type" : "string"
              },
              "ref" : {
                "description" : "Link to documentation of error type",
                "example" : "https://developers.apideck.com/errors#requestvalidationerror",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP status code",
                "example" : 400,
                "type" : "number"
              },
              "type_name" : {
                "description" : "The type of error returned",
                "example" : "RequestValidationError",
                "type" : "string"
              }
            },
            "type" : "object",
            "x-apideck-schema-id" : "BadRequest"
          }
        }
      }
    },
    "insertionIndex" : 274
  }, {
    "id" : "a3c80d01-f265-4997-8725-561302adee30",
    "name" : "List Items",
    "request" : {
      "urlPath" : "/pos/items",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"status_code\" : 200,\n  \"data\" : [ {\n    \"code\" : \"11910345\",\n    \"hidden\" : true,\n    \"tax_ids\" : [ \"12345\", \"67890\" ],\n    \"absent_at_location_ids\" : [ \"12345\", \"67890\" ],\n    \"available\" : true,\n    \"created_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"description\" : \"Hot Chocolate\",\n    \"present_at_all_locations\" : false,\n    \"updated_at\" : \"2020-09-30T07:43:32.000Z\",\n    \"variations\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"item_id\" : \"12345\",\n      \"name\" : \"Food\",\n      \"price_amount\" : 10,\n      \"price_currency\" : \"USD\",\n      \"pricing_type\" : \"fixed\",\n      \"sequence\" : 0,\n      \"sku\" : \"11910345\"\n    } ],\n    \"options\" : [ {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    }, {\n      \"attribute_id\" : \"12345\",\n      \"name\" : \"Option 1\",\n      \"id\" : \"12345\"\n    } ],\n    \"idempotency_key\" : \"random_string\",\n    \"categories\" : [ {\n      \"id\" : \"12345\",\n      \"image_ids\" : [ \"12345\", \"67890\" ],\n      \"name\" : \"Food\"\n    } ],\n    \"id\" : \"#cocoa\",\n    \"sku\" : \"11910345\",\n    \"price_currency\" : \"USD\",\n    \"cost\" : 2,\n    \"modifier_groups\" : [ {\n      \"id\" : \"12345\"\n    } ],\n    \"price_amount\" : 10,\n    \"abbreviation\" : \"Ch\",\n    \"created_by\" : \"12345\",\n    \"version\" : \"12345\",\n    \"pricing_type\" : \"fixed\",\n    \"deleted\" : true,\n    \"product_type\" : \"regular\",\n    \"name\" : \"Cocoa\",\n    \"updated_by\" : \"12345\",\n    \"available_for_pickup\" : false,\n    \"available_online\" : false\n  } ],\n  \"resource\" : \"Items\",\n  \"meta\" : {\n    \"cursors\" : {\n      \"next\" : \"em9oby1jcm06OnBhZ2U6OjM=\",\n      \"current\" : \"em9oby1jcm06OnBhZ2U6OjI=\",\n      \"previous\" : \"em9oby1jcm06OnBhZ2U6OjE=\"\n    },\n    \"items_on_page\" : 50\n  },\n  \"service\" : \"square\",\n  \"links\" : {\n    \"next\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM\",\n    \"current\" : \"https://unify.apideck.com/crm/companies\",\n    \"previous\" : \"https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D\"\n  },\n  \"operation\" : \"all\",\n  \"status\" : \"OK\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a3c80d01-f265-4997-8725-561302adee30",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-28T09:23:33.140146Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "itemsAll",
          "schema" : {
            "properties" : {
              "data" : {
                "items" : {
                  "$ref" : "#/components/schemas/Item"
                },
                "type" : "array"
              },
              "links" : {
                "$ref" : "#/components/schemas/Links"
              },
              "meta" : {
                "$ref" : "#/components/schemas/Meta"
              },
              "operation" : {
                "description" : "Operation performed",
                "example" : "all",
                "type" : "string"
              },
              "resource" : {
                "description" : "Unified API resource name",
                "example" : "Items",
                "type" : "string"
              },
              "service" : {
                "description" : "Apideck ID of service provider",
                "example" : "square",
                "type" : "string"
              },
              "status" : {
                "description" : "HTTP Response Status",
                "example" : "OK",
                "type" : "string"
              },
              "status_code" : {
                "description" : "HTTP Response Status Code",
                "example" : 200,
                "type" : "integer"
              }
            },
            "required" : [ "status_code", "status", "service", "resource", "operation", "data" ],
            "type" : "object",
            "x-apideck-schema-id" : "GetItemsResponse",
            "x-graphql-type-name" : "ItemList"
          }
        }
      }
    },
    "insertionIndex" : 275
  } ]
}