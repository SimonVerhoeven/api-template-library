{
  "mappings" : [ {
    "id" : "bf79a874-57de-3a56-a404-8eb939059804",
    "name" : "[USES 10 UNITS PER NAME] Infer up-to 100 US resident's likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). - 403",
    "request" : {
      "urlPath" : "/api2/json/usZipRaceEthnicityBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "bf79a874-57de-3a56-a404-8eb939059804",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "usZipRaceEthnicityBatch"
        }
      }
    },
    "insertionIndex" : 0
  }, {
    "id" : "e5d8bbbd-8547-32db-96c8-d11846c14509",
    "name" : "[USES 10 UNITS PER NAME] Infer up-to 100 US resident's likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). - 401",
    "request" : {
      "urlPath" : "/api2/json/usZipRaceEthnicityBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "e5d8bbbd-8547-32db-96c8-d11846c14509",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "usZipRaceEthnicityBatch"
        }
      }
    },
    "insertionIndex" : 1
  }, {
    "id" : "fabffa61-ad0a-365a-8ea6-95c57a3b970b",
    "name" : "[USES 10 UNITS PER NAME] Infer up-to 100 US resident's likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). - 400",
    "request" : {
      "urlPath" : "/api2/json/usZipRaceEthnicityBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "fabffa61-ad0a-365a-8ea6-95c57a3b970b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "usZipRaceEthnicityBatch"
        }
      }
    },
    "insertionIndex" : 2
  }, {
    "id" : "172e9411-886b-3f34-9782-956f89b688a2",
    "name" : "[USES 10 UNITS PER NAME] Infer up-to 100 US resident's likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). (application/json)",
    "request" : {
      "urlPath" : "/api2/json/usZipRaceEthnicityBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"personalNames\" : [ {\n    \"firstName\" : \"Kaycee\",\n    \"lastName\" : \"Ritchie\",\n    \"raceEthnicityAlt\" : \"A\",\n    \"score\" : 13.21281210730848,\n    \"probabilityCalibrated\" : -0.3403568230053,\n    \"raceEthnicitiesTop\" : [ \"0blo6gpbdm5tmtzvt5kywoems70989gqyzpodoob5dxpjk6l8jblu8yqadz23rhq8j4e59m6iocr2aywmf3zhwwbn68v6a5hnf2h28kio7ogurncan9d3cnrfl8xpm8z5i8v7qymrbggsvsd093e88pgmfy0vm1cbklu0hs7j70jvyezwpvrz38k032rooxdaep6i213\", \"oegu83lo81ximer8f1\", \"s4m40o8i9z0foiwp62fmmr\" ],\n    \"probabilityAltCalibrated\" : 0.2763621725863803,\n    \"id\" : \"l4z1\",\n    \"raceEthnicity\" : \"W_NL\",\n    \"script\" : \"c2ux9kkn4ed6axb8foom143quq4sqgsfyd61hn831ziuyumucmjpu9gt0omsl4idmt6gozmy0672mzspwwht\"\n  }, {\n    \"firstName\" : \"Rosalina\",\n    \"lastName\" : \"Schroeder\",\n    \"raceEthnicityAlt\" : \"HL\",\n    \"score\" : 83.94743858001536,\n    \"probabilityCalibrated\" : -0.2765891295090561,\n    \"raceEthnicitiesTop\" : [ \"2ovo4cfdkqhgnk9qh7obn88g42xi9aru097eeo8lienv6zks04ckurjnb8raiz0up2cerrrt7nrit1pwc600qerhv63sswn2tvfc7wxi0m28onqx9b31nirmtevb1v3\", \"q7ddsmc2iyj5rky2lt14ka8bn4crpvh7b314bezr2tmqn1080q5792lmjpplfhvw8akqfox2rkq7emtt8wivewn6mb10xmsjdo4camojpbvp5jydyi5a336ajjgk1t1eejk5byqfvx0nfwhhi0r99qlisx2811kjtm0bqmr1i3bknlh4\", \"8mngjcrr4pknuhdxakfqn4dykasflcsntu9717omr7mu637lh5hfz3gg5zmarpke7ljgknlo3tdv302ze44wxml1pf6b5vy0sbdzveevwrofyceepbtlvt7zwdl8r60ld5tjrirmy6ryzje3awzi6vz0eqy1gus1fj1hog06pief1djspj\" ],\n    \"probabilityAltCalibrated\" : -0.5622351819309312,\n    \"id\" : \"n41y\",\n    \"raceEthnicity\" : \"HL\",\n    \"script\" : \"lfv\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "172e9411-886b-3f34-9782-956f89b688a2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "usZipRaceEthnicityBatch",
          "schema" : {
            "description" : "Represents the output of inferring the LIKELY US 'race/ethnicity' from a personal name, given US country of residence and (optionally) a ZIP5 code.",
            "properties" : {
              "personalNames" : {
                "description" : "Classified US 'race'/ethnicized names",
                "items" : {
                  "$ref" : "#/components/schemas/FirstLastNameUSRaceEthnicityOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchFirstLastNameUSRaceEthnicityOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 3
  }, {
    "id" : "a2913105-edb3-3031-b212-ccb91acd5718",
    "name" : "[USES 10 UNITS PER NAME] Infer a US resident's likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). - 403",
    "request" : {
      "urlPath" : "/api2/json/usRaceEthnicityZIP5/Arletha/Lang/26003-1116",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "a2913105-edb3-3031-b212-ccb91acd5718",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "usRaceEthnicityZIP5"
        }
      }
    },
    "insertionIndex" : 4
  }, {
    "id" : "04c355c2-6107-3d93-93fe-e37a1fac0944",
    "name" : "[USES 10 UNITS PER NAME] Infer a US resident's likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). - 401",
    "request" : {
      "urlPath" : "/api2/json/usRaceEthnicityZIP5/Tambra/Gerhold/73826-7058",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "04c355c2-6107-3d93-93fe-e37a1fac0944",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "usRaceEthnicityZIP5"
        }
      }
    },
    "insertionIndex" : 5
  }, {
    "id" : "c84f2f2c-38e0-3f76-9ddd-699cde14d717",
    "name" : "[USES 10 UNITS PER NAME] Infer a US resident's likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). (application/json)",
    "request" : {
      "urlPath" : "/api2/json/usRaceEthnicityZIP5/Alfonzo/Hoeger/00428-8756",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"firstName\" : \"Regina\",\n  \"lastName\" : \"Rau\",\n  \"raceEthnicityAlt\" : \"AI_AN\",\n  \"score\" : 87.21158756423422,\n  \"probabilityCalibrated\" : -0.46342488702936535,\n  \"raceEthnicitiesTop\" : [ \"uybrbyezuz498auuwwyuslqohkhhvplvhusbn223x9h2pxr5e915vtkj3xk3j3q0fsokmr86wvuqayj50ujxsnzek0dhy48b7\", \"4zbejr\", \"a7h3836lw9swxcendscdsvisfk3hk7fzi59a5\" ],\n  \"probabilityAltCalibrated\" : 0.40466726754535176,\n  \"id\" : \"gl3t\",\n  \"raceEthnicity\" : \"PI\",\n  \"script\" : \"wqyrpur5ayx71dlawmseeuxmp7nfuucnaxkh1uxpkwvldcrbbg9sfs8b2mcapzmh35ewz06rig7erxb4byaxvi9oasgu4pg1n5a566r0ouhf8\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c84f2f2c-38e0-3f76-9ddd-699cde14d717",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "usRaceEthnicityZIP5",
          "schema" : {
            "description" : "Represents the output of inferring the LIKELY US 'race/ethnicity' from a personal name, given US country of residence and (optionally) a ZIP5 code.",
            "properties" : {
              "firstName" : {
                "description" : "The first name (also known as given name)",
                "type" : "string"
              },
              "id" : {
                "type" : "string"
              },
              "lastName" : {
                "description" : "The last name (also known as family name, or surname)",
                "type" : "string"
              },
              "probabilityAltCalibrated" : {
                "description" : "The calibrated probability for raceEthnicity OR raceEthnicityAlt to have been guessed correctly. -1 = still calibrating. ",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "probabilityCalibrated" : {
                "description" : "The calibrated probability for raceEthnicity to have been guessed correctly. -1 = still calibrating. ",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "raceEthnicitiesTop" : {
                "description" : "List 'race'/ethnicities",
                "items" : {
                  "description" : "List 'race'/ethnicities",
                  "type" : "string"
                },
                "type" : "array"
              },
              "raceEthnicity" : {
                "description" : "Most likely US 'race'/ethnicity",
                "enum" : [ "W_NL", "HL", "A", "B_NL", "AI_AN", "PI" ],
                "type" : "string",
                "xml" : {
                  "attribute" : true
                }
              },
              "raceEthnicityAlt" : {
                "description" : "Second most likely US 'race'/ethnicity",
                "enum" : [ "W_NL", "HL", "A", "B_NL", "AI_AN", "PI" ],
                "type" : "string",
                "xml" : {
                  "attribute" : true
                }
              },
              "score" : {
                "description" : "Higher score is better, but score is not normalized. Use calibratedProbability if available. ",
                "format" : "double",
                "maximum" : 100,
                "minimum" : 0,
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "FirstLastNameUSRaceEthnicityOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 6
  }, {
    "id" : "ff076d0b-99fc-3f69-9d4d-737e52bc5437",
    "name" : "[USES 10 UNITS PER NAME] Infer up-to 100 US resident's likely race/ethnicity according to US Census taxonomy. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). - 403",
    "request" : {
      "urlPath" : "/api2/json/usRaceEthnicityBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "ff076d0b-99fc-3f69-9d4d-737e52bc5437",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "usRaceEthnicityBatch"
        }
      }
    },
    "insertionIndex" : 7
  }, {
    "id" : "d36b1e72-7d7a-35c5-9c1d-d2c562ee0834",
    "name" : "[USES 10 UNITS PER NAME] Infer up-to 100 US resident's likely race/ethnicity according to US Census taxonomy. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). - 401",
    "request" : {
      "urlPath" : "/api2/json/usRaceEthnicityBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "d36b1e72-7d7a-35c5-9c1d-d2c562ee0834",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "usRaceEthnicityBatch"
        }
      }
    },
    "insertionIndex" : 8
  }, {
    "id" : "be973434-ff76-381c-8932-21b717fa2b47",
    "name" : "[USES 10 UNITS PER NAME] Infer up-to 100 US resident's likely race/ethnicity according to US Census taxonomy. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). - 400",
    "request" : {
      "urlPath" : "/api2/json/usRaceEthnicityBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "be973434-ff76-381c-8932-21b717fa2b47",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "usRaceEthnicityBatch"
        }
      }
    },
    "insertionIndex" : 9
  }, {
    "id" : "439ef1ec-9b6b-3432-a5b8-1af5b0bdd277",
    "name" : "[USES 10 UNITS PER NAME] Infer up-to 100 US resident's likely race/ethnicity according to US Census taxonomy. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). (application/json)",
    "request" : {
      "urlPath" : "/api2/json/usRaceEthnicityBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"personalNames\" : [ {\n    \"firstName\" : \"Lawerence\",\n    \"lastName\" : \"Ortiz\",\n    \"raceEthnicityAlt\" : \"A\",\n    \"score\" : 16.382754397818722,\n    \"probabilityCalibrated\" : -0.8137186641593799,\n    \"raceEthnicitiesTop\" : [ \"b7eillqh3894pgzilfcn7a3teqrpwokcmgk8xf25dkn8b7obayonbjnjrmharg0o6id2m1xd0api8ehsab1def3iffffu3u07lnygbr5\", \"tip3eaadx3s2vs29kdw2z1w2ovzajnkvh6igyus1a2yvux04ulmloifnk42b3bcm3bh2hpev6ewicuqkkvxuawo5tp0l5ey0fw9hqgzidj7b2b10zl9z4jkk7d\", \"wqn3cqd6jlt44b56twh33djyfs3hdrbog7o5m7tmqw\", \"7a5odc45jzpyutaj4cl4sc909oszb92vma2tj0oql2n8x6gs7y3xq13eitye4iuxaz3g\", \"c9jb9pv18qoi1vili2vqsz383e2sgj40algwureiksb2fuglddg8x3vtecgh9s5hixy20nolrzh9sjm00o159fof266zq6hzpy6brj2a28pz331741we5qkpdj1q4kkjzg7a818bhn4cc8llxdnjw84011ceaz6t4\", \"lvh4t6tnba7leeux8tjhvvohnpr3466uwd9nf6jwfgnmvh3q0urrcb5j379abx5ez1qto6t9xacup9l47cei2t0qvnrolbarzmgpgvqo4dv97ybelw0ptxsn6u\", \"1sgypds17c7\", \"mn54z0f787vc2q4nhhqh18fmspa32h0fuvlmif47643q2tmjmrhm4095elwo1pbaid27z8dm94ulh8hzu5900gm5z1xk6e9tdwinq3f4xykz0pzc7fpzoca3bfeeo9qdlpbujl6au0dyryq\" ],\n    \"probabilityAltCalibrated\" : 0.8728029387631313,\n    \"id\" : \"4551\",\n    \"raceEthnicity\" : \"PI\",\n    \"script\" : \"2a9r2c72cmhtrz2ny45z9od00zcwik0zw2pfae6uhzik8rfgdat24q5j1y21fvqo98vy5xsc1surlh4vg9u6riv0cpqid5nm78gzykqiro71l49nnsgialexnv01crmn3e4b1s4a07v2xe3mpj7imb7cz14qsc881jfpa41ygtsnv4m34msb2j26w8ec\"\n  }, {\n    \"firstName\" : \"Otha\",\n    \"lastName\" : \"Littel\",\n    \"raceEthnicityAlt\" : \"PI\",\n    \"score\" : 94.59950093680384,\n    \"probabilityCalibrated\" : -0.20866685513667127,\n    \"raceEthnicitiesTop\" : [ \"mrxb3e8vm1x334d0coer0lsubduoxba\", \"g6trrmp97j3s6vr182vmmlhi4npj1ndkc9ejws5k8x8cut44zi46g8c3bcs8szv6zs4oxzsj796ee91586gxwgwautmvess7boylcr2b3rm9er2gk026zi5owuguhtmkfatntlz4gs3h94qdh5v9453w1m15una1v80\", \"4lnn21rxz7mwmar1gvsjgyyksjxvwjnwdccbm4qsya2x09nvs6ed3m8ut61ebx5dljwdubyizt6cl7ej2u940mg0ec2a0bu62yv5gr01p2qdie7rbl02508mfxw2bksljp8aqsnr115q0mq9qbhngwjszllvf9dg9ps1i2v2qo78ttgfculsf09q\", \"3tco\", \"mdh555bw7mpsf5y821moh4ti620frzjjbjupk49mm7c5i73g3b3xm06gkclm6mxfsysmgu61v244698y2tvr\", \"xq50t3ozqt52aiqp3c0qg3o6m0xe3ilm2bu9qp3vcq72wtr7kq321ubel1odalve4gvt46uv8kljotpjorjzu2xpriboxy3ffak3ghn5y4tv7smloqq0qy5bux1us5o8b8ak17c4mlyjgfk2qcz257040tu9o5dtsq3kw5ygl8hq82\" ],\n    \"probabilityAltCalibrated\" : -0.661074370744839,\n    \"id\" : \"v2g2\",\n    \"raceEthnicity\" : \"B_NL\",\n    \"script\" : \"vc91ap38my5yfqcc9zhuzqydfgk\"\n  }, {\n    \"firstName\" : \"Lien\",\n    \"lastName\" : \"Auer\",\n    \"raceEthnicityAlt\" : \"B_NL\",\n    \"score\" : 34.132040870215704,\n    \"probabilityCalibrated\" : 0.8487087765253478,\n    \"raceEthnicitiesTop\" : [ \"pgtvhr2ukpi9gixh5dzd5lsw1astnc1kvsksmmg2hvjo2tf8709fwg4e4dwwnf36e4ugw\" ],\n    \"probabilityAltCalibrated\" : 0.24589846632578616,\n    \"id\" : \"906s\",\n    \"raceEthnicity\" : \"PI\",\n    \"script\" : \"msg4opb\"\n  }, {\n    \"firstName\" : \"Steven\",\n    \"lastName\" : \"Hand\",\n    \"raceEthnicityAlt\" : \"W_NL\",\n    \"score\" : 68.91155525822701,\n    \"probabilityCalibrated\" : -0.4467223955398798,\n    \"raceEthnicitiesTop\" : [ \"rkw91wd4o4x28aklwrzghqnfvcpxcleyaulnh7aw2dwgfqn8iwu6ibvol69uke5t9fy2rkj35aut4lu0nvar1xprmzn8foe30kfvobjjw0xl6a2da6kdemlxl\", \"9xpbim53yrp1udhws2ddrug1q0lu1zv897gtwo16tcwi22vqrvpvqabfmh5z1y6ugsy0d6sm72xdfwcieynsvwyubpoc4gzdoh58fshv493mtrlttb7wvw3w5byajpm5m2s1m3xfoti9tf2eol2fp28p85vn5ai53fnfp2s3v\" ],\n    \"probabilityAltCalibrated\" : 0.31737228332731426,\n    \"id\" : \"1f3q\",\n    \"raceEthnicity\" : \"AI_AN\",\n    \"script\" : \"b4o8nahnzuflvauurv67prgg55u9l4m8tx0f19kte8ra3t7wcu1equcgve89lewiivnji2980m1uofb0ijkx063bejra79vkd8b5qqg8hujd8cahspfc7i3djygxnq89fpt61g\"\n  }, {\n    \"firstName\" : \"Maureen\",\n    \"lastName\" : \"Purdy\",\n    \"raceEthnicityAlt\" : \"AI_AN\",\n    \"score\" : 91.85056261946934,\n    \"probabilityCalibrated\" : 0.3039856905054119,\n    \"raceEthnicitiesTop\" : [ \"vtnuburcm3274\", \"ls2bprtpsr5s6u0p3\", \"ann5o9kncimpjwud6hn8nivvtuzn3r116a5awmgmunsw3yg230ovudakdmh7fqrbeuuso0wqxzrefy4t2iw6be9njqfgpouosoxo0pdyghg3dbmppom9uxupwbk2athgmrzrfvwenqzb3pmfmueszai9vddxedw8bgvfapfnbivtx4xyksdq\", \"kqn1uptdu1a9vh4u3wmrc3d46mwg7lxk2yn37u1ys8hlinzx7ll94h9gfihlbsypkgvzjmdh6v9cgt6a0qq3wgcsfr1m0y0wydywktqbgtq1xc17nr5xtkh0pnooi63cvc278\", \"dbk\", \"nliapzves9awrrc77tcn92i3vi2e2fsrop1b27vyoyticwm1511r\", \"8duvv32yasb333gtussbb7rnypuyesgct\", \"mb0y6r2dx9evex86qsagvxpx8qsyxmfwuzvzo0t70lcoxkl6s0aznhnm829y8bgnhb1m8ntinapcvkchuuuaccnm4pce6w1rtgxivbrocozylr0vpm4cntjqjkknmx38t9wrxv98fgkm7n7w7p2qmp1qqyj0nlte2ema389mn54l5h\" ],\n    \"probabilityAltCalibrated\" : -0.5235864546214213,\n    \"id\" : \"kdvm\",\n    \"raceEthnicity\" : \"PI\",\n    \"script\" : \"hbcfpti85rw3yx0grelxzv3g41fzfrzf42wpbu\"\n  }, {\n    \"firstName\" : \"Antony\",\n    \"lastName\" : \"McGlynn\",\n    \"raceEthnicityAlt\" : \"PI\",\n    \"score\" : 68.94933247566492,\n    \"probabilityCalibrated\" : -0.789209359318584,\n    \"raceEthnicitiesTop\" : [ \"2lqvmgknj324bu1pnbxusurork9xx77t4gd0w0s2yxvvnxgo05nr2v3a16rbfnpwzavqzz293bc2b3p1d7zed5nue54kri3fe2gcgy1getdm0qd7h7n0utbusm3xx2i2z51ih420nmvg96k3vf1nkyijlx0gq19vc7tgeplgdc8ay1t40ojwwwdbymnflu\", \"mbfgigu8o2kxbn3obm1nv7yj4crsc8y0y5uuzzqmntm\", \"949foxfp71h1n40jo4k37mjf6pzng20cxeot6lrglw3ua697z97lfghjjsq93o07rasc55x9isdzxddah8lsgbrb5nqqvx4fviax75khib81ghf4jnj2tstnovai5\", \"dn8kilm16ksjvgxgrdql7icm1y62b6szvpc6\", \"66k73ia06yb0yz4ng5xdbtxjbcgnziyvzt0y10vs82q48xjl6jakfsde7w4yfoszbhcn0mnbn0x77rmytflp9sr1ioani4\", \"i5ceuq9cpxygkqj7\", \"m3tmn8aex10wyzs3js0z1rffs09901foe2l3af52fl48st40q9sc3ol3ptxuxaegc3e8obqkowecxc7kof4ipzq0v2uabnyhcuxssqdokp7wdn8qz7mm8rb0in0srey7uh1975tjnca1dg9o9zojsi0xf1tt41geqi2cghf3l93zphkt0iqrkj464739n\", \"2t1jfci19vkat8s5j92rzvk1vrd91x0p3kqoegon0m6o0t6p5q9zqe5fp076qusyzuj06mid79iek1sj4m\" ],\n    \"probabilityAltCalibrated\" : 0.2314112628193108,\n    \"id\" : \"06zt\",\n    \"raceEthnicity\" : \"W_NL\",\n    \"script\" : \"utdu39ubk8rxnru55cg2xo9mm2zb5bqzdohii1mr6og6b7a1vf199z6of16xhon5ay3tc8212o9f9fax7tq646lfcrizbymzbbho7l4ddhl2qxyk\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "439ef1ec-9b6b-3432-a5b8-1af5b0bdd277",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "usRaceEthnicityBatch",
          "schema" : {
            "description" : "Represents the output of inferring the LIKELY US 'race/ethnicity' from a personal name, given US country of residence and (optionally) a ZIP5 code.",
            "properties" : {
              "personalNames" : {
                "description" : "Classified US 'race'/ethnicized names",
                "items" : {
                  "$ref" : "#/components/schemas/FirstLastNameUSRaceEthnicityOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchFirstLastNameUSRaceEthnicityOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 10
  }, {
    "id" : "9ac9d7a2-663d-3da9-8107-10f752cb1b4c",
    "name" : "[USES 10 UNITS PER NAME] Infer a US resident's likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). - 403",
    "request" : {
      "urlPath" : "/api2/json/usRaceEthnicity/Patrice/Goldner",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "9ac9d7a2-663d-3da9-8107-10f752cb1b4c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "usRaceEthnicity"
        }
      }
    },
    "insertionIndex" : 11
  }, {
    "id" : "f38858bd-33ad-3e98-9c8b-8598c0541102",
    "name" : "[USES 10 UNITS PER NAME] Infer a US resident's likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). - 401",
    "request" : {
      "urlPath" : "/api2/json/usRaceEthnicity/Gemma/Miller",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "f38858bd-33ad-3e98-9c8b-8598c0541102",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "usRaceEthnicity"
        }
      }
    },
    "insertionIndex" : 12
  }, {
    "id" : "b4457fc4-d696-3f17-90f3-ce8be3fd58f2",
    "name" : "[USES 10 UNITS PER NAME] Infer a US resident's likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander). (application/json)",
    "request" : {
      "urlPath" : "/api2/json/usRaceEthnicity/Ervin/Hermiston",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"firstName\" : \"Niki\",\n  \"lastName\" : \"Berge\",\n  \"raceEthnicityAlt\" : \"B_NL\",\n  \"score\" : 87.86175754403007,\n  \"probabilityCalibrated\" : -0.4149802708341961,\n  \"raceEthnicitiesTop\" : [ \"r8fc27pxvszys5ks119bxjo7toqztz375e2s7qduj2a541ztkewhjiz469qf7l5qqk7h34zb3qkcodqkodk3ioqbh5vhzc95y9i5mlblaj15pkzgd6b2a08p9j18dwl39zrkg06g8sl29mcm\", \"in3btm1vzwrzzna60kqo9knpr2cd79gcokx5uzeub4anggvsotu5g\", \"nq2n04200lkek3qi9zfcc0wqjqck450t3ixw4fzpz\", \"htc2\", \"nnqjxfrjbzxjld53y85z6qhxnmwfhm0cj37msiz1nbwhbxtu4omxv71eg6p0e5n6wsg08n8651ki2opsdf07acq4tvl2ftsuu\", \"40tf39bbp7li5j42lp2kpbebse18kygx1zuf0rndlcruw3sn1j67flhvnk7esxluhtrqb27hmkpvjeaemalf\" ],\n  \"probabilityAltCalibrated\" : 0.665767453344773,\n  \"id\" : \"2upd\",\n  \"raceEthnicity\" : \"PI\",\n  \"script\" : \"3tiapnfxnnu6r5qh1cdywejazg7hd8ns2gne\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b4457fc4-d696-3f17-90f3-ce8be3fd58f2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "usRaceEthnicity",
          "schema" : {
            "description" : "Represents the output of inferring the LIKELY US 'race/ethnicity' from a personal name, given US country of residence and (optionally) a ZIP5 code.",
            "properties" : {
              "firstName" : {
                "description" : "The first name (also known as given name)",
                "type" : "string"
              },
              "id" : {
                "type" : "string"
              },
              "lastName" : {
                "description" : "The last name (also known as family name, or surname)",
                "type" : "string"
              },
              "probabilityAltCalibrated" : {
                "description" : "The calibrated probability for raceEthnicity OR raceEthnicityAlt to have been guessed correctly. -1 = still calibrating. ",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "probabilityCalibrated" : {
                "description" : "The calibrated probability for raceEthnicity to have been guessed correctly. -1 = still calibrating. ",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "raceEthnicitiesTop" : {
                "description" : "List 'race'/ethnicities",
                "items" : {
                  "description" : "List 'race'/ethnicities",
                  "type" : "string"
                },
                "type" : "array"
              },
              "raceEthnicity" : {
                "description" : "Most likely US 'race'/ethnicity",
                "enum" : [ "W_NL", "HL", "A", "B_NL", "AI_AN", "PI" ],
                "type" : "string",
                "xml" : {
                  "attribute" : true
                }
              },
              "raceEthnicityAlt" : {
                "description" : "Second most likely US 'race'/ethnicity",
                "enum" : [ "W_NL", "HL", "A", "B_NL", "AI_AN", "PI" ],
                "type" : "string",
                "xml" : {
                  "attribute" : true
                }
              },
              "score" : {
                "description" : "Higher score is better, but score is not normalized. Use calibratedProbability if available. ",
                "format" : "double",
                "maximum" : 100,
                "minimum" : 0,
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "FirstLastNameUSRaceEthnicityOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 13
  }, {
    "id" : "1a13a236-734b-3582-83e5-2bc518674c74",
    "name" : "Print the taxonomy classes valid for the given classifier. - 401",
    "request" : {
      "urlPath" : "/api2/json/taxonomyClasses/Kenton+Torphy",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "1a13a236-734b-3582-83e5-2bc518674c74",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "taxonomyClasses"
        }
      }
    },
    "insertionIndex" : 14
  }, {
    "id" : "cf41e850-64fa-3d3e-8a39-c6a470d64b91",
    "name" : "Print the taxonomy classes valid for the given classifier. (application/json)",
    "request" : {
      "urlPath" : "/api2/json/taxonomyClasses/Laci+Carter",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"taxonomyClasses\" : [ \"xow7o3by87kif639b36pa969rknig5vhki3gjkpm9fa568vfpxsh5txlpytabhl22elc69ubrg8c37gs9ize5fdc8gcsygucw2ir5d7qhkuj5ixwmueon37gnqh5vhoaen1pstfrgu82ve72dq6ncvefn85o4s1dv9bev8ud0p957mhv1bjk223ibqh\", \"jhfiu2prcpvpdwv7g9zyyiw915v1my6uxf4lqzj3m67tdx8tahss1rzubn0m1aptl74udwokq7zcrrplcmnuw2rr3nswpp24yx6l6e566v3uy0fnuezo8clvngd86zmyxpc39d9d8hrs3m2n0z3ufg4tdmxcdykt6\", \"20f07qn7pz7\", \"13r54dgkfjvw9mve7ya2vkh28psnlawph58js4qxytjck6i886b89memoewprsetk4quv902oog9brhb2l9tph2sl0bjnkbbiwe\" ],\n  \"classifyingScripts\" : [ \"xjmdc\", \"odhhbt2yc40z4tmkb26956dzqyhdijbdr7ezk7gu2lyti6yiahjzfood173e5r663b13rjemfrxu4egkdhssdifg8yhjy7lm1zs7pj2mmku9sc1j8trhv7ghwvihfow59to906flr\", \"egk484wuijnh1lsz5m9wlr0ldltqrk79cka0u33ga709me6rl7ryaeiec931bj9z57e93v9euej6z0w8j0qrdwchel9deatzoo16g0t2f\", \"u5r3lba4jxj3k2crv4v7dn7bxo0nt258kiz8v5odb4rigo4lkschw8mwsoq5feedxp3bkq2e6x8jlu9x63pm5r1zhcb3g0cp1p40502cqtbrvypya1n3fwy0pk8yfy6897mui22magjqlb\", \"b6e0h11ly0w05aprwr8y8ax4y98hd6tyxuhvvuthbd60jc1utlfq4ca10507oqlo6wxle93d7ppkf7dr641zjy75zaff74zgk8iuq7clylq1e9p5zri\" ],\n  \"classifierName\" : \"Joi Langosh DDS\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "cf41e850-64fa-3d3e-8a39-c6a470d64b91",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "taxonomyClasses",
          "schema" : {
            "properties" : {
              "classifierName" : {
                "description" : "Name of the classifier as per apiStatus (corresponds also to the name of the service in apiServices)",
                "type" : "string"
              },
              "classifyingScripts" : {
                "description" : "The scripts / alphabets this classifiers classifies to",
                "items" : {
                  "description" : "The scripts / alphabets this classifiers classifies to",
                  "type" : "string"
                },
                "type" : "array"
              },
              "taxonomyClasses" : {
                "description" : "The taxonomy classes this classifier classifies to",
                "items" : {
                  "description" : "The taxonomy classes this classifier classifies to",
                  "type" : "string"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "APIClassifierTaxonomyOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 15
  }, {
    "id" : "ae7003ca-3e59-3c55-a0b0-8f4b9ae9d92b",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names. - 403",
    "request" : {
      "urlPath" : "/api2/json/subclassificationIndianBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "ae7003ca-3e59-3c55-a0b0-8f4b9ae9d92b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "subclassificationIndianBatch"
        }
      }
    },
    "insertionIndex" : 16
  }, {
    "id" : "591d8132-a722-38c6-9d8b-db614f70536a",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names. - 401",
    "request" : {
      "urlPath" : "/api2/json/subclassificationIndianBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "591d8132-a722-38c6-9d8b-db614f70536a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "subclassificationIndianBatch"
        }
      }
    },
    "insertionIndex" : 17
  }, {
    "id" : "d2f8133e-f646-3f12-a380-a3d2c7f10bae",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names. - 400",
    "request" : {
      "urlPath" : "/api2/json/subclassificationIndianBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "d2f8133e-f646-3f12-a380-a3d2c7f10bae",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "subclassificationIndianBatch"
        }
      }
    },
    "insertionIndex" : 18
  }, {
    "id" : "70d5cf95-3eab-3416-8fcc-65185b412af3",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on a list of up to 100 names. (application/json)",
    "request" : {
      "urlPath" : "/api2/json/subclassificationIndianBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"personalNames\" : [ {\n    \"firstName\" : \"Ruben\",\n    \"lastName\" : \"Champlin\",\n    \"score\" : 60.56535465987621,\n    \"probabilityCalibrated\" : -0.6708718351462539,\n    \"subclassificationTop\" : [ \"8ux1cf83t9yxojtlsmzsrsef5qqc87gidlvwrt7h4b9ae021l157k5k0ei32fxvwc8y66ioroywbzw1zjivlq6md5ycyv4oy94byolkierpa088mig04dogr9k2balikpzmkd6ei58l1i3m709lzp2a9bdldvj\", \"55lg\", \"kxyqcv7zexlks1fr9ae62f5bzy3ewuapwldocrjnpcnhk8h6rx7e9txpcfzz3dgumokqy08tmjr4w5xm2hu40j55exfljhzm6m166brw1ygdmgb3vyd6akrz0yqal9mg37uz4jiyr8jw\", \"1s9fnbkcfuyqxa50ypg7mienv9n4mfewjy2bohp8z41wl3a4ghgbm8j5s\", \"8cu4ufyaw1kdgn70702015nqxw1a7rbeeiuz2fqxibkfu26h4tw6mcv6pad4ktalfnm0v6nj9ld03swa3nfz\", \"btm4ht7oq754w7fm0x56gmo5n6ue4o5b9kxlsiqtolavrapdbecqoz5h58ukvozuf42tu9iyr6zya4pt1n32kt5f6lbluea4onozufyajy6dfyjic\" ],\n    \"probabilityAltCalibrated\" : 0.38645479835181895,\n    \"countryIso2\" : \"dmyolezi2zwqsf4w3y2cwo7h4jq7je211g42d8tc2jvmrdgw2l56ljq6lcxzdcxnvt0l20tsp1283ladxg8r0xgqwt5vu3cllvrpx6jt02hjakztx6crr015seofrwj886xlsfinqygc7eusdst5wryrqt8j\",\n    \"id\" : \"f98h\",\n    \"script\" : \"6kp68ejtuif3hdv6ap96zypscfps4691owza2mguuotp2o1jp8c3z2\",\n    \"subClassification\" : \"tjoalu7n840alg9c4lds3sgjoxc7hse2qo796w3it6fw75n2y7fvb97x6vijzbg554xki1i8i9rctfmsk7q8guw06gso6sez32a99giu\",\n    \"subClassificationAlt\" : \"zbifp06rfm1y2fbn6ocql2\"\n  }, {\n    \"firstName\" : \"Dana\",\n    \"lastName\" : \"Ferry\",\n    \"score\" : 25.165816064362133,\n    \"probabilityCalibrated\" : -0.4423736320904712,\n    \"subclassificationTop\" : [ \"axv7wnmajih06r\", \"w7ganuopkvznikb1nqxf0in3jbnb4bwhyhscx1xl9yaw35blghtg0d0ps2ik36g9rvhbkvfdrizixqpmfj5y28cn0k28xyijx98bbwz7zfyeceya86n76jde7q5kf4zy\", \"rbds4l9\", \"6aiws9ru7eotlutjfq5jg2y401hq13xd2nz6sk0ceg6o9d1md0bwknkkdmcn23vgboioqxbsumns4jys608o5d35ifor0sfu5oza95efu2gtise5vef1hzv7w\", \"twj236vw8tp87uniah7n8ntu5t0vm0oeki7px1jiuf0o5zzp2aiqdd9vsf6x7f1222edqfffzbnaysdkmln\", \"1mx2wgdew3da66glax8byr1gadroyh2qcxsv4wq2wm1bph3tdomhlcpd7pqpgj99bk6n2vyhrh7s4jzon\", \"frtd1o0t46aahc65cvqjnpm96ot1zv20stfh4iwkvyuke9a0nxm4xnr04xad5lxgik9plmjoy9002p64gysozm19mi6pt82vf38di311753t6fxnnt8l6z02z75omfdhh8bpwyhad4znm05z4wba2k81j04npva8nyjummtw0lhj9gwxbu00m18bqtm46b5ahpzriw\", \"ppz1kw9ri48u58vm92cqzdelh3bicfrc34cgeglxjch352kgrb1c4qkb0jt58dvdgxmz27yt2ashx40ts8hsttql5k72pd3sf7x1di6rd7tzknaux8ta7po47t4z7o9zreirr173vitmnj3eeoolhw2e2vbxo7n\" ],\n    \"probabilityAltCalibrated\" : 0.9231060359872909,\n    \"countryIso2\" : \"j5n78v1cwbjj45m0py792sdzo5jr6ggazwlf\",\n    \"id\" : \"l3ou\",\n    \"script\" : \"iy9q5p8872yakqweg8bp7ecv6qmaxmideb8wbf0982vbsrtbqxbkr5yrrnfgy46ueufprzoz6ptwrf\",\n    \"subClassification\" : \"86nzvi2fso2761r54lmozeyi2krusa6svsgcc0iq0caleipv6cwdabct0qxc5rcb1lvlzummwxocoo3z2cdc2eoj02ddjjs9fpkvc3rz91l1urb\",\n    \"subClassificationAlt\" : \"rh44v5k1f5vcjfud5r6w3sbedyi3l9kerfpzjg2bqnfnamsclfzn5t8i1y5lsi5ooyvi6kjrpfhfhr7ajpfgvqlu56brs0b2lad1wm2rqkpgsbylv7pfd640cuthazbgui8hpxlwwki7ehcme0p5plwx22a2ait57cjxwaiev1si06m9yocct1o97uadjyoisr6\"\n  }, {\n    \"firstName\" : \"Lesley\",\n    \"lastName\" : \"Hamill\",\n    \"score\" : 47.037901089399426,\n    \"probabilityCalibrated\" : -0.6316478328314701,\n    \"subclassificationTop\" : [ \"cv9gsy0i7qcd48v\", \"79r7qjo9lv49twmnncz77w9dg9pdb2earit2cxqg1rh5s5ufg0moqkqbxnbiortd67iu9x2n8zo4r8s5qjdhu9n4bslsji1j4not1fdmflue7gyttjom7qhvcv8wcnue88wqokyy14oombjboxmrdoelxec0f1orn02tak5zr0vwml4ajlshomoil4xi04\" ],\n    \"probabilityAltCalibrated\" : -0.6009128951496352,\n    \"countryIso2\" : \"x0rbl1he64nqb3f2wne46fix9ct8x7v58t80b0zxosi9x9cnwpwg2uw8l1npyanbtc77lpd6w7c5fbmai3dy0u0bqb1aibheuln3jhjgyigw6gll80h9bfp\",\n    \"id\" : \"776v\",\n    \"script\" : \"tw2w5q1imuk9qjni9zzcgjg9as1ihv9cxmdve1dpjf1gw8eq041ec3s49l3hxmb0l23xa7rpu3aliu7\",\n    \"subClassification\" : \"2rin47ocml2onp6jg5yco1drjcpa5ou2r8cepv6wzlyoni6ft3ugvl8\",\n    \"subClassificationAlt\" : \"uw062we6151az6j4jlmtme5jmte9\"\n  }, {\n    \"firstName\" : \"Pauline\",\n    \"lastName\" : \"Rowe\",\n    \"score\" : 82.67929989275439,\n    \"probabilityCalibrated\" : -0.19480304036135143,\n    \"subclassificationTop\" : [ \"r2k2ijdujcnn7pl5h9euws9r19lujr4myzg7z7yee5v1a3o8yn57jdi8182hmieb9n7ucl45zryq6jlvd3kcigi13a99n9khtogv0nn2dq62hd59ietdbuh6dompuj6cpxwsm6bcgrpwplmeimm94rns\", \"8iu0ei3igqaiadbwt3t3plc21dvmk1sjot12v2fk7izhju6isjlsy0kbvxsj6udju0j86xd8xmfl6hh0qpp7vsyoxn4bdh00diz1ebfz1b7554g9rwqsoo9hwkxu\", \"64zlnca0zf8fttmjea3kwnqvu8qgbt5u1i13u4kj1eo0vhmbakvww7kxtq052qq7aexlzdngq0tm95d7xq3okh6jh5r8nfrq5muyn1tveot0eauudvmrow092wpmluumuhovdlsllbnnidqowj0fhalron8r1x9npsgre91s\", \"jei9jt1xcvla42b6c5vnimci2nbbbnrrqd66agzca1wzsi2wm4bb9jkg2a5utqbklx5hsgqihu6a0c3drttdb73n6xlnsgni8pup9g2eivcw0r31igu43xxpxae89mn941ljxanw8ya9zkdsou924if7jbd90bnlwdoa0weckyzwbj8esucj2y3ilndfe9ri\", \"2jgor4eho1uns7gk39oowg4txscnbjxmqrweiqy1igpfdiivzqzmmghjes6ijh4maiedo4t6qlrieg4onp94o02vwahm6dl48mm3s8tbqewdbhly\", \"r60c6lsvfxzvj6ft8uvpy266w3413siqpkn95kuk2e52f1jxblrl7ndkmizz829nydlqxki19g4x6yqls24j8boh7szwt7s8f7yanh51pvvcn0f3tlme4xrfu1iz371nu4jtm6da8j3w\" ],\n    \"probabilityAltCalibrated\" : 0.4158474884523271,\n    \"countryIso2\" : \"v38c51w07fxu9zeoxdh1le9zahybb7h1449u1y0s7tc1xwdg9gn6pmqhx8yjc5mq7xprfir1q0ycskc08oas2vnr9kkntoglnyfc63ph7og5t4fjeeh12nqe8cn5cp1td6om4n14y0pya2n5v6l8dfihke3i7q\",\n    \"id\" : \"9bg3\",\n    \"script\" : \"v0peeosk54ucpntaoqayfntd6fyux33x8u0ab5ljzo29gl9a3zqdpirh3donihlnesfw7ytln6ngjsa1uoseo6b75zdhk9apjol21aenrtloibg9ubr233hi8tgik0as6ryxm1mp7e774a0huwwqf9pq4riri092csk2qkntxld4y94iadecwwz0uou\",\n    \"subClassification\" : \"anv4j2rnr86f4vatb8urokxy2nfudqoi0gyir8ijy3ukopq8enddu7j1975gq99cmo\",\n    \"subClassificationAlt\" : \"7e86ohyfpzbrri0um45jievzdxse6uerg7xivoxsd1za9p4q7w9ywe2trnqpxfkz2rkm6\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "70d5cf95-3eab-3416-8fcc-65185b412af3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "subclassificationIndianBatch",
          "schema" : {
            "description" : "Represents the output of inferring the LIKELY country subclassification (regional names).",
            "properties" : {
              "personalNames" : {
                "description" : "Classified names at sub country level (region or state)",
                "items" : {
                  "$ref" : "#/components/schemas/FirstLastNameGeoSubclassificationOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchFirstLastNameGeoSubclassificationOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 19
  }, {
    "id" : "d5533491-e5b0-3afc-be7e-feb18afc9e4d",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name. - 403",
    "request" : {
      "urlPath" : "/api2/json/subclassificationIndian/Boris/Fritsch",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "d5533491-e5b0-3afc-be7e-feb18afc9e4d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "subclassificationIndian"
        }
      }
    },
    "insertionIndex" : 20
  }, {
    "id" : "2b8b4400-a090-39b7-9eb2-4e8c6961b08e",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name. - 401",
    "request" : {
      "urlPath" : "/api2/json/subclassificationIndian/Ellis/Senger",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "2b8b4400-a090-39b7-9eb2-4e8c6961b08e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "subclassificationIndian"
        }
      }
    },
    "insertionIndex" : 21
  }, {
    "id" : "d104fd2f-26b9-3bfd-87c8-6f7897576ded",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely Indian state of Union territory according to ISO 3166-2:IN based on the name. (application/json)",
    "request" : {
      "urlPath" : "/api2/json/subclassificationIndian/Nicholle/Weissnat",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"firstName\" : \"Reid\",\n  \"lastName\" : \"Smith\",\n  \"score\" : 31.80995683251606,\n  \"probabilityCalibrated\" : -0.6766415495342113,\n  \"subclassificationTop\" : [ \"e4pebxljmi5w8isrialh6q8br9ai867b6n2ufu028vbv80uk7hes1lno79ke0wmxxf45bkgevu69comvyztriutbhxe3iy8aglulriyei1fuihdbdurm9h34qvnoff7mawpfyv4upyuxcjhpan0cy7fp144r7riqjh8vhp47\", \"6vi6nw9a6fsb1id14hcyu7i3ymhwbqixhokls\", \"n79vijq2yd6wfd2pvfwz2jg6ifoql4mi94cuu2ygn9h1m3vm6v0eom0eivakxu1jxduvba71257hjenb0h5mpyjcysuvcitlfg\", \"943402tah8llzj95gy547yvjbiu2ecft3r5laso5fowxv48x3cdbxulotyyd4r4o9l9fyjqgqljslur0wflwj75z14obrt\", \"ifaf6d3x42iw5ytaxzv3gt5wse\" ],\n  \"probabilityAltCalibrated\" : -0.47326084496305487,\n  \"countryIso2\" : \"nsm7zfdbwvjqiit1nxrri0twpbm6b0gf4a56idn2nt4s56glitfn4o2bsbyto3aovxrcakpospw62k0vpjrhlbybkzcz9ta0b0fji0owcifd0rii8dr1xl8i96i\",\n  \"id\" : \"8030\",\n  \"script\" : \"d1sup8pr0r0nfzsrygxocygz2bnfz3uirfda28k1tz27se94eydfy4jtbfyjs4rei6q93hh2nhs06vu5q73efar7ow014rs0vyn7g047t5ej1g5t9rjz58v6q50wjyv9pbvn5h564wtmtvs6nb07t9qbhef\",\n  \"subClassification\" : \"ntx87u5fvm8m6oe87ha1leg284cdjcweticuel9fjyjo2bf3df9oy01k0c1k5ozcn2ft63jffj5r3yz9c3faaydbqqldu2l\",\n  \"subClassificationAlt\" : \"aow4kv\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d104fd2f-26b9-3bfd-87c8-6f7897576ded",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "subclassificationIndian",
          "schema" : {
            "description" : "Represents the geographic name origin at a country subclassification level (usually regional or state level).",
            "properties" : {
              "countryIso2" : {
                "description" : "The input country ISO2 code",
                "type" : "string",
                "xml" : {
                  "attribute" : true
                }
              },
              "firstName" : {
                "description" : "The first name (also known as given name)",
                "type" : "string"
              },
              "id" : {
                "type" : "string"
              },
              "lastName" : {
                "description" : "The last name (also known as family name, or surname)",
                "type" : "string"
              },
              "probabilityAltCalibrated" : {
                "description" : "The calibrated probability for subclassification OR subclassificationAlt to have been guessed correctly. -1 = still calibrating. ",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "probabilityCalibrated" : {
                "description" : "The calibrated probability for subclassification to have been guessed correctly. -1 = still calibrating. ",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "score" : {
                "description" : "Compatibility to NamSor_v1 Origin score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. ",
                "format" : "double",
                "maximum" : 100,
                "minimum" : 0,
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              },
              "subClassification" : {
                "description" : "Most likely subclassification ISO_3166-2 code",
                "type" : "string"
              },
              "subClassificationAlt" : {
                "description" : "Second best alternative : subclassification ISO_3166-2 code",
                "type" : "string"
              },
              "subclassificationTop" : {
                "description" : "List subclassification ISO_3166-2 codes (top 10)",
                "items" : {
                  "description" : "List subclassification ISO_3166-2 codes (top 10)",
                  "type" : "string"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "FirstLastNameGeoSubclassificationOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 22
  }, {
    "id" : "ff9ae7e2-cbff-32e6-a6c4-4b82813bb009",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code 'IN'). - 403",
    "request" : {
      "urlPath" : "/api2/json/subclassificationBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "ff9ae7e2-cbff-32e6-a6c4-4b82813bb009",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "subclassificationBatch"
        }
      }
    },
    "insertionIndex" : 23
  }, {
    "id" : "faaedf0b-4fb8-30c6-8629-561947deabf7",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code 'IN'). - 401",
    "request" : {
      "urlPath" : "/api2/json/subclassificationBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "faaedf0b-4fb8-30c6-8629-561947deabf7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "subclassificationBatch"
        }
      }
    },
    "insertionIndex" : 24
  }, {
    "id" : "46a8107d-6e46-358c-90fe-12eb965cf011",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code 'IN'). - 400",
    "request" : {
      "urlPath" : "/api2/json/subclassificationBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "46a8107d-6e46-358c-90fe-12eb965cf011",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "subclassificationBatch"
        }
      }
    },
    "insertionIndex" : 25
  }, {
    "id" : "f9be939a-8164-3f6f-ab35-7beba21de0d5",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code 'IN'). (application/json)",
    "request" : {
      "urlPath" : "/api2/json/subclassificationBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"personalNames\" : [ {\n    \"firstName\" : \"Harlan\",\n    \"lastName\" : \"Johns\",\n    \"score\" : 62.25398103241883,\n    \"probabilityCalibrated\" : -0.3932570688972161,\n    \"subclassificationTop\" : [ \"2kbtycqvakt4v9skwte4pfldvc06fv61n4fh48kn75y4di0juz2w1bakad5sdlm57ks2coe3kw058bqy8jsb6stp224dl5yo59n4njs54wew2kc\" ],\n    \"probabilityAltCalibrated\" : -0.22311898313029466,\n    \"countryIso2\" : \"0ln6bfykjo2lxq39mj2oohxjkxcbuh43pgqsh3dy5pi9fb11kuokyao30p01kmirtstocvtlt53oal8vjli86qalfq7rxi0z8a9x2ia80fyuqc63f7l00j3mkze2hlnnetuo82k3c8ur3si3h5ns7rrx05piojtewrfqamvbs88j0lgd36\",\n    \"id\" : \"597h\",\n    \"script\" : \"xpmtvw2lwk8lghxeh0\",\n    \"subClassification\" : \"pwp7mu1w9703d196ze62vddhp3oi0dcwgr9o7uvpebsuh07j3sfy3vy5gkokteaoxaznj7j9g58chcv891bpc7hdvgpzxz8edejkqk\",\n    \"subClassificationAlt\" : \"m006qaabjguf6erl108et9zbsr5cyb2vajlyzve7k6kxdajxwve9tcd6edmgns2a23dnf43pidhalr4sil5jalaohy9eminyeckzxr9td56xpec6mdgw0lfjz2l8nnjf7cxn7uxnianncr6847w528idw2zeel4dgdwac56v5ton41es14xeaylkssvdfm805fvpv2k1\"\n  }, {\n    \"firstName\" : \"TTTTy\",\n    \"lastName\" : \"Gerhold\",\n    \"score\" : 24.604043685997578,\n    \"probabilityCalibrated\" : -0.02354962850021436,\n    \"subclassificationTop\" : [ \"fqe91fuaes6jz74b9ylbp2u0fyzcwwshzxvoisbj3otia50tat7n4n6wz1lbr\", \"2yqe2izprkq57901i6469m9\", \"l0vt98eicqlkad4jdpqtipuo\", \"8xl\", \"56cogutwyo3wuzx5awb5s8d920m2h9fpq80fwg1a3rb4aal2dd64po1s40dw3hc6fcafoivn0lx9rw1v8yptdufktmhhftwceznfk94ztrnj4fx8xrtupvd5zcieu5911t6sfl5b2op4ttchfdoh07kzkp\", \"7c5aaauytbyxvgtpj02s1tfqlvh5v7tutep5i109gdle2sv08yy9rrtw4ay9pr6x\", \"qsyg3evjkgvso6yzugnspm6f550f8i5h4tpyqmzszfaycpf2raasmw35c9ol2mbrhuw0l0l48kot50fcn20ylzzsno0j0wpj7alrtk179ecmcuyfgxdqfazfg6kg9whxw3re93mwnh5cvcrdy9o1qaiorzcdkpklelmxah8c6a10siuv3w7y4b9t6nsg\" ],\n    \"probabilityAltCalibrated\" : -0.14739553837515684,\n    \"countryIso2\" : \"ayxawuxy3hn5ao2y79wy6zj3damfg911o4ge9xd9e7kaqdp9ddgvk48my2vpoc7kn\",\n    \"id\" : \"018r\",\n    \"script\" : \"4grkvxpgsyzdeepx3501ncccxnl1tgv5udc0va4mlifvr8v4bjs6dhnkipjwjgjv01wecizivac5k6ab4t32fgypaocg7pt7yb1qc47dy62hr0rc3w3fljxmxd8tnpfbbgmsq2vxhlh7e\",\n    \"subClassification\" : \"64gu57ifi4h4b5ert1mlz5zc4wze99zeru1sjzvt9c71ffd2uakm0t9d41fg4u4qte9xcvrteaaair\",\n    \"subClassificationAlt\" : \"78mb4aqfshkgrs7fqbagxwckux0og5gnv5ansb7wxv590jg4t124ib3x6e15uwsak125ztiulhnq07d2if7lwscaydzjqmvyonl613a679ougo73sah2ugblo4kayw9p9jvp0ykao\"\n  }, {\n    \"firstName\" : \"Elisabeth\",\n    \"lastName\" : \"Schaefer\",\n    \"score\" : 52.81880846658309,\n    \"probabilityCalibrated\" : -0.01134036218727541,\n    \"subclassificationTop\" : [ \"930fu8eb9yq9jhi0e41ys1uikrqho0bj1ptdbgls2cah69n9yhonruhlo1dcrfx90c70iyy3ug0ow40s1nje0j5gdj4gzvs2qjka8zmyq1uf33n9m220lt1xojpmllp76deay6n6hq2gmxufn4c233x4xjasy8z7hjuguc360ghl1ikacgfxb166vho4cpi\", \"3ue74xd6nw3aqxq4u3jcq2iqkbn7qbhkffy109wj36lklohgcjxm3hyzau90iai73afcbrl7br3owk88yfbahe6ntfowaxgdmw33lp\", \"19uds1vmxud0yh6yx87yeukc067i0db3tedez6tyn2zosp51oijrm2rf4imgfubfmqyvwy2\" ],\n    \"probabilityAltCalibrated\" : -0.17341582731888283,\n    \"countryIso2\" : \"qn01cwxcf7oyptqfkdhcmju7l71ck2nwf6s37v39r7biy3smzxqnateeqk8awj5x6kjt2hmrh2ay0yri29xhwcaoy2tfwn42t5m7zmj9gptki9q0b305zc1ceerntyjalkve9vuoqj938bb07lhr7qoaug8m9mnqjq4\",\n    \"id\" : \"ec2o\",\n    \"script\" : \"nbcg2qa2ywv1qwa1notxu2otui1dwah73ns8wab2mxfhf0vkjj6brhvkynij8007gyzigac8skrxoe0p7blu0vzdwyxpeyt2nfa2jzoqq2akkdi0eqch13t26ljmd0t9cirp4gce6466bppxhi9g7n0pxmmj1xr83b\",\n    \"subClassification\" : \"cloor4tihhka6rf2kmrx9o1dkyhow586ek2z4cuucf3dwet8l2l93aibj8cw4tbvfbdbuy9pgnnejtqyk\",\n    \"subClassificationAlt\" : \"2o1ub71n2dnj9fcltl9ailsk80t89l3g6dafkp9eez4kvsmo6jhfz\"\n  }, {\n    \"firstName\" : \"Yong\",\n    \"lastName\" : \"Gerhold\",\n    \"score\" : 20.75472718551311,\n    \"probabilityCalibrated\" : -0.2264839216624921,\n    \"subclassificationTop\" : [ \"simss00ktup\", \"1vf5ihi9tatsto91mi83kka2p735cwqi9hne9hxqqumfzhdtmdbss7swn28434pl2migemqmpmdl5wc1qx1xbvt3941y4kwbtnnk50\", \"3jetdj9wupku41rejxqhj69ewirepx82l\", \"4s9i9thcflk6lurgtfo4vu9sdife00nyp6dn7yegwt8yj15gmyp8et2l57hpmn4zbnaq82rmowqpev5rjt472fpxtlw4v9v\", \"ezfo3c9de1txqojkqtzroe0g7er9xcvq3xru6jjfwqr6qao1pbd71xryq09g3nkw0935fcnabyioei2xix1lzkbib5zfqqbyp18sjuj1srnoq6nalh7mq73\", \"5gnu86hu133lcsxx5rro0v5k9nfpsifdodxivvo0hyr92es\", \"grgxjkk0kce6kxm47p7up1e3\" ],\n    \"probabilityAltCalibrated\" : 0.5657975466163494,\n    \"countryIso2\" : \"wzwccde5cbbpvx4p\",\n    \"id\" : \"98ap\",\n    \"script\" : \"ffqi2uhoj6w7is7bu93on0pk4abnce175zpi8uoj7wdae13wypmrvfbox0jaiayavjtoo5uyu3bumuve8pk7hhq1dxee1m2cet2a0xnrij80apbko8ar8gqgqchx28g0xodmstfsvv6ny9frbvikhiswyqodu24q9iwpyxjhzvzmqxg995tq6\",\n    \"subClassification\" : \"pwbnnp31mzpdu4mxc36rgtqmrzfbpyn3utp9l1cclejk0pzejaipxhszlqpp26xc1ts5lajg4ahiqp7kna1sfppzx4z0mwc1jua4pyoliv1vth2ckklv1u3lrgm0nnl9r6o08\",\n    \"subClassificationAlt\" : \"8mgyymos\"\n  }, {\n    \"firstName\" : \"Lakiesha\",\n    \"lastName\" : \"West\",\n    \"score\" : 76.5140667205843,\n    \"probabilityCalibrated\" : -0.01713870595014022,\n    \"subclassificationTop\" : [ \"c9tg1nqc7zot4xw6v5ph1g8bjxbw0has\", \"zr6wy49a8wajqhcbaqaquohvcpe97aar9poumt26c60puupkruoco7dubpqg96h23gv917hbqebd06nnb2domi56kedp9m2tecyb7k0twsfhvs03ac434dbut20erjlk19lzn2l7wghfl9yauhxcbftcxz22j5qngzhumhmuhukyn07icp5fr8dysrfx0r8ufqh2\", \"udn9c83wx920ybxz5bsuzck257qw66ywcxbxh3wl6rlhfe0kjq61waukj1wsex4yy0wfct0drlo9c6usmae36d41cgit\", \"rm9v9qyyas29drt8ialqw6rm18w833ckhkqqrjkdbj1\", \"vs3t8kllemustvrf3js5gzfagrlaeygaz54ufqxh7v5aj28cvicixjkyn4kfwjispz8woa2h9l5jlpa2wclugpyukk5w3uiatekncy3kp5p1vdubpo01vgmglstx0491\", \"agljy2x57ukbpeocn7nqoq35zvklflxq0wqxn39usaxoeh7ak0kgor0apdwae41s1rcru8q4dv9ej9giq30wrxt72exyty8byyci3dnbrs36fmq4m74r2iful86ueem9ykd6hm0r1qwkxfdw7c442gjgby8erdjwli8m\", \"dzcxmtxaqr493fa0bkqbkv5isg4fdlz6tdwakje9nue1ahx9dk0b9xtnpaim4kk6r8xl0f727bmjbyh1ojiqc3j5x745w77bkg4i9r31rqb0mkx9h16eowivb8y5wy5mohbhnt73v6nkole4m9iiicz2yd5\", \"mdnnx98tyyjfhbifzf9h6tm4837sg73zb7s7ar8p19twpljkn\" ],\n    \"probabilityAltCalibrated\" : -0.494936181150051,\n    \"countryIso2\" : \"237db4wrg0guul1q\",\n    \"id\" : \"cv26\",\n    \"script\" : \"e4krih4nn13mttj5d1wl0bsmqb3vqgjgwltaak6a8lt8mhyvp2wyjyg3nm009ojnyq2zho7duuda8q5t34c13nrhw9kobkie9vsz38z8mj7fydg0r4m4wyqpo6csayj2or4iorbpotu8dkknjpzgi3fuxhwj8r2ddv8w9vqm830lj\",\n    \"subClassification\" : \"ew96ybw05lkr4i4iqo4x289opsaub424d7r01dzn9fqsjfe4uzez\",\n    \"subClassificationAlt\" : \"r4ndvcp86839z05eaetr91s9o8q7eaiiitadrxc70mr55qdpip5aa3wblp9um475xb43l1n5iua1t7b5dk9deav7t6dw81j7or4hlffj5p855baidmdqrhl4\"\n  }, {\n    \"firstName\" : \"Gina\",\n    \"lastName\" : \"Mitchell\",\n    \"score\" : 3.0618849428379447,\n    \"probabilityCalibrated\" : 0.7267341744511759,\n    \"subclassificationTop\" : [ \"bgnx8thbbsk2vsx2t9actlp0innvmums9pvxx0eje28gcwvmy7t5bye8s4b08e8a4cak833\" ],\n    \"probabilityAltCalibrated\" : 0.4099100501942199,\n    \"countryIso2\" : \"0p3oz45hdr62iuuyqpon\",\n    \"id\" : \"hv95\",\n    \"script\" : \"ztaatbq9p7grxnzfkb47iweeiolb27q66gv9s36zk7hkw1i67n1y4f30qh4ceo2t1mxgdrjaf35ni\",\n    \"subClassification\" : \"bj9bqrpoi752cktti3iauytf9i2u3g1bapl\",\n    \"subClassificationAlt\" : \"rotrk1k0vcfp33gsr45hugclaxih\"\n  }, {\n    \"firstName\" : \"Ambrose\",\n    \"lastName\" : \"Grady\",\n    \"score\" : 60.64800852328648,\n    \"probabilityCalibrated\" : -0.0014903879119547714,\n    \"subclassificationTop\" : [ \"gtu1l3cmmuv2fuw3z60jze12n25ppi8qerod9g1m4db8nxvu11al9bhfph6fmvc5\", \"c0frv0a64v10n8m8rp1g\", \"n3vcquvr958ie3gff781jzfzrl3595w2p0p9kvjlf9sbcyhr8fd3lbydrdxcn5amq9m9c8u7t6dlq75znen2wy9w9cya90h4nnykuu7d84iz\", \"du1bbn71pwbxh0fw3vxzzbyvqr1ewap7cxl0tuhwq6efegvuawlvw6ni0qno2thl70mdtegvvs7q6w8temta865gh4plojxf2uibzd8kg7b6coubshhwklyhscnmgwjts7fpzoni2plkx6ij394opxpt9r7u8bkcp01kw2mhowice46cwzfmpvyw1z3q5dlain\", \"cz0zndwzsiztz9htq5wa6weymz8z6cdzgnwsp8y86va99a0ygkd1qzxd6w5w5rryitpycq758oe0ynrsbb7qtgxezhdf3zwgiua3cm8b1wo5gv2ri7hw3xmhm8p26pvh9p5z4tvgq7\", \"ysb4zc9b7lp8cz01vzgg1f1ffb981n7zntangjpmd2kwru0r55wi8g4o82gscczivatpvf6tffo\", \"75xz7tngh4l5mjwa103fuj1xa9urwsksiuxjkjrpqy929a2tznxm4lqidfbel93p80yow2vnufmy5ux9eyhywyylc3h7x5bl97av4l55nq085raq60315wyz0bdxz8bomtock9z78wkq7emtkl0lgxssn06nkbnvag6fnce2dt2md\" ],\n    \"probabilityAltCalibrated\" : 0.45851295755756283,\n    \"countryIso2\" : \"57h6q4uhf83y3bayrvnx83p8dxplaidqwvsw88mc26ov7xekgqhsocouc6ihlmjpaqletnh1l33ungjr5r2qzvx6xhsc2x8pcxfx4i929dtntj9loszfuf46k\",\n    \"id\" : \"x56j\",\n    \"script\" : \"zhvkjqmbm4v60yrhmf0g\",\n    \"subClassification\" : \"cevokbnvcawc88mp658wiytfguxch5dgmhw0a9m6alj6cvipaj4jtq9hai2uon8z0946rdgoa2b8wp1cl2ua2ma8p9516dws5mcbgq4hlt3t1dsjbvqekaqgo9n1ohumy9sndtytyjgm00iaponjdpjx018\",\n    \"subClassificationAlt\" : \"y7re8hg3q8ghn9f23y94sl9xgb6ugfc4pfzq6h8b6fp9gxikd9ld1luvedqnas2gnttx2fesq5zx3xk3cbw4lqnzx4db3f27ohbw3440t7cxswvrjqeo3gmdxtbddz\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f9be939a-8164-3f6f-ab35-7beba21de0d5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "subclassificationBatch",
          "schema" : {
            "description" : "Represents the output of inferring the LIKELY country subclassification (regional names).",
            "properties" : {
              "personalNames" : {
                "description" : "Classified names at sub country level (region or state)",
                "items" : {
                  "$ref" : "#/components/schemas/FirstLastNameGeoSubclassificationOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchFirstLastNameGeoSubclassificationOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 26
  }, {
    "id" : "a7b75a6a-64b7-3ce3-ada6-0b51512cee07",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely origin of a name at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code 'IN'). - 403",
    "request" : {
      "urlPath" : "/api2/json/subclassification/wwal4htyoy910ee58swrmvo39i785xm5giemhav04xp9bx7g4bo/Tyson/Erdman",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "a7b75a6a-64b7-3ce3-ada6-0b51512cee07",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "subclassification"
        }
      }
    },
    "insertionIndex" : 27
  }, {
    "id" : "f89b383a-6ff2-3b39-8204-8e8a5e406c43",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely origin of a name at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code 'IN'). - 401",
    "request" : {
      "urlPath" : "/api2/json/subclassification/o61x8gfxcarlblrf7tnvs5rhi0ijfnl9yjwx382p1gw3iz7sarbxtfjiawm6rjzovsekwtcdekt3k65uqjsd7z79hod7rbqprp4arif0f1vagzi0zqb6cu72yrq2we6x36pjb794wyt2fhqvpaj0wvz18syby/Nathanael/Watsica",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "f89b383a-6ff2-3b39-8204-8e8a5e406c43",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "subclassification"
        }
      }
    },
    "insertionIndex" : 28
  }, {
    "id" : "3ace4440-a260-3a4c-bf5b-28cfd603c39d",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely origin of a name at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code 'IN'). (application/json)",
    "request" : {
      "urlPath" : "/api2/json/subclassification/u9m8mxj85jikg3u48qc4m/Rudolf/Kautzer",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"firstName\" : \"Evangelina\",\n  \"lastName\" : \"Weber\",\n  \"score\" : 98.80122123412836,\n  \"probabilityCalibrated\" : -0.129864551450954,\n  \"subclassificationTop\" : [ \"3456tg5t4ynigqev3ahyb6qr4vncghs27vnx0px0p65unsu91u2tv855w6xr5z72dtc2x2wjdpjh14u03aot7ddyl6poqxamo4stooueg3uwft3x1unk3pzeezritiata63eyjc3ddczgo0tfmbpn4el0mv95k15x6lueqx11hfcckyqcnkpwh3a7xd2ekf95\", \"o1zkvpioc5ncjun47uex2zawjd9kapjfolhqgp2q0tsckrvuyszk9ubsgwr1wdmc6v1qoo9vutrnh3ji4juuf9a5totb1yox5zmvwd8xrblwvuglhh6fmd2221zoht6r1ihq353x1spkd2znpol\" ],\n  \"probabilityAltCalibrated\" : -0.7224012891092457,\n  \"countryIso2\" : \"3706ovuwx433zd0oigauo5v7ce9kq08g2rzwy02j8zvzppybc8w2j7gn4ya4fy2sodcz906wni9aquimeeli02pb6sswwy4qszj1hvg0wd31ouc5c8fvrnssoxnaocjq635dluy3lslnc04nz8a3u9jy8rj6kqx4u3xzqsth13at1mtx\",\n  \"id\" : \"g1la\",\n  \"script\" : \"5hdvd8yufc5ozh7w0hiy8l52xomnwfvbp9gihrqlk70ebjmn5tyxuvk7lyvj3oukxuq\",\n  \"subClassification\" : \"anyfd4759d2rrsm1vlq5ag9luq09rgbmrre6zk0gemr7c383vv2kextcel0vxidtv5eldaxqa0dkl9rk0nwgvapy8eoja9m9mbfja6j1n2c5ep3gys3\",\n  \"subClassificationAlt\" : \"v93h24ma5xya03u6mvnc9m9j96uudxpkd5lccobuy0aavcm5wdzke71whkp8ubr4pv4eirqtriiezkih2v5wygsta2zjh2lfey2z8jnidqnukusozgc235c43hgksltrlmne9qafyw1lxnefkdx3myswh8wiyp\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3ace4440-a260-3a4c-bf5b-28cfd603c39d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "subclassification",
          "schema" : {
            "description" : "Represents the geographic name origin at a country subclassification level (usually regional or state level).",
            "properties" : {
              "countryIso2" : {
                "description" : "The input country ISO2 code",
                "type" : "string",
                "xml" : {
                  "attribute" : true
                }
              },
              "firstName" : {
                "description" : "The first name (also known as given name)",
                "type" : "string"
              },
              "id" : {
                "type" : "string"
              },
              "lastName" : {
                "description" : "The last name (also known as family name, or surname)",
                "type" : "string"
              },
              "probabilityAltCalibrated" : {
                "description" : "The calibrated probability for subclassification OR subclassificationAlt to have been guessed correctly. -1 = still calibrating. ",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "probabilityCalibrated" : {
                "description" : "The calibrated probability for subclassification to have been guessed correctly. -1 = still calibrating. ",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "score" : {
                "description" : "Compatibility to NamSor_v1 Origin score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. ",
                "format" : "double",
                "maximum" : 100,
                "minimum" : 0,
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              },
              "subClassification" : {
                "description" : "Most likely subclassification ISO_3166-2 code",
                "type" : "string"
              },
              "subClassificationAlt" : {
                "description" : "Second best alternative : subclassification ISO_3166-2 code",
                "type" : "string"
              },
              "subclassificationTop" : {
                "description" : "List subclassification ISO_3166-2 codes (top 10)",
                "items" : {
                  "description" : "List subclassification ISO_3166-2 codes (top 10)",
                  "type" : "string"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "FirstLastNameGeoSubclassificationOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 29
  }, {
    "id" : "82a361fd-5f43-3721-a1d9-83d368c60acc",
    "name" : "Get the current software version - 401",
    "request" : {
      "urlPath" : "/api2/json/softwareVersion",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "82a361fd-5f43-3721-a1d9-83d368c60acc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "softwareVersion"
        }
      }
    },
    "insertionIndex" : 30
  }, {
    "id" : "f05b0672-ead2-3660-a1e9-0d97d76c56af",
    "name" : "Get the current software version (application/json)",
    "request" : {
      "urlPath" : "/api2/json/softwareVersion",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"softwareNameAndVersion\" : \"a0ml5ofcpkvsbbssgesc44c9cczn69qlnq6ndhiov3zozb65fol5ft2iietqzlp4xk74434gzn87rgreg8gnro1hskvzr4v8rq50ro1zlnoeva1v4o29h1d1mgt5x2avino78eld4z910mgx3bvtrcr20i\",\n  \"softwareVersion\" : [ 1250987240, 517605420, 304562169, 547611548, 585248526, 900536910 ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f05b0672-ead2-3660-a1e9-0d97d76c56af",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "softwareVersion",
          "schema" : {
            "description" : "The software version.",
            "properties" : {
              "softwareNameAndVersion" : {
                "description" : "The software version",
                "type" : "string"
              },
              "softwareVersion" : {
                "description" : "The software version major minor build",
                "items" : {
                  "description" : "The software version major minor build",
                  "format" : "int32",
                  "type" : "integer"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "SoftwareVersionOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 31
  }, {
    "id" : "6260326f-dc62-38fd-9c19-330d156dd445",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint). - 403",
    "request" : {
      "urlPath" : "/api2/json/religionIndianFullBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "6260326f-dc62-38fd-9c19-330d156dd445",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "religionIndianFullBatch"
        }
      }
    },
    "insertionIndex" : 32
  }, {
    "id" : "f43b8edb-8a05-3740-b95c-ee993d1509b3",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint). - 401",
    "request" : {
      "urlPath" : "/api2/json/religionIndianFullBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "f43b8edb-8a05-3740-b95c-ee993d1509b3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "religionIndianFullBatch"
        }
      }
    },
    "insertionIndex" : 33
  }, {
    "id" : "2a53c525-4717-31ff-92eb-bbc69c3e023d",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint). - 400",
    "request" : {
      "urlPath" : "/api2/json/religionIndianFullBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "2a53c525-4717-31ff-92eb-bbc69c3e023d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "religionIndianFullBatch"
        }
      }
    },
    "insertionIndex" : 34
  }, {
    "id" : "9812a01a-b24c-3773-96dc-1f1541131527",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full Indian names, provided the subclassification at State or Union territory level (NB/ can be inferred using the subclassification endpoint). (application/json)",
    "request" : {
      "urlPath" : "/api2/json/religionIndianFullBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"personalNames\" : [ {\n    \"religionAlt\" : \"jpk5f4bgukzujmmhfm7dpw9vff5fpbdzgy3isj5wrtq4c3ehs1c9geq58b7m91o8ub4iqg0ept8e0ilorkd2ivajp9pflfwqb\",\n    \"score\" : 69.77143415415902,\n    \"probabilityCalibrated\" : 0.31904525848142073,\n    \"name\" : \"Theola Kiehn Jr.\",\n    \"probabilityAltCalibrated\" : -0.8525095128979772,\n    \"id\" : \"xn52\",\n    \"religionsTop\" : [ \"cwz24ccwokih6v9we6cvz7aco1ogz5qwc6iytdupj7fi1vi98r0omnq312ico3tdegipj1do7blzyn1kentikolxmryiaypn9qmun8dbmpp3uvd539pgvimbvv6i1vk001qf8yuo28af4uw4u5urs974cepbgeqa1g6xbu7utkk79yw1\", \"ftluczi0auys19qs28dml1l37g52uqslhalew4mpo4ae7axva4ad8zc0gk440jge0bdoaa2a0us2tpjbhque79764qz6e5p1die2z18y690ghj3fgw1fe3teampp64xsjhg2tpoawne0xnpwabrz10z78bbs6maw7y7rhzwy3x9qflh28\" ],\n    \"script\" : \"w9kvpafcmuh69nf\",\n    \"religion\" : \"rb71rp532y8o80bdi4x1s6aeffi2a6ba60z4y9twx\"\n  }, {\n    \"religionAlt\" : \"nrvhtqis4q1puuzxsyns0s87pgaya3aly374vok2wwsrq683bmrbj4frhbwdcg34vvdpe42s9g1s3rqkwwzn4kgzr4dxmvi5gx80f5rk594d4v4d5yaepba3imbbtltn7zo993caxsac21nuce\",\n    \"score\" : 46.861888052212784,\n    \"probabilityCalibrated\" : 0.7636129598028252,\n    \"name\" : \"Ida Johnson Sr.\",\n    \"probabilityAltCalibrated\" : -0.3520759864285823,\n    \"id\" : \"aopf\",\n    \"religionsTop\" : [ \"i7luj2s3stmgwh9wzdu0pu\" ],\n    \"script\" : \"loiu24j7mabspg437wvd5zwqxvcpd60k4lirlusjnbfp24b5ef01ce226p28aywhlf54avio5a4u8w8mlkrqraaufy3s8bvu399nx3h2yu6rqb3su8o8ij\",\n    \"religion\" : \"tpnhxh0rdkt75uvnfi8fatd4dhkl4hpkcmt7kb2nf6yfoudmoqqmrgkh03niv332pu75foj3ggk71mczivr3b7k18mm63ms6xkzqcrnbky4kcq84wbymastatj496wmeat3bmu2vzedhti3vn0s2zlk1slmu6fjk7zgvk\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9812a01a-b24c-3773-96dc-1f1541131527",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "religionIndianFullBatch",
          "schema" : {
            "properties" : {
              "personalNames" : {
                "description" : "religious-coded names",
                "items" : {
                  "$ref" : "#/components/schemas/PersonalNameReligionedOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchPersonalNameReligionedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 35
  }, {
    "id" : "a952227f-686a-3192-aa7c-37d849a1de86",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint). - 403",
    "request" : {
      "urlPath" : "/api2/json/religionIndianFull/7s1rcqjvpus0f53uupck5n5j0xfbwuqvghqpdrls3m2j7idnhqbgfxxtpn32l42baf701nksgvqfewto5ir7qobw3wy83zyq4lvbzqv30iyl5jdp8wkk1800ntw3w5w/nugphfw99foa0r98ir58fnhary4s2j2sskr4hnuhlwercwekk3fwotzzybvjhmsid5wojnttkdstnyfq8xs4lkvczqbi842cxpacrfvnxifhgom52ksy9hlw3b8kdsvydkid5ja65oezpjy7th16qc9i53hanjn0gnzadilqm63yhfbztf1hu",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "a952227f-686a-3192-aa7c-37d849a1de86",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "religion"
        }
      }
    },
    "insertionIndex" : 36
  }, {
    "id" : "a1f7898c-d5a1-317d-9cd1-465dc1ad5102",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint). - 401",
    "request" : {
      "urlPath" : "/api2/json/religionIndianFull/l0kmhi5nghhl3zuxq4aj2ge9r2ohbwmlrk4y8147154brwgftdynn4s1b7x3ly5ygf4r/43443rr55p242dbd3xfpl0ugblwes18g1gw6r5miygmzf99l4dujdsjzmanys7ru6rs0agwn4949f7e3yvfj7zu0s0dtay",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "a1f7898c-d5a1-317d-9cd1-465dc1ad5102",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "religion"
        }
      }
    },
    "insertionIndex" : 37
  }, {
    "id" : "ededcc1a-ab41-3a69-9f1b-aca228465824",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely religion of a personal Indian full name, provided the Indian state or Union territory (NB/ this can be inferred using the subclassification endpoint). (application/json)",
    "request" : {
      "urlPath" : "/api2/json/religionIndianFull/f0db3fr7pge1b3csr3r6cw2dbet8nypnb5c0f3pgvx5o4an96sd03zccepxh6ka938xfyxkh11zgk4fasazmqmhzt0m45f76r551f1814o/6vvd9nr9sf",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"religionAlt\" : \"u5fdvgoucmydywxihq8u4u718b05wjtlah3yoi8xejzjoj05jg7zgtf519om5ya5kli50viwrq0kdfgfyvedpw008ya4rn955w22vy2wgev0qpqya013ib199pkzspok1sglcrgslu1frbkaafj9x0iqb477rs5rb3zjpfd5lgu5cdlcjj\",\n  \"score\" : 29.762305285286818,\n  \"probabilityCalibrated\" : -0.2345571204816168,\n  \"name\" : \"Deanne O'Conner\",\n  \"probabilityAltCalibrated\" : 0.587940544517608,\n  \"id\" : \"tp0z\",\n  \"religionsTop\" : [ \"qp9yu05em1t90jjtr14nzlpp0uc6qavlodwizdf0nzp6tg7d8tjuihfmi89p0l2x1ego5c25jyquo7z2sc0mrsqswmubl5jrycn2nhkhxw31kptiwy3y6cwfjlpl8yozdj6d\", \"jxy0ewr0cz5xeamk9gxh7\", \"6cp1wzfer6r10zmudj733dtfvj92peufrpnp4z3xs2szxjm3c\", \"5mp2u2qkbb8uuqzt5l5s62flnzwxiwl3fphs9eksv176kqjp7rsflr03ua0rz2n9k7vqhi1pbkavkvbz77qxo6n0saekdbfg49qhjxjcrgbdgtts93nqy7g54h7p0nnbg\" ],\n  \"script\" : \"2jfd04uu43u8hzxjm9uiv3ohcwx7c83r4byu9a17dtvzzr2o1cu5254f2zbbduhhpp0xjk3s12fuz5bncmrc9eq58jzxbsem32deogdvnmocrogovpl0x9etbsdci\",\n  \"religion\" : \"u8odwyg0qm50z2flrw6fkbk6e9bkh909fyxwbjde2b6uglcgnk941g1ssocqjlmz7p0wbii4exd8oeefofcldlz\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ededcc1a-ab41-3a69-9f1b-aca228465824",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "religion",
          "schema" : {
            "description" : "religious-coded names",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "name" : {
                "description" : "The input name.",
                "type" : "string"
              },
              "probabilityAltCalibrated" : {
                "description" : "The calibrated probability for country OR countryAlt to have been guessed correctly. -1 = still calibrating. ",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "probabilityCalibrated" : {
                "description" : "The calibrated probability for country to have been guessed correctly. -1 = still calibrating. ",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "religion" : {
                "description" : "Most likely religion",
                "type" : "string"
              },
              "religionAlt" : {
                "description" : "Second best alternative : religion ",
                "type" : "string"
              },
              "religionsTop" : {
                "description" : "List countries (top 10)",
                "items" : {
                  "description" : "List countries (top 10)",
                  "type" : "string"
                },
                "type" : "array"
              },
              "score" : {
                "description" : "Higher score is better, but score is not normalized. Use calibratedProbability if available. ",
                "format" : "double",
                "maximum" : 100,
                "minimum" : 0,
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "PersonalNameReligionedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 38
  }, {
    "id" : "0a4aab4f-c0d1-3427-af17-f5cba3a58002",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full names. NB: only for India as of currently. - 403",
    "request" : {
      "urlPath" : "/api2/json/religionFullBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "0a4aab4f-c0d1-3427-af17-f5cba3a58002",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "religionFullBatch"
        }
      }
    },
    "insertionIndex" : 39
  }, {
    "id" : "e88b2863-f35b-3f86-90d9-981a07bbb00b",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full names. NB: only for India as of currently. - 401",
    "request" : {
      "urlPath" : "/api2/json/religionFullBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "e88b2863-f35b-3f86-90d9-981a07bbb00b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "religionFullBatch"
        }
      }
    },
    "insertionIndex" : 40
  }, {
    "id" : "19218d58-9d9b-3a9c-8664-b7c7d647d8ff",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full names. NB: only for India as of currently. - 400",
    "request" : {
      "urlPath" : "/api2/json/religionFullBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "19218d58-9d9b-3a9c-8664-b7c7d647d8ff",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "religionFullBatch"
        }
      }
    },
    "insertionIndex" : 41
  }, {
    "id" : "50b8611f-14ad-3ba0-aea0-627662b752e1",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full names. NB: only for India as of currently. (application/json)",
    "request" : {
      "urlPath" : "/api2/json/religionFullBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"personalNames\" : [ {\n    \"religionAlt\" : \"1scpllvl3p5uqmtae7cykrdwa7uhca9phe1fwjnr44hqyquwmdh1w2sqmv55w7c0vdea60zrbyohv90te79k2metuc04u5y36nae5c30xb8aggb0h6gr5ehfm27cz1joqvfrnyzsgjsmaiv3ngfsvzasyh343r397d1ig32liqdz1g0\",\n    \"score\" : 78.38331641597365,\n    \"probabilityCalibrated\" : 0.6165465361691658,\n    \"name\" : \"Clement Walsh\",\n    \"probabilityAltCalibrated\" : 0.4005825866494481,\n    \"id\" : \"h7lf\",\n    \"religionsTop\" : [ \"xmqjip23vyic0x1h92nmlvim3iorhioltbbj\", \"cq9uwbkydvfd32ommj48i9yl5gl4veltl4drqnwmioa7fci5fuyjxnfs4r8nv56nexyo2njdwhyxku4keq7ncil834q19opoge846fxndz87deq\", \"83jvgaqx6fddh4h09hn8qyjh3zsetivtmcsa9d5ofmmfh1oqvc5p982bmtpp5v2v6v0dqwomfln1m3u0mtki6s72bijal3wapibp3ykrukzqxqqmlernldr1pc7khdqo17okqflmgzrqqp7s\", \"8nq6577c628wg7u0ir31e3gbfdjnfpudat11wpqioigt9h6wog1bw20h48sjvlp6miwn9qjg8w7fj0dyea5ar7ztg\", \"9fz5j3365zhccq0nefbf7bt3h839f27kg4ot36ozgvt66a7s3ql3cfwm5zxfzeeavibou4fivoi9gjn79cz1vwxmsndrltsc15la25m73n6cjpzdola0wvngufnpbijfb5qreyol74reoioupsukzvivaa2avhmugm23u6\", \"z28w\", \"kbv11timb1p5lht6c2r5kqg385dnlwx0ftvjuw7zc609tkkb8vx59exyp2l54xajeel6getduki7w0dey9fopg04shanb1z3874iks\", \"ext8auxi5it8\" ],\n    \"script\" : \"getumef2t5bkdomdjne39837pb2myjzd25e3\",\n    \"religion\" : \"ukgqt55o2oriweb4xk5kl0rxzi2mwq02cer7qrnpgil55h43r4tgd6vo9t2p0vjy7t2v2e4ykygyu6y4002xuvre4wkiiclxnrfetqthn2eb1sgv5d8ujfqa0hcpoolhekzjp76tcl5c88b\"\n  }, {\n    \"religionAlt\" : \"7rpnvg4vnlxf0l9y2a7kyuxmh31vvce096h7klvsgrop9nrqqw9dgl\",\n    \"score\" : 10.40997869958693,\n    \"probabilityCalibrated\" : 0.3333556947877039,\n    \"name\" : \"Junior Ferry\",\n    \"probabilityAltCalibrated\" : 0.1387415129832854,\n    \"id\" : \"975d\",\n    \"religionsTop\" : [ \"b26zb952sb8tpvidd6zfjd2c1sm3ind9oxya1l5xlu1amoqdb5qssr6a6n1brad4qdxrwaj4oz7nbn6t6jijywnitqzluzuil237nh\", \"fyl37nkw8veskrv9nihrjrf4akmscfdjkuh2shzu172hqrf1aawz1s9tuj9tz7gu6jfcct682eqebl38dq8wjf558jvezrypab18epg7dt6q3xnoz30di5rkytim0ji4g0irzmqz3aedfq4qlbmqdi5q5zouz6leskt8lv78jb2oacm\", \"vvmquiq0olb2x8yyi4hu1ph3w6s8d47awzzx9ijlyky83tvzachde0mvbi82yp4\", \"3ck53i2n11x502vfwo2igd63406qiqwt80emdf737r0o0qfotl5t1ttjobwwth9xt2jxt2xm6nux1\" ],\n    \"script\" : \"6l5dk8iv673ttbg3ou200okppiktswp\",\n    \"religion\" : \"iygpqizm8i86qu14jbt8xyn19bheqfi1pu04zgwyxbgjcu3g9tt60iu15gh0cjz8uoyfiar7imi0an8bmn5issuhfiu2wy0wtrsdnssr97jrsy0aksojk3d5pk0qlc7u7jozvyupj7ut19iv6hmmts0m0jhc7lrwy9mghoipg5fx6t0k7t43uc\"\n  }, {\n    \"religionAlt\" : \"k5uy5ngyse7e4xl6j8g892o9cs1zl73av74622p6p8h3t13s\",\n    \"score\" : 41.895187173609926,\n    \"probabilityCalibrated\" : 0.21362040860974818,\n    \"name\" : \"Pablo Stoltenberg\",\n    \"probabilityAltCalibrated\" : 0.2996152266090615,\n    \"id\" : \"4w6r\",\n    \"religionsTop\" : [ \"hym0rzmrvmr4924fy8e9twz89f13r34y4wmtx4dr7fz9htpll06rb\", \"wuejp2ky4pey2l7k7j87x01oqoqyspmw8wsghcbmbkcxow6ryganszwsjiuld24fhxigcp7ugzb2bjzv9p4hkwiyp3sbvonuy1rlui537iinvm0x2swpeuh3a9h0lhm05bnls2c9g98trqz0rnlrtdmujdvt8w6l81uuy2lf63s4jld9q387dlk8\", \"r4mvgwoq6m4nh7yl0f7tcafzhmezk49fjn22xkr8msjpe7uc2pqmfso34ietcpwygi9hvybfzfb3ian5rq\", \"jxfd3g0p7jlwpvwjjucv7ajuop2g843kdtjrjlmxb0ag6eop222dadjkmsquhease676byhboiil1gqsbpj98\", \"s3a1eofbi32q8amkhrxnpy57wcy2649niznk236zc9ttggoji1exs6eg9fam1jal9jyyo9r6ku70g8l1qivcfospbie5qt0gzq6k1oiuw5jk30ty6uv5fkhuupan51jx79rah6ex7ydhxajjeqmob1mz1d3kt06yt3xr3\", \"0mbf3z3htvspneoixkc5qyr3a5fqvp7uovsrmip2650wsqzv8qp0zcqbgbg3ckxqr3mehruhmpga2p58nngkthxs3ms38cklinz38ps8krxzt6q69s\", \"bb8ivrqj7g4s\" ],\n    \"script\" : \"bjouo2xnfotuzn38le5149gl81w9bpajqewe0wtzaifhn15rrix8fwuu0dfzqgt9b1gc5\",\n    \"religion\" : \"81lzn7dmjk2e6yg326kzycdup4l6m6j0j5c2k7c29wfpc12au2t60ca3ypv1f1gdhdp24js6iukxj6tee8qvcfpnn1yrkw1loavx5187dib2rxxn1sztusnputeggc6403roess4fj5k82btwcrm7dn\"\n  }, {\n    \"religionAlt\" : \"wgf3v4rr3w0tek0pux3gin25i\",\n    \"score\" : 37.1511136586915,\n    \"probabilityCalibrated\" : 0.6430410552075885,\n    \"name\" : \"Ezequiel Sawayn\",\n    \"probabilityAltCalibrated\" : 0.1023735886338879,\n    \"id\" : \"6c5r\",\n    \"religionsTop\" : [ \"xbvgi89s48gmi41kpmitzt09j7dtsqv8z0wlowha1uam73sj4b2jy4dypw6h6y31ver98n8yhjvvk2tuuzkrpx6ewp0n6ufaxyrljn0olye80j2wtzy\", \"ljwl2dg1tqbc60np5ph15gdlv71jfpm0wa0pzxk1pe0411qqejun71eqa60czqz58pjmypn5ngui0y6fvc08ebwl1c6l55r7roectbmlhcp2jkb0os1wx29urze995ycs95y28mjiag8ttpamqmqh3s09t96vwsczhrae9\", \"n6j5dptymh0yjl9xe106800rowl4ub4anx138oq1adbacgq6ww3j9wuh32eo1nepgknr4o54wm7jbpuw236qy0rde6ulejhz6tnn2dl61\", \"h6knkgqh2o2xon7ppkmwigckajx2m0xfg7y9pnhs4we70jvyp9wtiuax4urjr7njcr5ep2fv8w7k7nv8dz1fwb2u78hmaqrc430lthpwag2p7l8b7ilu3xvplxiefkl8xblwssyptmnya05hg3sxneqle44g61um72ntm3ra2na\", \"8lqp4ijztriw7g0z2uivgqae170nny2ywgasafqmt3mq4cjkdkn8n6eu3aoozxh0wiy0ursbi2j2j7i5qvf5pjz58ff9oqsfzvda4ilqnpllqjsshe8p4h05bdh3hayk2q9u0pzbujc8wf9n6ebef5t5xsumgvcepz9c\", \"zs6zj6z3zsvjto26lf7ij859h5ytu79j1o0frsmifhy8fhj0971j6\" ],\n    \"script\" : \"c8nufikm0bvhsxll5tt4wxjtgl9s9tg\",\n    \"religion\" : \"49pfvsvu059g5qkj00z96vshyfiqvz7mblrl8qk0skupymmp57zhhjhy1zlkecqmzoy82t21rmhhh0ff1mu406h41t8mvpuws1q1qhlqdxhi897mlfbn6x8ptt3gsz2t8mqqh7mrhnfyddtyko38\"\n  }, {\n    \"religionAlt\" : \"7w0poeeu4\",\n    \"score\" : 5.444226276711506,\n    \"probabilityCalibrated\" : 0.5132478639074203,\n    \"name\" : \"Dr. Ned D'Amore\",\n    \"probabilityAltCalibrated\" : 0.370163806152054,\n    \"id\" : \"3mq6\",\n    \"religionsTop\" : [ \"plas9kf57it1doacuwjl139mqzyszye1c02u87mmnt3q1wgm0x6uyy8x6jkj9sojqyt0z7qmscirdefzf47ps5dlsdi0h36n3b10d123orrpduw374797nl54ia7bm7snrdhaljykygzu6j9gewmvpc0ptap\", \"zvolxcgqkcrgr5stb9hmjd6inpl7sz261d2x704y3r765qlje6a8raycem0a9nqr5\", \"6n2x9swkbhm6096yvh0p6psqi4zu1fjapv3r2brkldik0cifyb13sruvdea88wl9ok892w6hfm8vsp6x740vunhsopwxdblc85uocmrqaqnsjxy2iol9aoin1jpaolqn3c8jx5\" ],\n    \"script\" : \"9ys2sderh7aurs0gl79e9vtiy1cbcx0rm9ok869br6uhjxltc5t3gsv7k8iyq5rm87t1s0a7jestjqna5g49p7u27h8quc0vy049epfm52j0oo549xi8e86yc5axsm06tifjw70okrpuc701sbnbpzoryss5gcu30qrtwl0plk0xlcfv9rv8pk7i39anq0\",\n    \"religion\" : \"7lo3l1o7onbrb876kdhollmuu39v2d5m1yo834m0wjtulbp1gs0p4jffmlcgw4i6cwurwvg7m4ahr3hur6baowwdqyp9fveqbec7czgtxvjyt1genxfuth8nhf4j41f3e4cgr4ds6vkl79sam3k\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "50b8611f-14ad-3ba0-aea0-627662b752e1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "religionFullBatch",
          "schema" : {
            "properties" : {
              "personalNames" : {
                "description" : "religious-coded names",
                "items" : {
                  "$ref" : "#/components/schemas/PersonalNameReligionedOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchPersonalNameReligionedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 42
  }, {
    "id" : "020db801-d0dd-30c6-8aa2-09d24c67ea6f",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely religion of a personal full name. NB: only for INDIA (as of current version). - 403",
    "request" : {
      "urlPath" : "/api2/json/religionFull/7sswnycradftu5zkzu0ieegj8rwfbyjcwjbmbdfesr1p2lghxoamgwdqa4czs191kgl50awam33oo7ogg9doqpa8tgt9wojrzzmgn2i3vth4gcap42xufredehs0dkm9kz61bb5agqj6247gc26me196cvyq2uy30kx2o6lq9ic6rkyqxao9m3oica11/02eiv99swks87ordky1rzv2t1lpp4wuqg010zm34n65jyursf2xyc91wb9y67kqlk5ku2uoj8wotd1r8w38emp6tprz7z3oysecuhrlujygwcyschh/47tt1l3v0w0aj7q3k9wr1ya66ezzegmsj5ry4tw6kjsn94hnv1vxc2deh7j9zqh1n8sy39zvrsu65oebu4gg19x61dj8u5mxxopsasscgb0e9bbrfif3vk9cc28hg5",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "020db801-d0dd-30c6-8aa2-09d24c67ea6f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "religionFull"
        }
      }
    },
    "insertionIndex" : 43
  }, {
    "id" : "196a0ed9-2b13-3812-a28f-74a1f9af79ca",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely religion of a personal full name. NB: only for INDIA (as of current version). - 401",
    "request" : {
      "urlPath" : "/api2/json/religionFull/9gie8cr8weils60mxcp976rbfakguyko/7ay0g50wk4bknu6lpa3aeacipy6z21pwt7ifr909r5wn260sj1vlbz3h6w15zcub2lg0qovfzhmzua5w4r8tdl0v5uae6uyjms9opamrju7m/gf5726ivfc3k3wdbperpzkllqvot60l3w3ibkiustgukkesysv94okkp8mplz4gfj1updwpwj7pityohc8ndr00jge79eosiw67nfq7jm5jpjfn0li6xk2ct1ja9n9jnt9vpnioaw7g21z",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "196a0ed9-2b13-3812-a28f-74a1f9af79ca",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "religionFull"
        }
      }
    },
    "insertionIndex" : 44
  }, {
    "id" : "1edad6cb-fcdf-3662-ab91-5859692e03c0",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely religion of a personal full name. NB: only for INDIA (as of current version). (application/json)",
    "request" : {
      "urlPath" : "/api2/json/religionFull/8bjs3lfleesbmwf3qylgsx60xhd27omrczfzji923jes3fh5xpyooncmir9jobgw4iigs8nykkllmtcf7e1jvmcdq0kpqg5twd53iw5eza9cv1j/txyfkdjjprl7g53lh3yrchiodh7us5vrjypfyg3wfql90eb9uud08aefhi2x3x4yhkp0w03iqnj5ra23d4eygnit0rwe4dz83nx9wm99u56ae06vft2nhb/sgwromyyvjo1572lblzxvfxzxqzvgjc6t9yxymh2q9ns17xf4vg7j4dm7mqgnc3zq1a58qjlf0nb4nwgrav60gfqsct7chk6g86jle",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"religionAlt\" : \"ybbdpjst3brodgxx7qhn5c4t7bbbig8r6zu0nyaqg32adeaxg382z1qht0ycdlg89v4z1sk2\",\n  \"score\" : 59.54519528331031,\n  \"probabilityCalibrated\" : -0.8130049989378818,\n  \"name\" : \"Monroe Thompson Sr.\",\n  \"probabilityAltCalibrated\" : -0.9541048943078669,\n  \"id\" : \"ss16\",\n  \"religionsTop\" : [ \"5ug\", \"n1437pdalqim92qksyzahjaepg4xmdlbcoe1jfe36mno9qsvz3fw6\" ],\n  \"script\" : \"q2iq4w9q0ia89tr5q6dfypcxxkuvp88ke6ka275511u9wzfsp5marthjoj3w2f2wacxm4xwvv9tq8t5lvtczir9nsjq8dwt7f6pe9v8fs\",\n  \"religion\" : \"7xnikvq6o4ft7cw5we41f82jc1734219go2007958r8b7fps12f1z3axv63c12anva5f4irifruf3j3ajgb5tp6m3a10e\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1edad6cb-fcdf-3662-ab91-5859692e03c0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "religionFull",
          "schema" : {
            "description" : "religious-coded names",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "name" : {
                "description" : "The input name.",
                "type" : "string"
              },
              "probabilityAltCalibrated" : {
                "description" : "The calibrated probability for country OR countryAlt to have been guessed correctly. -1 = still calibrating. ",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "probabilityCalibrated" : {
                "description" : "The calibrated probability for country to have been guessed correctly. -1 = still calibrating. ",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "religion" : {
                "description" : "Most likely religion",
                "type" : "string"
              },
              "religionAlt" : {
                "description" : "Second best alternative : religion ",
                "type" : "string"
              },
              "religionsTop" : {
                "description" : "List countries (top 10)",
                "items" : {
                  "description" : "List countries (top 10)",
                  "type" : "string"
                },
                "type" : "array"
              },
              "score" : {
                "description" : "Higher score is better, but score is not normalized. Use calibratedProbability if available. ",
                "format" : "double",
                "maximum" : 100,
                "minimum" : 0,
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "PersonalNameReligionedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 45
  }, {
    "id" : "77a4bea9-4d08-370c-8166-2b1c9659a94e",
    "name" : "Print basic source statistics. - 401",
    "request" : {
      "urlPath" : "/api2/json/regions",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "77a4bea9-4d08-370c-8166-2b1c9659a94e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "regions"
        }
      }
    },
    "insertionIndex" : 46
  }, {
    "id" : "67dce3d0-5837-3367-bb8e-3337a0c6800b",
    "name" : "Print basic source statistics. (application/json)",
    "request" : {
      "urlPath" : "/api2/json/regions",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"countriesAndRegions\" : [ {\n    \"subregion\" : \"oq4f2n9\",\n    \"countryFIPS\" : \"u03236xp3h2930vublml9dp9yxulq0qh5t38f3dj488pncwuqdnpl5wa5u5akhmw11pk9fj1xlhr80c4arje31u7t7p41bz20l9yz17lq6\",\n    \"countryISO2\" : \"8lo2u6jjlws66lnagw3318bfcmmgeu6g33jsltqd0xxp24xy1wz1q0pq6rgw510fw206a40te4h4d86u742ct730ttrrxryonvecyb67j9jzj12tc3c1nvw7ozhgn8gyftt1xujb7xvrpbhrl9hvn1he5d\",\n    \"countryName\" : \"Tobias Hettinger\",\n    \"countryNumCode\" : \"lha8sb5zvbjnrez1f0sttm16n8ffzb0uyknwmxap9ijw3a86fomka534ed8bpfy9rlbkulxyx6ff8jkc27jnmd9v4izestdqsvcyvy74z9p8spnfvth5azgsajyr7zmbnzfiem8t2pq877yyonj\",\n    \"countryISO3\" : \"qxsiqyz09czkuyeht2i02ssjtkp3k86d9xqloxyfpdl7dpxpf92zrpued17bz925u0d9c0gvofrddys30q8pezpkvkkvdmoq5vkqfnol9urqnga42ktm7c825b8gz68ox16lj37o2hwouzo3j47qen\",\n    \"region\" : \"5viopxgnlxy672ggo9b6h9f4hw0xovvslxmd4qqzyrdd210viqmmfxfsqapbl3tiym\",\n    \"topregion\" : \"sj8uq\"\n  }, {\n    \"subregion\" : \"0o5kv80okxsjhhehq60vs5er24p1zdyxrwge6xk83pmw2\",\n    \"countryFIPS\" : \"h15aljxaqfhrwo0p84nqlxpwcwze6c3zsx6fwfiy7fpnzk0y2m8yihuj41fvn3b8uncbeknsnqq7jftpwarbboh5lcarjvfn659ecn5sjyorz48og3c6efzzpy9llvememv19ws23iso0gsxsxvyem4aq1yadkkb4aw0yub2660x57yh1\",\n    \"countryISO2\" : \"s8f28cl83vp1kbbwx57ln76rm7kaxm86c4de25dg97sm8a26hm47q0tvjripdm24pv47znhhel5p66mqljt4uda6ghwxwt27zrcabxl8gzxyjwbpz8atc7qlpse1mksfbui50t08l8ny6mpu9h6xsin43jlx2my4sqtuwn4\",\n    \"countryName\" : \"Pamela Ondricka\",\n    \"countryNumCode\" : \"1awn54tj0ayybl2gtxpkyqtj4d4zc14vy1yfvjcg422y3d3qz9xv2u01j1bq2\",\n    \"countryISO3\" : \"h8ki9tgbyck5e8axp56322k6r07j8b5u74vxfnt1rcoufyjfovs9t0siekm9mn6sumgxzthzaae6ux5abpm1zzdn109gn2k9hs0jtvwlqurpbkdqoizld7qeohx3hzklt8xejg9rosclb0yjcilgpyccqa3i7b2g25w3blssstv84tpx\",\n    \"region\" : \"yupyzblttbvv4bmr2avhnfw83g8bvll5co34owhfzk6ogwjpugsuuak9uydn6xle76ktear780rghgzq1kysrshalw9kp62hjqttw60av1bkjnm4skm76ua8d3svzcgzxfxv53yh8hhnh50aucc93w3g9ud44vg2de9jrrzywcnq5x50oy3\",\n    \"topregion\" : \"et3ququi144aogh0k6qe5k4arbb3gqauvwv525aoagvi83ijfc3knkn1dgbnpfky9i7wznd8y2wfaz6pi0vi8y7rsblj9brqp1fl0i3ll0p3h4dhhq9eiukoc5qbwzwngfbnll043igoif9s815q4pp\"\n  }, {\n    \"subregion\" : \"d5hjuc3g8zpqfn9m2z5paa0tnli0s26ar3ioxypm1vetgmeh4wwv2o8rrh97jydjyvfsnx5s5dcviuwuo45iso4vlm7i9ugw3t5ahn17eq051ng08wogb6uilchiy9jcogr1b2j6va1d4530e37m13wrkevjlbm8c\",\n    \"countryFIPS\" : \"za8w2y1dlahdupf669kiwk9cd2va8sd6gjnph7ufwo7c8y5gah69ozaomj8alkh4lef1vuzmw4nmyes1h47z5m3uyj01cgvhfqbinea5il0c7c2zmmzomta4ernflhfdwb3fj30l5prcww8vl39y82x85bydfuoa6xcgwi\",\n    \"countryISO2\" : \"yv3lzvjwfkxldr4nivjm3x0kly67azw6q5a843xldp168vmd475b884vmol1ycpr7non2q56morpprsjxdzzpch075wqegwb\",\n    \"countryName\" : \"Mark Muller\",\n    \"countryNumCode\" : \"t7vgiqxbt3gp7hcovdoct3p6061uldv7xddfsn750u\",\n    \"countryISO3\" : \"imd6jnqjee07xvpjw3wi5pamxxspll56u4pgno0cgic3ppmq92wuhko898tvdv216vhj7g3039iy9skq8fhiew0ow85pngjvs0td3tmeen5pnwt8klxe6egfcg4stcopy7e8nqj3u32e5lji5usm7fj1fp3o1jhi0bgayrgl2aoy0w0jjm\",\n    \"region\" : \"1ksnp3u0tphhn9n5hs2k1ztk0tjtc3xz8duspxddy8l9c1cq8hrsbl689vpmtoe9ljex9v8bzrx3qzjnn8zv75tdqlsdy0vb3142uvvt2coleg62eqnz9tihka34lxv4v4wyazrjvnlsjm8ix74ldnazir0l06q0pfqjn9gmz7dsg\",\n    \"topregion\" : \"i4619naupxeph1nllnhh\"\n  }, {\n    \"subregion\" : \"02jpulvjb7eam14z899ieg5rqvs91uhku2ryulf28cexvsl0aab4sty1lex52ni852r5lkv16upss46hmt7amwxhocl7gfojtt5kc0rq609rpdzrelnmlheaqoabxv5khzwtpr1\",\n    \"countryFIPS\" : \"uuzr7shvt4zwn7w9zwn9yogoejncwspet5dwydsugvetujm0d1454itw2fz32e0qnc6859hj79h8as6unep9tdy08q1kqyagnl5dgoy44off00sdl13tduxdeq467stk1279p3lz5r4dgqvvkwmu\",\n    \"countryISO2\" : \"z0768jevnfglm4bht9e9c3lszryyvuu52v10uu652lxuysetar7c8n683dydb6tz617p8cdrxbocsrtyo5z8270d1oa3kxlcutha8t32at5ecuwvygdir5k58phjwpss731qwc9o0l0hus8y0r6ao7dfcighc317jcludmiycd4gxvf6\",\n    \"countryName\" : \"Evita Shanahan DVM\",\n    \"countryNumCode\" : \"vkh5loul33sawzw6h1zfdceozb3r9h6pikv12aoh3l4msdqu2lnpvym9yshs2f29z5eev3jpmd0ow4ovov8ei6f8v0ig1g5r2avrmrl49j2wnn4sqkf5aojhxkdheqvwcoki863abyv2i2tph8scn2pq0zidkjgzsftp8tpo8vet9m7nnvqpsl0dk3apx2btri1l\",\n    \"countryISO3\" : \"438ytikz6e45lb6g1bxed34ni0frn4lv8u08ivr12it0qnuwjb7uiol3w1z6luh7sqtjhkcrw89w6fjdbb92vr3c7ytprqvatfcwlp74ooxf8gmzyyngfvpfd77958arb1lqyat26fnlk9eq31orugo4n4m5kq6818950uafl0tl640lwa6\",\n    \"region\" : \"2r5reg6ti1rjn1ex4tdrcthgb8qpne4u3asatut\",\n    \"topregion\" : \"c6zzk4xte1e7xb4dvvel7ztt39685r2goea2y32t1dmcj8dt2kejnxohvnlewnf1jpk1da8t49p7gpb8ji28mhlrqwlncvj2h8j9u02j0uj3f8a99exniv157614slu08h3tpfsuk7v5qvabofsdhrauzrmsmyc5d6ayppmy492tnuz41l\"\n  }, {\n    \"subregion\" : \"f9mo6w480np1fhign13fgqarnhy\",\n    \"countryFIPS\" : \"qq301v0tm6uetgcafewmeg0grtho59mlzok1wjvelacpjdt8v1n88ani\",\n    \"countryISO2\" : \"3h2bptujv1bbpbv7bhuovva31nghd1z9vvwicaklw3mf0c1rws2qbmmgi78cuumhtgzox9s6x5sade29x31xpmkwck3ejl3dij2quj4g2eufcjgb63mfufbt4qbecyu\",\n    \"countryName\" : \"Starla Fritsch\",\n    \"countryNumCode\" : \"j2kttslmcz8cnty3odmfquffzyrdvxsawkkou5aqephjbxlz1idn5o2kyabkqcipu5n6tx9gbjpii\",\n    \"countryISO3\" : \"clulwesx7jnxbafkk4bvyv4j9n7w7kf15dw7yzs19xnzu4vgi4wucm6075y6lojdki7odh5gcdtzosvi8b1t54mtf48ufs1vb86uy0192r9\",\n    \"region\" : \"geckfehnp3v93bp0t67z71cua7d8wk\",\n    \"topregion\" : \"pkmck3wivm76i6q29h0g4z9svlpqsknoa04j6jq3lmwiajsbkyoxzmkvv78itz21ymvh37emjkfnhhlma2v7f4mvo3ggndmw0l743z4soxwg881hoy2azfkrmy418mig0e8xpbvjssoqrcfcntfngcifl20pxqs2qozb\"\n  }, {\n    \"subregion\" : \"iea9x2mwrfgsh5e003887pm5zxmff2oiyjw\",\n    \"countryFIPS\" : \"hmwedeiu775dq75q6hdinuth0i9npwy6i4qzfvl4wszte1dzt8\",\n    \"countryISO2\" : \"j3h7ebhyvu8yg4on729miy63zaknegz8l8on7p88w2ctd9a9r8vd7k4elcxmii6bdjxuse159izwwb270fdd6h82p7rtd455be0fuajpdzt6kxkt06r88zs6a5nnrkjo7sma5eibk7v02swu53uw4izbwp8duiq16937w218mjkoxnusqdxok7cpra6pwzk\",\n    \"countryName\" : \"Aldo O'Connell Sr.\",\n    \"countryNumCode\" : \"tvh8qdcw0g1pawiigfwcmr0meoceduc4h86stapyvja3s0urneprd7vricckk6ax8rbxdcynxm7yc9vu4p3fowodpavpyxr8ck0aiucrkj5qmk22ohra18f00o5ahwoptm0jw\",\n    \"countryISO3\" : \"w1z9c9ejdw2m69i4k0mxa72n2a1kzg9f0qc8z8pecvtu9be2bkbpbciv7nnizgsnceyanj7ob8fvisa9r43r31zhty0bit6qtvto8ohf9pqllaulcweaugehka9mq8yg5fc2a8dljyyv6jve0pv7nvtr58ew1hw9kew3o31b8h0xllr8l6uhgaqf3ifs5r4946obc\",\n    \"region\" : \"0b2pci57qmal5q0wmjkg1lpduxgtnlniwsdkmanhwnqhogy33y6d54xogllbfmmeeivw5biqr763hhb44h5pguxn7xkln02qnfkttb3j9tuu1taryklwyo0c\",\n    \"topregion\" : \"9346x0dl\"\n  }, {\n    \"subregion\" : \"ddartpzodhago09tr29d5\",\n    \"countryFIPS\" : \"l9smia2353hyiavjh2xrxvhk8s7az3w4yefxj99v55rcxht98s1o3d6i07hta5j0xjh9nv5wze5yxri1avi3u4vfw8grr9zksmrcrtiuicrhcj9ig3t9v53mwu6g3ofg47jc2q6col9\",\n    \"countryISO2\" : \"tt6ypippzcelfp5iwzdtp5oz70llgu1pf3fuokvvj1eflsh98ob7t5an34i5xbkq4wd39idzcux2z4jegu6nsq1vx\",\n    \"countryName\" : \"Renato Schamberger Jr.\",\n    \"countryNumCode\" : \"1x01u5ff0m0lmplo6zbidfh2w3j4lo8fwdizd8tbphbwx6vxebon2y58wujvw1rvm2qp59\",\n    \"countryISO3\" : \"7cvi9oyo3a\",\n    \"region\" : \"nqnr1n2xw2x0fn3zirwwzz4k6bknx8r4ur4860cvji8req65acp8hzexqcd18dddehlresczxxg5mnfvrgbodjhjuy51mc0djwuxn9yv97pgbjo2iojcfy8pbk7ir7oa6puez4jabiehgio4daxubif58qdlmj9ama6dw\",\n    \"topregion\" : \"6kzq3cq4bt6c35d7o517ppm2ak6tmo\"\n  }, {\n    \"subregion\" : \"dct361yqm56d76bozia600rl85bmag\",\n    \"countryFIPS\" : \"6mbk58t2p1nkae6fub2wb7io7nylqreptdqsu6rg1pkpmop3ovx3yx9uhpvh39xqn27k5h1uxqcn47lq3cw1t1vecu0q8afrsnxtenfi58bii6ef8u6\",\n    \"countryISO2\" : \"vvhrjxsreetdkequwda7puzdnk5b6yh83ypcuvdl0jbb38sk3fo2gbsrusbkhc2zj\",\n    \"countryName\" : \"Bobbie Reichel\",\n    \"countryNumCode\" : \"e0gmphni0bifwnn58\",\n    \"countryISO3\" : \"l9jz9phlklx9euxrz3lfcch0v3md9rse9g01zd852w097jkxcfcpyqjjc09k5ows7aasqzik3r\",\n    \"region\" : \"ocsqxws71bnr8biedmtl0z55p45rvq38uuzo8g8tiybmjichdxw3zl9qsiylra7cybp7oae2x1jjc8v0h1932sj0wnlev3dy6rpl6mc5r52os2uqffe0xa92xf6p4emlcosjy88vfl5jbepb\",\n    \"topregion\" : \"32p6v4j9mhk2acfigl92zzx6auuhahrpy6bswmu9p8g9cnd1zblcnujbc0d56wrm2n9006fw6lkr2oyty57zdg81lhfnocjtkxr3hg27p4t56v30kx6rtm6gvjoiitp2stho9nn0zmfvaa3gd5nbz07969bfub\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "67dce3d0-5837-3367-bb8e-3337a0c6800b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "regions",
          "schema" : {
            "properties" : {
              "countriesAndRegions" : {
                "description" : "List of countries and regions",
                "items" : {
                  "$ref" : "#/components/schemas/RegionISO"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "RegionOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 47
  }, {
    "id" : "b2d77631-be13-3adc-bf0d-2335833c0588",
    "name" : "Romanize a list of Chinese name to Pinyin, ex. 王晓明 -> Wang (surname) Xiaoming (given name). - 403",
    "request" : {
      "urlPath" : "/api2/json/pinyinChineseNameBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "b2d77631-be13-3adc-bf0d-2335833c0588",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "pinyinChineseNameBatch"
        }
      }
    },
    "insertionIndex" : 48
  }, {
    "id" : "1ff33b51-46a2-3750-b038-c8912f0afeac",
    "name" : "Romanize a list of Chinese name to Pinyin, ex. 王晓明 -> Wang (surname) Xiaoming (given name). - 401",
    "request" : {
      "urlPath" : "/api2/json/pinyinChineseNameBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "1ff33b51-46a2-3750-b038-c8912f0afeac",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "pinyinChineseNameBatch"
        }
      }
    },
    "insertionIndex" : 49
  }, {
    "id" : "e7d05384-6b3a-3b5f-b5e9-309b4b150f2b",
    "name" : "Romanize a list of Chinese name to Pinyin, ex. 王晓明 -> Wang (surname) Xiaoming (given name). - 400",
    "request" : {
      "urlPath" : "/api2/json/pinyinChineseNameBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "e7d05384-6b3a-3b5f-b5e9-309b4b150f2b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "pinyinChineseNameBatch"
        }
      }
    },
    "insertionIndex" : 50
  }, {
    "id" : "3bb36551-1582-3494-8901-86e99deb774d",
    "name" : "Romanize a list of Chinese name to Pinyin, ex. 王晓明 -> Wang (surname) Xiaoming (given name). (application/json)",
    "request" : {
      "urlPath" : "/api2/json/pinyinChineseNameBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"personalNames\" : [ {\n    \"score\" : 31.032769905182377,\n    \"firstLastName\" : {\n      \"firstName\" : \"Wilmer\",\n      \"lastName\" : \"Bauch\",\n      \"id\" : \"140f\",\n      \"script\" : \"i07irp6g7ocltd7jgtlhipdigp4hwgwhevj13xahlr5hhxshz2t2b0lfl09duhxrzrgh7cvs8rw2bxj8d5gq3z0i\"\n    },\n    \"name\" : \"Eduardo Mayert V\",\n    \"id\" : \"0fpf\",\n    \"nameParserTypeAlt\" : \"FNxLN2\",\n    \"script\" : \"wzi0q5sdzrxkirbjv25oxycfolyvwf69waei9ardm50sddynp0elkd7gr88fs0g3s6qm3vk5d7epjtv1zzxntqbrs382x529qu5aalr89zljknsfvs1e7qag\",\n    \"nameParserType\" : \"LNxFN1\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3bb36551-1582-3494-8901-86e99deb774d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "pinyinChineseNameBatch",
          "schema" : {
            "properties" : {
              "personalNames" : {
                "description" : "Classified parsed names",
                "items" : {
                  "$ref" : "#/components/schemas/PersonalNameParsedOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchPersonalNameParsedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 51
  }, {
    "id" : "6439f39d-d4bd-302d-b448-239da2e13120",
    "name" : "Romanize the Chinese name to Pinyin, ex. 王晓明 -> Wang (surname) Xiaoming (given name) - 403",
    "request" : {
      "urlPath" : "/api2/json/pinyinChineseName/Gilma+Reinger+DDS",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "6439f39d-d4bd-302d-b448-239da2e13120",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "pinyinChineseName"
        }
      }
    },
    "insertionIndex" : 52
  }, {
    "id" : "19e100d4-f362-3064-bbb8-c3f0acfac73d",
    "name" : "Romanize the Chinese name to Pinyin, ex. 王晓明 -> Wang (surname) Xiaoming (given name) - 401",
    "request" : {
      "urlPath" : "/api2/json/pinyinChineseName/Truman+Schowalter",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "19e100d4-f362-3064-bbb8-c3f0acfac73d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "pinyinChineseName"
        }
      }
    },
    "insertionIndex" : 53
  }, {
    "id" : "75f8fb6b-beb9-31e2-aa4b-8ce55f687949",
    "name" : "Romanize the Chinese name to Pinyin, ex. 王晓明 -> Wang (surname) Xiaoming (given name) (application/json)",
    "request" : {
      "urlPath" : "/api2/json/pinyinChineseName/Ms.+Derick+Dickinson",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"score\" : 49.1287263706472,\n  \"firstLastName\" : {\n    \"firstName\" : \"Dakota\",\n    \"lastName\" : \"Cremin\",\n    \"id\" : \"750f\",\n    \"script\" : \"cdx0a0b61c9ymyzumpvreba1us9u26cz8wu0ldnbwempdse58hr68pjjnc3awbcqwdfqnt1sfqljreca2wiwzdqtt6gics4574ku9i0e21\"\n  },\n  \"name\" : \"Shaunna Klein\",\n  \"id\" : \"ttqm\",\n  \"nameParserTypeAlt\" : \"FNxLN1\",\n  \"script\" : \"fpxmsvzeuceqx37a1y1t97qbcxbh9cvxk9ubkgxd4f1e0xk1xwhpdps1i17rvg0dsrewyjc9e6hnsh38ef73j\",\n  \"nameParserType\" : \"LNxFN2\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "75f8fb6b-beb9-31e2-aa4b-8ce55f687949",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "pinyinChineseName",
          "schema" : {
            "properties" : {
              "firstLastName" : {
                "$ref" : "#/components/schemas/FirstLastNameOut"
              },
              "id" : {
                "type" : "string"
              },
              "name" : {
                "description" : "The input name",
                "type" : "string"
              },
              "nameParserType" : {
                "description" : "Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.",
                "enum" : [ "FN1LN1", "LN1FN1", "FN1LN2", "LN2FN1", "FN1LNx", "LNxFN1", "FN2LN1", "LN1FN2", "FN2LN2", "LN2FN2", "FN2LNx", "LNxFN2", "FNxLN1", "LN1FNx", "FNxLN2", "LN2FNx", "FNxLNx", "LNxFNx" ],
                "type" : "string"
              },
              "nameParserTypeAlt" : {
                "description" : "Second best alternative parsing. Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.",
                "enum" : [ "FN1LN1", "LN1FN1", "FN1LN2", "LN2FN1", "FN1LNx", "LNxFN1", "FN2LN1", "LN1FN2", "FN2LN2", "LN2FN2", "FN2LNx", "LNxFN2", "FNxLN1", "LN1FNx", "FNxLN2", "LN2FNx", "FNxLNx", "LNxFNx" ],
                "type" : "string"
              },
              "score" : {
                "description" : "Higher score is better, but score is not normalized. Use calibratedProbability if available. ",
                "format" : "double",
                "maximum" : 100,
                "minimum" : 0,
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "PersonalNameParsedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 54
  }, {
    "id" : "5c28bf5a-63b0-39ed-a755-c4a25701143a",
    "name" : "[CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence). - 403",
    "request" : {
      "urlPath" : "/api2/json/phoneCodeGeoFeedbackLoop/Tyrone/Beer/%28705%29+144-4952/tl1szvx50zrclrwhrko63lanoajfwnoujspvjyypqr282rr7bsd5k3f0c1jdcery5dsrf9k596hwyt0g97brdxeev9eegk9tggrjt1qfedoy3kdciu0a8k/4m6hja375suwhsiu3o9fcoexsdacp7zprao8b9ia53a5q0r28672sxmxik1nv0y8us1slm04u1503mg61do0q23qed1bdc7m3owg8g5pzeb9lah",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "5c28bf5a-63b0-39ed-a755-c4a25701143a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "phoneCodeGeoFeedbackLoop"
        }
      }
    },
    "insertionIndex" : 55
  }, {
    "id" : "2e30abf7-dfae-3339-8582-9cc789602eb5",
    "name" : "[CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence). - 401",
    "request" : {
      "urlPath" : "/api2/json/phoneCodeGeoFeedbackLoop/Belia/Osinski/%28467%29+582-6007/7n3bnaaulyfvb5grun7gi33brz6md90pxak6nnuzomn86q/nefm8u0njsqfgb2o5cf88ydaaxzv19z31zcieqbi1k4tk0gdho4kzb17qtbb9ct6djmgfmyyngy1ll7v28nmlajzf5u2",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "2e30abf7-dfae-3339-8582-9cc789602eb5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "phoneCodeGeoFeedbackLoop"
        }
      }
    },
    "insertionIndex" : 56
  }, {
    "id" : "f74d97a1-1cc8-311d-bd83-587b1b27f56d",
    "name" : "[CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence). (application/json)",
    "request" : {
      "urlPath" : "/api2/json/phoneCodeGeoFeedbackLoop/Velva/Abbott/924.980.4074+x9713/2dufxabvahqn4tascql0cvj0oov01ru8fzxrf1ry25yw5x85yd6uwdgqcc2vgnsh8nls/7a1211bphqajxjhr6qeuhs6tao3harmdddqya5rjkhw2rt2ncnldqhprp",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"lastName\" : \"Macejkovic\",\n  \"originCountryIso2Alt\" : \"rnf9fhau8i0laz0x2w\",\n  \"phoneCountryIso2Verified\" : \"ci4jd7ki6psc0x71t4fusbfd2s9em995xtcrcx89k61wnc5\",\n  \"verified\" : false,\n  \"script\" : \"6tunonerabc4r1s3z\",\n  \"firstName\" : \"Dwight\",\n  \"score\" : 18.83386572628487,\n  \"phoneNumber\" : \"222.466.1674 x303\",\n  \"phoneCountryCode\" : 789574830,\n  \"originCountryIso2\" : \"2udrp8b7nscbsrwua5w0luataxwbxbq7puu2azxl1fp7mnlffvalhjkeuq4guk29q4hhibwb7r932o1e8s7bnw1m2e9cm25qthbjvxcd3kr433dlxwpawjgsfe7z9kg2pcytozv3dzt2\",\n  \"phoneCountryIso2\" : \"qypdvm1rv485gjczmxyxzr7zshirsy3old74qma9k8udq1270lzryhatyv1roqgp3f1u6vvp913t9cljyi59k\",\n  \"phoneCountryIso2Alt\" : \"vza0cl9e25l\",\n  \"countryIso2\" : \"29mfpg5ge8ec4yi5bqobn0cs7nznqo0n36a3j3t0xnrn4v3dl2ghcr02zjdb5vezu2w9k3zdzx8xn2g72m2st\",\n  \"id\" : \"k45z\",\n  \"internationalPhoneNumberVerified\" : \"5zm9mls0aadqlii0elpdctyo84eiwm6puzdshokwo12\",\n  \"phoneCountryCodeAlt\" : 1415515126\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f74d97a1-1cc8-311d-bd83-587b1b27f56d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "phoneCodeGeoFeedbackLoop",
          "schema" : {
            "description" : "Represents the output of inferring the LIKELY country and phone code from a personal name and phone number.",
            "properties" : {
              "countryIso2" : {
                "type" : "string"
              },
              "firstName" : {
                "description" : "The first name (also known as given name)",
                "type" : "string"
              },
              "id" : {
                "type" : "string"
              },
              "internationalPhoneNumberVerified" : {
                "description" : "The normalized phone number, verified using libphonenumber.",
                "type" : "string"
              },
              "lastName" : {
                "description" : "The last name (also known as family name, or surname)",
                "type" : "string"
              },
              "originCountryIso2" : {
                "description" : "The likely country of origin of the name.",
                "type" : "string"
              },
              "originCountryIso2Alt" : {
                "description" : "The best alternative country of origin of the name.",
                "type" : "string"
              },
              "phoneCountryCode" : {
                "description" : "The phone country code of the phone number, verified using libphonenumber.",
                "format" : "int32",
                "type" : "integer"
              },
              "phoneCountryCodeAlt" : {
                "description" : "The best alternative phone country code of the phone number.",
                "format" : "int32",
                "type" : "integer"
              },
              "phoneCountryIso2" : {
                "description" : "The likely country of the phone number.",
                "type" : "string"
              },
              "phoneCountryIso2Alt" : {
                "description" : "The best alternative country of the phone number.",
                "type" : "string"
              },
              "phoneCountryIso2Verified" : {
                "description" : "The phone ISO2 country code, verified using libphonenumber.",
                "type" : "string"
              },
              "phoneNumber" : {
                "description" : "The input phone number.",
                "type" : "string"
              },
              "score" : {
                "description" : "Higher score is better, but score is not normalized. Use calibratedProbability if available. ",
                "format" : "double",
                "maximum" : 100,
                "minimum" : 0,
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              },
              "verified" : {
                "description" : "Indicates if the phone number could be positively verified using libphonenumber.",
                "type" : "boolean"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "FirstLastNamePhoneCodedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 57
  }, {
    "id" : "79bacc7a-345a-337e-bb50-d792a2995ee8",
    "name" : "[USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence). - 403",
    "request" : {
      "urlPath" : "/api2/json/phoneCodeGeoBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "79bacc7a-345a-337e-bb50-d792a2995ee8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "phoneCodeGeoBatch"
        }
      }
    },
    "insertionIndex" : 58
  }, {
    "id" : "30415983-242c-323b-ad00-e00fccb56461",
    "name" : "[USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence). - 401",
    "request" : {
      "urlPath" : "/api2/json/phoneCodeGeoBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "30415983-242c-323b-ad00-e00fccb56461",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "phoneCodeGeoBatch"
        }
      }
    },
    "insertionIndex" : 59
  }, {
    "id" : "82d84731-cf9a-3fc1-b9f9-c59225ccd41f",
    "name" : "[USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence). - 400",
    "request" : {
      "urlPath" : "/api2/json/phoneCodeGeoBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "82d84731-cf9a-3fc1-b9f9-c59225ccd41f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "phoneCodeGeoBatch"
        }
      }
    },
    "insertionIndex" : 60
  }, {
    "id" : "fb3823b1-de21-3135-bcfd-fc0207880c90",
    "name" : "[USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence). (application/json)",
    "request" : {
      "urlPath" : "/api2/json/phoneCodeGeoBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"personalNamesWithPhoneNumbers\" : [ {\n    \"lastName\" : \"Zieme\",\n    \"originCountryIso2Alt\" : \"zt6zvski6tmkb6oskxcxhhpulmbtir30sksk2ah5mvyoectl7d1rxrfa\",\n    \"phoneCountryIso2Verified\" : \"j6qjpkra8c86434l0qopoxyhvqgshur2ir0atms3gc4qd8gtmgq0jxc2okm29vt45yn108gc6m8o9\",\n    \"verified\" : true,\n    \"script\" : \"70ownnt1iadzn7ks6xc4dzkx2ctyyx04zeh0m143vplwijy28y1mnsnw3eonepo8rovrcqrsdok5lw95wldqavu8g8f69g2ecyi8dzhhu4c2kaccvmzy6ooadna29qzr6rel59ax752mzlrg04xww7u5xpw40fqusbzk1\",\n    \"firstName\" : \"Clayton\",\n    \"score\" : 48.91801380062816,\n    \"phoneNumber\" : \"174-122-1929\",\n    \"phoneCountryCode\" : 584413389,\n    \"originCountryIso2\" : \"cpkit7404wohou5sx6uq40rbohctnb68bggfsn0vupgxlwgr523g1taksea1eo17tznjnvzbpv1626sjn2o3rg6xqzdikka3bswjqixxc8dytd7r2c3sc409z13us3lv8hxdugmpwj0m5gbhalu9jdulbmugs\",\n    \"phoneCountryIso2\" : \"j1gn30xg7gqtoysf5kdxh1e4s2egaeple26rgrwcplthxu7sn53td5lvadmr5yi8x72x39hclx\",\n    \"phoneCountryIso2Alt\" : \"nw5mumqoyfgelli0l3pe5qap12ykm40l2x7u7vude3f7s9cgtht9x5ico1c9ajlyk915aw4q6gq8hwhtaxqdhebpamxsidurxmanzutbertiefo680cjolj3pn8qf7xzl3f1dsm4e68kpczh4oo9mvknritttwl190v6pfmtb3saevskkq955s8p\",\n    \"countryIso2\" : \"mwxy26k7kwvm3m6nppnilwcqfxpctranm8ew38nqxte9i00duh6jtmi03cudror6xcsqs4socuriiao7o6grwdnbuacmeffosxjoa6flctifj769k7el29cv\",\n    \"id\" : \"xz3r\",\n    \"internationalPhoneNumberVerified\" : \"49gecd6ckbqa6ln7yb0eiryixie517jz3uqvvjj6kkhhepnvfgqsp5rgy9drqqg1i6trme620dmo906xhdf6jf8iblxfnpqgdh913ybz2uej1wohy28uzjajbbll4otrsugbc826haghnrdcdgh3mer0\",\n    \"phoneCountryCodeAlt\" : 1452760054\n  }, {\n    \"lastName\" : \"O'Keefe\",\n    \"originCountryIso2Alt\" : \"sgvegvue3jfdng20ypmg9uq8ipkw8eo4a9xwrn3gpx9oz6tya5zixyvbp5vc04xggbyfwfp9sly1ky2b3u88ts7f2t88yu70zlh01xrdd6g5gf6ngujh2a2j7cv0h8x9dkvug3vy38gr02vims9x9y8uz6berq3nl7cij25lnjdgkbf8nk95g1dingl\",\n    \"phoneCountryIso2Verified\" : \"so3xvob0c1psxph8435ck60pxt7ji7i5123n6wx0oxk0po909y7ivoq0gqrcxxnenqo1e97tnsdqcm6mypfp1fw6dxy2k\",\n    \"verified\" : true,\n    \"script\" : \"3kd9tvb27n6yqpvujtzmljsei3kwfogg0n075ciwv9ksevkm7nf6r297pa18p\",\n    \"firstName\" : \"Maya\",\n    \"score\" : 67.41378117832765,\n    \"phoneNumber\" : \"1-771-296-8317\",\n    \"phoneCountryCode\" : 1978695683,\n    \"originCountryIso2\" : \"3j50v6tp9tgbzwwn2946m6k3yau1cg7ebpj0xy7d4axc\",\n    \"phoneCountryIso2\" : \"plh3vfwmyw1mm1j8beqoltwy1fwyn5g9an7we0k6l9oliso2ulwus4gaxearhnrzx1jzey42ikn5r9np9r7d6u2n196eqkawe0df2t9yvs05xcfhcj\",\n    \"phoneCountryIso2Alt\" : \"gzag991r5adaqkcun8riywv5jb0cm36va2cnqriihtynvbndq67zfskubt2vezflnxnytxrzi42t66v37ezecdajxa9x6bz343cq5fkwrbhola52pjy464\",\n    \"countryIso2\" : \"wrc2ypwh46b6fa8k\",\n    \"id\" : \"errr\",\n    \"internationalPhoneNumberVerified\" : \"t4u4rg2ic0jxi7i7z4vngxcxxh2erabup2xropkj54t5y8mdqwfqzpwqa6jlwh92zeg49pb876x129gxmseezjgllrjehfwi1bjveana8zink41evsgt90qfyx2vww3efijfi3416f5oqxr4pw3853vvdgmt6wlgbnwyvcfrghdxtuvsxbm3fz\",\n    \"phoneCountryCodeAlt\" : 1381723964\n  }, {\n    \"lastName\" : \"Blick\",\n    \"originCountryIso2Alt\" : \"4j15q1cr62bktpc3758gocdyfpxx72radl9gktbfsmiwjhxhjxmnksf6itr8a87utc9o7esor7sr5zd0xx3quxbp6ud082n6ppuyhmlqe0u17ti\",\n    \"phoneCountryIso2Verified\" : \"8cbntk9qzmiwxivafbgr4hpuwljrn0qbdyhjw8rbnejbpumrwqil4t78v1g52e3xmndlqdgpecn5lyqvnpkn9x6d33xjgprndhu84266be6piuf1ewp0p77xzue29yt3h6s0et083nzvslxz4zyc6saqq5k1povvudcy7qtg46m\",\n    \"verified\" : true,\n    \"script\" : \"j2mw2zspb474milkbbyru45y8n43nqrc5hnkcmrwu88kw9fz1qkdhh3pk168yrtph8yypgl041o7hgi8o61\",\n    \"firstName\" : \"Elna\",\n    \"score\" : 79.0394511632504,\n    \"phoneNumber\" : \"821-547-7339 x823\",\n    \"phoneCountryCode\" : 323513909,\n    \"originCountryIso2\" : \"kc873ezovxv7ofw7t5t0ne\",\n    \"phoneCountryIso2\" : \"q39beqhni2b53sqwvk7fh9j3zp259j20pcg4kkmiiiqsvpnd622q8s8oya7mvru4pdr67fg31mqto6bdlz3ccw9lmbb48b80bt61ivm1j3o4iunz7pth73gub6jlhacp7qm9qqe0whyp6m3gu0axt5fy0ztvd95j16py2q1evwqws7b7kqao0sm5v03odvghtmt4\",\n    \"phoneCountryIso2Alt\" : \"p7nojpjr8hg8uta4dnuftyqz1we57sd0sdxc6dkan0w6mlqtm72qbqn\",\n    \"countryIso2\" : \"eluganjwhc41lzvub74cqtvp6s5xbrwazjlv07ftveutd1h0sgq4nvs042bd7906ggs6ej\",\n    \"id\" : \"n316\",\n    \"internationalPhoneNumberVerified\" : \"swpwql1k7omwbk2ecvgtzwvc41jy8x8oj7ujkb1n8gmdmrk8i68stmwjpku93y8wxfemn84vlz2evezb944zu92xdznadt78ng4jepml0rm0825aehq4cda7nqaq3z39sidc0a4kq51iart6hd8uc6z1r0bjrnev1opw\",\n    \"phoneCountryCodeAlt\" : 1669907013\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fb3823b1-de21-3135-bcfd-fc0207880c90",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "phoneCodeGeoBatch",
          "schema" : {
            "description" : "Represents the output of inferring the LIKELY country and phone code of personal names+phones.",
            "properties" : {
              "personalNamesWithPhoneNumbers" : {
                "description" : "Classified phone-coded names",
                "items" : {
                  "$ref" : "#/components/schemas/FirstLastNamePhoneCodedOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchFirstLastNamePhoneCodedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 61
  }, {
    "id" : "09752c69-fec0-3df0-bcf0-722cdec66588",
    "name" : "[USES 11 UNITS PER NAME] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence). - 403",
    "request" : {
      "urlPath" : "/api2/json/phoneCodeGeo/Josef/Aufderhar/1-426-564-6738/gene8ot3nfxg2mcd8k0yg0dblw7vaa1kn4eno1nshdp4uvp7iz1uwjdp9bgrdkiqwy4z5yav77k4l53b04oem34beob3jp3bcqwo27qq51",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "09752c69-fec0-3df0-bcf0-722cdec66588",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "phoneCodeGeo"
        }
      }
    },
    "insertionIndex" : 62
  }, {
    "id" : "d3e1195c-ecc0-361d-84de-92f128985a1f",
    "name" : "[USES 11 UNITS PER NAME] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence). - 401",
    "request" : {
      "urlPath" : "/api2/json/phoneCodeGeo/Louann/O%27Kon/004.520.5494/wvblnexnr61r3jmzxbjopmva34zufp",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "d3e1195c-ecc0-361d-84de-92f128985a1f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "phoneCodeGeo"
        }
      }
    },
    "insertionIndex" : 63
  }, {
    "id" : "b2489422-b38a-3525-ab8e-3b0fb15867f2",
    "name" : "[USES 11 UNITS PER NAME] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence). (application/json)",
    "request" : {
      "urlPath" : "/api2/json/phoneCodeGeo/Aaron/Barrows/%28236%29+408-4381+x571/kp3tu042pvlk7zio8tc1crryot2947118jy4knnp24x1m2bpu313cs2mywdt0ktlwo9ijyw74dwqb6esx4u2fjug",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"lastName\" : \"Kilback\",\n  \"originCountryIso2Alt\" : \"x4tekejmn4z5hk3ci4ridvzxene6pvydakhg0jf38zjbziwctil81a85a5je4f9y7gdzm223ofjy0463qkjstm\",\n  \"phoneCountryIso2Verified\" : \"z8wuemgcf6yobnu5dcnk4f795xb6djiejpzu8uc4xnqgbxfcyujjvwiqzi93l8fw1ajt088y0pfvgy259vyqkdwytriux2plr7i6xx1wh9li8j3kgirieb9o72anm7azfp\",\n  \"verified\" : false,\n  \"script\" : \"gz1qetj8nz3wax1e5pwtjq1xad8q0nk5uiz6recgv8mu9y6zvm41x534ogb1qqpagmig4js886nwrjv9fdv6pindqmuays4u3w6xv1svb8tl2md82hecmhrqjmp9g5hwj3f1q2z1o3ebxqzmf6bbcpeyh5s2p0h03tt0k3iujfcw8nqlzyn\",\n  \"firstName\" : \"Lorie\",\n  \"score\" : 29.351559638504277,\n  \"phoneNumber\" : \"737-803-2605 x55427\",\n  \"phoneCountryCode\" : 192462275,\n  \"originCountryIso2\" : \"br1mvqwpyb57z3iowvfbwsvaiy3g0o95rw69ql6zvzcsxok5klcy7jfxktfzz7ba5l98gl58jalru6paw1k3f2u27h6zg6\",\n  \"phoneCountryIso2\" : \"f0tj677l5b3conl2a7v1oyi0k0i9dg8g50wea27j0p7d8d7rxo3qn74v154ldn05fm712ycfb79bgqawe1hf8gspzdy1enniznezhgxllibdw2\",\n  \"phoneCountryIso2Alt\" : \"c0xq4w6miixmsxjdjhlgx3fldanmmfusfzec21k3vndrovcxffnqg\",\n  \"countryIso2\" : \"joti27sieirx87dwe\",\n  \"id\" : \"7o6u\",\n  \"internationalPhoneNumberVerified\" : \"wq12fk6um9wwsf5cnrhlbbeiudlqyja587gs5z3omnj0ag69plzxevawh2819nrlkvjthrfz5cn4kdgt6n70drj5xs5e2o6t3xshsbzgbsbzxhyvny340lm1xcwhkjohcs0mpsa\",\n  \"phoneCountryCodeAlt\" : 294351518\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b2489422-b38a-3525-ab8e-3b0fb15867f2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "phoneCodeGeo",
          "schema" : {
            "description" : "Represents the output of inferring the LIKELY country and phone code from a personal name and phone number.",
            "properties" : {
              "countryIso2" : {
                "type" : "string"
              },
              "firstName" : {
                "description" : "The first name (also known as given name)",
                "type" : "string"
              },
              "id" : {
                "type" : "string"
              },
              "internationalPhoneNumberVerified" : {
                "description" : "The normalized phone number, verified using libphonenumber.",
                "type" : "string"
              },
              "lastName" : {
                "description" : "The last name (also known as family name, or surname)",
                "type" : "string"
              },
              "originCountryIso2" : {
                "description" : "The likely country of origin of the name.",
                "type" : "string"
              },
              "originCountryIso2Alt" : {
                "description" : "The best alternative country of origin of the name.",
                "type" : "string"
              },
              "phoneCountryCode" : {
                "description" : "The phone country code of the phone number, verified using libphonenumber.",
                "format" : "int32",
                "type" : "integer"
              },
              "phoneCountryCodeAlt" : {
                "description" : "The best alternative phone country code of the phone number.",
                "format" : "int32",
                "type" : "integer"
              },
              "phoneCountryIso2" : {
                "description" : "The likely country of the phone number.",
                "type" : "string"
              },
              "phoneCountryIso2Alt" : {
                "description" : "The best alternative country of the phone number.",
                "type" : "string"
              },
              "phoneCountryIso2Verified" : {
                "description" : "The phone ISO2 country code, verified using libphonenumber.",
                "type" : "string"
              },
              "phoneNumber" : {
                "description" : "The input phone number.",
                "type" : "string"
              },
              "score" : {
                "description" : "Higher score is better, but score is not normalized. Use calibratedProbability if available. ",
                "format" : "double",
                "maximum" : 100,
                "minimum" : 0,
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              },
              "verified" : {
                "description" : "Indicates if the phone number could be positively verified using libphonenumber.",
                "type" : "boolean"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "FirstLastNamePhoneCodedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 64
  }, {
    "id" : "23fb03e5-582d-378f-8738-5984603fa051",
    "name" : "[USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number. - 403",
    "request" : {
      "urlPath" : "/api2/json/phoneCodeBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "23fb03e5-582d-378f-8738-5984603fa051",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "phoneCodeBatch"
        }
      }
    },
    "insertionIndex" : 65
  }, {
    "id" : "7a3c70c6-fddd-3a34-bc5f-9793ff0457c9",
    "name" : "[USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number. - 401",
    "request" : {
      "urlPath" : "/api2/json/phoneCodeBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "7a3c70c6-fddd-3a34-bc5f-9793ff0457c9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "phoneCodeBatch"
        }
      }
    },
    "insertionIndex" : 66
  }, {
    "id" : "9e3d6dff-ff7e-3712-b1d6-1023c3721f7c",
    "name" : "[USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number. - 400",
    "request" : {
      "urlPath" : "/api2/json/phoneCodeBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "9e3d6dff-ff7e-3712-b1d6-1023c3721f7c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "phoneCodeBatch"
        }
      }
    },
    "insertionIndex" : 67
  }, {
    "id" : "15c0742f-1f7e-334d-99cf-3b78eafa71e6",
    "name" : "[USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number. (application/json)",
    "request" : {
      "urlPath" : "/api2/json/phoneCodeBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"personalNamesWithPhoneNumbers\" : [ {\n    \"lastName\" : \"Wiegand\",\n    \"originCountryIso2Alt\" : \"90ssstuewdibrn7jd09wkpovo59fx8z1xvkpv9jwqp238uose8hc15zxzltd8yn8stcce6kzka2r6gf559hj8x7x1vmrqphe8u68axwqbnud5d2om7nih1son122o56\",\n    \"phoneCountryIso2Verified\" : \"bnsuv8qrqwi3xdnkziacsnz5gpqh79pwkdli7q2awimd6qy4gkjkviz01znuuj75mb27vn0mx49b3qju0ipe8ugyamar3clwdzm0iwsebtde934hv2fnesk6jjjebq0kpqdok8ijr35nw0jhxyrxyv0czu3gtjc6ek7dmzdkdchcqigf2u9hv\",\n    \"verified\" : false,\n    \"script\" : \"dbom6q0xum\",\n    \"firstName\" : \"Twanda\",\n    \"score\" : 91.95363136783385,\n    \"phoneNumber\" : \"002-409-0069\",\n    \"phoneCountryCode\" : 1582661862,\n    \"originCountryIso2\" : \"ldok53a2ipey78802y6j2j2n1o4j3evwraxlysutj\",\n    \"phoneCountryIso2\" : \"ierbg5qvkwzwavpzf0zx6xfs8eys39pizpseao36m17vt0ikgvb193xv404pwencgngoli528bf2mbuuqjl2uv07l\",\n    \"phoneCountryIso2Alt\" : \"t0di1ttppv7757rgbs4rifeooc91fmqgk75g26pxnm9hu4420486pxtubz836f3r0ufo7m5vkq7oohieffexyweog66jsafazyswd64a7l92jb1hfdse9pceo9slpnd5drgrytm3ddyhe5bup2m89jzbzgl1hzldfxjdbfztdz3k7v22gqif07v84f\",\n    \"countryIso2\" : \"dwd15fgho8q7xutwyo6ov64e1lc504wg1zkoa84pg8j7u9povb3bap4nf6kvf4uisxgcb9qsvog8jqw3ldk5mbmu6d21sr1bv9vtvofr73kb1102pw5iw3gmztdivvemw4r6zbrtvtb4fqnahkrtfmbqfbdjyihwt9jgzbqh7j1e29uq7fwbz1\",\n    \"id\" : \"875n\",\n    \"internationalPhoneNumberVerified\" : \"b1vro8bo7f9ajm1i8infts1q9sac4\",\n    \"phoneCountryCodeAlt\" : 1866422409\n  }, {\n    \"lastName\" : \"Tromp\",\n    \"originCountryIso2Alt\" : \"0nqm42thd7wdjdqxhwcyp5ryyyuqs5ov3xvnp\",\n    \"phoneCountryIso2Verified\" : \"5fpdtouyvaaac4nx2j2xiygq\",\n    \"verified\" : true,\n    \"script\" : \"2kqiyuut1anu9k63e0igkz0xkvv4qnboxs32lueyu3jy7z4fskh1d0n6hdbnf95zp1ml10el9sjaj1\",\n    \"firstName\" : \"Joshua\",\n    \"score\" : 39.611864809473786,\n    \"phoneNumber\" : \"1-801-814-7606\",\n    \"phoneCountryCode\" : 1626511277,\n    \"originCountryIso2\" : \"ho82ns8234x9s5bwydul6nxvpwnufbwu5r4xe6tpzuo12dzu6pom2\",\n    \"phoneCountryIso2\" : \"pt1k8r47bl0hgkn861c3bzqia4qkrjs82z1cyujiiun4rjsc5ty9gg5972f4gu16wvyla3nmzbvek3rofzzm9hzahuk8f1z2zf4vgyltrna50qpeluuqqexxw8tsq0t1le6q\",\n    \"phoneCountryIso2Alt\" : \"hctyrl2k8i5b41ne727e0oaloc3755tz6w6g84vf57achzk0zvfo8ybpjypdnb4rq760mxk4ouax2s269c347w1mqs8y7p3dnrckkl2e31editudhovsnqrt33lcgplmbd4yzncrg6k655oovds2j\",\n    \"countryIso2\" : \"n9nupaxbpbi3ac6me6qgymmtquet9xfzbqugodar90nx77z9dboswk\",\n    \"id\" : \"36p0\",\n    \"internationalPhoneNumberVerified\" : \"e6gf7irrojfpuwuyhklg9ksylvz938vo0698n7v2xvkjf11rzi1xah3bbz0ty7tozuqeup8xp4qjz0ys155uvy4p2ldh1ajfx89ei970zwuc7p2iykrd4ah5ol26p691n2ky4q7m39kshhoc30s4wt9r\",\n    \"phoneCountryCodeAlt\" : 1854698168\n  }, {\n    \"lastName\" : \"Vandervort\",\n    \"originCountryIso2Alt\" : \"iuge7xa1b0w3e0l4z9x6rm9eehpehj6lbn8witx5lv0vz4eujpblv2nigxfx4q69rfch0ayu49p6x6q5hh3w9w7xh28tuv617o9bv24w7iok0wnyr8qnxjfavjdy3g6vmi7zdfqpyhl5jwbozb7uaemlg1i8e3q60j196za\",\n    \"phoneCountryIso2Verified\" : \"lyyc6hd5cffvx8rv9so\",\n    \"verified\" : false,\n    \"script\" : \"g706bm3scwytdh9t110r62r089q3ctt6t\",\n    \"firstName\" : \"Mia\",\n    \"score\" : 17.326858525148992,\n    \"phoneNumber\" : \"809.849.0211 x402\",\n    \"phoneCountryCode\" : 896835181,\n    \"originCountryIso2\" : \"xrpywwb58cmqreb8vucjrchaajlonoznrazbnwd47eccgkwgdf65d6qflyn25rrdqjdo2cgl0jmnr7z8q5taviktoub3v01xaqfxn5vdee68hc2wtua5jsp82m681lrm5r434umstdm5w6o4fgxumtwv888vnqs02im83v21vijshemrf5up5wdgqy5y\",\n    \"phoneCountryIso2\" : \"y4d3b84vffp496uys0fxaii2tjlxe3o7wp4s6npldydipr2ylz2a9ohut8cgdz912jwkn0h3sqbq0ado4tkkucqk8depujwcw54pfeb\",\n    \"phoneCountryIso2Alt\" : \"ac234yzvb0genv2ur9ncfgbtblwzli84wxg5zep5xpncf03bpgjlyoi0iyeimn4kvyim4xh96bc5m2tmqttv6erqx7qn06hk2492bu5u8j1znnt3t0uxo93v4bimmnt4ze0of368plsgvln7ce5ououzw25u9aucdgcp\",\n    \"countryIso2\" : \"xq3c78t6stor1y2tcsh0ix1eu43a998m0hexpqs18cyypvrb7sih2rpaar00dizlvzb7yiqco3nsxcsqah8ywupln46ku8vbsda8ud20n0z55twgxxdrf29vx1l428wojgeux609i1hi6tjren2svui4p0gx49y1xegvqakug0rhys5vv7ea8evfni1kc\",\n    \"id\" : \"j254\",\n    \"internationalPhoneNumberVerified\" : \"az8yuetc1406fi1cpso0l3eqfqmts55zjtcv64nvwc2kpvkienltf92mzk7gki9e8ixd8ye8zhb8629zsjgptxh1tls64r85w7cgjkxtqe2tum3pjxcznepuybnvx\",\n    \"phoneCountryCodeAlt\" : 1541963390\n  }, {\n    \"lastName\" : \"Bahringer\",\n    \"originCountryIso2Alt\" : \"o4b4cmu49gjhooby670n31myorpd8dwg1an8qhlh9ucx6ydr2jxjqsvsh29k51wjqejnwlwn26vcxw158vl0r9izz1wzsntt6r07llka4181t4w97bopih0hkxjomaefpml1vp649v6iyxg\",\n    \"phoneCountryIso2Verified\" : \"2mjynwm0zijg2p0bvvtwjp749ao35v5tc0xdx6udu3zbewr535wxyokn30yz7xjyz3npebaq45vgby860yd46ofve7ae6q7x2q0yazi6ths33uldhlk3mhhcepxqooqjemdbketuie9469jninop8ok74relbh5rpfxuxtxtihn32sfqbkutuo1zb\",\n    \"verified\" : false,\n    \"script\" : \"glj9a7qo588z9xpf37smmcpee934z26clhw21v4avh0pqnb8qkcalh05ywgyaxwicc8q1ue3x3jbhtjfeikiq4vxbtbdd3rh6a6jltmiugi82g57mdtyvo4lhwn5k31uxzr4mgy\",\n    \"firstName\" : \"Dana\",\n    \"score\" : 19.9341578609321,\n    \"phoneNumber\" : \"1-588-996-9165\",\n    \"phoneCountryCode\" : 1537796328,\n    \"originCountryIso2\" : \"lvp72i5wyor13ouamuq7exrditck31rucn89vo3wpb209it6lo62yvsq06w4v0mzow6x740f2czarbid4xzsseyo54u6ts72m6c8kuf19r0w7nbtme6g8cbnf6rpjpovqipdwh\",\n    \"phoneCountryIso2\" : \"ad9d0m9fdyyknnmw7pmr8uf1r5c7848k7b4jyxei8q\",\n    \"phoneCountryIso2Alt\" : \"6exknwpt1js1794a09cin4zlnz3d0jt9gtb49x0uwq4m3l0g40a9g62ogd323rd8nppvn541ccm1fa1ft32g4i36fwkdqi55k70bge1fzp1cg0h80lg2p50753f8b45ypvbgp7u2koitaff2jf54bl8pcjedvpy7po7kv01m0ihulfrip9t784bm\",\n    \"countryIso2\" : \"ok419d637x3tcxnh07zw3aix9i6kw8av8ot1vnu3pwf95h29qimu36n02\",\n    \"id\" : \"ti38\",\n    \"internationalPhoneNumberVerified\" : \"u8bjlax15gnrmgp1z8livw83335ecd7mpk0r6mnubli80mpg0cqm2wyp0kmx9pw40yowju6bcli51wfebsu\",\n    \"phoneCountryCodeAlt\" : 345518656\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "15c0742f-1f7e-334d-99cf-3b78eafa71e6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "phoneCodeBatch",
          "schema" : {
            "description" : "Represents the output of inferring the LIKELY country and phone code of personal names+phones.",
            "properties" : {
              "personalNamesWithPhoneNumbers" : {
                "description" : "Classified phone-coded names",
                "items" : {
                  "$ref" : "#/components/schemas/FirstLastNamePhoneCodedOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchFirstLastNamePhoneCodedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 68
  }, {
    "id" : "8b8fa703-3c55-3e72-baaf-965d6c887c83",
    "name" : "[USES 11 UNITS PER NAME] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number. - 403",
    "request" : {
      "urlPath" : "/api2/json/phoneCode/Chance/Huels/%28577%29+705-8456+x989",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "8b8fa703-3c55-3e72-baaf-965d6c887c83",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "phoneCode"
        }
      }
    },
    "insertionIndex" : 69
  }, {
    "id" : "2de30408-8e30-366b-98f0-fdaae11d4b81",
    "name" : "[USES 11 UNITS PER NAME] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number. - 401",
    "request" : {
      "urlPath" : "/api2/json/phoneCode/Logan/Fahey/981-477-3210",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "2de30408-8e30-366b-98f0-fdaae11d4b81",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "phoneCode"
        }
      }
    },
    "insertionIndex" : 70
  }, {
    "id" : "ca742883-3a56-3d9b-b474-8de0b7399b3e",
    "name" : "[USES 11 UNITS PER NAME] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number. (application/json)",
    "request" : {
      "urlPath" : "/api2/json/phoneCode/Bernadette/Harber/%28297%29+846-7975",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"lastName\" : \"Boyer\",\n  \"originCountryIso2Alt\" : \"8lqyebq6tbvmfmly0lme2snkkqc11rb0im9dcexwdbq0tvj78nq8rgmc1ruzd98z\",\n  \"phoneCountryIso2Verified\" : \"oy88682qp6wt9qil6dn9ezettc0wnphpudviq1kg8edm\",\n  \"verified\" : true,\n  \"script\" : \"973crijaqxh7jhkc831bewwrzs2gydryg344lzjm09y4k2xmgejozd9vx1vfd0o0nzo4dq1nn74penme7lnw8a6auyjd53airo2sgyuoogbhyu7nsqqaeq07b6zu\",\n  \"firstName\" : \"Almeda\",\n  \"score\" : 13.601727245310546,\n  \"phoneNumber\" : \"1-508-259-0130\",\n  \"phoneCountryCode\" : 515764476,\n  \"originCountryIso2\" : \"2u1ljnd3az5lkmet62fqjxx5ie5w0snkz2obqpskcdpn9us5cyxo0t2jb2x27az\",\n  \"phoneCountryIso2\" : \"8uhfdchjlbtb9n4q73lzibxw52f1s24v60dhfezy6zqzoxa4du2ivdi39d4mg43ueyuy0hojypc6v5jevlmli33fps4wssg8nm9dezn\",\n  \"phoneCountryIso2Alt\" : \"c8fiod4c6mowr6qfi0okop2ns6dsjnfzalumdzc85vda22zovpqrme6az8ga167juo50hb9oizvj1kelnqq1q3funuew3lz5z8vweldemtl\",\n  \"countryIso2\" : \"pfql66ys8yxpmrxn7o5eqdhvvaeap4llx1av4atsglo54nsw6lbheinjpi6uku2bf73fihrmgdtfj9rk8cvus56k0s5e1fw6j1k49dv9vfbecfxun9uvgulfrhvjiwz\",\n  \"id\" : \"ziit\",\n  \"internationalPhoneNumberVerified\" : \"5c32voxyx8sj5so6yb7beqlies87lhrdp8ect669gl7zgabrhw5vsi7d1sy0o5cdd9xwva1pg1le8x67ezpxks2gi\",\n  \"phoneCountryCodeAlt\" : 2114157443\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ca742883-3a56-3d9b-b474-8de0b7399b3e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "phoneCode",
          "schema" : {
            "description" : "Represents the output of inferring the LIKELY country and phone code from a personal name and phone number.",
            "properties" : {
              "countryIso2" : {
                "type" : "string"
              },
              "firstName" : {
                "description" : "The first name (also known as given name)",
                "type" : "string"
              },
              "id" : {
                "type" : "string"
              },
              "internationalPhoneNumberVerified" : {
                "description" : "The normalized phone number, verified using libphonenumber.",
                "type" : "string"
              },
              "lastName" : {
                "description" : "The last name (also known as family name, or surname)",
                "type" : "string"
              },
              "originCountryIso2" : {
                "description" : "The likely country of origin of the name.",
                "type" : "string"
              },
              "originCountryIso2Alt" : {
                "description" : "The best alternative country of origin of the name.",
                "type" : "string"
              },
              "phoneCountryCode" : {
                "description" : "The phone country code of the phone number, verified using libphonenumber.",
                "format" : "int32",
                "type" : "integer"
              },
              "phoneCountryCodeAlt" : {
                "description" : "The best alternative phone country code of the phone number.",
                "format" : "int32",
                "type" : "integer"
              },
              "phoneCountryIso2" : {
                "description" : "The likely country of the phone number.",
                "type" : "string"
              },
              "phoneCountryIso2Alt" : {
                "description" : "The best alternative country of the phone number.",
                "type" : "string"
              },
              "phoneCountryIso2Verified" : {
                "description" : "The phone ISO2 country code, verified using libphonenumber.",
                "type" : "string"
              },
              "phoneNumber" : {
                "description" : "The input phone number.",
                "type" : "string"
              },
              "score" : {
                "description" : "Higher score is better, but score is not normalized. Use calibratedProbability if available. ",
                "format" : "double",
                "maximum" : 100,
                "minimum" : 0,
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              },
              "verified" : {
                "description" : "Indicates if the phone number could be positively verified using libphonenumber.",
                "type" : "boolean"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "FirstLastNamePhoneCodedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 71
  }, {
    "id" : "97ba89c4-f5fd-3260-9be6-6f993124cdf1",
    "name" : "Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision.  - 403",
    "request" : {
      "urlPath" : "/api2/json/parseNameGeoBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "97ba89c4-f5fd-3260-9be6-6f993124cdf1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "parseNameGeoBatch"
        }
      }
    },
    "insertionIndex" : 72
  }, {
    "id" : "d7145ef7-efc8-32f8-a7a5-35cc3ec93153",
    "name" : "Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision.  - 401",
    "request" : {
      "urlPath" : "/api2/json/parseNameGeoBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "d7145ef7-efc8-32f8-a7a5-35cc3ec93153",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "parseNameGeoBatch"
        }
      }
    },
    "insertionIndex" : 73
  }, {
    "id" : "a3238ddf-4841-38a7-95d1-b9b4edc806e3",
    "name" : "Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision.  - 400",
    "request" : {
      "urlPath" : "/api2/json/parseNameGeoBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "a3238ddf-4841-38a7-95d1-b9b4edc806e3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "parseNameGeoBatch"
        }
      }
    },
    "insertionIndex" : 74
  }, {
    "id" : "f7dbcf8b-f95d-34e0-80f8-3f24aca5fa2d",
    "name" : "Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision.  (application/json)",
    "request" : {
      "urlPath" : "/api2/json/parseNameGeoBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"personalNames\" : [ {\n    \"score\" : 26.543770449089678,\n    \"firstLastName\" : {\n      \"firstName\" : \"Rob\",\n      \"lastName\" : \"Cassin\",\n      \"id\" : \"d76u\",\n      \"script\" : \"vaemqsbfc7kehu2lys1saf03f0aoxwbswtuxnp4265fqwak7qctbtv6znu48dp93wr8wi2higyozr0zfjp98wt2lcwxvr8jhblb0rqaru0fyoev1e3kob1diwz86lmz8ipgdpqzdhuyusto26vnjube6fxndsai\"\n    },\n    \"name\" : \"Cyrus Labadie\",\n    \"id\" : \"8e9q\",\n    \"nameParserTypeAlt\" : \"FN2LNx\",\n    \"script\" : \"dkxk7kcnc3luunscdjjrm6qn13gq67nouqw4cdxtuarvqncis0ueq621odlafy1bkorivixqrxbknjwsu6n1axvl25hczlolv\",\n    \"nameParserType\" : \"LNxFNx\"\n  }, {\n    \"score\" : 49.43903690658159,\n    \"firstLastName\" : {\n      \"firstName\" : \"Ali\",\n      \"lastName\" : \"Hahn\",\n      \"id\" : \"2wt4\",\n      \"script\" : \"9auwk4yvvkpu215ewksrzxsqgy730wwy8v6eeq2hoxovm9w62ihf43f3dqrxcqrw6r9x7pwvequrzir2l97mnoua8gsr2kz44hqs8l248e0rkttbu4xjjkju1r70f1du4qq0ga2kdt5\"\n    },\n    \"name\" : \"Arnetta Grimes DVM\",\n    \"id\" : \"542w\",\n    \"nameParserTypeAlt\" : \"LN2FN1\",\n    \"script\" : \"igwfwuib1j5mli9kltu3md62rg3zjwca8mhivpsrkwcadkeommb9tmhqlk3z9wkz33yle0gzx1j29e9irgkacsv4vbidld0z7btcveykkm3giwjp7bb1dydog3b3jhtuv9839791tz6nj6g2a2f1grjjiarw0of5522bpryassuv1pkh7qkc4wwcvqooo0xo8enaxj95\",\n    \"nameParserType\" : \"LN2FNx\"\n  }, {\n    \"score\" : 15.989057070698532,\n    \"firstLastName\" : {\n      \"firstName\" : \"Marianne\",\n      \"lastName\" : \"Gutmann\",\n      \"id\" : \"4y4q\",\n      \"script\" : \"ewabp6ahvhqoqwtm4hm2g3qhco3v9t9lrw1oag25mt\"\n    },\n    \"name\" : \"Alex Tillman\",\n    \"id\" : \"kgkx\",\n    \"nameParserTypeAlt\" : \"LNxFNx\",\n    \"script\" : \"z15jrgh55j9lu8l517kya1x0xn1ceznxk5ah33t9v348i2gu6uw85ud9heuege17lg6zamay76v8jk5p9uhj9v1v63w8xkn8ki5hcgyo0dqsx25mr3jlfzpdqex548dhji4fmdm2wsqabtzgxcatuvgpy6s9q21t\",\n    \"nameParserType\" : \"FN2LN2\"\n  }, {\n    \"score\" : 59.70166671947206,\n    \"firstLastName\" : {\n      \"firstName\" : \"Danny\",\n      \"lastName\" : \"Schinner\",\n      \"id\" : \"oo0k\",\n      \"script\" : \"bk8vu3au8ihnzficiv\"\n    },\n    \"name\" : \"Le Friesen\",\n    \"id\" : \"91tz\",\n    \"nameParserTypeAlt\" : \"LNxFNx\",\n    \"script\" : \"wg4l0peml3d87ipqzb70jbq08vo3irpy3771sxpv9quk05jzqitju9ewvxm0ko1wf985z5qkv4iyxg32gsz9j7pv9syrumf1fh9p64ltfarx3jiywkb4pv88oa8ylz12ld9yd29sxgfouboowcwe4cn0u\",\n    \"nameParserType\" : \"FN2LN2\"\n  }, {\n    \"score\" : 97.29555471239512,\n    \"firstLastName\" : {\n      \"firstName\" : \"Millard\",\n      \"lastName\" : \"Kuhlman\",\n      \"id\" : \"qf3f\",\n      \"script\" : \"j1ixkmwdcev20jkgtemi8de3tnhr0klnjpcl74nvq8briz24pq8gcf0t9rr7xa\"\n    },\n    \"name\" : \"Tori Graham\",\n    \"id\" : \"m72t\",\n    \"nameParserTypeAlt\" : \"LNxFN2\",\n    \"script\" : \"n6gkfgoigeb00je9g6yitfox38yv0rolm5\",\n    \"nameParserType\" : \"LNxFNx\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f7dbcf8b-f95d-34e0-80f8-3f24aca5fa2d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "parseNameGeoBatch",
          "schema" : {
            "properties" : {
              "personalNames" : {
                "description" : "Classified parsed names",
                "items" : {
                  "$ref" : "#/components/schemas/PersonalNameParsedOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchPersonalNameParsedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 75
  }, {
    "id" : "43bbcce4-25b9-32fd-ae77-4f623d0d0dae",
    "name" : "Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. - 403",
    "request" : {
      "urlPath" : "/api2/json/parseNameBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "43bbcce4-25b9-32fd-ae77-4f623d0d0dae",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "parseNameBatch"
        }
      }
    },
    "insertionIndex" : 76
  }, {
    "id" : "694419f2-8a17-3ad9-9dd4-73acb23f20e1",
    "name" : "Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. - 401",
    "request" : {
      "urlPath" : "/api2/json/parseNameBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "694419f2-8a17-3ad9-9dd4-73acb23f20e1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "parseNameBatch"
        }
      }
    },
    "insertionIndex" : 77
  }, {
    "id" : "fb67d14e-a7c6-3793-bc43-7071d705040c",
    "name" : "Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. - 400",
    "request" : {
      "urlPath" : "/api2/json/parseNameBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "fb67d14e-a7c6-3793-bc43-7071d705040c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "parseNameBatch"
        }
      }
    },
    "insertionIndex" : 78
  }, {
    "id" : "0e97603c-15fd-3ca3-b0a1-b4e0d9821369",
    "name" : "Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. (application/json)",
    "request" : {
      "urlPath" : "/api2/json/parseNameBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"personalNames\" : [ {\n    \"score\" : 67.35484818779896,\n    \"firstLastName\" : {\n      \"firstName\" : \"Julio\",\n      \"lastName\" : \"Little\",\n      \"id\" : \"955l\",\n      \"script\" : \"tip5s1ga22trknft50vzzjfvu2h0ut6n8gvrz28v3zskr9epwqpfumj55ds5c7aey0xr1z18cjozatadxd982na2eh2wtlthzu0hwczmuxiuu1pbwv01na9exa0g1l8nkhct22bgg5pwb7\"\n    },\n    \"name\" : \"Karan Hettinger\",\n    \"id\" : \"05ga\",\n    \"nameParserTypeAlt\" : \"LNxFN1\",\n    \"script\" : \"ocnm0xgyxbsd83fx9vqcc9q5r25rvh3ekmb0wlz9wgn3mq4hj5mj13crpdw3ipss2qj4quuoes57kcaj5cqduc4lw6gtrlcndl92fggk3v84sv9erzsh7c9tvo75pcyh7xvna6xlu1zzork4ty2cgug0g836o73uygvuv\",\n    \"nameParserType\" : \"LN2FN1\"\n  }, {\n    \"score\" : 39.928911193422365,\n    \"firstLastName\" : {\n      \"firstName\" : \"Heath\",\n      \"lastName\" : \"Wyman\",\n      \"id\" : \"9yix\",\n      \"script\" : \"fb468zbg2xhz8k1izcmk631u4ma0jzy3n03pdrh7a\"\n    },\n    \"name\" : \"Ms. Paola Considine\",\n    \"id\" : \"g8uo\",\n    \"nameParserTypeAlt\" : \"LNxFNx\",\n    \"script\" : \"t2kwbnrmmgk4o66c8z8j92yk3vmbcczzxd0lc2xbarammsp5cezepig2cad1eiqsbqjw1pkkipav5yu3q996r5uzgcndzjyxls0udg1ia27n5zyb94paaxe72ssib7yh3z115324f5ulpo3t2ir1gk\",\n    \"nameParserType\" : \"FNxLNx\"\n  }, {\n    \"score\" : 39.30084937393321,\n    \"firstLastName\" : {\n      \"firstName\" : \"Jackie\",\n      \"lastName\" : \"Heller\",\n      \"id\" : \"bl87\",\n      \"script\" : \"nuihqbid8ctj94yhdivc6ov7i0xb3muf4f08krd81vfmnjuqky4ffxx9xsqkxd1htz7beyfrbazl9q86oozgv361k8n8dl3sdn4ngg9srb271kc66smslpb19qkrub76u4dcbo1decy9re3i6urml0ga\"\n    },\n    \"name\" : \"Hana Keebler\",\n    \"id\" : \"k99c\",\n    \"nameParserTypeAlt\" : \"LNxFNx\",\n    \"script\" : \"jisei0p0knnauzeom3rhw6uxlcfkfe17xankd2b6301bsbusxtcf70vp80hxr2lkk71b8xgc1b8znhp86eqqzx0hac51ybbgtyw2u6m5tlf36m30j3pxwz9fhcwubl3lneavgtzpsdnefuock3f4s8im9w2wcgv9jrrujtpkdz0140htsqyp2tz2phjkzbkvkd0otn\",\n    \"nameParserType\" : \"LN2FNx\"\n  }, {\n    \"score\" : 15.867584719470019,\n    \"firstLastName\" : {\n      \"firstName\" : \"Alexandria\",\n      \"lastName\" : \"Marks\",\n      \"id\" : \"g5nc\",\n      \"script\" : \"6ycxjlgf5wmp73jbvi3xwgvt9rg7wybqh3pvoqwl2g7llqj7mo829pk9k13ehpnxige2inq5ax1n9mva1t2h0jlx1px41bclk93ishffsaszaznr5r63y975ukar457t1i836nft9coh9tjvkbx4q8yk4iyt3hoqcale9t5e97e1phmhr\"\n    },\n    \"name\" : \"Kathryne Kihn\",\n    \"id\" : \"pkur\",\n    \"nameParserTypeAlt\" : \"LN1FNx\",\n    \"script\" : \"ifq7iv4q8y29o5ozr8y4l889aet0g8ws4v5aok1gapxjyjcwyry3nyoiuuap4mn261f31cp0diss2adtg1mosltmoa00s65uow0oyj4\",\n    \"nameParserType\" : \"LN1FN1\"\n  }, {\n    \"score\" : 22.78411006834251,\n    \"firstLastName\" : {\n      \"firstName\" : \"Sean\",\n      \"lastName\" : \"Bernhard\",\n      \"id\" : \"j71x\",\n      \"script\" : \"665f3cu0exooeyl8xiztinhyeqpxkvmedqfz6lqqlyzpsrp1mtrj0vlw092j0typ5t9ognntibj1p32\"\n    },\n    \"name\" : \"Lou Wiza PhD\",\n    \"id\" : \"1264\",\n    \"nameParserTypeAlt\" : \"LN2FN2\",\n    \"script\" : \"t48ho87mpyh7zmf43w6b3fqpsk0qfahcguyoz8g4985anwegml2l6c7ywrhfwbkmkhlqzum3vx5o9d\",\n    \"nameParserType\" : \"FN1LN2\"\n  }, {\n    \"score\" : 7.928219712828389,\n    \"firstLastName\" : {\n      \"firstName\" : \"Stacee\",\n      \"lastName\" : \"Tremblay\",\n      \"id\" : \"z512\",\n      \"script\" : \"nwc8269fwd11o\"\n    },\n    \"name\" : \"Evelin Brown\",\n    \"id\" : \"0j07\",\n    \"nameParserTypeAlt\" : \"FN2LN2\",\n    \"script\" : \"xmecp2ydqc0qcd0vj7fo2yyb7ygybuq509s8boigw457l69s7d24ceszj7jtarh6x3vxg7m5e7stq46azfb65dq8si84bkxeqjh7wjwzgyvsw\",\n    \"nameParserType\" : \"LN2FNx\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0e97603c-15fd-3ca3-b0a1-b4e0d9821369",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "parseNameBatch",
          "schema" : {
            "properties" : {
              "personalNames" : {
                "description" : "Classified parsed names",
                "items" : {
                  "$ref" : "#/components/schemas/PersonalNameParsedOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchPersonalNameParsedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 79
  }, {
    "id" : "5c996a38-08c6-33f4-b046-c73b74896b0f",
    "name" : "Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context. - 403",
    "request" : {
      "urlPath" : "/api2/json/parseName/g6606vtawu6o0bde6opsf0qdskcw0akj4t3cl38bvbahoqcyjteep9les36fz89ow4p1j4og4qczy4wwgk6hh63hcmy9dqxoakhw6d0e0l2d5vpw9yb6oqneosjlq4ovy53oxkpf73n/ck2ibdjxi1edkwb9dxkwd9pw8lmevgvylyp982wtim5qlkt2mvvjekv8",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "5c996a38-08c6-33f4-b046-c73b74896b0f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "parseNameGeo"
        }
      }
    },
    "insertionIndex" : 80
  }, {
    "id" : "293d0a0e-8dea-3646-9bd6-65bbb8be03e8",
    "name" : "Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context. - 401",
    "request" : {
      "urlPath" : "/api2/json/parseName/vgyf2nlxhsm2yp5qcpa394b8ff52vf7oywq03xzlq7v0jg4oajqig1tpoebbj7ui58fik3qo0je/nv0nqfwotg5hfhx5wzr5gcz84k1swy4hypxcp44qyj9nh6t65wcn5t1g4h9t8c9umvk3elu55w6o1aah2p0xye3fba8zon7g8eqqcowlaegtvmhjtv2k3931",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "293d0a0e-8dea-3646-9bd6-65bbb8be03e8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "parseNameGeo"
        }
      }
    },
    "insertionIndex" : 81
  }, {
    "id" : "6af7beff-b4b8-3db3-94e1-3f763b6f2a66",
    "name" : "Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context. (application/json)",
    "request" : {
      "urlPath" : "/api2/json/parseName/xgoidi9d25txigdlt3hl5cg3zvdmt5eb74i8z45fh6o40mablsz89j6t296mf47gpv4k7drpkj0ph324x1azqv53rh2mj9fny86f/wglffs6mbp4sopvxmcvg802v4cilgso3z7dttun4h9155wlzowfusgnk3zwxg4gk2o7coorpxba54wrjh7onz5dm563egd0ranfh1ygy305nep0jdxgwhs8b0lbmcejpzy9bubt7b",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"score\" : 3.313415195078484,\n  \"firstLastName\" : {\n    \"firstName\" : \"Charley\",\n    \"lastName\" : \"Green\",\n    \"id\" : \"jbtz\",\n    \"script\" : \"1t29e4r40vwmryk1qh5q0ibm5i6n4b1fa\"\n  },\n  \"name\" : \"Mariann Cummings\",\n  \"id\" : \"h25d\",\n  \"nameParserTypeAlt\" : \"LN1FN2\",\n  \"script\" : \"rb2lrcvx9jcisb41eiezjbaloirus13jusuha37ylky3\",\n  \"nameParserType\" : \"FN2LN2\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6af7beff-b4b8-3db3-94e1-3f763b6f2a66",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "parseNameGeo",
          "schema" : {
            "properties" : {
              "firstLastName" : {
                "$ref" : "#/components/schemas/FirstLastNameOut"
              },
              "id" : {
                "type" : "string"
              },
              "name" : {
                "description" : "The input name",
                "type" : "string"
              },
              "nameParserType" : {
                "description" : "Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.",
                "enum" : [ "FN1LN1", "LN1FN1", "FN1LN2", "LN2FN1", "FN1LNx", "LNxFN1", "FN2LN1", "LN1FN2", "FN2LN2", "LN2FN2", "FN2LNx", "LNxFN2", "FNxLN1", "LN1FNx", "FNxLN2", "LN2FNx", "FNxLNx", "LNxFNx" ],
                "type" : "string"
              },
              "nameParserTypeAlt" : {
                "description" : "Second best alternative parsing. Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.",
                "enum" : [ "FN1LN1", "LN1FN1", "FN1LN2", "LN2FN1", "FN1LNx", "LNxFN1", "FN2LN1", "LN1FN2", "FN2LN2", "LN2FN2", "FN2LNx", "LNxFN2", "FNxLN1", "LN1FNx", "FNxLN2", "LN2FNx", "FNxLNx", "LNxFNx" ],
                "type" : "string"
              },
              "score" : {
                "description" : "Higher score is better, but score is not normalized. Use calibratedProbability if available. ",
                "format" : "double",
                "maximum" : 100,
                "minimum" : 0,
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "PersonalNameParsedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 82
  }, {
    "id" : "cd1ae5f4-8aed-3709-8e09-bfadfd497677",
    "name" : "Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.  - 403",
    "request" : {
      "urlPath" : "/api2/json/parseName/6ty95buitswnwzlac4eorqtiqnzqvfxceg8okpnjwnz649fegx79qtc9tfq5bh0y745418oatt3mqxua7mq4dzp",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "cd1ae5f4-8aed-3709-8e09-bfadfd497677",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "parseName"
        }
      }
    },
    "insertionIndex" : 83
  }, {
    "id" : "359333df-c1be-34cd-bfec-87b8e067ffba",
    "name" : "Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.  - 401",
    "request" : {
      "urlPath" : "/api2/json/parseName/ulyrf6yn3u0z0ox4cj4i2k1v0htdq6y30glk1elikyr30vxiwh51wvzv4dbp2jsp49yf4xnck3t1pfky0ino5n",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "359333df-c1be-34cd-bfec-87b8e067ffba",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "parseName"
        }
      }
    },
    "insertionIndex" : 84
  }, {
    "id" : "74b73060-a76e-3e13-9cc1-4b3a1b2386c1",
    "name" : "Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.  (application/json)",
    "request" : {
      "urlPath" : "/api2/json/parseName/e62lyda9hvqow9kz9r69gqmjrjg3uaowllxvi152j3zz9epdu42e9ff8xm7dv4tm1qjk4odre2f9z5n8durw60batlcxay6uwo3t1whgp0tkn8bru38vb12mpqazh22podesof6k6w",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"score\" : 44.63904094034847,\n  \"firstLastName\" : {\n    \"firstName\" : \"Caleb\",\n    \"lastName\" : \"Gerlach\",\n    \"id\" : \"1v18\",\n    \"script\" : \"i03u7ovyu06xiyvbluhq71tquyaefwg9psym9v5iqaa3z2fvzjk7loxesw0mb015z\"\n  },\n  \"name\" : \"Len Thompson IV\",\n  \"id\" : \"w2ry\",\n  \"nameParserTypeAlt\" : \"LN2FN1\",\n  \"script\" : \"5jwj3em0j2z2nx3mgjcn7vtf97bm69ls9yg6pxtddi7jc9zyzrvjhcz0am275tczzc2o9dojddzsdzrxuj2okjnsfqb11ha6kzk0fp668rb02ev19zb5m50f9rnw39yxl59zjhjmal3rxbo3j8xuxh\",\n  \"nameParserType\" : \"FNxLN1\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "74b73060-a76e-3e13-9cc1-4b3a1b2386c1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "parseName",
          "schema" : {
            "properties" : {
              "firstLastName" : {
                "$ref" : "#/components/schemas/FirstLastNameOut"
              },
              "id" : {
                "type" : "string"
              },
              "name" : {
                "description" : "The input name",
                "type" : "string"
              },
              "nameParserType" : {
                "description" : "Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.",
                "enum" : [ "FN1LN1", "LN1FN1", "FN1LN2", "LN2FN1", "FN1LNx", "LNxFN1", "FN2LN1", "LN1FN2", "FN2LN2", "LN2FN2", "FN2LNx", "LNxFN2", "FNxLN1", "LN1FNx", "FNxLN2", "LN2FNx", "FNxLNx", "LNxFNx" ],
                "type" : "string"
              },
              "nameParserTypeAlt" : {
                "description" : "Second best alternative parsing. Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.",
                "enum" : [ "FN1LN1", "LN1FN1", "FN1LN2", "LN2FN1", "FN1LNx", "LNxFN1", "FN2LN1", "LN1FN2", "FN2LN2", "LN2FN2", "FN2LNx", "LNxFN2", "FNxLN1", "LN1FNx", "FNxLN2", "LN2FNx", "FNxLNx", "LNxFNx" ],
                "type" : "string"
              },
              "score" : {
                "description" : "Higher score is better, but score is not normalized. Use calibratedProbability if available. ",
                "format" : "double",
                "maximum" : 100,
                "minimum" : 0,
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "PersonalNameParsedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 85
  }, {
    "id" : "b92254b2-5eb1-31cd-8477-87741cc38d60",
    "name" : "Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae  - 403",
    "request" : {
      "urlPath" : "/api2/json/parseJapaneseNameBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "b92254b2-5eb1-31cd-8477-87741cc38d60",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "parseJapaneseNameBatch"
        }
      }
    },
    "insertionIndex" : 86
  }, {
    "id" : "c3727d99-ab02-3bf2-a8b9-c6cb805951c6",
    "name" : "Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae  - 401",
    "request" : {
      "urlPath" : "/api2/json/parseJapaneseNameBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "c3727d99-ab02-3bf2-a8b9-c6cb805951c6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "parseJapaneseNameBatch"
        }
      }
    },
    "insertionIndex" : 87
  }, {
    "id" : "86953e56-85a6-3107-98cc-9b3db8ab8029",
    "name" : "Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae  - 400",
    "request" : {
      "urlPath" : "/api2/json/parseJapaneseNameBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "86953e56-85a6-3107-98cc-9b3db8ab8029",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "parseJapaneseNameBatch"
        }
      }
    },
    "insertionIndex" : 88
  }, {
    "id" : "beda6f47-c38b-31b4-889c-1d333a2d718b",
    "name" : "Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae  (application/json)",
    "request" : {
      "urlPath" : "/api2/json/parseJapaneseNameBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"personalNames\" : [ {\n    \"score\" : 45.6152876726446,\n    \"firstLastName\" : {\n      \"firstName\" : \"Carita\",\n      \"lastName\" : \"Greenfelder\",\n      \"id\" : \"q306\",\n      \"script\" : \"3rxak0t9jto9td3mw20vfjrsws8hf3ko48980ki1tj8q44ny5ahke0eeh38wowdzaxvck80jlr5ckottxl28rlc9hhl7ixq30rspayvfq48qfe14aqos88t7k2c0rd\"\n    },\n    \"name\" : \"Mrs. Halley Langosh\",\n    \"id\" : \"m476\",\n    \"nameParserTypeAlt\" : \"LNxFN1\",\n    \"script\" : \"ezl1bfjbsjhbiklwueo2nnn85jinfam22t0aze4rxqba5hnft8e6bgv1kj55310ywluqjtn2ap1g0ezhrs9fhuhjfuxkjyi8kdeww\",\n    \"nameParserType\" : \"LN2FN2\"\n  }, {\n    \"score\" : 32.88133328691796,\n    \"firstLastName\" : {\n      \"firstName\" : \"Myung\",\n      \"lastName\" : \"Klein\",\n      \"id\" : \"501n\",\n      \"script\" : \"7kmhttcbrm1jmgwedyq6yc4oiuv7wqe5cy1k39mxwte196me7603gohwi1p3j5a7gf6fro09hluxw1x8256efv50lawg70hmjzprtzudihobis1dacn8pvjeaxj8zmfh9bx4d21nzp1qylmv85vkcunwlv3bpq9s7avofwrtxlp\"\n    },\n    \"name\" : \"Milton Welch\",\n    \"id\" : \"cy47\",\n    \"nameParserTypeAlt\" : \"FN1LNx\",\n    \"script\" : \"7hgonk8tmhuxycwj1v4qz2jtvdyh479g26gqdllxkjatb81p7jl6ea9l4u9p0etr1ana6tongcjxfw526kwihzbqjs86h\",\n    \"nameParserType\" : \"LNxFN2\"\n  }, {\n    \"score\" : 1.700081249967622,\n    \"firstLastName\" : {\n      \"firstName\" : \"Everett\",\n      \"lastName\" : \"O'Reilly\",\n      \"id\" : \"nj4o\",\n      \"script\" : \"eck6bnrh3umsqueqfq6zkz3xi7m425eils6qmyg8xm13dz1j8gcmro7al5p85miooflpxq1gbw69hpvmdw\"\n    },\n    \"name\" : \"Tiffiny Parisian I\",\n    \"id\" : \"ahu9\",\n    \"nameParserTypeAlt\" : \"FNxLN2\",\n    \"script\" : \"riojy6ubi5uefd9xuufs6ffqmrhv357686czgsjvxbl7r20wzv80ycauufvs1jeit5f0gptw4lvq30o51hhu3vb5l1ylnzw5yw359rj6b8kpp79s5h1vnkfk6qddum1ppd9q5spmfj7buvbl6dhzf7xdto14mc21py4hmp427u9megvocv5t\",\n    \"nameParserType\" : \"FN2LN1\"\n  }, {\n    \"score\" : 38.04474035952025,\n    \"firstLastName\" : {\n      \"firstName\" : \"Agustin\",\n      \"lastName\" : \"Schumm\",\n      \"id\" : \"9716\",\n      \"script\" : \"40k17tns32kqrn05ku8vau4rx5ldp71tbnyvsxf7ot4ppwjgscxomvr50prvjrvl9519kbeem9zdtcg6ypwlgcdg19m3kwh6rcmo1k\"\n    },\n    \"name\" : \"Charley Spinka\",\n    \"id\" : \"1b25\",\n    \"nameParserTypeAlt\" : \"FN2LN1\",\n    \"script\" : \"32s9y4ccp6wuybivuorn9husyuc2o01jr5lg2jk7nsnpm6bcrkp66hp2dut1xq28zstxy2v4d5jlqqlb7ogvy7yn0hwyy3lqnpsi2vmecki4wezd7ek9zen3ok96xvrde2lyytfy8glgjmhhaf0cneasz7fjs16sgoexyds0srfsumv15rukgsycpqzv2h9kuv9jyh4\",\n    \"nameParserType\" : \"LN1FN1\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "beda6f47-c38b-31b4-889c-1d333a2d718b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "parseJapaneseNameBatch",
          "schema" : {
            "properties" : {
              "personalNames" : {
                "description" : "Classified parsed names",
                "items" : {
                  "$ref" : "#/components/schemas/PersonalNameParsedOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchPersonalNameParsedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 89
  }, {
    "id" : "a5d3dbb1-4cb6-3ab9-9f14-365f843e666e",
    "name" : "Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae - 403",
    "request" : {
      "urlPath" : "/api2/json/parseJapaneseName/Roosevelt+Hayes",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "a5d3dbb1-4cb6-3ab9-9f14-365f843e666e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "parseJapaneseName"
        }
      }
    },
    "insertionIndex" : 90
  }, {
    "id" : "c2649a1c-eb82-3d0d-83db-d937d0ca954d",
    "name" : "Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae - 401",
    "request" : {
      "urlPath" : "/api2/json/parseJapaneseName/Odis+Kuhn",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "c2649a1c-eb82-3d0d-83db-d937d0ca954d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "parseJapaneseName"
        }
      }
    },
    "insertionIndex" : 91
  }, {
    "id" : "0d2cf10b-7780-3576-9b9e-9194e960254c",
    "name" : "Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae (application/json)",
    "request" : {
      "urlPath" : "/api2/json/parseJapaneseName/Yulanda+Bauch",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"score\" : 37.569858124683634,\n  \"firstLastName\" : {\n    \"firstName\" : \"Ignacio\",\n    \"lastName\" : \"Lang\",\n    \"id\" : \"463h\",\n    \"script\" : \"i540rdin3m3oavzabv6tvsn8w46l3ynx09rn4by7qxq1hyfjys701mdev862rlolxbj25u6o0y02771m5vzoi7d2p8n2ylw33x1pm2bp1pllpeki7hki43ohhz989ozpjzycrvgyghtoczk75dhehideplw9ija2tq4extigivocxm2xvkt4wg\"\n  },\n  \"name\" : \"Marisa Torphy\",\n  \"id\" : \"t183\",\n  \"nameParserTypeAlt\" : \"FN2LN2\",\n  \"script\" : \"t74walctbsjehn6gt0p2fh6ywpkfytc52tyutpr7kouj7sm9sifu2phxtiyndqiv8zl6cy6dei4j0abby1s7anxmtxgx2arw6k6l66k2ykzjudo8364xvjah6q58etlj2ln7r2me3m1jwxpuic7j1l5wynf67zrdaqozvn3qbd83a6v08b1fs11tt\",\n  \"nameParserType\" : \"LN2FNx\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0d2cf10b-7780-3576-9b9e-9194e960254c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "parseJapaneseName",
          "schema" : {
            "properties" : {
              "firstLastName" : {
                "$ref" : "#/components/schemas/FirstLastNameOut"
              },
              "id" : {
                "type" : "string"
              },
              "name" : {
                "description" : "The input name",
                "type" : "string"
              },
              "nameParserType" : {
                "description" : "Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.",
                "enum" : [ "FN1LN1", "LN1FN1", "FN1LN2", "LN2FN1", "FN1LNx", "LNxFN1", "FN2LN1", "LN1FN2", "FN2LN2", "LN2FN2", "FN2LNx", "LNxFN2", "FNxLN1", "LN1FNx", "FNxLN2", "LN2FNx", "FNxLNx", "LNxFNx" ],
                "type" : "string"
              },
              "nameParserTypeAlt" : {
                "description" : "Second best alternative parsing. Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.",
                "enum" : [ "FN1LN1", "LN1FN1", "FN1LN2", "LN2FN1", "FN1LNx", "LNxFN1", "FN2LN1", "LN1FN2", "FN2LN2", "LN2FN2", "FN2LNx", "LNxFN2", "FNxLN1", "LN1FNx", "FNxLN2", "LN2FNx", "FNxLNx", "LNxFNx" ],
                "type" : "string"
              },
              "score" : {
                "description" : "Higher score is better, but score is not normalized. Use calibratedProbability if available. ",
                "format" : "double",
                "maximum" : 100,
                "minimum" : 0,
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "PersonalNameParsedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 92
  }, {
    "id" : "7b114f72-f08b-39f3-b063-e5269aa16fc6",
    "name" : "Infer the likely first/last name structure of a name, ex. 王晓明 -> 王(surname) 晓明(given name). - 403",
    "request" : {
      "urlPath" : "/api2/json/parseChineseNameBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "7b114f72-f08b-39f3-b063-e5269aa16fc6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "parseChineseNameBatch"
        }
      }
    },
    "insertionIndex" : 93
  }, {
    "id" : "d794e8f5-38ec-3272-ae81-36d20bbfaf5d",
    "name" : "Infer the likely first/last name structure of a name, ex. 王晓明 -> 王(surname) 晓明(given name). - 401",
    "request" : {
      "urlPath" : "/api2/json/parseChineseNameBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "d794e8f5-38ec-3272-ae81-36d20bbfaf5d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "parseChineseNameBatch"
        }
      }
    },
    "insertionIndex" : 94
  }, {
    "id" : "84c54a87-9cb6-3c08-ba57-dd83e09ae1e9",
    "name" : "Infer the likely first/last name structure of a name, ex. 王晓明 -> 王(surname) 晓明(given name). - 400",
    "request" : {
      "urlPath" : "/api2/json/parseChineseNameBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "84c54a87-9cb6-3c08-ba57-dd83e09ae1e9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "parseChineseNameBatch"
        }
      }
    },
    "insertionIndex" : 95
  }, {
    "id" : "d9185e70-c405-3eab-8dfd-77368127307a",
    "name" : "Infer the likely first/last name structure of a name, ex. 王晓明 -> 王(surname) 晓明(given name). (application/json)",
    "request" : {
      "urlPath" : "/api2/json/parseChineseNameBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"personalNames\" : [ {\n    \"score\" : 90.67566467952467,\n    \"firstLastName\" : {\n      \"firstName\" : \"Annetta\",\n      \"lastName\" : \"Cruickshank\",\n      \"id\" : \"5w5p\",\n      \"script\" : \"n5f3c96hqjme0tz3zkjk3544f5w0v2z8bmy2zh7fg1qi1a3t2gp8mkjmej2y8ismi78fg966aruz10h4m3899iqqo7hj1ftnw0xoaarwcbihw7bfr0xbzeu0cf0im68uheqdajaimkf7esnk2y3uqpl72e4zlu3163aospekxed963ilx3vzc78k24jr0\"\n    },\n    \"name\" : \"Gina Goyette\",\n    \"id\" : \"eh1i\",\n    \"nameParserTypeAlt\" : \"LN1FN2\",\n    \"script\" : \"wmvfb1j4vbimellzxj3uwt413qmfo8jo6lyadjaz5cwpm4tu97f0gargjm1cfygnlzs6kh\",\n    \"nameParserType\" : \"FN1LN1\"\n  }, {\n    \"score\" : 17.454037746667296,\n    \"firstLastName\" : {\n      \"firstName\" : \"Delmer\",\n      \"lastName\" : \"Beer\",\n      \"id\" : \"hv1t\",\n      \"script\" : \"9s5md8alf7fpguz10zmjs18q8nzs4csuwerkfko81mihip3ejd3201ewv5pkbhhr1dj1dpvlnokzn6mdzn7bs2ger3n4wmfykmcudlhsfcgddbz86oey4emw5uye6hlidkibn9s6qfusxa0mq0g2xozmna0rungvwzd8k55h44689xzwdwajbb9g\"\n    },\n    \"name\" : \"Alfonso Mertz\",\n    \"id\" : \"0v54\",\n    \"nameParserTypeAlt\" : \"LN2FN1\",\n    \"script\" : \"ku1y4tc738urkjfk91ldm38x3mnzjz5bz0d78g3ry5evm63aafos9hy6\",\n    \"nameParserType\" : \"LN1FN1\"\n  }, {\n    \"score\" : 89.46995935386535,\n    \"firstLastName\" : {\n      \"firstName\" : \"Liberty\",\n      \"lastName\" : \"Collier\",\n      \"id\" : \"0aq4\",\n      \"script\" : \"olfnwlaramo\"\n    },\n    \"name\" : \"Shannon Smith\",\n    \"id\" : \"f5kg\",\n    \"nameParserTypeAlt\" : \"FN2LN2\",\n    \"script\" : \"xrunw4jl6ukw8hl5hw7gncwsu6z75zvf24w92ftq3\",\n    \"nameParserType\" : \"FN2LN1\"\n  }, {\n    \"score\" : 50.93847802753111,\n    \"firstLastName\" : {\n      \"firstName\" : \"Mohammad\",\n      \"lastName\" : \"Rosenbaum\",\n      \"id\" : \"j29q\",\n      \"script\" : \"ihlfw12mdx6y1d4l12eao3ryapz26v9af7jqvi6thop69h9kav7f4bilwvn022nhic4tai89w2bnb89xordq0jwjhllhbi90460ernwa6iau79nw3f3db76l7gxbkr0s0pif9bts\"\n    },\n    \"name\" : \"Benny Mohr\",\n    \"id\" : \"7et7\",\n    \"nameParserTypeAlt\" : \"LN1FN1\",\n    \"script\" : \"bzuzyo4s3f5ob656uzuy9pkm6h80wha1891ozvdbmcjaou79op7knh0z86kdgrn6wre17d13xqx2ouj2n3w51b249ukdkz3oj7pzg8690clorfcl4rtl33330ztpiqqeev5t\",\n    \"nameParserType\" : \"LN2FN1\"\n  }, {\n    \"score\" : 8.405479178804287,\n    \"firstLastName\" : {\n      \"firstName\" : \"Britney\",\n      \"lastName\" : \"Wiegand\",\n      \"id\" : \"6767\",\n      \"script\" : \"cx8vxx73mf1oyy632oom5gsxx7jxjquur4spj1qfee7ypwv6wd7i0uelxz2w8bj8bwtxrwxh00tfb29by4nc\"\n    },\n    \"name\" : \"Porter Reynolds\",\n    \"id\" : \"3ux8\",\n    \"nameParserTypeAlt\" : \"LN2FNx\",\n    \"script\" : \"4xo3pbgnay9auaziskf\",\n    \"nameParserType\" : \"FNxLN1\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d9185e70-c405-3eab-8dfd-77368127307a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "parseChineseNameBatch",
          "schema" : {
            "properties" : {
              "personalNames" : {
                "description" : "Classified parsed names",
                "items" : {
                  "$ref" : "#/components/schemas/PersonalNameParsedOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchPersonalNameParsedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 96
  }, {
    "id" : "0fbf200c-94bd-3a32-8f44-4d0241d0e794",
    "name" : "Infer the likely first/last name structure of a name, ex. 王晓明 -> 王(surname) 晓明(given name) - 403",
    "request" : {
      "urlPath" : "/api2/json/parseChineseName/Rob+Dietrich",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "0fbf200c-94bd-3a32-8f44-4d0241d0e794",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "parseChineseName"
        }
      }
    },
    "insertionIndex" : 97
  }, {
    "id" : "5f976e91-3e5c-3317-8144-c7fae7be99a7",
    "name" : "Infer the likely first/last name structure of a name, ex. 王晓明 -> 王(surname) 晓明(given name) - 401",
    "request" : {
      "urlPath" : "/api2/json/parseChineseName/Karine+Deckow",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "5f976e91-3e5c-3317-8144-c7fae7be99a7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "parseChineseName"
        }
      }
    },
    "insertionIndex" : 98
  }, {
    "id" : "3e69b650-3d0e-3502-92db-f5cc2e351000",
    "name" : "Infer the likely first/last name structure of a name, ex. 王晓明 -> 王(surname) 晓明(given name) (application/json)",
    "request" : {
      "urlPath" : "/api2/json/parseChineseName/Will+Barton",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"score\" : 54.48362078067143,\n  \"firstLastName\" : {\n    \"firstName\" : \"Ronnie\",\n    \"lastName\" : \"Lebsack\",\n    \"id\" : \"5ke4\",\n    \"script\" : \"nmip9lfyuno6hp7b64qzmzd4pflhxsl6mqtg9xupm14j2dsz7afe2x503n35nlzp10ekv9obrnzmvfurshl0s16hj889wes3aclk\"\n  },\n  \"name\" : \"Ms. Ignacio Wyman\",\n  \"id\" : \"t44u\",\n  \"nameParserTypeAlt\" : \"LN1FNx\",\n  \"script\" : \"xxt8xxu9fe44cj213psucgnrij2o53udom7v4riziqfpy6gjb61oxys8frkemip9750snrt5xve5mtvmi9fqodinyuydri44pp0jzp0zyc2v43y2mijr1ba\",\n  \"nameParserType\" : \"LNxFN1\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3e69b650-3d0e-3502-92db-f5cc2e351000",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "parseChineseName",
          "schema" : {
            "properties" : {
              "firstLastName" : {
                "$ref" : "#/components/schemas/FirstLastNameOut"
              },
              "id" : {
                "type" : "string"
              },
              "name" : {
                "description" : "The input name",
                "type" : "string"
              },
              "nameParserType" : {
                "description" : "Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.",
                "enum" : [ "FN1LN1", "LN1FN1", "FN1LN2", "LN2FN1", "FN1LNx", "LNxFN1", "FN2LN1", "LN1FN2", "FN2LN2", "LN2FN2", "FN2LNx", "LNxFN2", "FNxLN1", "LN1FNx", "FNxLN2", "LN2FNx", "FNxLNx", "LNxFNx" ],
                "type" : "string"
              },
              "nameParserTypeAlt" : {
                "description" : "Second best alternative parsing. Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.",
                "enum" : [ "FN1LN1", "LN1FN1", "FN1LN2", "LN2FN1", "FN1LNx", "LNxFN1", "FN2LN1", "LN1FN2", "FN2LN2", "LN2FN2", "FN2LNx", "LNxFN2", "FNxLN1", "LN1FNx", "FNxLN2", "LN2FNx", "FNxLNx", "LNxFNx" ],
                "type" : "string"
              },
              "score" : {
                "description" : "Higher score is better, but score is not normalized. Use calibratedProbability if available. ",
                "format" : "double",
                "maximum" : 100,
                "minimum" : 0,
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "PersonalNameParsedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 99
  }, {
    "id" : "4bc6542c-0d86-3e0c-873d-74b7667f350d",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context. - 403",
    "request" : {
      "urlPath" : "/api2/json/originBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "4bc6542c-0d86-3e0c-873d-74b7667f350d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "originBatch"
        }
      }
    },
    "insertionIndex" : 100
  }, {
    "id" : "40cba274-a409-346d-a2c9-11e1959cf8fc",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context. - 401",
    "request" : {
      "urlPath" : "/api2/json/originBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "40cba274-a409-346d-a2c9-11e1959cf8fc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "originBatch"
        }
      }
    },
    "insertionIndex" : 101
  }, {
    "id" : "d48593bd-90bf-33a6-a9db-57ec93bfee03",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context. - 400",
    "request" : {
      "urlPath" : "/api2/json/originBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "d48593bd-90bf-33a6-a9db-57ec93bfee03",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "originBatch"
        }
      }
    },
    "insertionIndex" : 102
  }, {
    "id" : "80defecd-02fd-3663-93c9-87ac342b6d06",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context. (application/json)",
    "request" : {
      "urlPath" : "/api2/json/originBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"personalNames\" : [ {\n    \"lastName\" : \"Monahan\",\n    \"probabilityCalibrated\" : 0.05890550835151154,\n    \"script\" : \"2i18p9a1bbag4eu17wfzp\",\n    \"regionOrigin\" : \"hsxn2rn24xw9xnedkv3b1t75lwriv2e4l0u4vzbn3f9zc6zm5u5p7li53ufqr1hcnbtboj3o9id5uea7aj7yg78z62kbz68ygdb8ab9j6k8jtaz7zopc492pfwvlbajuivzvc2n52n7j\",\n    \"topRegionOrigin\" : \"hjwp7f5o2wp60hh39c638do6c2c10txnpfzwwzuigb2lbblphkfk3n7l1rqxhxz4cw68saz7mv8rr0br1r28a9z9f441cgt4m251vlonep6e21q1lo5715yj3ow05p66torvt3dnid53lz1gpl78ata\",\n    \"firstName\" : \"Kurt\",\n    \"score\" : 57.80986080454643,\n    \"subRegionOrigin\" : \"c0r2uz6bfjdgo9u4wszm2qvz8uvj99ccibp64idapixeapivxmz2cjw9ecoxtgj1uk5uars3hgkd9gmok3zszyfm17q7kw97jr2s7rvi7xqzcmfs7s6egt7783025mmiwgofxmyz8927t0pih9ckf8dkqcydddyew6k09fkx2w4qyt00ij6s\",\n    \"probabilityAltCalibrated\" : -0.8284173330046498,\n    \"countriesOriginTop\" : [ \"y4b2byay0m6aoh8g6f1qoepxga43kuv1u0i8bdy6hku0mdrk1id6xeqn9qi2kl95cgsnr3qalbft1t4pkku17z2maa2oav18kwxb55qy84o7feivrkxm2izf91p3pbx5nqqox5ilf7i3xm89a7hvq6nhpsy6\", \"89oqj8rg78g6cc1nhejgyeg5izknhcu7wqnkxr11qn969bnhyxos82a3yncgymw4ug6o45ws0cc13a7t9eea13bj7ebn4y2oht5fom7bz28g19wvs1rwx5ib3chbqs8xckltmagcddhj93rrev6q2ok23t25psq652da50t616gd\" ],\n    \"countryOrigin\" : \"yjuv30j3p1zkdy3z6dqiw93x7romi1c29docv50lvpa6l4kbgxy07ikmszmr6ivj3f7428nh8yo3a2s0vaqyj025iu8t01uejdlhcppo8ss3iboshtqs8ekmuk0oc1f262sttkttwjsuzr3cli2a64ezzpwga7xlb0xrxyfeweidr35bppp1l\",\n    \"id\" : \"89tl\",\n    \"countryOriginAlt\" : \"az93e17y4v519hxsx32q53b1y9u41crh79e4mrk2d7n0xt8yaknrq3u31g375boq4ck9ojcbvhnwtobn43mhbjrjj23h2fiz5w23plmgad899\"\n  }, {\n    \"lastName\" : \"Moen\",\n    \"probabilityCalibrated\" : 0.5239876851759346,\n    \"script\" : \"2ta3iigqyaarv3vbt6e985x2waj35wz8lvaac49da3j9ny1jdftlohjq6nffan7rmb4eufw32vrgsygrdkoj1gdbhjsfvap5724ns7atu6fll8yv3d3b8avy33zyyw41r3rd1wi9ehl06d0\",\n    \"regionOrigin\" : \"ukg5tlrjrh3uopcmv5z0wdobhcjizts6zumej6wjgwkzb6s6h8tnud6d21yt3h41j0lzvr0wkvepmwfsbllwjgw2rsowm94c06saewabnrlmbfetltoxm1vndeezx5bvonf1uenjpk1op3hkr954ww7gkbi2gjfnd0f2fcm962f59lz2ls0fw\",\n    \"topRegionOrigin\" : \"az6jegis1ta0iairb3tizm2yuigizf0sxl7t5b5ccp\",\n    \"firstName\" : \"Franchesca\",\n    \"score\" : 94.76705098612732,\n    \"subRegionOrigin\" : \"dkzpp2zrw4s7rhqpkastuh95yphfsgoq3pyuuxqka95coepi81zs872y68cvz94otcxbjzae70lcxnrx44v1mdfexs43x6sxgfn66azlv6a13rrqdigxbfypxlaaoxlf3p3pqwmyo2qw3edxi0pxnx1kq2yurl2howj9jgek4dfhmbenolouyocqm4zxq2\",\n    \"probabilityAltCalibrated\" : -0.2870236163440125,\n    \"countriesOriginTop\" : [ \"ofoj02qn22bka0b1ukf8i93ik2pgpa5u6myyfz0q6ras742nfolurh39114szylobnppnje29c1hbljeyxeb0yd249gf2pnago99pjt69peniq9sqnra5adzaow\", \"cmb95l871j24iv1ph86kyps1rb2zge3vb0m9vzi2mqpja4o4np1kv5t87ju3rntiwkedw2x72riyae93ohv9x79cdruhl20af5oxjcbmprapecy5i05\", \"3a971blp0pre27fvqvfferoyuz4rifvsk60fdkoj5s1fl70nfm\", \"erzmskx15jg7ks6mtqoqorr4nrjdl009y9ost3\" ],\n    \"countryOrigin\" : \"iktwr30ra73krupo5979gaie3gxjh4zzn09af2itoujt\",\n    \"id\" : \"dq22\",\n    \"countryOriginAlt\" : \"bxhyvt7wy2bwgi28y1zamdb56taq826q09kj2f8ievaf64fujrlq0woc9ea6oae4egq4c4iicwh\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "80defecd-02fd-3663-93c9-87ac342b6d06",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "originBatch",
          "schema" : {
            "description" : "Represents the output of inferring the LIKELY origin from a list of personal names.",
            "properties" : {
              "personalNames" : {
                "description" : "Classified origined names",
                "items" : {
                  "$ref" : "#/components/schemas/FirstLastNameOriginedOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchFirstLastNameOriginedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 103
  }, {
    "id" : "fb74bfd7-c190-32e9-96b0-1ec1e7290308",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use 'diaspora' instead. - 403",
    "request" : {
      "urlPath" : "/api2/json/origin/Bruce/Turcotte",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "fb74bfd7-c190-32e9-96b0-1ec1e7290308",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "origin"
        }
      }
    },
    "insertionIndex" : 104
  }, {
    "id" : "618721e3-49cc-30b7-9553-422bbb443675",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use 'diaspora' instead. - 401",
    "request" : {
      "urlPath" : "/api2/json/origin/Niesha/D%27Amore",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "618721e3-49cc-30b7-9553-422bbb443675",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "origin"
        }
      }
    },
    "insertionIndex" : 105
  }, {
    "id" : "5f7cc3c1-5b49-3cb2-a9d3-c32864169feb",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use 'diaspora' instead. (application/json)",
    "request" : {
      "urlPath" : "/api2/json/origin/Lou/Lemke",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"lastName\" : \"Predovic\",\n  \"probabilityCalibrated\" : 0.5885272887265398,\n  \"script\" : \"odupeky9rz6\",\n  \"regionOrigin\" : \"t84eruoc89l9lc3u7q8qxbvep9rap0q0x2qfz5jdtvm1rjfb5peiyc9hkh2fa13kgwc4d9oy46lbpcufacyxitnqblt3db2wbgj9l79crfx2ucx7x91u8cbq01c6aizbrkjv96sbsj36v6k2mmulqgjh1hxwdl9ybym4enmf2\",\n  \"topRegionOrigin\" : \"mo41kxqzf0lmbpz5nj0ijzakr2ekhcyc40\",\n  \"firstName\" : \"Chieko\",\n  \"score\" : 49.764879844232,\n  \"subRegionOrigin\" : \"i3cqzn7s2j1in98js5fz15mlm25r5s32683rjgezzcsc2ciqwxtevek59xo4vmk03whdw6kh4i0aw6b0cbwnxf39g6sp6h8r24i283m1e8bqsnlmq6zy340ureb412tk1clwh6anv7tvkwbn8nn392lvipqnpf\",\n  \"probabilityAltCalibrated\" : 0.27619564190141044,\n  \"countriesOriginTop\" : [ \"v90oee\", \"y9dtcx1krzad8huy0duvgqsy6qswoyjf1a4bqbu2wf80skzwki7jfnh7wdx7lfpq30wtfddnre4sfl3iomv8nvmwz85hg0vm7kx3\", \"wzx0c63jmf8vbcaaj6c7lkkoylx8eeq0xy0q28ot7b9pca90pnqbz29jun302klwwaax9vzbiwydzxwr2eeqjbby3c9dxm9wd999k6pw1a5fnanio70tydm1snax06vxc8nyz55te9xb9wx7x1gqz21f3qyqm6enlvm8rdgpnsq9on7ue97\", \"pnm9rrq47ds2okvcp5wf3nfy4iy3gih9zo3enwo7or4g5dxudw11svkk5p9wqu7gmdea248sy5kjnudpo3wues442i6fp9aj2sd3sk1wum3c2n49iv4saz02mxutj1y6n6r\", \"mu2bxrc0zntvs6su1ro8p5mntsbbyvpjz4rauvexpjjklpf2pqu9ht3bv0agf57djhrv20qpnycebau32u\", \"uvh\", \"7xqyizer9hiszrlbs2vsa2nsq8oa7e9vmt9adxnla\", \"bexewp7g572g6nvy9rzb49zy4iympzr47dqj9aas0ipdvkd6e7821mzo3cfyw8x7pfotvko\" ],\n  \"countryOrigin\" : \"rn9bn6u2jrdvccg6k6ultgk0u6dpz04pw2wu12ci1g5953tp1xivynomjfwe512b1lxcuz3ntvspqnpw872tcvrsmbcfmmcrvppi3gr2uib0\",\n  \"id\" : \"r2xm\",\n  \"countryOriginAlt\" : \"djl5gfm5dnetfyexx162ehd0np71czqu46z7320v8ftr857ru1t9wmmlqflp21xk5dsgmyay5pyaa2lnfc8l0mqyflj8wij90ou11j49d0adltlfohbs7p040696ubdug8e2wpvcocgmd62l5128f7odlz1aid6uu8ov\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5f7cc3c1-5b49-3cb2-a9d3-c32864169feb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "origin",
          "schema" : {
            "description" : "Represents the output of inferring the LIKELY country of Origin from a personal name.",
            "properties" : {
              "countriesOriginTop" : {
                "description" : "List countries of Origin (top 10)",
                "items" : {
                  "description" : "List countries of Origin (top 10)",
                  "type" : "string"
                },
                "type" : "array"
              },
              "countryOrigin" : {
                "description" : "Most likely country of Origin",
                "type" : "string"
              },
              "countryOriginAlt" : {
                "description" : "Second best alternative : country of Origin",
                "type" : "string"
              },
              "firstName" : {
                "description" : "The first name (also known as given name)",
                "type" : "string"
              },
              "id" : {
                "type" : "string"
              },
              "lastName" : {
                "description" : "The last name (also known as family name, or surname)",
                "type" : "string"
              },
              "probabilityAltCalibrated" : {
                "description" : "The calibrated probability for countryOrigin OR countryOriginAlt to have been guessed correctly. -1 = still calibrating. ",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "probabilityCalibrated" : {
                "description" : "The calibrated probability for countryOrigin to have been guessed correctly. -1 = still calibrating. ",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "regionOrigin" : {
                "description" : "Most likely region of Origin (based on countryOrigin ISO2 code)",
                "type" : "string"
              },
              "score" : {
                "description" : "Compatibility to NamSor_v1 Origin score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. ",
                "format" : "double",
                "maximum" : 100,
                "minimum" : 0,
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              },
              "subRegionOrigin" : {
                "description" : "Most likely sub region of Origin (based on countryOrigin ISO2 code)",
                "type" : "string"
              },
              "topRegionOrigin" : {
                "description" : "Most likely top region of Origin (based on countryOrigin ISO2 code)",
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "FirstLastNameOriginedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 106
  }, {
    "id" : "bfc242c2-f5cc-3f97-89a7-df2c264a44da",
    "name" : "Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.) - 403",
    "request" : {
      "urlPath" : "/api2/json/nameTypeGeoBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "bfc242c2-f5cc-3f97-89a7-df2c264a44da",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "nameTypeGeoBatch"
        }
      }
    },
    "insertionIndex" : 107
  }, {
    "id" : "dba1a9b8-1129-306d-8420-05b2ce821e19",
    "name" : "Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.) - 401",
    "request" : {
      "urlPath" : "/api2/json/nameTypeGeoBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "dba1a9b8-1129-306d-8420-05b2ce821e19",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "nameTypeGeoBatch"
        }
      }
    },
    "insertionIndex" : 108
  }, {
    "id" : "4478ee6a-9503-333e-85aa-11fff88b222b",
    "name" : "Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.) - 400",
    "request" : {
      "urlPath" : "/api2/json/nameTypeGeoBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "4478ee6a-9503-333e-85aa-11fff88b222b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "nameTypeGeoBatch"
        }
      }
    },
    "insertionIndex" : 109
  }, {
    "id" : "e4555dc5-2571-3d29-8461-fdc1398700de",
    "name" : "Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.) (application/json)",
    "request" : {
      "urlPath" : "/api2/json/nameTypeGeoBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"properNouns\" : [ {\n    \"score\" : 97.4020768166287,\n    \"commonTypeAlt\" : \"mghxxqzrj2stdd51wffcixzahs2d5iaay1iggp9pf87bv9c4k45vfyqwl0aqma2ju75w48igovw4fuq1isyu4shkg8arb94b3memuzwi3h8b9f\",\n    \"name\" : \"Sanora Hayes\",\n    \"id\" : \"832f\",\n    \"script\" : \"l58j4tb9n378uw06lp4p3bnzh5x95tgi7rakflg9d4avdco2pvk4ycycs09g3n80vby67l2vmdcmy5lumzefg40d80a3crszqrxnzpa922asxa9yf032801fi7xc5asciyaqgk6ttvzhh7ilx1d2r7lasvmjmbwzhvqbm660o\",\n    \"commonType\" : \"5taljkqyx3vadzi3emoyavs5cg0bjx78bl1zarka40i5w3cy2iqx54ewiwf27hi2fbzb33uai3ewq98qq61vtft2kwvu9i7z0nghmfnbq2t6khvxibgrhxu4vqqj3luo\"\n  }, {\n    \"score\" : 73.42429641625591,\n    \"commonTypeAlt\" : \"3vk80ckdarnwjtwh4887qpxbg3ehhvnqpxqs8s4gznky489goxaggj2\",\n    \"name\" : \"Jovan Schamberger\",\n    \"id\" : \"k56s\",\n    \"script\" : \"kexyfts7jvgpyl8hvi76d4ty5rju5s2pzja6gp9b6pqiq2lj86qg9aeyfjfnj93irjfr0y70vra19o0z9r3h6cfz50vhj2dxmuyhqhur4xbvjea2ixc9ipifkbvn84z6dodsqlj72rfmop6nhsnxyhlvzhzmbf237cqh0fp28g\",\n    \"commonType\" : \"jbvbeytj0zdlvmb50omy3kuw3ufum64w4wdm6wd8thc2trl3g9kdnm3vt1qfac1do2uma48r1hk45f24s68raxf6hk7kfbqqaqhz02oi2srszq1q1\"\n  }, {\n    \"score\" : 59.02426412888335,\n    \"commonTypeAlt\" : \"pfqc0iop4xgbacxy51oufnzdnii9ahustobbvauvkgdauxbpfl3lw1c4x06qus98351bf7qn8kukbrwf570vcdxmv2aeezuxieacbci5ig105rlwjgz36kf0yelyk8420e8mg1zkf1wqh8ij55kb2xm9y9nba54sf6exp34lvvpl7e69zpn690dujvgvwmqese0\",\n    \"name\" : \"Rosario Rodriguez MD\",\n    \"id\" : \"t1g7\",\n    \"script\" : \"j7tedmq3a8c0cmr8a67fnqvjy62ealxrtmebgwln5gh8o4f69bfi7s5i8u2r8t782wnd74l3ay9eao82awdcuir8cxo5ia8v0iy1fi8fbcvkxrum9z76wowgff1740kt1fpq31nslqkg2t9fizjw4eni9v8udwanjz3u3qywgkpvde4yp9l9mk3\",\n    \"commonType\" : \"gb29h6tr7u8825dqb2qlu0phxxdkh5sgwteuq3r411ed9te72oxu1olo6uuhbabd2v18sz\"\n  }, {\n    \"score\" : 88.18260329012152,\n    \"commonTypeAlt\" : \"uhwp7zgng2abmixnp7xhey8jfs56rmej6gmwsarvtoesm1q5zgrw8z7h7a\",\n    \"name\" : \"Rubye Mills\",\n    \"id\" : \"j6cf\",\n    \"script\" : \"tk1ckink7lixexq7v8o4w2cnlpew4i7md86gygy0gvwj85pisqdxb2u20p\",\n    \"commonType\" : \"5uq2bgibw7ww0kr\"\n  }, {\n    \"score\" : 78.6766750098702,\n    \"commonTypeAlt\" : \"e38jyn9ihkeh723lryrx0olkzslhy0vpou1rojg0wgo89k0ix3ur25hf685915ggu6qxiiwbs0bzyyjo9mnyzn7op3l\",\n    \"name\" : \"Maximina Stokes\",\n    \"id\" : \"41hw\",\n    \"script\" : \"ckxa4tsrzh4dy3y0547h9fnwxf7rpsim6gjiag8lvse7fjxdcg88zrj4fphui80bzdtkwzc401hdu4hrcw0entl7win6zzr3047b62q3d0jpiagimrqooyf4u1hrytqfcxihgx8vfq\",\n    \"commonType\" : \"f388as2m27ukvwcnbro2rote636udwtmahwwnnfkfdx31zvv9t3y36es38wyi1qhkvaw3dzwhak2jjmigduz91qaaiwt6x9hd2zrouutjtmx2c2wllet12yjwj2xynme6v7i8bhsxdh8mge8zff8bo8g0suk8rifbcmz1v3w\"\n  }, {\n    \"score\" : 88.06273365526202,\n    \"commonTypeAlt\" : \"up5t4\",\n    \"name\" : \"Miss Xuan Lakin\",\n    \"id\" : \"6vbl\",\n    \"script\" : \"kmnk0lq3kvnf0u4hu3a9bfqdjsrabks9oqov0xo3flflojspdp51qskd4w6x7mgo2cez3xwjc79e0nue81z9tpdqei4r7plxe9s8fvs3gh48uyykedfowemdppm2lsugba0qm3a2e\",\n    \"commonType\" : \"8vu2do26quqod3tg18njvwdsredgowod4wn3l5fo6fpk6oepvjhwi4z74ak8qhlwivo6poc3czq9351sdz31s4kf0nww7b5o84ze12xckehxoys2auctelya9hcximwxkqrbsziqi8bfq1k36hks7ufhi892032bejthniz7ndb8hpdyxh83149sb06jpu\"\n  }, {\n    \"score\" : 67.15566748143206,\n    \"commonTypeAlt\" : \"r5xq66olrafs97d3qn89a0wxozpu4sbsnubvwrp2s7o58vn8wwycbuuf3n683stt7ct65n3rpjeuw3ry2pagyymszjmo8f8pu08fikaly2yls9pmmth7qktregj4l\",\n    \"name\" : \"Jaime Lehner\",\n    \"id\" : \"3kfw\",\n    \"script\" : \"ev0xgn4pn02qjz3lwhlqn6vpsbizu4dkhso5z44cfm7sqmyezw1tzhaymly15y1ghqta0bu7cg62pwg2xe3rndxpjvtqu9ukd16yob84unur0gy7osz3gn5vjkryccu3tubzjl4phc7szb8ie4fe1dzw225ukv8rtfxgxgf6y\",\n    \"commonType\" : \"pn42gztwnrg7balh1f1ik6ms0mfclqkih7ka32o0x8qxthu48z1jn4nfc3jfhezq48lx81h\"\n  }, {\n    \"score\" : 14.906726270733072,\n    \"commonTypeAlt\" : \"k7wvo03z0kn2eweqzcvqd6ohitba1o6e07hexq94f9c9k84lg1v35jb\",\n    \"name\" : \"Ms. Mario Spinka\",\n    \"id\" : \"vx1v\",\n    \"script\" : \"4864xu3ln6mgla9cjs1xo8s6ev7wj291h72usb3tx0rrbx5u2t9jzxtur3szl0myvhr6dlib0f6e67kmnsk\",\n    \"commonType\" : \"1trwfv8ekofl5m3wxfty7orshui2r5ks1b9jpyr4pi4u187juzo4goy2dzri3mf6nylix9kpu19rwgv4sxzw4beno62xsawit8twig296lvpxt\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e4555dc5-2571-3d29-8461-fdc1398700de",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "nameTypeGeoBatch",
          "schema" : {
            "description" : "Represents the output of inferring the common type (anthroponym, toponym, brand, etc.) from a list of proper names.",
            "properties" : {
              "properNouns" : {
                "description" : "Classified typed proper names",
                "items" : {
                  "$ref" : "#/components/schemas/ProperNounCategorizedOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchProperNounCategorizedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 110
  }, {
    "id" : "6ffd39ed-a950-3d90-8ffb-1ee27218c8da",
    "name" : "Infer the likely type of a proper noun (personal name, brand name, place name etc.) - 403",
    "request" : {
      "urlPath" : "/api2/json/nameTypeGeo/ajkks1s6awhndjrakwgky959kg215uhnon5lg1yv/4ytf9z3t24wpcu7ku1uy9jbdma25yhrb",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "6ffd39ed-a950-3d90-8ffb-1ee27218c8da",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "nameTypeGeo"
        }
      }
    },
    "insertionIndex" : 111
  }, {
    "id" : "c8c140fb-323d-3725-95d9-31a078b085c7",
    "name" : "Infer the likely type of a proper noun (personal name, brand name, place name etc.) - 401",
    "request" : {
      "urlPath" : "/api2/json/nameTypeGeo/ow94m1p8rhsnuxsh5nfz3x92cbq7ap/2p7lltfr8f6updphrnwpjudv5n7np0hl4y8g8pnyp9ho0pyu2db3cclf5gsi2gtjnqj5keyeiimlgyqi6bau4twjh3n3ukt5i87ed8nfxz2zdiwvluc5b537gv9qe0nwuxoxfrhm53lk9rqg2uq59d6uid5rypam9gn0x8q",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "c8c140fb-323d-3725-95d9-31a078b085c7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "nameTypeGeo"
        }
      }
    },
    "insertionIndex" : 112
  }, {
    "id" : "8aa896a8-4de2-3070-b50f-2d8b6608d209",
    "name" : "Infer the likely type of a proper noun (personal name, brand name, place name etc.) (application/json)",
    "request" : {
      "urlPath" : "/api2/json/nameTypeGeo/y205fhcgstxxynai0y5xe5zlqhtcmiouy3mylfblnzlzceztz7p1s6j7tyxsh7yxp1h1jtwt6ode01gcsjulrtr86nf6uyrhor40py5dxmu0dxdhv5gb1ttp5req38upjfmy3u1nlu57a/v1ng9fne9uhjjhc5hykoiuc3auyi7a5woinkuijltsay11nlalc4hw2q4qhgyv0sxzgs4tvka7p11zr645otgcd4h8pqtmmol",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"score\" : 57.50585876624273,\n  \"commonTypeAlt\" : \"ryubpelip5rydmsb23mtputgpdoaauhzdet6ezrmz3vmqxbqqcq3rv5dk1gnrox5ge7qizymjabyn4xkp2cyi8l6jflodoevcrdv9yfcuw8oc7p7jh6gnbwsayxnrnvkhgmb\",\n  \"name\" : \"Masako Walsh\",\n  \"id\" : \"i1b6\",\n  \"script\" : \"wlvdrxm5osz6rgxn6ihr6ldmj550k51npl5krgpttosmmvjyk0glxzat92c9yzd6zbm158b6p32t44uuprsfjlvqzs9cdw7h0361tk1c8prcl2pt2m9iadqab74\",\n  \"commonType\" : \"r1dm6qaodql55hyrj82apf9itm4qs95m55uarsj2d27qyibj2kz1slxt46we437jgz4w0o4io87qr306n5j3494nrnprz3otd7j3xv17h52o53ios2qwe8ox32n3ps8v2tszipyzcmb8jbdgryh\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8aa896a8-4de2-3070-b50f-2d8b6608d209",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "nameTypeGeo",
          "schema" : {
            "description" : "Classified typed proper names",
            "properties" : {
              "commonType" : {
                "description" : "The most likely common name type",
                "type" : "string"
              },
              "commonTypeAlt" : {
                "description" : "Best alternative for : The most likely common name type",
                "type" : "string"
              },
              "id" : {
                "type" : "string"
              },
              "name" : {
                "description" : "The input name",
                "type" : "string"
              },
              "score" : {
                "description" : "Higher score is better, but score is not normalized. Use calibratedProbability if available. ",
                "format" : "double",
                "maximum" : 100,
                "minimum" : 0,
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "ProperNounCategorizedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 113
  }, {
    "id" : "2a2bd5fe-cf93-3154-b284-ebc18b58fb2d",
    "name" : "Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.) - 403",
    "request" : {
      "urlPath" : "/api2/json/nameTypeBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "2a2bd5fe-cf93-3154-b284-ebc18b58fb2d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "nameTypeBatch"
        }
      }
    },
    "insertionIndex" : 114
  }, {
    "id" : "7d3f6bf4-c95c-3277-a726-6cad9c50ba93",
    "name" : "Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.) - 401",
    "request" : {
      "urlPath" : "/api2/json/nameTypeBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "7d3f6bf4-c95c-3277-a726-6cad9c50ba93",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "nameTypeBatch"
        }
      }
    },
    "insertionIndex" : 115
  }, {
    "id" : "f4838292-be59-31ee-85f3-9f94c9662901",
    "name" : "Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.) - 400",
    "request" : {
      "urlPath" : "/api2/json/nameTypeBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "f4838292-be59-31ee-85f3-9f94c9662901",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "nameTypeBatch"
        }
      }
    },
    "insertionIndex" : 116
  }, {
    "id" : "bcc4f917-718f-3cdc-b5d2-643362383b15",
    "name" : "Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.) (application/json)",
    "request" : {
      "urlPath" : "/api2/json/nameTypeBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"properNouns\" : [ {\n    \"score\" : 79.59043279247894,\n    \"commonTypeAlt\" : \"lvl5qygopigxuesk5orimmxy47kuro9phhzlanlg0xrg6odkhl4gtlrhfzsxsmhym1cxeuu7o7n8gw4wo5rbozgla4xnsw85jrxl7xnk7osd0tk0h2kpds79\",\n    \"name\" : \"Christoper White MD\",\n    \"id\" : \"6xm9\",\n    \"script\" : \"nte8ux2r2431dqqb76pr\",\n    \"commonType\" : \"c36sgmvoyawxmtf7a2rud2o4ox97af7a09d72yrhdmgkmewtov2sqq7ispg0ggqmsil5oa6gq3e270pw4ew7lwv\"\n  }, {\n    \"score\" : 87.97886185270515,\n    \"commonTypeAlt\" : \"gsng1dc06x2pv5jmmtwtad746vzhgvqwfq3em6ha03ld52wew3phkx\",\n    \"name\" : \"Rhett Cartwright\",\n    \"id\" : \"4jmm\",\n    \"script\" : \"qej6eecd13e1l8cw01ustjy5r1y4xhadh6frxmtnqsyh7xzzfjwi52d6o3wi94ga4fn3x2n17gvr6q8njh0gk84a72xln9xfyun\",\n    \"commonType\" : \"4k3jeqlf9ah4vt20uqz6avmsk7mwjxiek16lpbee8hmy7u0uoe2mhs33549iv9pfdm6jadly48roc65bw7k2ng5xd6wm6xx\"\n  }, {\n    \"score\" : 37.74676058593096,\n    \"commonTypeAlt\" : \"peuvxwb151lx7vrrhhjy2fw5va84w4o2fbktjrfyete4xbd0mnan55fgotocsxesc3rnxndhxlyf12u4uux6bdhf5mpfdiob6h3bgsddd89m7fnnj1090wshhlqshrfmtilurnvuqj9d6y2wnxalnvv7cpgytxranqc0orrtcdhwobgzq9om65dc2e628ex2u0thdbm\",\n    \"name\" : \"Norberto Stokes\",\n    \"id\" : \"64l4\",\n    \"script\" : \"ndko7uw94lyllfc01zes2w6nlftgg52j3u0pz2jk8481qpc3fjzj4gel1ezz30cjrnkrxm5wqyjmyav727flz6zj1e4kvsl1jac11\",\n    \"commonType\" : \"lj9k16ftpqctaaakaj46i2ytumrlrt7kq2lljik45xd9lmfric78wn0veawlitq8zacaizd32aem60l6h0b1twd6xnwsexprh5rry0yf0v\"\n  }, {\n    \"score\" : 35.26151570000948,\n    \"commonTypeAlt\" : \"jqpkg7vucbomm1jkif0bxe0qa0lh3jv19ym051sshauky2zscgd5zc54lddh7h9a5gg6q1tsz8qj43wv50x78gs6\",\n    \"name\" : \"Benny Grady\",\n    \"id\" : \"2r5p\",\n    \"script\" : \"1jkg577mejviig240dpml7jdenf1h0nmmdc3p4ncdabpvvcsxjcd6r4oomo0yotcoon386vufrtotdfqqc\",\n    \"commonType\" : \"n6duonpvtmufak744inpm6ybk6zcifq2nb7gh7xrqlaw2i8r4rt3r6s5lgbnzfu48eikwtjfp37v910ugml1p\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "bcc4f917-718f-3cdc-b5d2-643362383b15",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "nameTypeBatch",
          "schema" : {
            "description" : "Represents the output of inferring the common type (anthroponym, toponym, brand, etc.) from a list of proper names.",
            "properties" : {
              "properNouns" : {
                "description" : "Classified typed proper names",
                "items" : {
                  "$ref" : "#/components/schemas/ProperNounCategorizedOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchProperNounCategorizedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 117
  }, {
    "id" : "468db610-012c-3385-ae4e-56c22ec96fc9",
    "name" : "Infer the likely type of a proper noun (personal name, brand name, place name etc.) - 403",
    "request" : {
      "urlPath" : "/api2/json/nameType/u6ksqyoqiww1a9j0b84itiz83bopnytdatvdkvo59vwqc5pv9plqb8hvvflwkgrhwcbtf3pmraihtalhs2regnl3oyad9w2v8druj6ab5gcsfrzoiphujc5xjaevlu072ysefxwaq36mj",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "468db610-012c-3385-ae4e-56c22ec96fc9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "nameType"
        }
      }
    },
    "insertionIndex" : 118
  }, {
    "id" : "6794bc8d-0646-376b-ba2f-dabcd9e99bbd",
    "name" : "Infer the likely type of a proper noun (personal name, brand name, place name etc.) - 401",
    "request" : {
      "urlPath" : "/api2/json/nameType/jn6rnlfwk5a1kopn42xa77gxrj760rq3r778bnkz2ykuuu0v02ktns1z",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "6794bc8d-0646-376b-ba2f-dabcd9e99bbd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "nameType"
        }
      }
    },
    "insertionIndex" : 119
  }, {
    "id" : "77019f57-e8eb-33d1-938c-a3e1b335c17e",
    "name" : "Infer the likely type of a proper noun (personal name, brand name, place name etc.) (application/json)",
    "request" : {
      "urlPath" : "/api2/json/nameType/jhiteov927n0ycj861vz2xej9truzkotedrfl8ue6wvecot114b0yn7hnrg1zhl9nclcvpjwd5ev3zn9144t4x94iompxwz4jrxm0purcz475ijlyzkaac3jahljd4vn2a77xo4y77h70g3wf7crpnto4w5pfhwunpqisxg2tj5tjq24hiw1dfgbvyxdn8",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"score\" : 31.61247832590609,\n  \"commonTypeAlt\" : \"w4d00w98z6stkcb2s9w6k6cjh3d9gj18lkm3ly9djsp84\",\n  \"name\" : \"Marco Sporer\",\n  \"id\" : \"ic87\",\n  \"script\" : \"ae6yds138n5ojb8jbyp862vhecg25v4uf492y83tavtihkiiu5jiq3q50bcyuswmq1ydrywzhjsufhcbuag7swxvo94k6\",\n  \"commonType\" : \"jfqzafam0rh5i5oas7iprfw8klkbbxha6u8vuir8ckg2zqqbh7jm04hmnkagtyb6vc5plaobzoek68di7kt35ozu25evnrj9hwautm9u1q5khk0fo9owejnqrn8mrvitazpd4j1b5sfo3tv5c1ca4coo8uckkbsgcbzbp9to8aar8tbax3t5\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "77019f57-e8eb-33d1-938c-a3e1b335c17e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "nameType",
          "schema" : {
            "description" : "Classified typed proper names",
            "properties" : {
              "commonType" : {
                "description" : "The most likely common name type",
                "type" : "string"
              },
              "commonTypeAlt" : {
                "description" : "Best alternative for : The most likely common name type",
                "type" : "string"
              },
              "id" : {
                "type" : "string"
              },
              "name" : {
                "description" : "The input name",
                "type" : "string"
              },
              "score" : {
                "description" : "Higher score is better, but score is not normalized. Use calibratedProbability if available. ",
                "format" : "double",
                "maximum" : 100,
                "minimum" : 0,
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "ProperNounCategorizedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 120
  }, {
    "id" : "ea0af97a-b9c4-3f4f-bb9b-c16b9411e04a",
    "name" : "Activate/deactivate learning from a source. - 401",
    "request" : {
      "urlPath" : "/api2/json/learnable/refc09crooyh1kgucwxikhaherb7p7359emhhw8xtr6g7ete/true/sk2itgol6i0y4gfsro1zu3p35tmrn26p6w5zdnjjardwf96w44ruqfnlighg4w6qfm6ifvrbyc21r2vbh69qpivg8ctbo2y9pgun",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "ea0af97a-b9c4-3f4f-bb9b-c16b9411e04a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "learnable"
        }
      }
    },
    "insertionIndex" : 121
  }, {
    "id" : "09ed23a6-cf54-305d-8f6c-f8d62c97d2d2",
    "name" : "Activate/deactivate learning from a source. (application/json)",
    "request" : {
      "urlPath" : "/api2/json/learnable/66tfum0jjw43vbqpx7yjvkuisaq4kekmhdvsbh2uy4bsf2t4t7rwv1i0gw31ijrczb12m0e8rcjg3ta6zr2xu3n66jv8ct0vxke3nekwsgveh8gzmsjyi6gx3wy7ca7bvus52v5i1nxgnnofjeabaxij6ubwldfo0/false/g0ixv3x8v8323tgn9b",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"striped\" : true,\n  \"apiKey\" : \"p1nq37z0ih84qqqyymusmltiavj966xnyiz8mf\",\n  \"partner\" : false,\n  \"corporate\" : true,\n  \"anonymized\" : true,\n  \"learnable\" : true,\n  \"admin\" : true,\n  \"disabled\" : true,\n  \"userId\" : \"li13\",\n  \"vetted\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "09ed23a6-cf54-305d-8f6c-f8d62c97d2d2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "learnable",
          "schema" : {
            "properties" : {
              "admin" : {
                "description" : "The API Key has admin role.",
                "type" : "boolean"
              },
              "anonymized" : {
                "description" : "The API Key is anonymized (using SHA-252 digest for logging). Set learnable=false and anonymized=true for highest privacy (ie. to forget data as it's processed).",
                "type" : "boolean"
              },
              "apiKey" : {
                "description" : "The user API Key.",
                "type" : "string",
                "xml" : {
                  "name" : "api_key"
                }
              },
              "corporate" : {
                "description" : "The API Key has role corporate (ex SWIFT payments instead of Stripe payments).",
                "type" : "boolean"
              },
              "disabled" : {
                "description" : "The API Key is temporarily or permanently disabled.",
                "type" : "boolean"
              },
              "learnable" : {
                "description" : "The API Key is learnable (without assuming truthfulness) for machine learning. Set learnable=false and anonymized=true for highest privacy (ie. to forget data as it's processed).",
                "type" : "boolean"
              },
              "partner" : {
                "description" : "The API Key has partner role.",
                "type" : "boolean"
              },
              "striped" : {
                "description" : "The API Key is associated to a valid Stripe account.",
                "type" : "boolean"
              },
              "userId" : {
                "description" : "The user identifier.",
                "type" : "string"
              },
              "vetted" : {
                "description" : "The API Key is vetted (assumed truthful) for machine learning.",
                "type" : "boolean"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "APIKeyOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 122
  }, {
    "id" : "7183db7a-3a8b-3371-b00a-89d1b2b97aca",
    "name" : "[CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae - 403",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameMatchFeedbackLoop/yel2q/dpuvremfice1d7ytv7fgtcytu6yeerk65hpi2jpqgipf/Mr.+Taunya+Toy",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "7183db7a-3a8b-3371-b00a-89d1b2b97aca",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameMatchFeedbackLoop"
        }
      }
    },
    "insertionIndex" : 123
  }, {
    "id" : "06960356-143d-3b29-8071-2ccd643ee4b1",
    "name" : "[CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae - 401",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameMatchFeedbackLoop/4faz53apegkywso99hwdvduh7x91gouj9et085g288k5ybc5007r7vu6jaqytfsgwuo41vbaie15njbft5nrejqshhbyq9q7fmyocb8fdoi9q1x938cf5mtstzxfh08xdpfy1unogznh856gxhmdkk/0f13p75bmn2yzy4kwu72h3bxp14tu6wydlip39a9izjkt/Allan+Gusikowski",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "06960356-143d-3b29-8071-2ccd643ee4b1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameMatchFeedbackLoop"
        }
      }
    },
    "insertionIndex" : 124
  }, {
    "id" : "91a65a34-5f43-3c8d-8126-978d853f0964",
    "name" : "[CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae (application/json)",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameMatchFeedbackLoop/5aje8ag3ozzvx7cdvoq30ru1pzytxemm8qtuq3oe89wzu5mjc50rne0jz5tiyq1p8hdrbucs60kj5rcxpwfouifdqiwf46fha8s3l7vk74gksbi50g3cg5n49/dnhj00lfrvvz06/Mr.+Irish+Kreiger",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"feedbackCredits\" : 1090519841423732805\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "91a65a34-5f43-3c8d-8126-978d853f0964",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameMatchFeedbackLoop",
          "schema" : {
            "properties" : {
              "feedbackCredits" : {
                "description" : "Number of units recredited as per feedback loop successful classification",
                "format" : "int64",
                "type" : "integer"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "FeedbackLoopOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 125
  }, {
    "id" : "88e67008-4219-3c0d-8ddc-6e7c590a29b6",
    "name" : "Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae - 403",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameMatchBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "88e67008-4219-3c0d-8ddc-6e7c590a29b6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameMatchBatch"
        }
      }
    },
    "insertionIndex" : 126
  }, {
    "id" : "c346b565-bf89-3ddb-998d-de1c3345a508",
    "name" : "Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae - 401",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameMatchBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "c346b565-bf89-3ddb-998d-de1c3345a508",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameMatchBatch"
        }
      }
    },
    "insertionIndex" : 127
  }, {
    "id" : "1f9dca4e-90af-3b4d-9c59-12a99a6651c6",
    "name" : "Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae - 400",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameMatchBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "1f9dca4e-90af-3b4d-9c59-12a99a6651c6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameMatchBatch"
        }
      }
    },
    "insertionIndex" : 128
  }, {
    "id" : "aa1a6cff-339a-3bfb-915d-f8d0343284fc",
    "name" : "Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae (application/json)",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameMatchBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"matchedNames\" : [ {\n    \"score\" : 9.35582043354194E307,\n    \"matchStatus\" : \"Mismatch\",\n    \"id\" : \"i93b\",\n    \"script\" : \"qfqpfr1m0nbuozae8z7lygf5jw9pxiqnvcdk516wrb27ytpsbnti9zj5ucp8da7n34y8pa37a7oq60qgig7ujveozieijsgn\"\n  }, {\n    \"score\" : 3.7432521771714426E307,\n    \"matchStatus\" : \"Match\",\n    \"id\" : \"0253\",\n    \"script\" : \"nnzeunjkr1d2e7o2ysgxyjf9zanhidmqito9bim0e50mln4\"\n  }, {\n    \"score\" : 9.657589183565667E305,\n    \"matchStatus\" : \"Mismatch\",\n    \"id\" : \"jc10\",\n    \"script\" : \"z0f4vzib4tk0b02w7jcmop26b4srhebuyuqz0p5ntha9akauouyc1gbm5xfj7jcynfw5eva9xkr1jkb8uuhml14\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "aa1a6cff-339a-3bfb-915d-f8d0343284fc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameMatchBatch",
          "schema" : {
            "properties" : {
              "matchedNames" : {
                "description" : "Classified matched names",
                "items" : {
                  "$ref" : "#/components/schemas/NameMatchedOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchNameMatchedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 129
  }, {
    "id" : "4eeedef1-5e68-31ce-a8de-51f122ec3717",
    "name" : "Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae - 403",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameMatch/jk7oiki5trk18vls8gcqcocjr0134mfsrm7vv9d7hc6a35cybuf42vnb17cbjyqeddv5vfeshw1baarsgzcuhymhnarx0g5u/rdg3871/Kori+Tillman",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "4eeedef1-5e68-31ce-a8de-51f122ec3717",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameMatch"
        }
      }
    },
    "insertionIndex" : 130
  }, {
    "id" : "f4aab0d5-bf39-3179-bce6-f46e4bf67416",
    "name" : "Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae - 401",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameMatch/6zjpkuvomneddud9ft2a0r6mjyddqned/8lczh4vnkyqikw1teglxrjocvnyiwkp25sjxm7sz11r5nbjo1er1n020efpin/Louvenia+Thiel",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "f4aab0d5-bf39-3179-bce6-f46e4bf67416",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameMatch"
        }
      }
    },
    "insertionIndex" : 131
  }, {
    "id" : "0e7ff830-e2fd-35b2-8761-4e500493a653",
    "name" : "Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae (application/json)",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameMatch/mz8f4dp4lygjr87wn562q6gwkihs2t52wpmxeo9lg8utd8hj51hrk6kh7020p93rzr8qh22zdbi2n1koejfkpqn1r9e0xb1hv6elqmzy0gyc6decvrfjm4k8uyd7ijfvdl9n0tyuh2h1ldltqtpar/b8rqsyrvw99fkcpsf16jayqcobhk2lsf2v9qetyskh05ibm/Willetta+Hyatt",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"score\" : 7.476054432446037E307,\n  \"matchStatus\" : \"Mismatch\",\n  \"id\" : \"6436\",\n  \"script\" : \"fx3pdsk5ycdp0xw6skkma1qvmakyx1mikx803v98jcv8ac3xgx4w8acics7ru2pijpfmm66mbk0dqg\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0e7ff830-e2fd-35b2-8761-4e500493a653",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameMatch",
          "schema" : {
            "description" : "Classified matched names",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "matchStatus" : {
                "description" : "The name matching status.",
                "enum" : [ "Match", "Mismatch" ],
                "type" : "string"
              },
              "score" : {
                "format" : "double",
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "NameMatchedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 132
  }, {
    "id" : "a499f79a-7dd2-3156-8551-c147b172371e",
    "name" : "Romanize japanese names, based on the name in KANJI - 403",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameLatinCandidatesBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "a499f79a-7dd2-3156-8551-c147b172371e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameLatinCandidatesBatch"
        }
      }
    },
    "insertionIndex" : 133
  }, {
    "id" : "42dc0d86-508d-3b06-99fb-d5cc0bdd72e3",
    "name" : "Romanize japanese names, based on the name in KANJI - 401",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameLatinCandidatesBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "42dc0d86-508d-3b06-99fb-d5cc0bdd72e3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameLatinCandidatesBatch"
        }
      }
    },
    "insertionIndex" : 134
  }, {
    "id" : "4e78f10d-19f7-3535-a1cd-a875b4bbf367",
    "name" : "Romanize japanese names, based on the name in KANJI - 400",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameLatinCandidatesBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "4e78f10d-19f7-3535-a1cd-a875b4bbf367",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameLatinCandidatesBatch"
        }
      }
    },
    "insertionIndex" : 135
  }, {
    "id" : "2f88a4d6-3f65-3d0d-a187-fa7bce8e7d2e",
    "name" : "Romanize japanese names, based on the name in KANJI (application/json)",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameLatinCandidatesBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"namesAndMatchCandidates\" : [ {\n    \"firstName\" : \"Florentino\",\n    \"lastName\" : \"Weimann\",\n    \"matchCandidates\" : [ {\n      \"predScoreGivenName\" : 1.091423916377614E308,\n      \"candidateName\" : \"2023-02-15T16:56:58.024479Z\",\n      \"probability\" : 1.2224010408181133E308,\n      \"predScoreFamilyName\" : 4.974091155525015E307\n    }, {\n      \"predScoreGivenName\" : 8.023832490312461E306,\n      \"candidateName\" : \"2023-02-17T15:11:58.024521Z\",\n      \"probability\" : 7.526963631746032E307,\n      \"predScoreFamilyName\" : 1.5319418944089622E308\n    }, {\n      \"predScoreGivenName\" : 8.341103760157556E307,\n      \"candidateName\" : \"2022-11-01T16:44:58.024563Z\",\n      \"probability\" : 3.833753693402596E307,\n      \"predScoreFamilyName\" : 1.6407724436095547E308\n    } ],\n    \"orderOption\" : \"aa2i1of1optnux5l4j30t849b2t3dsl5o6019lnm1\",\n    \"id\" : \"byj9\",\n    \"script\" : \"wdcxujpbae5p6kj3namj76n2wdlzl3ydkqglueh6w610f435633z7uzn8io35xgewlapj3rzupwq98xlzw8xqqr4xj5msvffi1kbyjycoakdy258z43ul6qot9fqzzecejk16om3pl3yd0gdtoe2eqgjl44p7npuqyk4ujn03gmtusd87kjtf6\"\n  }, {\n    \"firstName\" : \"Robt\",\n    \"lastName\" : \"Champlin\",\n    \"matchCandidates\" : [ {\n      \"predScoreGivenName\" : 1.3601735428750608E308,\n      \"candidateName\" : \"2023-01-23T14:08:58.024753Z\",\n      \"probability\" : 1.1686966934373886E308,\n      \"predScoreFamilyName\" : 8.760695677267268E307\n    }, {\n      \"predScoreGivenName\" : 1.1626176436616864E308,\n      \"candidateName\" : \"2022-12-08T14:21:58.024795Z\",\n      \"probability\" : 1.2426208970194483E308,\n      \"predScoreFamilyName\" : 5.041644935365277E307\n    } ],\n    \"orderOption\" : \"kr934hn5tf\",\n    \"id\" : \"m5t4\",\n    \"script\" : \"ulfed5f1qx48zfurgwtpr66vvzbrtxky1mmzqbqicc3auk2gese651wntcy3p1svv7oc5z9ubwv1qw3n9uaw449\"\n  }, {\n    \"firstName\" : \"Darius\",\n    \"lastName\" : \"Hilpert\",\n    \"matchCandidates\" : [ {\n      \"predScoreGivenName\" : 7.552589094284312E307,\n      \"candidateName\" : \"2023-03-08T15:50:58.02497Z\",\n      \"probability\" : 1.2409105298034151E308,\n      \"predScoreFamilyName\" : 1.3499939854010367E308\n    }, {\n      \"predScoreGivenName\" : 6.504242263223471E307,\n      \"candidateName\" : \"2022-10-19T13:38:58.025012Z\",\n      \"probability\" : 1.3004509470737523E308,\n      \"predScoreFamilyName\" : 6.420324711887298E307\n    } ],\n    \"orderOption\" : \"f2mbp4yxpx8psixazoyfx2nortwwmu49l37b2sks7us06n9xskbm3bsepbhgh2wyxbpjbf99yaafkbmkpkmfjf0ghzk4nrkwo6rtbf880rsbfmhyefrxcg\",\n    \"id\" : \"z120\",\n    \"script\" : \"ccfie\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2f88a4d6-3f65-3d0d-a187-fa7bce8e7d2e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameLatinCandidatesBatch",
          "schema" : {
            "properties" : {
              "namesAndMatchCandidates" : {
                "description" : "Classified matched names",
                "items" : {
                  "$ref" : "#/components/schemas/NameMatchCandidatesOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchNameMatchCandidatesOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 136
  }, {
    "id" : "606344c8-4cb1-3a10-b731-9ab64190092f",
    "name" : "Romanize japanese name, based on the name in Kanji. - 403",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameLatinCandidates/8claj3jb72t598utjvwuagmefdkg0psviaya0v10c52ixlq81p8dt61bgfsr932t4trlw97uuvvg3t8h8ettvmuofhu0h7nstumzs88af2rqqm1mcijlngts0aq44yezmrrs5po0ecjousft2xy8pqk/j8y6qsj0zq2qhlysstv",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "606344c8-4cb1-3a10-b731-9ab64190092f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameLatinCandidates"
        }
      }
    },
    "insertionIndex" : 137
  }, {
    "id" : "5ae5a19e-c008-354d-9a49-3b10ef98e3fe",
    "name" : "Romanize japanese name, based on the name in Kanji. - 401",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameLatinCandidates/0gdte5nd1/49jiq28q4h1ltrdha48wpn5qjk4mk5ykz0eeyqq7gtr5xz2f3awjz4png0qr0wcr7mlqf2u9qafwbpbv01f6s437hv3gw69eew5fo29dbrfgvwky5b83a60zzgco4bblye4pinvjredmfocceebvomnzu0kxvknqtc49jov6y9siei5oqbkv31m",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "5ae5a19e-c008-354d-9a49-3b10ef98e3fe",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameLatinCandidates"
        }
      }
    },
    "insertionIndex" : 138
  }, {
    "id" : "ebf193e4-d4f5-374c-a3bd-775124182d6e",
    "name" : "Romanize japanese name, based on the name in Kanji. (application/json)",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameLatinCandidates/40hht2ozl982cqjvpclbdor72npbzik86xentonxpm4e7jjzdl3fd301ir308enkejeim1n/f3s7f67vqic0csv7c8gw711qejq04glnpaykpba687zpqzjq8rvbnpezlehrayikbo0xv4eikoqrpa26ygrc8rnjw6512b3pj40nso46el5qklvl0h1v3mntq4gixi1ugv3odvfju1l2",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"firstName\" : \"Joy\",\n  \"lastName\" : \"Koelpin\",\n  \"matchCandidates\" : [ {\n    \"predScoreGivenName\" : 1.151803644558843E308,\n    \"candidateName\" : \"2022-12-30T15:23:58.023826Z\",\n    \"probability\" : 1.0984219828818575E308,\n    \"predScoreFamilyName\" : 1.5039600514245866E308\n  }, {\n    \"predScoreGivenName\" : 4.510891965556268E307,\n    \"candidateName\" : \"2022-05-29T16:17:58.023867Z\",\n    \"probability\" : 3.982344373265928E307,\n    \"predScoreFamilyName\" : 6.256231310588768E307\n  }, {\n    \"predScoreGivenName\" : 1.2862488534840149E306,\n    \"candidateName\" : \"2022-09-17T14:22:58.023905Z\",\n    \"probability\" : 1.3476223337292588E308,\n    \"predScoreFamilyName\" : 1.6333940893217418E308\n  }, {\n    \"predScoreGivenName\" : 7.292540076899489E307,\n    \"candidateName\" : \"2022-09-04T16:18:58.023944Z\",\n    \"probability\" : 3.8660266421343295E307,\n    \"predScoreFamilyName\" : 1.5563169494253305E308\n  }, {\n    \"predScoreGivenName\" : 1.1453873843865803E307,\n    \"candidateName\" : \"2022-12-13T13:23:58.023984Z\",\n    \"probability\" : 1.021589204409048E308,\n    \"predScoreFamilyName\" : 9.747275084026677E307\n  }, {\n    \"predScoreGivenName\" : 4.4833552103988204E307,\n    \"candidateName\" : \"2022-04-06T16:21:58.024023Z\",\n    \"probability\" : 9.713097411788226E307,\n    \"predScoreFamilyName\" : 8.52671444322142E307\n  }, {\n    \"predScoreGivenName\" : 1.7959080681175774E308,\n    \"candidateName\" : \"2022-07-27T16:23:58.024063Z\",\n    \"probability\" : 3.2502338266397237E307,\n    \"predScoreFamilyName\" : 1.2267186885280579E308\n  } ],\n  \"orderOption\" : \"1yb1xi822etokaq19sotilfdzxnjv4xcecvz2nv4xne1xd0gb7suvwl0cq518jvce9o439yhhvla71zd3dvn91by0mednlx3ebln0z34da9x96hwwkkcpdvei46dmm3y16z355lee7vrpgk06i8502r0muy67fp4b0yddbjx6busxcetdniinmud8cqsz\",\n  \"id\" : \"61p0\",\n  \"script\" : \"00lya74kumlueo2\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ebf193e4-d4f5-374c-a3bd-775124182d6e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameLatinCandidates",
          "schema" : {
            "description" : "Classified matched names",
            "properties" : {
              "firstName" : {
                "description" : "The first name (also known as given name)",
                "type" : "string"
              },
              "id" : {
                "type" : "string"
              },
              "lastName" : {
                "description" : "The last name (also known as family name, or surname)",
                "type" : "string"
              },
              "matchCandidates" : {
                "description" : "The ordered list of name matching candidates",
                "items" : {
                  "$ref" : "#/components/schemas/NameMatchCandidateOut"
                },
                "type" : "array"
              },
              "orderOption" : {
                "description" : "The option for ordering",
                "type" : "string"
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "NameMatchCandidatesOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 139
  }, {
    "id" : "e52f67a1-9491-3848-aa52-24a2a2c7f48a",
    "name" : "Identify japanese name candidates in KANJI, based on the romanized name (firstName = japaneseGivenName; lastName=japaneseSurname), ex. Yamamoto Sanae - 403",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameKanjiCandidatesBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "e52f67a1-9491-3848-aa52-24a2a2c7f48a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameKanjiCandidatesBatch"
        }
      }
    },
    "insertionIndex" : 140
  }, {
    "id" : "f5f53095-f9f0-31d2-a1c5-7f23f215edd0",
    "name" : "Identify japanese name candidates in KANJI, based on the romanized name (firstName = japaneseGivenName; lastName=japaneseSurname), ex. Yamamoto Sanae - 401",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameKanjiCandidatesBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "f5f53095-f9f0-31d2-a1c5-7f23f215edd0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameKanjiCandidatesBatch"
        }
      }
    },
    "insertionIndex" : 141
  }, {
    "id" : "7b7a2385-0fbc-32f8-82db-007fd1d660cc",
    "name" : "Identify japanese name candidates in KANJI, based on the romanized name (firstName = japaneseGivenName; lastName=japaneseSurname), ex. Yamamoto Sanae - 400",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameKanjiCandidatesBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "7b7a2385-0fbc-32f8-82db-007fd1d660cc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameKanjiCandidatesBatch"
        }
      }
    },
    "insertionIndex" : 142
  }, {
    "id" : "c9c088a2-4e45-3a55-9c24-a9d1e2bb2217",
    "name" : "Identify japanese name candidates in KANJI, based on the romanized name (firstName = japaneseGivenName; lastName=japaneseSurname), ex. Yamamoto Sanae (application/json)",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameKanjiCandidatesBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"namesAndMatchCandidates\" : [ {\n    \"firstName\" : \"Harold\",\n    \"lastName\" : \"Hyatt\",\n    \"matchCandidates\" : [ {\n      \"predScoreGivenName\" : 4.339489978851061E307,\n      \"candidateName\" : \"2023-02-03T14:57:58.021324Z\",\n      \"probability\" : 4.688817795533223E307,\n      \"predScoreFamilyName\" : 1.189177438733604E308\n    }, {\n      \"predScoreGivenName\" : 8.534926488061702E307,\n      \"candidateName\" : \"2022-06-09T16:03:58.021365Z\",\n      \"probability\" : 1.235163263109473E308,\n      \"predScoreFamilyName\" : 1.6474171023881854E307\n    }, {\n      \"predScoreGivenName\" : 1.2004767094547244E308,\n      \"candidateName\" : \"2022-03-16T14:37:58.021408Z\",\n      \"probability\" : 1.6755326696146453E308,\n      \"predScoreFamilyName\" : 1.4729348575246637E308\n    } ],\n    \"orderOption\" : \"4g9grtsdeczise\",\n    \"id\" : \"0497\",\n    \"script\" : \"bu2uz3la2gce8ur1rfpzf9c3q675ue0aepz37jo236h9oik5jptywu74z05edv3hpvn1wijj0wt5mbv69444488dacw70kynfw8rchjxy77rgc2uos4\"\n  }, {\n    \"firstName\" : \"Adrian\",\n    \"lastName\" : \"Streich\",\n    \"matchCandidates\" : [ {\n      \"predScoreGivenName\" : 2.1172169390432799E307,\n      \"candidateName\" : \"2022-12-23T14:32:58.021592Z\",\n      \"probability\" : 1.148429860607712E308,\n      \"predScoreFamilyName\" : 5.695132881964693E307\n    }, {\n      \"predScoreGivenName\" : 1.4546361000379752E308,\n      \"candidateName\" : \"2022-08-01T13:47:58.021632Z\",\n      \"probability\" : 1.0716297486128154E308,\n      \"predScoreFamilyName\" : 1.7169217154213242E307\n    }, {\n      \"predScoreGivenName\" : 9.340780019618874E307,\n      \"candidateName\" : \"2022-08-22T14:49:58.021674Z\",\n      \"probability\" : 9.501440428610809E307,\n      \"predScoreFamilyName\" : 1.7863287491615603E308\n    }, {\n      \"predScoreGivenName\" : 1.6329261325118932E308,\n      \"candidateName\" : \"2022-09-26T16:43:58.021717Z\",\n      \"probability\" : 1.730690183742273E308,\n      \"predScoreFamilyName\" : 1.3320125448843754E308\n    }, {\n      \"predScoreGivenName\" : 5.636621506774869E307,\n      \"candidateName\" : \"2022-05-26T16:20:58.021759Z\",\n      \"probability\" : 8.346077537038602E307,\n      \"predScoreFamilyName\" : 6.325469362031703E307\n    } ],\n    \"orderOption\" : \"hgzgkpxpby764atfstubw4jdkjnt3ts8j3hkbq7a4z1dpomg7iokoe0d45jkezdltk1\",\n    \"id\" : \"6dq6\",\n    \"script\" : \"p1jyl5s7z3vyjja2ogk3neszlfkw2z0gwoirsif6fabpy226chrmaxfdypr2jdy9gc2knoy9yjau2b3859paiv\"\n  }, {\n    \"firstName\" : \"Elois\",\n    \"lastName\" : \"Smith\",\n    \"matchCandidates\" : [ {\n      \"predScoreGivenName\" : 5.234894380381436E307,\n      \"candidateName\" : \"2022-06-19T13:31:58.021952Z\",\n      \"probability\" : 1.4674665707968199E308,\n      \"predScoreFamilyName\" : 1.2653918686390377E308\n    } ],\n    \"orderOption\" : \"bx3lsa1kpj7sbuamjx83m0wbvqsp9wwvhvrwup0m8qrcm5id\",\n    \"id\" : \"vts4\",\n    \"script\" : \"xj41698teslnvcscehqy70jgep4v47de5eppi8l51gjs9bzjrw5uykqr3jm7eevuxyrentkzgd9f72h9ri3gwgyuus0mvv6f5qivrps5pfwbwlxnspxgcdougs9c3x5j8u3gooq9uq5o94glnjp0vuyo9zbqjdsds2gixi50n70f46mz4r4p3kgm5ekj121k3m6gq\"\n  }, {\n    \"firstName\" : \"Veronique\",\n    \"lastName\" : \"Gutkowski\",\n    \"matchCandidates\" : [ {\n      \"predScoreGivenName\" : 1.0663849626293236E308,\n      \"candidateName\" : \"2022-12-23T14:21:58.022141Z\",\n      \"probability\" : 4.1993653220240814E307,\n      \"predScoreFamilyName\" : 1.7427012882203195E308\n    }, {\n      \"predScoreGivenName\" : 1.5374679869723184E308,\n      \"candidateName\" : \"2022-07-06T14:40:58.022185Z\",\n      \"probability\" : 9.918703049746209E307,\n      \"predScoreFamilyName\" : 1.7815606654104946E308\n    }, {\n      \"predScoreGivenName\" : 4.3225680540721986E307,\n      \"candidateName\" : \"2023-02-12T13:40:58.022227Z\",\n      \"probability\" : 3.414170986669759E307,\n      \"predScoreFamilyName\" : 1.7209551545369838E308\n    }, {\n      \"predScoreGivenName\" : 1.3890019722039482E308,\n      \"candidateName\" : \"2022-04-22T14:33:58.022271Z\",\n      \"probability\" : 1.254733039611328E308,\n      \"predScoreFamilyName\" : 1.6956216051658494E308\n    }, {\n      \"predScoreGivenName\" : 1.3042513073851658E308,\n      \"candidateName\" : \"2022-06-07T16:21:58.022313Z\",\n      \"probability\" : 1.7248370484566625E308,\n      \"predScoreFamilyName\" : 3.430272721306304E307\n    }, {\n      \"predScoreGivenName\" : 1.4229337499979638E308,\n      \"candidateName\" : \"2023-01-11T13:29:58.022353Z\",\n      \"probability\" : 5.903795303902561E307,\n      \"predScoreFamilyName\" : 3.089688195392359E307\n    }, {\n      \"predScoreGivenName\" : 1.3267020995899864E308,\n      \"candidateName\" : \"2023-03-04T14:22:58.022394Z\",\n      \"probability\" : 5.536357312108229E307,\n      \"predScoreFamilyName\" : 1.384170980869595E307\n    }, {\n      \"predScoreGivenName\" : 6.974601772771912E306,\n      \"candidateName\" : \"2022-06-18T14:01:58.022437Z\",\n      \"probability\" : 1.7889792084014348E308,\n      \"predScoreFamilyName\" : 6.017918828599618E307\n    } ],\n    \"orderOption\" : \"l2ab2oyrxqc1ef19a4fvimk665nfepmlppry3clnll4fd0hyrgctp8nx20pc5lwlxxtg9yhn33g0xkn6sqjk1m213odzsijbbbq5\",\n    \"id\" : \"wao3\",\n    \"script\" : \"ag9agrxe11avtk\"\n  }, {\n    \"firstName\" : \"Eli\",\n    \"lastName\" : \"Mueller\",\n    \"matchCandidates\" : [ {\n      \"predScoreGivenName\" : 1.0173409705383558E308,\n      \"candidateName\" : \"2022-11-02T15:34:58.022625Z\",\n      \"probability\" : 4.247388982169877E307,\n      \"predScoreFamilyName\" : 1.7921091452494679E308\n    }, {\n      \"predScoreGivenName\" : 1.0557963866595251E307,\n      \"candidateName\" : \"2023-02-16T15:00:58.022668Z\",\n      \"probability\" : 5.288430732186984E306,\n      \"predScoreFamilyName\" : 6.840136807494971E307\n    }, {\n      \"predScoreGivenName\" : 1.719989526757119E308,\n      \"candidateName\" : \"2022-05-06T15:24:58.022709Z\",\n      \"probability\" : 8.964007538725768E307,\n      \"predScoreFamilyName\" : 1.245240001609768E308\n    }, {\n      \"predScoreGivenName\" : 1.9615149223359914E307,\n      \"candidateName\" : \"2022-10-25T13:50:58.022751Z\",\n      \"probability\" : 1.5956719284645935E306,\n      \"predScoreFamilyName\" : 6.609839708270088E307\n    }, {\n      \"predScoreGivenName\" : 1.1927606923610326E308,\n      \"candidateName\" : \"2023-01-21T16:29:58.022792Z\",\n      \"probability\" : 9.481527752395257E307,\n      \"predScoreFamilyName\" : 1.1599181567284718E308\n    } ],\n    \"orderOption\" : \"yt03i7fvsxgzzc4tfij4x0763qmjo8ir35su0aiu58jp7vpevkzz89hhnl8wh3nmn47fcqk2wr5nqnn03hj7m90rbo8\",\n    \"id\" : \"ro82\",\n    \"script\" : \"kmg9cvd1qhljgdr8uxmpyqlpi2580q4gde90zwmf4zp4rao8a1f0rwn2xna3yiun6zplrdlls\"\n  }, {\n    \"firstName\" : \"Leland\",\n    \"lastName\" : \"Rutherford\",\n    \"matchCandidates\" : [ {\n      \"predScoreGivenName\" : 6.511343800007529E307,\n      \"candidateName\" : \"2022-03-15T16:43:58.022983Z\",\n      \"probability\" : 1.632666992856865E308,\n      \"predScoreFamilyName\" : 2.1737658678984767E307\n    }, {\n      \"predScoreGivenName\" : 1.5853507968174206E308,\n      \"candidateName\" : \"2022-09-02T13:10:58.023026Z\",\n      \"probability\" : 8.02249926807028E306,\n      \"predScoreFamilyName\" : 1.5868770675346694E308\n    }, {\n      \"predScoreGivenName\" : 5.619710419162309E307,\n      \"candidateName\" : \"2022-07-17T16:40:58.023068Z\",\n      \"probability\" : 1.065851630899151E308,\n      \"predScoreFamilyName\" : 1.1053223731075167E308\n    }, {\n      \"predScoreGivenName\" : 1.767834978029504E308,\n      \"candidateName\" : \"2022-05-05T13:29:58.02311Z\",\n      \"probability\" : 1.7066037613144448E308,\n      \"predScoreFamilyName\" : 3.429464282795333E307\n    }, {\n      \"predScoreGivenName\" : 1.082721429829084E308,\n      \"candidateName\" : \"2022-08-04T15:07:58.023153Z\",\n      \"probability\" : 1.5730184707266412E308,\n      \"predScoreFamilyName\" : 1.1345099977114934E308\n    } ],\n    \"orderOption\" : \"dfitwyxyc5zi9ad79uaolmzkzi2c7q9lel5tocvx96q81kn3ulz3rbv5q4ilylgg0hu1s3uhhhhe9t8om2gdb8u935je48y5fxck53pp3221n8lbyttg98naoqy5y44m9\",\n    \"id\" : \"gvq7\",\n    \"script\" : \"ywhg504nuaae98ybkoqactvi1m2g3wryvf5hjbyk3qds9l9ss44mtzddfzk62jtumfh2qjtyf9rgn6f807mh6qjnzl0hcuwvlejwliih7ihx7lvmihdvatgpkm933vq0itciui0inybly09zvn6\"\n  }, {\n    \"firstName\" : \"Frieda\",\n    \"lastName\" : \"Bahringer\",\n    \"matchCandidates\" : [ {\n      \"predScoreGivenName\" : 3.1929117939125203E307,\n      \"candidateName\" : \"2022-06-29T15:29:58.023343Z\",\n      \"probability\" : 1.7591597585800661E308,\n      \"predScoreFamilyName\" : 2.5078711217090965E307\n    }, {\n      \"predScoreGivenName\" : 3.9737357909240537E307,\n      \"candidateName\" : \"2022-09-17T16:38:58.023384Z\",\n      \"probability\" : 1.357382757431382E308,\n      \"predScoreFamilyName\" : 1.391344737810672E308\n    } ],\n    \"orderOption\" : \"epp60uce1th61v6f7a1ewj2t9q7bvsb623me7i5bvblomir69l0zwya4rmbf8uwf6sv2i1cpni2yc1q6xo\",\n    \"id\" : \"styo\",\n    \"script\" : \"j9xohdcn3avlvj\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c9c088a2-4e45-3a55-9c24-a9d1e2bb2217",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameKanjiCandidatesBatch",
          "schema" : {
            "properties" : {
              "namesAndMatchCandidates" : {
                "description" : "Classified matched names",
                "items" : {
                  "$ref" : "#/components/schemas/NameMatchCandidatesOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchNameMatchCandidatesOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 143
  }, {
    "id" : "d178b3d9-290a-37ed-b4bf-863d3e07540c",
    "name" : "Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae - and a known gender. - 403",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameKanjiCandidates/1cnieyw5063tdkzc7uz70fi44u5c069tciq2sq6dp87en9t621kjyankcx5d4zxb5md63pf9hyp8qzjlmcw9vudxty1g867s899ioi848vh2gwu1yvmzjz5grg9ywiz/kwe2tyeqrilfpgrfflrh31cr2i4btkp4txia7xuc1ys3f9fnq50hb5mwri6mmvlw2owacfvczp/Agender",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "d178b3d9-290a-37ed-b4bf-863d3e07540c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameKanjiCandidates_1"
        }
      }
    },
    "insertionIndex" : 144
  }, {
    "id" : "ff9ef708-b4f0-3864-a92b-40333f57aa32",
    "name" : "Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae - and a known gender. - 401",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameKanjiCandidates/419dgf6u8dq638puam3buz1elq1zh4lrqlljdwy92hcxjeopdwr7s8u0pi2gb853op8rh6p0lex4cefpnqn85o597cidpywsa4rpml9n93wt3afimjtc/71wxigotipfyx3ewnl/Polygender",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "ff9ef708-b4f0-3864-a92b-40333f57aa32",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameKanjiCandidates_1"
        }
      }
    },
    "insertionIndex" : 145
  }, {
    "id" : "a12be1d8-1f34-3fbd-b439-7bb878c995bf",
    "name" : "Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae - and a known gender. (application/json)",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameKanjiCandidates/q03eh88nkjboaj0do8ltwdp4dd22jao0s3uh0qy8m2ghrp9yc0i4ekszejiy4capru652nrineht5qhf9qqjdj8sot447ulx5s0wfy2cv3s1ij0j26vnt3jsgiuysqe5ib05zbb7rs6zsbqczc7embnzxtouj7r4hxhoyn/979w22p8hsrs8mpcimcivb53l9u5z8d7xrb59mbgthwi1w1b8vsn3vc72kdska432vvn7nim7vlmegsphziv4qlouehbisnx33q3kw3262at3pp23hcwmju9uj3q32n744c58fk8vu3bwo8f5h2b98xhxbj3lkvei1883mfhl/Non-binary",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"firstName\" : \"Michale\",\n  \"lastName\" : \"Gislason\",\n  \"matchCandidates\" : [ {\n    \"predScoreGivenName\" : 6.890940394707055E307,\n    \"candidateName\" : \"2022-11-08T15:46:58.020709Z\",\n    \"probability\" : 9.732098589716834E307,\n    \"predScoreFamilyName\" : 1.2090948830845238E308\n  }, {\n    \"predScoreGivenName\" : 7.215153759721636E307,\n    \"candidateName\" : \"2022-03-28T15:50:58.020753Z\",\n    \"probability\" : 1.4056590324191415E308,\n    \"predScoreFamilyName\" : 2.65998454855424E307\n  }, {\n    \"predScoreGivenName\" : 1.075571620210916E308,\n    \"candidateName\" : \"2022-10-30T15:05:58.020795Z\",\n    \"probability\" : 7.646426353547593E307,\n    \"predScoreFamilyName\" : 1.205665032582741E308\n  }, {\n    \"predScoreGivenName\" : 1.34422294961141E308,\n    \"candidateName\" : \"2022-10-22T16:23:58.020835Z\",\n    \"probability\" : 1.3965299128554152E308,\n    \"predScoreFamilyName\" : 3.7626675395898084E307\n  }, {\n    \"predScoreGivenName\" : 1.4332081213119581E308,\n    \"candidateName\" : \"2022-04-08T15:43:58.020877Z\",\n    \"probability\" : 5.330172255997034E307,\n    \"predScoreFamilyName\" : 5.709372848599868E307\n  } ],\n  \"orderOption\" : \"mf4zxz0dmy5njnc6jj7adi02yx2gjhbwd0twq56upvguutf4rcoqvq6eqbfmq3sy5\",\n  \"id\" : \"82op\",\n  \"script\" : \"dh0rdngoovy11dyh634m68d68cu7xtgsdob834zyg9gym5xyashmvuwb1s5zrelllcbnbsiy7w53yb1kqridrrncso0d52oowsowl08obmbqww19s2ttvr9xhcszwbuwtd3wkadxid4t4eytavoxmjojcoznr1n1awmt4hndlyvqnj7\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a12be1d8-1f34-3fbd-b439-7bb878c995bf",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameKanjiCandidates_1",
          "schema" : {
            "description" : "Classified matched names",
            "properties" : {
              "firstName" : {
                "description" : "The first name (also known as given name)",
                "type" : "string"
              },
              "id" : {
                "type" : "string"
              },
              "lastName" : {
                "description" : "The last name (also known as family name, or surname)",
                "type" : "string"
              },
              "matchCandidates" : {
                "description" : "The ordered list of name matching candidates",
                "items" : {
                  "$ref" : "#/components/schemas/NameMatchCandidateOut"
                },
                "type" : "array"
              },
              "orderOption" : {
                "description" : "The option for ordering",
                "type" : "string"
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "NameMatchCandidatesOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 146
  }, {
    "id" : "d44d04dd-a0ac-3570-b02b-f3eb2649dd22",
    "name" : "Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae - 403",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameKanjiCandidates/lmttngjepep9taofjorzmt22goehcbpo0dx3pusdjjgmyc2z7sp4dtvej1vuep3fdki8d376od45muqaqqyxb14tq9klpo96uzvje3r8ys2p4k3un7048m3jt1cusevdtm9q5vrwr15/7n93tezw4zsyx77ibr3zw0i4mlvh81b44lcl5i5kx777s2acqpllzt772jpkzf8jxjl3t4qjoo9150n128ttpeb74wjrmnq71525xirpni4xru7pwi9vdgzwls9ld1huyrpt6xze7pq",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "d44d04dd-a0ac-3570-b02b-f3eb2649dd22",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameKanjiCandidates"
        }
      }
    },
    "insertionIndex" : 147
  }, {
    "id" : "8888a17a-5f85-332d-8880-ed53a863f5d0",
    "name" : "Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae - 401",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameKanjiCandidates/wld062c0b88y2t/x53fhjm43lomxqpzssr43duvsicu380dwrm44aocn0nwlhs0somgud2z4gnfboc6y3r8lzns1amlqzdpewa9v55ggj7ekyjehkq7x7zw",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "8888a17a-5f85-332d-8880-ed53a863f5d0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameKanjiCandidates"
        }
      }
    },
    "insertionIndex" : 148
  }, {
    "id" : "4fc1b7c4-e01f-3ab5-ad7d-7bc51817246d",
    "name" : "Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae (application/json)",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameKanjiCandidates/1r3c0ikbwnkeo2yfnf1vjbwho1v19ktkuynsec7a0h6h0vsfwcmmhy6d9fzgy1wj86azuke7ao9jko098f5yrpzotxeu/f4oimjl1gvxti",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"firstName\" : \"Jammie\",\n  \"lastName\" : \"Klein\",\n  \"matchCandidates\" : [ {\n    \"predScoreGivenName\" : 5.130777835079969E307,\n    \"candidateName\" : \"2022-05-11T14:32:58.019988Z\",\n    \"probability\" : 5.649887851632995E307,\n    \"predScoreFamilyName\" : 2.513124892074044E307\n  }, {\n    \"predScoreGivenName\" : 3.3537071844413904E307,\n    \"candidateName\" : \"2022-04-15T13:44:58.020029Z\",\n    \"probability\" : 1.6965668138508022E308,\n    \"predScoreFamilyName\" : 9.83398631203165E307\n  }, {\n    \"predScoreGivenName\" : 1.6105367520541397E308,\n    \"candidateName\" : \"2023-02-22T14:16:58.020067Z\",\n    \"probability\" : 1.2626778783224283E308,\n    \"predScoreFamilyName\" : 1.374138605714335E308\n  }, {\n    \"predScoreGivenName\" : 4.128063645610906E307,\n    \"candidateName\" : \"2023-02-13T15:51:58.020108Z\",\n    \"probability\" : 1.5827562959109952E308,\n    \"predScoreFamilyName\" : 1.1960389379234532E308\n  }, {\n    \"predScoreGivenName\" : 2.8214588053582997E307,\n    \"candidateName\" : \"2022-10-07T16:33:58.02015Z\",\n    \"probability\" : 1.9290077989631505E307,\n    \"predScoreFamilyName\" : 1.025354374835485E308\n  }, {\n    \"predScoreGivenName\" : 3.401568654685536E307,\n    \"candidateName\" : \"2022-11-27T15:14:58.020192Z\",\n    \"probability\" : 1.6430345297162523E308,\n    \"predScoreFamilyName\" : 1.2627542925211425E308\n  }, {\n    \"predScoreGivenName\" : 9.26277077989999E307,\n    \"candidateName\" : \"2023-02-15T13:32:58.020235Z\",\n    \"probability\" : 8.219689757273584E307,\n    \"predScoreFamilyName\" : 1.1100485549081493E307\n  }, {\n    \"predScoreGivenName\" : 2.4291235951961077E307,\n    \"candidateName\" : \"2022-05-31T15:44:58.020273Z\",\n    \"probability\" : 9.167541560235809E307,\n    \"predScoreFamilyName\" : 3.6457246918043446E307\n  } ],\n  \"orderOption\" : \"ewqcc4nbqyaeewwp7a5wamywxihxd7ce8cl0na4vfx5ajhisa4npbrycp9ygibnio2y10jj47s9lehjmh6qeo0m72g1b8nay78ziap8ma1h1vv6bwv9\",\n  \"id\" : \"03dv\",\n  \"script\" : \"zx9nj7cwae2fke03hsot432rq75kj9idywhuilrp5dhrkhbwafwigsh7ym1crfli611asl0\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4fc1b7c4-e01f-3ab5-ad7d-7bc51817246d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameKanjiCandidates",
          "schema" : {
            "description" : "Classified matched names",
            "properties" : {
              "firstName" : {
                "description" : "The first name (also known as given name)",
                "type" : "string"
              },
              "id" : {
                "type" : "string"
              },
              "lastName" : {
                "description" : "The last name (also known as family name, or surname)",
                "type" : "string"
              },
              "matchCandidates" : {
                "description" : "The ordered list of name matching candidates",
                "items" : {
                  "$ref" : "#/components/schemas/NameMatchCandidateOut"
                },
                "type" : "array"
              },
              "orderOption" : {
                "description" : "The option for ordering",
                "type" : "string"
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "NameMatchCandidatesOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 149
  }, {
    "id" : "2df70a4b-f38f-36f5-b3e4-08803737772d",
    "name" : "Identify japanese name candidates in KANJI, based on the romanized name (firstName = japaneseGivenName; lastName=japaneseSurname) with KNOWN gender, ex. Yamamoto Sanae - 403",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameGenderKanjiCandidatesBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "2df70a4b-f38f-36f5-b3e4-08803737772d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameGenderKanjiCandidatesBatch"
        }
      }
    },
    "insertionIndex" : 150
  }, {
    "id" : "0f4f4d36-5880-358c-b0ac-451865abc052",
    "name" : "Identify japanese name candidates in KANJI, based on the romanized name (firstName = japaneseGivenName; lastName=japaneseSurname) with KNOWN gender, ex. Yamamoto Sanae - 401",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameGenderKanjiCandidatesBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "0f4f4d36-5880-358c-b0ac-451865abc052",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameGenderKanjiCandidatesBatch"
        }
      }
    },
    "insertionIndex" : 151
  }, {
    "id" : "02a2ef02-637e-3ffa-b9d9-ef231b997472",
    "name" : "Identify japanese name candidates in KANJI, based on the romanized name (firstName = japaneseGivenName; lastName=japaneseSurname) with KNOWN gender, ex. Yamamoto Sanae - 400",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameGenderKanjiCandidatesBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "02a2ef02-637e-3ffa-b9d9-ef231b997472",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameGenderKanjiCandidatesBatch"
        }
      }
    },
    "insertionIndex" : 152
  }, {
    "id" : "03313021-e5d9-3930-8a51-73b0e98f5c06",
    "name" : "Identify japanese name candidates in KANJI, based on the romanized name (firstName = japaneseGivenName; lastName=japaneseSurname) with KNOWN gender, ex. Yamamoto Sanae (application/json)",
    "request" : {
      "urlPath" : "/api2/json/japaneseNameGenderKanjiCandidatesBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"namesAndMatchCandidates\" : [ {\n    \"firstName\" : \"Jefferey\",\n    \"lastName\" : \"Donnelly\",\n    \"matchCandidates\" : [ {\n      \"predScoreGivenName\" : 1.4958677002468427E308,\n      \"candidateName\" : \"2022-04-16T15:19:58.016604Z\",\n      \"probability\" : 2.3419181373365588E306,\n      \"predScoreFamilyName\" : 1.2764338763281155E308\n    }, {\n      \"predScoreGivenName\" : 1.4957712002894615E308,\n      \"candidateName\" : \"2022-09-10T15:01:58.016655Z\",\n      \"probability\" : 1.5808683112794402E308,\n      \"predScoreFamilyName\" : 1.1170542491697053E308\n    }, {\n      \"predScoreGivenName\" : 7.66698248800585E306,\n      \"candidateName\" : \"2022-08-15T16:16:58.016698Z\",\n      \"probability\" : 1.3684575019108462E308,\n      \"predScoreFamilyName\" : 4.1507383480214603E307\n    }, {\n      \"predScoreGivenName\" : 1.3575608707159465E308,\n      \"candidateName\" : \"2022-09-14T16:50:58.016741Z\",\n      \"probability\" : 6.120788875898373E307,\n      \"predScoreFamilyName\" : 7.326332156515983E307\n    }, {\n      \"predScoreGivenName\" : 2.641993594744376E307,\n      \"candidateName\" : \"2022-03-21T13:38:58.016781Z\",\n      \"probability\" : 1.1718387693510981E308,\n      \"predScoreFamilyName\" : 1.1083970063565737E308\n    }, {\n      \"predScoreGivenName\" : 8.067871386337618E307,\n      \"candidateName\" : \"2022-12-11T14:20:58.016823Z\",\n      \"probability\" : 3.133047309592477E306,\n      \"predScoreFamilyName\" : 1.5690194892486463E308\n    }, {\n      \"predScoreGivenName\" : 1.3184585999301744E308,\n      \"candidateName\" : \"2022-05-12T16:13:58.016866Z\",\n      \"probability\" : 8.708185124106209E307,\n      \"predScoreFamilyName\" : 6.024669868911881E306\n    }, {\n      \"predScoreGivenName\" : 1.0441464927728496E308,\n      \"candidateName\" : \"2022-09-10T13:34:58.016908Z\",\n      \"probability\" : 6.902027978025511E307,\n      \"predScoreFamilyName\" : 4.409888879740789E307\n    } ],\n    \"orderOption\" : \"mhzpozfjfktd45mzfv7zg7tulqyq3fukej4n8jmu287yytfq9yzyle79vipfqvzu8b3riphl04unbq5gfo7957z223xhrff4z9a1f6zhpfh70t8sl7xo76gyt18osalexycqq9wqgpofsu75jer348jd\",\n    \"id\" : \"91e4\",\n    \"script\" : \"ff855n0i9gj8vyffcsa4qdzz6gg35fe1is8pypelqauwihccri093puf1ih27bad8cfcjkkb78acl7v04ez0dp8n9pyscw56\"\n  }, {\n    \"firstName\" : \"Zachariah\",\n    \"lastName\" : \"Smitham\",\n    \"matchCandidates\" : [ {\n      \"predScoreGivenName\" : 1.6941043650432907E308,\n      \"candidateName\" : \"2022-10-10T16:02:58.01711Z\",\n      \"probability\" : 1.4499119588999379E308,\n      \"predScoreFamilyName\" : 5.942089947786882E307\n    }, {\n      \"predScoreGivenName\" : 9.13597763078581E307,\n      \"candidateName\" : \"2022-07-04T15:14:58.017152Z\",\n      \"probability\" : 1.171003377858491E308,\n      \"predScoreFamilyName\" : 1.786951069645689E308\n    }, {\n      \"predScoreGivenName\" : 7.772806377712826E307,\n      \"candidateName\" : \"2023-02-14T15:41:58.017193Z\",\n      \"probability\" : 8.574091451150008E307,\n      \"predScoreFamilyName\" : 1.3049151144407635E308\n    }, {\n      \"predScoreGivenName\" : 1.5295996075708386E308,\n      \"candidateName\" : \"2022-11-07T14:04:58.017236Z\",\n      \"probability\" : 2.5055961679291977E307,\n      \"predScoreFamilyName\" : 1.0585418937574674E307\n    }, {\n      \"predScoreGivenName\" : 7.209668555847328E307,\n      \"candidateName\" : \"2023-03-02T13:24:58.017276Z\",\n      \"probability\" : 1.2183403252335009E308,\n      \"predScoreFamilyName\" : 9.285586043129372E307\n    }, {\n      \"predScoreGivenName\" : 7.448178730121828E307,\n      \"candidateName\" : \"2022-03-30T14:58:58.017317Z\",\n      \"probability\" : 6.831265944336981E307,\n      \"predScoreFamilyName\" : 9.988356928304836E307\n    } ],\n    \"orderOption\" : \"uxwtme787w7kdc0k17cluyig2gg6fhgso0zxmfnb9v3x47h4wqju6hvs33ik6no9kknzshe0e8hdal63s0yquzi4q3pfgqwo0dt3jglks3hxraou8hzz916w7avr4hlkjvkpbxfi9w3vls29il8zjlslm1i03ki2gyw1xzt7vmbw7tur0\",\n    \"id\" : \"j857\",\n    \"script\" : \"9gbkqz3zyui7qy6zbg5vz0hs2bxqxopxquj6y0az9osq4ybctpopbmconk8oghlrxf6km9mwp1i9emrutag0kdr3t7eeeoug07omtk\"\n  }, {\n    \"firstName\" : \"Kareem\",\n    \"lastName\" : \"Lehner\",\n    \"matchCandidates\" : [ {\n      \"predScoreGivenName\" : 1.1073609362504813E307,\n      \"candidateName\" : \"2022-06-24T15:03:58.017499Z\",\n      \"probability\" : 5.617822122736257E307,\n      \"predScoreFamilyName\" : 5.43077109563018E307\n    }, {\n      \"predScoreGivenName\" : 1.338474522708284E308,\n      \"candidateName\" : \"2022-03-27T13:41:58.017541Z\",\n      \"probability\" : 5.21227565465033E307,\n      \"predScoreFamilyName\" : 4.3498026693756313E307\n    }, {\n      \"predScoreGivenName\" : 9.77469582057337E307,\n      \"candidateName\" : \"2022-09-10T16:47:58.017584Z\",\n      \"probability\" : 1.4958125538383705E308,\n      \"predScoreFamilyName\" : 7.273635013513793E307\n    }, {\n      \"predScoreGivenName\" : 1.6690339717698484E308,\n      \"candidateName\" : \"2022-11-20T15:35:58.01763Z\",\n      \"probability\" : 3.058158017628253E307,\n      \"predScoreFamilyName\" : 1.3048502403339016E308\n    }, {\n      \"predScoreGivenName\" : 1.883972890779355E307,\n      \"candidateName\" : \"2022-05-27T14:08:58.01767Z\",\n      \"probability\" : 7.459983157535127E307,\n      \"predScoreFamilyName\" : 8.814365739445022E307\n    }, {\n      \"predScoreGivenName\" : 1.134722275525226E308,\n      \"candidateName\" : \"2023-02-20T13:28:58.017712Z\",\n      \"probability\" : 1.174991888154391E308,\n      \"predScoreFamilyName\" : 4.988766894779736E306\n    }, {\n      \"predScoreGivenName\" : 1.2779598623826932E308,\n      \"candidateName\" : \"2022-06-16T13:19:58.017754Z\",\n      \"probability\" : 7.961765997562945E307,\n      \"predScoreFamilyName\" : 5.156882317801665E307\n    }, {\n      \"predScoreGivenName\" : 1.3232344832487295E308,\n      \"candidateName\" : \"2022-07-01T16:34:58.017797Z\",\n      \"probability\" : 6.400307086558393E307,\n      \"predScoreFamilyName\" : 6.027695397064638E307\n    } ],\n    \"orderOption\" : \"haanhiwiinru69fufkg8yzl5cus23uwq08ik13gdegvbybxds3xrfrnick4di4mj590xkfehgcwo62p1kjz3a495sc6ugl9g29eezy5l30dv7twf0bth6e7zk96f1v\",\n    \"id\" : \"3302\",\n    \"script\" : \"096p3flmajhhn7k7j5\"\n  }, {\n    \"firstName\" : \"Babara\",\n    \"lastName\" : \"Runolfsdottir\",\n    \"matchCandidates\" : [ {\n      \"predScoreGivenName\" : 4.4413718241775195E307,\n      \"candidateName\" : \"2022-10-14T13:42:58.017989Z\",\n      \"probability\" : 5.690527122283119E307,\n      \"predScoreFamilyName\" : 7.011654847747418E307\n    }, {\n      \"predScoreGivenName\" : 1.3658061607337987E308,\n      \"candidateName\" : \"2022-04-22T14:27:58.018033Z\",\n      \"probability\" : 1.3114543081408531E308,\n      \"predScoreFamilyName\" : 1.4671549795487998E308\n    } ],\n    \"orderOption\" : \"kwa5bj6ggr8xa6iyfyjwqwit1o8dvbwajdsekhygikjyarh5zejqpnkafmtm\",\n    \"id\" : \"ki53\",\n    \"script\" : \"tztu6ue0s7yq8bkrdff5bvd27eq75353iph65\"\n  }, {\n    \"firstName\" : \"Carey\",\n    \"lastName\" : \"Stehr\",\n    \"matchCandidates\" : [ {\n      \"predScoreGivenName\" : 2.924099095391979E307,\n      \"candidateName\" : \"2022-08-23T16:16:58.018213Z\",\n      \"probability\" : 8.594309992409364E307,\n      \"predScoreFamilyName\" : 5.703616899668749E307\n    }, {\n      \"predScoreGivenName\" : 1.3123989177617268E308,\n      \"candidateName\" : \"2023-03-07T14:00:58.018257Z\",\n      \"probability\" : 1.4586552661138096E308,\n      \"predScoreFamilyName\" : 7.685430204856555E307\n    }, {\n      \"predScoreGivenName\" : 1.7605662466134442E308,\n      \"candidateName\" : \"2022-12-18T16:04:58.0183Z\",\n      \"probability\" : 1.6403186535472757E308,\n      \"predScoreFamilyName\" : 3.2088675658771134E306\n    }, {\n      \"predScoreGivenName\" : 9.882438826715288E307,\n      \"candidateName\" : \"2022-08-25T14:52:58.018342Z\",\n      \"probability\" : 1.2830253717052945E308,\n      \"predScoreFamilyName\" : 9.694675921770023E307\n    }, {\n      \"predScoreGivenName\" : 8.584907179933542E307,\n      \"candidateName\" : \"2022-11-21T15:40:58.018385Z\",\n      \"probability\" : 8.193774953414992E307,\n      \"predScoreFamilyName\" : 1.541687010152195E308\n    }, {\n      \"predScoreGivenName\" : 7.881365815824814E305,\n      \"candidateName\" : \"2022-11-10T14:13:58.018428Z\",\n      \"probability\" : 1.0842822532310163E307,\n      \"predScoreFamilyName\" : 5.768172122235007E307\n    }, {\n      \"predScoreGivenName\" : 5.203608796472078E307,\n      \"candidateName\" : \"2022-10-08T15:46:58.018471Z\",\n      \"probability\" : 1.481129539381426E308,\n      \"predScoreFamilyName\" : 1.369531980481514E308\n    }, {\n      \"predScoreGivenName\" : 6.371664980995075E307,\n      \"candidateName\" : \"2022-06-16T15:00:58.018515Z\",\n      \"probability\" : 5.076012672485715E307,\n      \"predScoreFamilyName\" : 3.4662666069596773E307\n    } ],\n    \"orderOption\" : \"8cse0qpux2lmwjop7crmjc80q8qssh41fg7daws8rwq5om4g7kv9zdv4b06uui9jpuitxeb1y8dmdfinew9ehx3\",\n    \"id\" : \"iv4c\",\n    \"script\" : \"x1u6v37956hzwz95q8bbgfb3uenhnk7mmerlgwzuxo96zdtcc71zxxx1akt0mmezxz7cdqwlgrip\"\n  }, {\n    \"firstName\" : \"Isadora\",\n    \"lastName\" : \"Abshire\",\n    \"matchCandidates\" : [ {\n      \"predScoreGivenName\" : 1.5837125384887899E308,\n      \"candidateName\" : \"2022-07-28T16:38:58.018706Z\",\n      \"probability\" : 8.708107273846402E307,\n      \"predScoreFamilyName\" : 1.3606976141141378E308\n    }, {\n      \"predScoreGivenName\" : 1.53007493995973E308,\n      \"candidateName\" : \"2022-03-26T16:45:58.018747Z\",\n      \"probability\" : 1.632787093694848E308,\n      \"predScoreFamilyName\" : 6.431844745205361E307\n    }, {\n      \"predScoreGivenName\" : 1.6620603845476856E308,\n      \"candidateName\" : \"2022-06-27T13:56:58.018789Z\",\n      \"probability\" : 1.1481569692873414E307,\n      \"predScoreFamilyName\" : 2.4254368615117485E307\n    }, {\n      \"predScoreGivenName\" : 7.925368217861586E307,\n      \"candidateName\" : \"2022-12-22T14:48:58.018831Z\",\n      \"probability\" : 7.447990493995886E307,\n      \"predScoreFamilyName\" : 9.877743207134475E307\n    }, {\n      \"predScoreGivenName\" : 1.6065855787960595E308,\n      \"candidateName\" : \"2022-03-23T13:24:58.018871Z\",\n      \"probability\" : 6.136672206192799E307,\n      \"predScoreFamilyName\" : 8.6425261161193E307\n    }, {\n      \"predScoreGivenName\" : 8.586805954298128E307,\n      \"candidateName\" : \"2022-12-25T16:31:58.018912Z\",\n      \"probability\" : 1.391500881325454E308,\n      \"predScoreFamilyName\" : 9.771133462554801E307\n    } ],\n    \"orderOption\" : \"ur10cbf97na8gjifaee474hic62x0i9634t1a6l0qrl21665y6mipirmok0hh61gvdn81ejn64lio5zw0wwv67bhawjmm4kd4tpp0ptrr9idgulp0vng5k46rf9oemdahx2jk\",\n    \"id\" : \"5m41\",\n    \"script\" : \"kpw78dnnbtkahq4dkrn4270broppxpm7sxrazvvzxzbwdvgsj369ubeaj6qrskx9a6iz2eqjeb7uhu6mouibtfveul6ze1s18w829wf51l74a4sdd50t1qxvyg447ytjdw6ccjnq7iohvu5cunzsnqram75uqwjf2d0t\"\n  }, {\n    \"firstName\" : \"Reinaldo\",\n    \"lastName\" : \"Thompson\",\n    \"matchCandidates\" : [ {\n      \"predScoreGivenName\" : 1.5636330047736294E308,\n      \"candidateName\" : \"2023-01-20T15:27:58.019099Z\",\n      \"probability\" : 1.2642767699036288E308,\n      \"predScoreFamilyName\" : 1.2477833056607665E308\n    }, {\n      \"predScoreGivenName\" : 1.6154524824096636E306,\n      \"candidateName\" : \"2022-10-02T15:34:58.019143Z\",\n      \"probability\" : 2.507937695923983E307,\n      \"predScoreFamilyName\" : 3.420011458988741E306\n    }, {\n      \"predScoreGivenName\" : 1.5869148891498857E308,\n      \"candidateName\" : \"2022-12-02T16:17:58.019184Z\",\n      \"probability\" : 8.363373347711584E307,\n      \"predScoreFamilyName\" : 9.022365876461024E307\n    } ],\n    \"orderOption\" : \"99o2ttxm1cq7xqcmye3m0airda9ozd1rdp2yx5rb1abjgks9qgobs717td6o6j8fpmjd62hu77tls0ivfy3ejrf31h5c112syhwpf77h23z4rl1xwjnjkui4xdwncafkjipoukqyn2zzg3hz7t9697t\",\n    \"id\" : \"n696\",\n    \"script\" : \"d4hzt21p6lwtp8s0xfy88x92lprag5oouki6sag3janeshioq2uct26xj0ynidmu1rihf5l76pew6h9azbfzx3czd3mghmeqo24wpmxdk4x4zg7tqxw7d0f73kcngp\"\n  }, {\n    \"firstName\" : \"Jamie\",\n    \"lastName\" : \"DuBuque\",\n    \"matchCandidates\" : [ {\n      \"predScoreGivenName\" : 1.9665315015873587E306,\n      \"candidateName\" : \"2022-04-13T13:42:58.019368Z\",\n      \"probability\" : 7.753414004491924E307,\n      \"predScoreFamilyName\" : 4.779633284291501E307\n    }, {\n      \"predScoreGivenName\" : 9.61149658872165E307,\n      \"candidateName\" : \"2023-02-23T13:42:58.019411Z\",\n      \"probability\" : 5.796771196753996E307,\n      \"predScoreFamilyName\" : 9.652632423690411E307\n    }, {\n      \"predScoreGivenName\" : 1.7849874913968314E308,\n      \"candidateName\" : \"2022-08-11T14:47:58.019453Z\",\n      \"probability\" : 7.352956516745438E307,\n      \"predScoreFamilyName\" : 1.4729919359965411E308\n    }, {\n      \"predScoreGivenName\" : 1.9452154458920334E306,\n      \"candidateName\" : \"2023-01-18T16:53:58.019493Z\",\n      \"probability\" : 7.892965503346921E307,\n      \"predScoreFamilyName\" : 4.810234397873159E307\n    } ],\n    \"orderOption\" : \"ex6otns1mw2h1escvx1asrz7zahwcx2wmz4i67y0ga61l4sx6lrp51dau24yjxgaohgzvsow9ydm7f0r8ga2rtushq33hu1m4521we0s4buk35j7q1cxkdgzxpwz2a5ehka29kj525evzpao0sydi0q560ptzup6sxwzqc7hy9m7gurblyt0zy5yvm7\",\n    \"id\" : \"fmki\",\n    \"script\" : \"694unrddvuamrp1imvjw3vb9oxg4r\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "03313021-e5d9-3930-8a51-73b0e98f5c06",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "japaneseNameGenderKanjiCandidatesBatch",
          "schema" : {
            "properties" : {
              "namesAndMatchCandidates" : {
                "description" : "Classified matched names",
                "items" : {
                  "$ref" : "#/components/schemas/NameMatchCandidatesOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchNameMatchCandidatesOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 153
  }, {
    "id" : "cd3f2caa-3a83-30db-9fcd-4969e219f40f",
    "name" : "Infer the likely gender of up to 100 full names - 403",
    "request" : {
      "urlPath" : "/api2/json/genderJapaneseNameFullBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "cd3f2caa-3a83-30db-9fcd-4969e219f40f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderJapaneseNameFullBatch"
        }
      }
    },
    "insertionIndex" : 154
  }, {
    "id" : "4c36baff-25f3-3c77-918f-38bd7d6cf6f7",
    "name" : "Infer the likely gender of up to 100 full names - 401",
    "request" : {
      "urlPath" : "/api2/json/genderJapaneseNameFullBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "4c36baff-25f3-3c77-918f-38bd7d6cf6f7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderJapaneseNameFullBatch"
        }
      }
    },
    "insertionIndex" : 155
  }, {
    "id" : "12fe41cb-836a-3e87-9af0-7c9d64e78479",
    "name" : "Infer the likely gender of up to 100 full names - 400",
    "request" : {
      "urlPath" : "/api2/json/genderJapaneseNameFullBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "12fe41cb-836a-3e87-9af0-7c9d64e78479",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderJapaneseNameFullBatch"
        }
      }
    },
    "insertionIndex" : 156
  }, {
    "id" : "dbc46951-e9aa-362b-aed3-0adb18496558",
    "name" : "Infer the likely gender of up to 100 full names (application/json)",
    "request" : {
      "urlPath" : "/api2/json/genderJapaneseNameFullBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"personalNames\" : [ {\n    \"genderScale\" : 0.5523679548909601,\n    \"score\" : 37.631057920499074,\n    \"probabilityCalibrated\" : -0.4001189805947918,\n    \"name\" : \"Enoch Reichel\",\n    \"likelyGender\" : \"unknown\",\n    \"id\" : \"wguk\",\n    \"script\" : \"t3rz0dx57rphfcno11aa4hdcygwm9ukcrkig4mo3kk7eunhrn6jdkijwuovfcnmtg7gq0c6797kcd373pw3zmi9a8gvnio9cd08hsnq31md0y1w6smo79h1lxr9j6depofb03fh6mcs96tiqlglqd3\"\n  }, {\n    \"genderScale\" : 0.32612086845813915,\n    \"score\" : 64.51507392620866,\n    \"probabilityCalibrated\" : -0.35727442757633954,\n    \"name\" : \"Stefan Lowe\",\n    \"likelyGender\" : \"male\",\n    \"id\" : \"e3r0\",\n    \"script\" : \"0q4dptygy4ybovsb5kyeo3m78nwx8ood1jkvp3nsgqcteh27rppuzrbkrnf9qlulx5cnp2soll8vckp\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "dbc46951-e9aa-362b-aed3-0adb18496558",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderJapaneseNameFullBatch",
          "schema" : {
            "properties" : {
              "personalNames" : {
                "description" : "Classified genderized names",
                "items" : {
                  "$ref" : "#/components/schemas/PersonalNameGenderedOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchPersonalNameGenderedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 157
  }, {
    "id" : "00638307-f1a9-3d9d-ab6d-b14c3dcc6f2d",
    "name" : "Infer the likely gender of a Japanese full name ex. 王晓明 - 403",
    "request" : {
      "urlPath" : "/api2/json/genderJapaneseNameFull/Foster+Schulist",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "00638307-f1a9-3d9d-ab6d-b14c3dcc6f2d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderJapaneseNameFull"
        }
      }
    },
    "insertionIndex" : 158
  }, {
    "id" : "735c34a1-3f46-39ac-82c6-f3ce047f8e74",
    "name" : "Infer the likely gender of a Japanese full name ex. 王晓明 - 401",
    "request" : {
      "urlPath" : "/api2/json/genderJapaneseNameFull/Thea+Frami+PhD",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "735c34a1-3f46-39ac-82c6-f3ce047f8e74",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderJapaneseNameFull"
        }
      }
    },
    "insertionIndex" : 159
  }, {
    "id" : "e1f35a99-f11b-3523-a839-9e181cbff210",
    "name" : "Infer the likely gender of a Japanese full name ex. 王晓明 (application/json)",
    "request" : {
      "urlPath" : "/api2/json/genderJapaneseNameFull/Sal+Mertz",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"genderScale\" : -0.18603281881742362,\n  \"score\" : 93.32724180840957,\n  \"probabilityCalibrated\" : -0.02641993153023159,\n  \"name\" : \"Leonia Gislason\",\n  \"likelyGender\" : \"female\",\n  \"id\" : \"69r8\",\n  \"script\" : \"24udcrvqjscssaqdzz23qfenu1ih581a11nck3kg9300feb0uex4q0eh8twi4qxe13d11t1jt198x154wwyi691vrsxykbaoaq6wsijzn38b0oljt46x5f3fh7mq9yel1813cu6wnr8ynn6cdi78bi\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e1f35a99-f11b-3523-a839-9e181cbff210",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderJapaneseNameFull",
          "schema" : {
            "description" : "Classified genderized names",
            "properties" : {
              "genderScale" : {
                "description" : "Compatibility to NamSor_v1 Gender Scale M[-1..U..+1]F value.",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "id" : {
                "type" : "string"
              },
              "likelyGender" : {
                "description" : "Most likely gender",
                "enum" : [ "male", "female", "unknown" ],
                "type" : "string"
              },
              "name" : {
                "description" : "The input name",
                "type" : "string"
              },
              "probabilityCalibrated" : {
                "description" : "The calibrated probability for inferred gender to have been guessed correctly. -1 = still calibrating. ",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "score" : {
                "description" : "Compatibility to NamSor_v1 Gender score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. ",
                "format" : "double",
                "maximum" : 100,
                "minimum" : 0,
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "PersonalNameGenderedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 160
  }, {
    "id" : "bdb0995d-243a-3bc1-b860-073046d74062",
    "name" : "Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin). - 403",
    "request" : {
      "urlPath" : "/api2/json/genderJapaneseNameBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "bdb0995d-243a-3bc1-b860-073046d74062",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderJapaneseNamePinyinBatch"
        }
      }
    },
    "insertionIndex" : 161
  }, {
    "id" : "e8cfee93-a3b9-39c1-aeab-f655c967237a",
    "name" : "Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin). - 401",
    "request" : {
      "urlPath" : "/api2/json/genderJapaneseNameBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "e8cfee93-a3b9-39c1-aeab-f655c967237a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderJapaneseNamePinyinBatch"
        }
      }
    },
    "insertionIndex" : 162
  }, {
    "id" : "6c919d4f-0423-306e-a11a-9ab3cd96342f",
    "name" : "Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin). - 400",
    "request" : {
      "urlPath" : "/api2/json/genderJapaneseNameBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "6c919d4f-0423-306e-a11a-9ab3cd96342f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderJapaneseNamePinyinBatch"
        }
      }
    },
    "insertionIndex" : 163
  }, {
    "id" : "1c4730a5-3001-3c5d-b2c8-a6c659bd3ce0",
    "name" : "Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin). (application/json)",
    "request" : {
      "urlPath" : "/api2/json/genderJapaneseNameBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"personalNames\" : [ {\n    \"firstName\" : \"Rolando\",\n    \"genderScale\" : -0.9286319934319953,\n    \"lastName\" : \"Tremblay\",\n    \"score\" : 53.97530167132514,\n    \"probabilityCalibrated\" : -0.9860373278713717,\n    \"likelyGender\" : \"female\",\n    \"id\" : \"tt1n\",\n    \"script\" : \"yjxklph64v0zmlmkuo8wxjyw3xpg9cah12vqr867loxu7f9vpontehc8x85vnz459grw3fvc6x4uvngoeddiadlju91q58icvlonlpou07y096pz0cj8jnkty0e4l3b4m6k65f2p2x3nj3e83v9mbax2ntohquafvp573to\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1c4730a5-3001-3c5d-b2c8-a6c659bd3ce0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderJapaneseNamePinyinBatch",
          "schema" : {
            "description" : "Represents the output of inferring the LIKELY gender from a list of personal names.",
            "properties" : {
              "personalNames" : {
                "description" : "Classified genderized names",
                "items" : {
                  "$ref" : "#/components/schemas/FirstLastNameGenderedOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchFirstLastNameGenderedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 164
  }, {
    "id" : "fed97652-9977-3e9d-9dce-cb12dca0857d",
    "name" : "Infer the likely gender of a Japanese name in LATIN (Pinyin). - 403",
    "request" : {
      "urlPath" : "/api2/json/genderJapaneseName/Pollich/Britteny",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "fed97652-9977-3e9d-9dce-cb12dca0857d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderJapaneseNamePinyin"
        }
      }
    },
    "insertionIndex" : 165
  }, {
    "id" : "3c585afc-fa80-3a1b-a333-622df3548aed",
    "name" : "Infer the likely gender of a Japanese name in LATIN (Pinyin). - 401",
    "request" : {
      "urlPath" : "/api2/json/genderJapaneseName/Crooks/Babette",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "3c585afc-fa80-3a1b-a333-622df3548aed",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderJapaneseNamePinyin"
        }
      }
    },
    "insertionIndex" : 166
  }, {
    "id" : "ef44ed66-fdec-3ceb-83b0-cbf504e07b86",
    "name" : "Infer the likely gender of a Japanese name in LATIN (Pinyin). (application/json)",
    "request" : {
      "urlPath" : "/api2/json/genderJapaneseName/Ankunding/Audrie",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"firstName\" : \"Quentin\",\n  \"genderScale\" : 0.39222612591415085,\n  \"lastName\" : \"Rath\",\n  \"score\" : 45.33073320826303,\n  \"probabilityCalibrated\" : -0.5218037172054506,\n  \"likelyGender\" : \"unknown\",\n  \"id\" : \"g687\",\n  \"script\" : \"uyvczheane4ut8irecxaemer9zt59higmur6x4s7yac48k5ob2kuz3mpvx71x4iitj20xskaoscg64vgdj7o20j2n4ri2ci96ubvh6d2nld6amyqjw0xd86q1r52iiijb2z7vngvl05ms0gyv0lh3p\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ef44ed66-fdec-3ceb-83b0-cbf504e07b86",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderJapaneseNamePinyin",
          "schema" : {
            "description" : "Represents the output of inferring the LIKELY gender from a personal name.",
            "properties" : {
              "firstName" : {
                "description" : "The first name (also known as given name)",
                "type" : "string"
              },
              "genderScale" : {
                "description" : "Compatibility to NamSor_v1 Gender Scale M[-1..U..+1]F value.",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "id" : {
                "type" : "string"
              },
              "lastName" : {
                "description" : "The last name (also known as family name, or surname)",
                "type" : "string"
              },
              "likelyGender" : {
                "description" : "Most likely gender",
                "enum" : [ "male", "female", "unknown" ],
                "type" : "string"
              },
              "probabilityCalibrated" : {
                "description" : "The calibrated probability for inferred gender to have been guessed correctly. -1 = still calibrating. ",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "score" : {
                "description" : "Compatibility to NamSor_v1 Gender score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. ",
                "format" : "double",
                "maximum" : 100,
                "minimum" : 0,
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "FirstLastNameGenderedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 167
  }, {
    "id" : "47b08a3e-e5ea-34e7-bc29-685b7543bea6",
    "name" : "Infer the likely gender of up to 100 names, each given a local context (ISO2 country code). - 403",
    "request" : {
      "urlPath" : "/api2/json/genderGeoBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "47b08a3e-e5ea-34e7-bc29-685b7543bea6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderGeoBatch"
        }
      }
    },
    "insertionIndex" : 168
  }, {
    "id" : "49bf04ca-4034-3096-8275-f88dcda66da8",
    "name" : "Infer the likely gender of up to 100 names, each given a local context (ISO2 country code). - 401",
    "request" : {
      "urlPath" : "/api2/json/genderGeoBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "49bf04ca-4034-3096-8275-f88dcda66da8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderGeoBatch"
        }
      }
    },
    "insertionIndex" : 169
  }, {
    "id" : "1ea700d9-44f6-33c7-9ac9-1f9c79684f20",
    "name" : "Infer the likely gender of up to 100 names, each given a local context (ISO2 country code). - 400",
    "request" : {
      "urlPath" : "/api2/json/genderGeoBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "1ea700d9-44f6-33c7-9ac9-1f9c79684f20",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderGeoBatch"
        }
      }
    },
    "insertionIndex" : 170
  }, {
    "id" : "09678ca2-bad5-3b0e-859f-ffdf1416c562",
    "name" : "Infer the likely gender of up to 100 names, each given a local context (ISO2 country code). (application/json)",
    "request" : {
      "urlPath" : "/api2/json/genderGeoBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"personalNames\" : [ {\n    \"firstName\" : \"Fredda\",\n    \"genderScale\" : -0.32196614015449687,\n    \"lastName\" : \"Bayer\",\n    \"score\" : 50.88579017213194,\n    \"probabilityCalibrated\" : 0.7000934854075813,\n    \"likelyGender\" : \"unknown\",\n    \"id\" : \"3qcu\",\n    \"script\" : \"84zlul6bjrj3jbagm9a7mlqitqbngg87k8pndryh9sb401p5fw0aqdzhzoyejq3aws1o6i52znmlgis6xelhd0pky91tzsj6ep16kvfxhg7oleon4ba87jpcvzlegmj8y3vrggmj32ar97w30jp7pwbpu80o985vihtdp7wrkvvtkzhi46oi2yi2b047emu89xh\"\n  }, {\n    \"firstName\" : \"Oleta\",\n    \"genderScale\" : 0.39788220685475717,\n    \"lastName\" : \"Keeling\",\n    \"score\" : 12.173859499919137,\n    \"probabilityCalibrated\" : 0.5727111374916214,\n    \"likelyGender\" : \"male\",\n    \"id\" : \"63jt\",\n    \"script\" : \"ygw65ggc6zroe9cjq7l543xm7wac9nshalr7t31odlwp24bnmdndtiiwlfl07fzpjideyvsq3zipvxiqi1grb3cvch20gm386q01zj2yfa52pi18mvacsvb40arsxs2h7mf9tkjvja9pduwk9a7l4tzqw1ovll96a2evfg\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "09678ca2-bad5-3b0e-859f-ffdf1416c562",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderGeoBatch",
          "schema" : {
            "description" : "Represents the output of inferring the LIKELY gender from a list of personal names.",
            "properties" : {
              "personalNames" : {
                "description" : "Classified genderized names",
                "items" : {
                  "$ref" : "#/components/schemas/FirstLastNameGenderedOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchFirstLastNameGenderedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 171
  }, {
    "id" : "93a11470-9c0e-30cc-9517-23666cf273b2",
    "name" : "Infer the likely gender of a name, given a local context (ISO2 country code). - 403",
    "request" : {
      "urlPath" : "/api2/json/genderGeo/Oren/Thompson/6oncb177sd0rzyy5sphuzdkki1939p5t9jkrfa22wolzmmrg",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "93a11470-9c0e-30cc-9517-23666cf273b2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderGeo"
        }
      }
    },
    "insertionIndex" : 172
  }, {
    "id" : "509188a2-3ba5-3e39-990b-0a706ad6d587",
    "name" : "Infer the likely gender of a name, given a local context (ISO2 country code). - 401",
    "request" : {
      "urlPath" : "/api2/json/genderGeo/Marty/Veum/8kqd3fga2ovrb5tjuflanxgq676vcxpqbgtbxrdtyg59k2l8ou72waeun2fyd3pllz42l6d55facvud6nqonb8d16ao9n2i3",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "509188a2-3ba5-3e39-990b-0a706ad6d587",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderGeo"
        }
      }
    },
    "insertionIndex" : 173
  }, {
    "id" : "35d358d8-d89a-363b-8b4b-f9b34f263e41",
    "name" : "Infer the likely gender of a name, given a local context (ISO2 country code). (application/json)",
    "request" : {
      "urlPath" : "/api2/json/genderGeo/Stacy/Durgan/kt7gaghe7iw4lbi5tiq4pvakbpnj30c67v3pjt4ukl813vvset2org3kl1b5fwun6wc0wzrzexgxmq3n52sfs522zqhv747fis71lf6cpy",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"firstName\" : \"Columbus\",\n  \"genderScale\" : 0.3886661741661579,\n  \"lastName\" : \"Abshire\",\n  \"score\" : 42.88070880945024,\n  \"probabilityCalibrated\" : -0.9663330756477271,\n  \"likelyGender\" : \"female\",\n  \"id\" : \"50a0\",\n  \"script\" : \"fnxjousixoifcteqendcik90ds58ecl3gpkbvz5ogxtfqiplibr827t4601gr78k6444xlm2lt80od7dl9xebi6ri557ygah3cwohdlmq3p3hrhgyzg2kkdcy106z8quwx8t1rb6dfsyekrwd4uhmmggdhbkt63aujh6e29vgccbbnt\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "35d358d8-d89a-363b-8b4b-f9b34f263e41",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderGeo",
          "schema" : {
            "description" : "Represents the output of inferring the LIKELY gender from a personal name.",
            "properties" : {
              "firstName" : {
                "description" : "The first name (also known as given name)",
                "type" : "string"
              },
              "genderScale" : {
                "description" : "Compatibility to NamSor_v1 Gender Scale M[-1..U..+1]F value.",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "id" : {
                "type" : "string"
              },
              "lastName" : {
                "description" : "The last name (also known as family name, or surname)",
                "type" : "string"
              },
              "likelyGender" : {
                "description" : "Most likely gender",
                "enum" : [ "male", "female", "unknown" ],
                "type" : "string"
              },
              "probabilityCalibrated" : {
                "description" : "The calibrated probability for inferred gender to have been guessed correctly. -1 = still calibrating. ",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "score" : {
                "description" : "Compatibility to NamSor_v1 Gender score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. ",
                "format" : "double",
                "maximum" : 100,
                "minimum" : 0,
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "FirstLastNameGenderedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 174
  }, {
    "id" : "203c3294-0b5f-34bc-8f42-01a35cd24ca0",
    "name" : "Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code). - 403",
    "request" : {
      "urlPath" : "/api2/json/genderFullGeoBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "203c3294-0b5f-34bc-8f42-01a35cd24ca0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderFullGeoBatch"
        }
      }
    },
    "insertionIndex" : 175
  }, {
    "id" : "15ef6c96-e382-30ee-b519-ef497e3c4065",
    "name" : "Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code). - 401",
    "request" : {
      "urlPath" : "/api2/json/genderFullGeoBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "15ef6c96-e382-30ee-b519-ef497e3c4065",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderFullGeoBatch"
        }
      }
    },
    "insertionIndex" : 176
  }, {
    "id" : "77c98f73-9647-3ec3-adb4-04a8803de3cc",
    "name" : "Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code). - 400",
    "request" : {
      "urlPath" : "/api2/json/genderFullGeoBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "77c98f73-9647-3ec3-adb4-04a8803de3cc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderFullGeoBatch"
        }
      }
    },
    "insertionIndex" : 177
  }, {
    "id" : "d1a37cf8-cce1-3fb7-a415-21007a5ee9d9",
    "name" : "Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code). (application/json)",
    "request" : {
      "urlPath" : "/api2/json/genderFullGeoBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"personalNames\" : [ {\n    \"genderScale\" : 0.9710472818022824,\n    \"score\" : 43.6440262387745,\n    \"probabilityCalibrated\" : 0.449675401946672,\n    \"name\" : \"Lecia Sanford\",\n    \"likelyGender\" : \"male\",\n    \"id\" : \"o3x6\",\n    \"script\" : \"sbbr2b3de8o6yvbyz236a7bp2klzifj9bvkx5b3g3jhz8m1oed9h77rnne6k\"\n  }, {\n    \"genderScale\" : 0.7455407945217105,\n    \"score\" : 79.38103496051056,\n    \"probabilityCalibrated\" : -0.010945489725297852,\n    \"name\" : \"Jaime Sipes\",\n    \"likelyGender\" : \"unknown\",\n    \"id\" : \"64gn\",\n    \"script\" : \"z900n0n1vnxmky3p2wuh6gjue3s7vaoaq3voziqjwp94b1560usz66x3cy57w5v7wlt7lpzl9h9nwupto9v1mnnjd399acqcm3mxk1qijh66s4xw4yctu2kwszz2lqzvqgrb24jw0bzp37\"\n  }, {\n    \"genderScale\" : -0.3465040525382701,\n    \"score\" : 66.4734569276329,\n    \"probabilityCalibrated\" : 0.18624657298362113,\n    \"name\" : \"Lizette Ullrich\",\n    \"likelyGender\" : \"unknown\",\n    \"id\" : \"7b32\",\n    \"script\" : \"5ztxbf43d0x7hs4upmr5i9tosuchfs0za6tsdgrii851q0r3lotawd58aloxrjmdp05ht8xfubyuhz97ubsbqaarui7rgle4xcprz09q4uwhofrnpyxsltjr6flp9wntwvxbfugfqs37yb96hm944g8b0reow5e3n189ijx7l2mg3bi8zuu1j0u\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d1a37cf8-cce1-3fb7-a415-21007a5ee9d9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderFullGeoBatch",
          "schema" : {
            "properties" : {
              "personalNames" : {
                "description" : "Classified genderized names",
                "items" : {
                  "$ref" : "#/components/schemas/PersonalNameGenderedOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchPersonalNameGenderedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 178
  }, {
    "id" : "0956409b-2ba4-3b1f-85b9-7c3b9ad2fd8b",
    "name" : "Infer the likely gender of a full name, given a local context (ISO2 country code). - 403",
    "request" : {
      "urlPath" : "/api2/json/genderFullGeo/Florence+Gaylord/9nkyep0kl3gsg067y6xx4ycjjr24x65mp8nn9wl39rdhta8mpwvyfpyqfeheam5x87dnvzq0lutmrl21ac",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "0956409b-2ba4-3b1f-85b9-7c3b9ad2fd8b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderFullGeo"
        }
      }
    },
    "insertionIndex" : 179
  }, {
    "id" : "ecf7a25e-246b-3584-b425-25824dbb4973",
    "name" : "Infer the likely gender of a full name, given a local context (ISO2 country code). - 401",
    "request" : {
      "urlPath" : "/api2/json/genderFullGeo/Antonio+Wiza+II/u9wciel2pe4bo01zwud2fne66bs58d8yaz2680skzmle5n0c71uqlzz5hkif6bb8os7ane8loqycrg5gy50easnh1nmilv7odlb",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "ecf7a25e-246b-3584-b425-25824dbb4973",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderFullGeo"
        }
      }
    },
    "insertionIndex" : 180
  }, {
    "id" : "9760f4ff-a7dc-3cb0-9897-dbe11abdf749",
    "name" : "Infer the likely gender of a full name, given a local context (ISO2 country code). (application/json)",
    "request" : {
      "urlPath" : "/api2/json/genderFullGeo/Marlon+Ritchie/2dtj7kvs4k30cqmwxs75o8fein0jnhyu07x10tkklev82htxlak1eq5fqjxn6k3chmxs9dcvm2f3gtc7eu74lgl9g3l0rh6vz1cj4v15evgz9tkyg1o5ds8xzr89y90dc1joeum7h6lxbti4treiapo6rz55jmuafxt2e3v4rnv9opgczn5ioka4py8ade",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"genderScale\" : 0.6667941497879439,\n  \"score\" : 69.62691375830906,\n  \"probabilityCalibrated\" : -0.8316388090810514,\n  \"name\" : \"Dr. Jaqueline Gibson\",\n  \"likelyGender\" : \"unknown\",\n  \"id\" : \"711r\",\n  \"script\" : \"u33h1q3pe3a9u82f0x5muu8g2bau3yryc6objmex8tmc96rsu57nextnkstmdc3wecd0u8jsb\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9760f4ff-a7dc-3cb0-9897-dbe11abdf749",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderFullGeo",
          "schema" : {
            "description" : "Classified genderized names",
            "properties" : {
              "genderScale" : {
                "description" : "Compatibility to NamSor_v1 Gender Scale M[-1..U..+1]F value.",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "id" : {
                "type" : "string"
              },
              "likelyGender" : {
                "description" : "Most likely gender",
                "enum" : [ "male", "female", "unknown" ],
                "type" : "string"
              },
              "name" : {
                "description" : "The input name",
                "type" : "string"
              },
              "probabilityCalibrated" : {
                "description" : "The calibrated probability for inferred gender to have been guessed correctly. -1 = still calibrating. ",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "score" : {
                "description" : "Compatibility to NamSor_v1 Gender score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. ",
                "format" : "double",
                "maximum" : 100,
                "minimum" : 0,
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "PersonalNameGenderedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 181
  }, {
    "id" : "4d3a4ae4-47be-312d-8e0c-d5d4952e8c59",
    "name" : "Infer the likely gender of up to 100 full names, detecting automatically the cultural context. - 403",
    "request" : {
      "urlPath" : "/api2/json/genderFullBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "4d3a4ae4-47be-312d-8e0c-d5d4952e8c59",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderFullBatch"
        }
      }
    },
    "insertionIndex" : 182
  }, {
    "id" : "a30e2d29-8040-3620-bcf0-f241d7b4913f",
    "name" : "Infer the likely gender of up to 100 full names, detecting automatically the cultural context. - 401",
    "request" : {
      "urlPath" : "/api2/json/genderFullBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "a30e2d29-8040-3620-bcf0-f241d7b4913f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderFullBatch"
        }
      }
    },
    "insertionIndex" : 183
  }, {
    "id" : "8336aae9-76f3-36aa-b003-e468ac729da6",
    "name" : "Infer the likely gender of up to 100 full names, detecting automatically the cultural context. - 400",
    "request" : {
      "urlPath" : "/api2/json/genderFullBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "8336aae9-76f3-36aa-b003-e468ac729da6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderFullBatch"
        }
      }
    },
    "insertionIndex" : 184
  }, {
    "id" : "548462f5-5f54-383e-a82d-56b9aae5805a",
    "name" : "Infer the likely gender of up to 100 full names, detecting automatically the cultural context. (application/json)",
    "request" : {
      "urlPath" : "/api2/json/genderFullBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"personalNames\" : [ {\n    \"genderScale\" : 0.23393481474654765,\n    \"score\" : 6.388327058549869,\n    \"probabilityCalibrated\" : 0.3097869276103826,\n    \"name\" : \"Dinorah Marvin\",\n    \"likelyGender\" : \"female\",\n    \"id\" : \"669v\",\n    \"script\" : \"rkni525se20y40imtpdc2f0nsg39eusq3lkw0cdkuy31lxmbgihyoh9ogqh1shymjmgqni8qnzenv7urshes1kboz8drk3if2hv7e0umln8y3qvdvv\"\n  }, {\n    \"genderScale\" : -0.8685824869702843,\n    \"score\" : 71.28206407624582,\n    \"probabilityCalibrated\" : 0.6565491302062543,\n    \"name\" : \"Ms. Bobbi Price\",\n    \"likelyGender\" : \"unknown\",\n    \"id\" : \"8d7k\",\n    \"script\" : \"gtuuffn5jwojnoj7ftud7a5yn1f4e6v7hofeoaifoq3tv9m0tajsoa2j8i\"\n  }, {\n    \"genderScale\" : 0.10319429447725414,\n    \"score\" : 23.77225024216203,\n    \"probabilityCalibrated\" : -0.7162235929374656,\n    \"name\" : \"Alonso Baumbach\",\n    \"likelyGender\" : \"female\",\n    \"id\" : \"yjcw\",\n    \"script\" : \"i53ez93riph5a4orw5znzinezb5igcx711q4v8tzky2wzn3ql84tz7akt6bfjek5gnvj7t8x8da7ky2wtntf4p028nao8ep8lwpk39qsnoh7pwu10exsbcgwfolxfb9vvatmjf0q3xim8\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "548462f5-5f54-383e-a82d-56b9aae5805a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderFullBatch",
          "schema" : {
            "properties" : {
              "personalNames" : {
                "description" : "Classified genderized names",
                "items" : {
                  "$ref" : "#/components/schemas/PersonalNameGenderedOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchPersonalNameGenderedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 185
  }, {
    "id" : "a89587dc-3186-3245-a98e-40440069482c",
    "name" : "Infer the likely gender of a full name, ex. John H. Smith - 403",
    "request" : {
      "urlPath" : "/api2/json/genderFull/Marisha+Barrows",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "a89587dc-3186-3245-a98e-40440069482c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderFull"
        }
      }
    },
    "insertionIndex" : 186
  }, {
    "id" : "13e370c5-0a8c-3cfe-a4a1-86375bc21687",
    "name" : "Infer the likely gender of a full name, ex. John H. Smith - 401",
    "request" : {
      "urlPath" : "/api2/json/genderFull/Sheryll+Kuvalis",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "13e370c5-0a8c-3cfe-a4a1-86375bc21687",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderFull"
        }
      }
    },
    "insertionIndex" : 187
  }, {
    "id" : "55f73b17-7610-3328-95c7-847c3d20001d",
    "name" : "Infer the likely gender of a full name, ex. John H. Smith (application/json)",
    "request" : {
      "urlPath" : "/api2/json/genderFull/Olen+Prosacco",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"genderScale\" : 0.9883562771978152,\n  \"score\" : 37.01774491179511,\n  \"probabilityCalibrated\" : -0.9774026567639613,\n  \"name\" : \"Lashawn Johnston\",\n  \"likelyGender\" : \"female\",\n  \"id\" : \"8w9h\",\n  \"script\" : \"v33xcvjemfhfr8wnxkou7sc169dp4glul2t07msekaybuuqx7zxeaj3dnb0jyqn\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "55f73b17-7610-3328-95c7-847c3d20001d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderFull",
          "schema" : {
            "description" : "Classified genderized names",
            "properties" : {
              "genderScale" : {
                "description" : "Compatibility to NamSor_v1 Gender Scale M[-1..U..+1]F value.",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "id" : {
                "type" : "string"
              },
              "likelyGender" : {
                "description" : "Most likely gender",
                "enum" : [ "male", "female", "unknown" ],
                "type" : "string"
              },
              "name" : {
                "description" : "The input name",
                "type" : "string"
              },
              "probabilityCalibrated" : {
                "description" : "The calibrated probability for inferred gender to have been guessed correctly. -1 = still calibrating. ",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "score" : {
                "description" : "Compatibility to NamSor_v1 Gender score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. ",
                "format" : "double",
                "maximum" : 100,
                "minimum" : 0,
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "PersonalNameGenderedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 188
  }, {
    "id" : "31c2b930-3f1b-3b5a-b361-bb24c9ebfc42",
    "name" : "Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin). - 403",
    "request" : {
      "urlPath" : "/api2/json/genderChineseNamePinyinBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "31c2b930-3f1b-3b5a-b361-bb24c9ebfc42",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderChineseNamePinyinBatch"
        }
      }
    },
    "insertionIndex" : 189
  }, {
    "id" : "4bee8dba-dbe9-3c1d-b4bd-57b090c3af90",
    "name" : "Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin). - 401",
    "request" : {
      "urlPath" : "/api2/json/genderChineseNamePinyinBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "4bee8dba-dbe9-3c1d-b4bd-57b090c3af90",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderChineseNamePinyinBatch"
        }
      }
    },
    "insertionIndex" : 190
  }, {
    "id" : "b087bc3e-a3e5-37b9-9954-50b36f31e84f",
    "name" : "Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin). - 400",
    "request" : {
      "urlPath" : "/api2/json/genderChineseNamePinyinBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "b087bc3e-a3e5-37b9-9954-50b36f31e84f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderChineseNamePinyinBatch"
        }
      }
    },
    "insertionIndex" : 191
  }, {
    "id" : "7ece90ec-929c-3d92-b700-477502bad66f",
    "name" : "Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin). (application/json)",
    "request" : {
      "urlPath" : "/api2/json/genderChineseNamePinyinBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"personalNames\" : [ {\n    \"firstName\" : \"Yevette\",\n    \"genderScale\" : -0.3426065487888259,\n    \"lastName\" : \"Donnelly\",\n    \"score\" : 58.127326349687905,\n    \"probabilityCalibrated\" : 0.5271759896135422,\n    \"likelyGender\" : \"unknown\",\n    \"id\" : \"du40\",\n    \"script\" : \"r60s36xed33mukspoyj510uulk69a9xztpq\"\n  }, {\n    \"firstName\" : \"Shelba\",\n    \"genderScale\" : -0.7657962625241914,\n    \"lastName\" : \"Koch\",\n    \"score\" : 87.21994404259975,\n    \"probabilityCalibrated\" : 0.43505777278308133,\n    \"likelyGender\" : \"male\",\n    \"id\" : \"10u0\",\n    \"script\" : \"rlzncl3dre7aovq62t4s6n75lzyxyu9zoev9xana3iqf2ymflaszu0o8j2huy2odpsrqhr33m4302gwf6u2z95896gc0vgz0kezttyw2y7po5ig57nhggobel1iwwv12bk003tyt4cssel6lirc1rz\"\n  }, {\n    \"firstName\" : \"Georgiana\",\n    \"genderScale\" : 0.06421408680999785,\n    \"lastName\" : \"Lesch\",\n    \"score\" : 2.461860989958775,\n    \"probabilityCalibrated\" : -0.46050090358899864,\n    \"likelyGender\" : \"male\",\n    \"id\" : \"6g9i\",\n    \"script\" : \"bcfk061ibg9kufv5jsj9qmg0ju25vsuku6jahpxnr4meq90t4zbrpuzj23t4h3jr40f2sj06gf0ri7k0ifw657qnhmkkctzwqrf3y847dubm5inytkvot9tyuy8god75k1f7xos6rdz5wciwqhxqhohjiv46mjec2unwvf58tfo6pik1xawrhg238zzg0f\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7ece90ec-929c-3d92-b700-477502bad66f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderChineseNamePinyinBatch",
          "schema" : {
            "description" : "Represents the output of inferring the LIKELY gender from a list of personal names.",
            "properties" : {
              "personalNames" : {
                "description" : "Classified genderized names",
                "items" : {
                  "$ref" : "#/components/schemas/FirstLastNameGenderedOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchFirstLastNameGenderedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 192
  }, {
    "id" : "e1b02f12-ecc6-39a7-bafc-179ba8e35dea",
    "name" : "Infer the likely gender of a Chinese name in LATIN (Pinyin). - 403",
    "request" : {
      "urlPath" : "/api2/json/genderChineseNamePinyin/d48x6yuecpxei67n9aspm9uywmoqx88iep31wh962uxmxz8t2090s126mj2n5w23niy4n8tkt0udz1f61tkzy30agg7i2jnh6zi159e3uc40jqj2o4przx8licryv80jp5qd3xkb2hwjyjavaapgs04zorj1o65tyfy3otq8noh5zkqeqpztp0awimi8izmv7qv91z12/8mn629evk93pgvhvvvgz7kzn6m64yyj2in8mwcintg12vpw1yyfrakwqpz0z86b71ci8pbdijzwo6pc2fe1gfn2zzutclqcvhlpduiv8ffepdyp46gqawjusiovvwhwohxxclll2dop61f6j0nq5benrc8hvdavwiwi7",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "e1b02f12-ecc6-39a7-bafc-179ba8e35dea",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderChineseNamePinyin"
        }
      }
    },
    "insertionIndex" : 193
  }, {
    "id" : "156b2a18-8aa0-32cc-ab6e-e9e57ba10298",
    "name" : "Infer the likely gender of a Chinese name in LATIN (Pinyin). - 401",
    "request" : {
      "urlPath" : "/api2/json/genderChineseNamePinyin/xmckr5254yxal42g8x2vgpjpoq0p385y8whx3z6hw96akvd4wagj9mxc1zq334i121vwmjvho4auv9mag1ly6m8e9bg5yhpv3rg1nmz24hd4qek/p70psnxn",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "156b2a18-8aa0-32cc-ab6e-e9e57ba10298",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderChineseNamePinyin"
        }
      }
    },
    "insertionIndex" : 194
  }, {
    "id" : "e329dbde-47a5-3317-a301-eb250a06237c",
    "name" : "Infer the likely gender of a Chinese name in LATIN (Pinyin). (application/json)",
    "request" : {
      "urlPath" : "/api2/json/genderChineseNamePinyin/7opb6tlaq3tla6gotik6yi57ff60t8yn8ees88j9s8iauuhw4200am48yj9e2kuinpcxnmfox8ljx11ic7ov178bqklvjbxsl0mo76fgxnyktcu5lgyof5dw4n4mz0phtct0gyrftqka3j71e9n7srvzb22k8q4x43p7mc13lsswkttmf2i3wyn88f/t2u7dj8gsh94gbtyhimvw1j31brjq69120lrvl5rlrjkj20brkepdtdsw9sy7j0x4and803gnecf120na46jn8bqbaqpdgv6jdvg0zaejmd881bexqvsum5",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"firstName\" : \"Winford\",\n  \"genderScale\" : -0.5476289649688559,\n  \"lastName\" : \"O'Kon\",\n  \"score\" : 55.22551211857184,\n  \"probabilityCalibrated\" : 0.5779710004185292,\n  \"likelyGender\" : \"female\",\n  \"id\" : \"0epq\",\n  \"script\" : \"3tch6v50l4iejshpcp1jir1su4gqhxptbqlnvuxbv1jecvpnf8uonfkjzxfj7dk4v16p8w6bgnd4tfcnu0g45ooghgom4k8q\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e329dbde-47a5-3317-a301-eb250a06237c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderChineseNamePinyin",
          "schema" : {
            "description" : "Represents the output of inferring the LIKELY gender from a personal name.",
            "properties" : {
              "firstName" : {
                "description" : "The first name (also known as given name)",
                "type" : "string"
              },
              "genderScale" : {
                "description" : "Compatibility to NamSor_v1 Gender Scale M[-1..U..+1]F value.",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "id" : {
                "type" : "string"
              },
              "lastName" : {
                "description" : "The last name (also known as family name, or surname)",
                "type" : "string"
              },
              "likelyGender" : {
                "description" : "Most likely gender",
                "enum" : [ "male", "female", "unknown" ],
                "type" : "string"
              },
              "probabilityCalibrated" : {
                "description" : "The calibrated probability for inferred gender to have been guessed correctly. -1 = still calibrating. ",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "score" : {
                "description" : "Compatibility to NamSor_v1 Gender score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. ",
                "format" : "double",
                "maximum" : 100,
                "minimum" : 0,
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "FirstLastNameGenderedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 195
  }, {
    "id" : "853bb62d-19af-36fb-9314-1c8408cc3d19",
    "name" : "Infer the likely gender of up to 100 full names ex. 王晓明 - 403",
    "request" : {
      "urlPath" : "/api2/json/genderChineseNameBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "853bb62d-19af-36fb-9314-1c8408cc3d19",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderChineseNameBatch"
        }
      }
    },
    "insertionIndex" : 196
  }, {
    "id" : "a4d1ecf5-dfc6-33f0-baa7-86c768d2cb63",
    "name" : "Infer the likely gender of up to 100 full names ex. 王晓明 - 401",
    "request" : {
      "urlPath" : "/api2/json/genderChineseNameBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "a4d1ecf5-dfc6-33f0-baa7-86c768d2cb63",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderChineseNameBatch"
        }
      }
    },
    "insertionIndex" : 197
  }, {
    "id" : "bfd1b94f-f5d5-33f2-b1df-2e69e25f027d",
    "name" : "Infer the likely gender of up to 100 full names ex. 王晓明 - 400",
    "request" : {
      "urlPath" : "/api2/json/genderChineseNameBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "bfd1b94f-f5d5-33f2-b1df-2e69e25f027d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderChineseNameBatch"
        }
      }
    },
    "insertionIndex" : 198
  }, {
    "id" : "3589e321-0c2d-3794-9cde-b5e124df3529",
    "name" : "Infer the likely gender of up to 100 full names ex. 王晓明 (application/json)",
    "request" : {
      "urlPath" : "/api2/json/genderChineseNameBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"personalNames\" : [ {\n    \"genderScale\" : 0.3154116967329119,\n    \"score\" : 99.30200653537878,\n    \"probabilityCalibrated\" : -0.22634119718403967,\n    \"name\" : \"Erin Hudson\",\n    \"likelyGender\" : \"unknown\",\n    \"id\" : \"u7jc\",\n    \"script\" : \"5tnyw4wcdkffolva3g0ult05jjiqbo68f784x55fxop5smblm2dzjogxnc8d1jm2chzdcrdv4o0a0r7fa1eoqwdiadnxp63nc40770j07p3r0r3mybfx9gxz24iffjy9mya8lwgtxs42\"\n  }, {\n    \"genderScale\" : -0.8691958618071509,\n    \"score\" : 38.69332228598602,\n    \"probabilityCalibrated\" : 0.7203679588574341,\n    \"name\" : \"Carita Cummings\",\n    \"likelyGender\" : \"male\",\n    \"id\" : \"k91i\",\n    \"script\" : \"dxfwzhlubwh7p47aslfbtfpasgsx0tdsthf8pzgckaqmwjst1juvwi9dn4km90nasjthfe9em4v6crdkr6hql15l8h2nlfnnqj233upq3dv8t5ifylpz3beijg9nr95ifuhhon0tlyavyxmirdkrb845cnmvowtnz0yskcqsuep\"\n  }, {\n    \"genderScale\" : 0.7629698146082589,\n    \"score\" : 90.17280060273065,\n    \"probabilityCalibrated\" : -0.4717320624245718,\n    \"name\" : \"Rhett Hickle\",\n    \"likelyGender\" : \"unknown\",\n    \"id\" : \"e9mm\",\n    \"script\" : \"a4yrt7npybfuocrdrzj1hz1ymcxbuol9h2iuwo84vcrtzl6egi4sjkizwbkmk6sxvuhuf6ljnkv1gisyzgl1lqxyjlippyrt7rfuo348raro725wepcminxqxg1sbzm66y4cqhxbnb2sk148aucdecvsc8inlsl3nfv21uv6qr\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3589e321-0c2d-3794-9cde-b5e124df3529",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderChineseNameBatch",
          "schema" : {
            "properties" : {
              "personalNames" : {
                "description" : "Classified genderized names",
                "items" : {
                  "$ref" : "#/components/schemas/PersonalNameGenderedOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchPersonalNameGenderedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 199
  }, {
    "id" : "2bfcc221-fd17-3ae0-82f4-a968fda86693",
    "name" : "Infer the likely gender of a Chinese full name ex. 王晓明 - 403",
    "request" : {
      "urlPath" : "/api2/json/genderChineseName/Theo+Rutherford",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "2bfcc221-fd17-3ae0-82f4-a968fda86693",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderChineseName"
        }
      }
    },
    "insertionIndex" : 200
  }, {
    "id" : "11b5b262-5324-3083-9682-79aa4d04ef1c",
    "name" : "Infer the likely gender of a Chinese full name ex. 王晓明 - 401",
    "request" : {
      "urlPath" : "/api2/json/genderChineseName/Rogelio+Becker",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "11b5b262-5324-3083-9682-79aa4d04ef1c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderChineseName"
        }
      }
    },
    "insertionIndex" : 201
  }, {
    "id" : "7b0063bc-15ca-311a-88e7-bb7d3b9018ef",
    "name" : "Infer the likely gender of a Chinese full name ex. 王晓明 (application/json)",
    "request" : {
      "urlPath" : "/api2/json/genderChineseName/Joesph+Gislason+DVM",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"genderScale\" : 0.05198531307128107,\n  \"score\" : 4.826365635313989,\n  \"probabilityCalibrated\" : -0.455776283629856,\n  \"name\" : \"Stanton Volkman\",\n  \"likelyGender\" : \"female\",\n  \"id\" : \"11tf\",\n  \"script\" : \"tdu9\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7b0063bc-15ca-311a-88e7-bb7d3b9018ef",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderChineseName",
          "schema" : {
            "description" : "Classified genderized names",
            "properties" : {
              "genderScale" : {
                "description" : "Compatibility to NamSor_v1 Gender Scale M[-1..U..+1]F value.",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "id" : {
                "type" : "string"
              },
              "likelyGender" : {
                "description" : "Most likely gender",
                "enum" : [ "male", "female", "unknown" ],
                "type" : "string"
              },
              "name" : {
                "description" : "The input name",
                "type" : "string"
              },
              "probabilityCalibrated" : {
                "description" : "The calibrated probability for inferred gender to have been guessed correctly. -1 = still calibrating. ",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "score" : {
                "description" : "Compatibility to NamSor_v1 Gender score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. ",
                "format" : "double",
                "maximum" : 100,
                "minimum" : 0,
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "PersonalNameGenderedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 202
  }, {
    "id" : "307e5cae-9281-3be0-8588-6e6a94fd5252",
    "name" : "Infer the likely gender of up to 100 names, detecting automatically the cultural context. - 403",
    "request" : {
      "urlPath" : "/api2/json/genderBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "307e5cae-9281-3be0-8588-6e6a94fd5252",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderBatch"
        }
      }
    },
    "insertionIndex" : 203
  }, {
    "id" : "a970f33e-4f33-39ca-a613-aee511c37765",
    "name" : "Infer the likely gender of up to 100 names, detecting automatically the cultural context. - 401",
    "request" : {
      "urlPath" : "/api2/json/genderBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "a970f33e-4f33-39ca-a613-aee511c37765",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderBatch"
        }
      }
    },
    "insertionIndex" : 204
  }, {
    "id" : "74d4dcc2-31c4-310d-8239-4150cc8b145b",
    "name" : "Infer the likely gender of up to 100 names, detecting automatically the cultural context. - 400",
    "request" : {
      "urlPath" : "/api2/json/genderBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "74d4dcc2-31c4-310d-8239-4150cc8b145b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderBatch"
        }
      }
    },
    "insertionIndex" : 205
  }, {
    "id" : "2468738c-6479-3b87-b368-f60978b29d35",
    "name" : "Infer the likely gender of up to 100 names, detecting automatically the cultural context. (application/json)",
    "request" : {
      "urlPath" : "/api2/json/genderBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"personalNames\" : [ {\n    \"firstName\" : \"Ilda\",\n    \"genderScale\" : 0.45523057382446197,\n    \"lastName\" : \"Walker\",\n    \"score\" : 67.26455790944179,\n    \"probabilityCalibrated\" : -0.1577421115531208,\n    \"likelyGender\" : \"female\",\n    \"id\" : \"4495\",\n    \"script\" : \"c9z4b9ygok7cuhge8ojkjxn57cn4uiuadzh6e9darpu45ixza3yo1y91vwqxk39j1f5xgcd16xrb84totqfgpy70a8mj1jv301lff8icdkuxgafc5se4zzwkre\"\n  }, {\n    \"firstName\" : \"Seth\",\n    \"genderScale\" : -0.08940827284720054,\n    \"lastName\" : \"Haag\",\n    \"score\" : 7.0163269321876225,\n    \"probabilityCalibrated\" : -0.331772126567474,\n    \"likelyGender\" : \"male\",\n    \"id\" : \"y73i\",\n    \"script\" : \"atw12imo8vrs14p33u8zccbsn472xwplgkvpi7815mwsq2pe4lj9j7zbfbj53t6a6\"\n  }, {\n    \"firstName\" : \"Brooks\",\n    \"genderScale\" : 0.45113480785746685,\n    \"lastName\" : \"Leannon\",\n    \"score\" : 43.80363229407445,\n    \"probabilityCalibrated\" : 0.2775198758109778,\n    \"likelyGender\" : \"male\",\n    \"id\" : \"456e\",\n    \"script\" : \"zgjj\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2468738c-6479-3b87-b368-f60978b29d35",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "genderBatch",
          "schema" : {
            "description" : "Represents the output of inferring the LIKELY gender from a list of personal names.",
            "properties" : {
              "personalNames" : {
                "description" : "Classified genderized names",
                "items" : {
                  "$ref" : "#/components/schemas/FirstLastNameGenderedOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchFirstLastNameGenderedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 206
  }, {
    "id" : "867b6145-7972-3a23-803b-8a9acaea1af2",
    "name" : "Infer the likely gender of a name. - 403",
    "request" : {
      "urlPath" : "/api2/json/gender/Margarette/Hartmann",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "867b6145-7972-3a23-803b-8a9acaea1af2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "gender_1"
        }
      }
    },
    "insertionIndex" : 207
  }, {
    "id" : "d46f39ee-80d2-39e9-97db-30d8411da8fb",
    "name" : "Infer the likely gender of a name. - 401",
    "request" : {
      "urlPath" : "/api2/json/gender/Vivan/Brakus",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "d46f39ee-80d2-39e9-97db-30d8411da8fb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "gender_1"
        }
      }
    },
    "insertionIndex" : 208
  }, {
    "id" : "040ad919-deed-3085-a50f-8cbcf0ff774b",
    "name" : "Infer the likely gender of a name. (application/json)",
    "request" : {
      "urlPath" : "/api2/json/gender/Adella/Emmerich",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"firstName\" : \"Nathanael\",\n  \"genderScale\" : -0.8231107460575096,\n  \"lastName\" : \"Mayert\",\n  \"score\" : 83.01949890657075,\n  \"probabilityCalibrated\" : -0.5868122163684641,\n  \"likelyGender\" : \"unknown\",\n  \"id\" : \"97wk\",\n  \"script\" : \"k9sn9j38hezcy4n1j8i7w13fo0eyt4b0hdvmg33t76olof0ql2y7x0dwmnxqmcf31xykt1zkkh55npk27g940qeez865i9f4s79tzoc10xg3duxp\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "040ad919-deed-3085-a50f-8cbcf0ff774b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "gender_1",
          "schema" : {
            "description" : "Represents the output of inferring the LIKELY gender from a personal name.",
            "properties" : {
              "firstName" : {
                "description" : "The first name (also known as given name)",
                "type" : "string"
              },
              "genderScale" : {
                "description" : "Compatibility to NamSor_v1 Gender Scale M[-1..U..+1]F value.",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "id" : {
                "type" : "string"
              },
              "lastName" : {
                "description" : "The last name (also known as family name, or surname)",
                "type" : "string"
              },
              "likelyGender" : {
                "description" : "Most likely gender",
                "enum" : [ "male", "female", "unknown" ],
                "type" : "string"
              },
              "probabilityCalibrated" : {
                "description" : "The calibrated probability for inferred gender to have been guessed correctly. -1 = still calibrating. ",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "score" : {
                "description" : "Compatibility to NamSor_v1 Gender score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. ",
                "format" : "double",
                "maximum" : 100,
                "minimum" : 0,
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "FirstLastNameGenderedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 209
  }, {
    "id" : "6d5768bc-580c-35af-a422-a07ea7759963",
    "name" : "Infer the likely gender of a just a fiven name, assuming default 'US' local context. Please use preferably full names and local geographic context for better accuracy. - 403",
    "request" : {
      "urlPath" : "/api2/json/gender/Jerry",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "6d5768bc-580c-35af-a422-a07ea7759963",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "gender"
        }
      }
    },
    "insertionIndex" : 210
  }, {
    "id" : "f967a4d9-6f78-349d-8156-895acbcef835",
    "name" : "Infer the likely gender of a just a fiven name, assuming default 'US' local context. Please use preferably full names and local geographic context for better accuracy. - 401",
    "request" : {
      "urlPath" : "/api2/json/gender/Mariano",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "f967a4d9-6f78-349d-8156-895acbcef835",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "gender"
        }
      }
    },
    "insertionIndex" : 211
  }, {
    "id" : "f1544e91-6066-3ba7-8025-1d47a4adfb31",
    "name" : "Infer the likely gender of a just a fiven name, assuming default 'US' local context. Please use preferably full names and local geographic context for better accuracy. (application/json)",
    "request" : {
      "urlPath" : "/api2/json/gender/Horace",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"firstName\" : \"Nicol\",\n  \"genderScale\" : -0.5443981855615379,\n  \"lastName\" : \"Haley\",\n  \"score\" : 0.1179361033505022,\n  \"probabilityCalibrated\" : -0.40480342767991506,\n  \"likelyGender\" : \"unknown\",\n  \"id\" : \"2519\",\n  \"script\" : \"j3j72ptqi14v6oocetsck326hkdrpybshj64zi5x0\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f1544e91-6066-3ba7-8025-1d47a4adfb31",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "gender",
          "schema" : {
            "description" : "Represents the output of inferring the LIKELY gender from a personal name.",
            "properties" : {
              "firstName" : {
                "description" : "The first name (also known as given name)",
                "type" : "string"
              },
              "genderScale" : {
                "description" : "Compatibility to NamSor_v1 Gender Scale M[-1..U..+1]F value.",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "id" : {
                "type" : "string"
              },
              "lastName" : {
                "description" : "The last name (also known as family name, or surname)",
                "type" : "string"
              },
              "likelyGender" : {
                "description" : "Most likely gender",
                "enum" : [ "male", "female", "unknown" ],
                "type" : "string"
              },
              "probabilityCalibrated" : {
                "description" : "The calibrated probability for inferred gender to have been guessed correctly. -1 = still calibrating. ",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "score" : {
                "description" : "Compatibility to NamSor_v1 Gender score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. ",
                "format" : "double",
                "maximum" : 100,
                "minimum" : 0,
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "FirstLastNameGenderedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 212
  }, {
    "id" : "19abc809-704d-311c-98ba-c517ab8a1893",
    "name" : "[USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) - 403",
    "request" : {
      "urlPath" : "/api2/json/diasporaBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "19abc809-704d-311c-98ba-c517ab8a1893",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "diasporaBatch"
        }
      }
    },
    "insertionIndex" : 213
  }, {
    "id" : "2eac2760-fba2-397b-86e7-22ced922b72f",
    "name" : "[USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) - 401",
    "request" : {
      "urlPath" : "/api2/json/diasporaBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "2eac2760-fba2-397b-86e7-22ced922b72f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "diasporaBatch"
        }
      }
    },
    "insertionIndex" : 214
  }, {
    "id" : "08bed1cb-c330-30d8-9c53-d850188ad0d4",
    "name" : "[USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) - 400",
    "request" : {
      "urlPath" : "/api2/json/diasporaBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "08bed1cb-c330-30d8-9c53-d850188ad0d4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "diasporaBatch"
        }
      }
    },
    "insertionIndex" : 215
  }, {
    "id" : "19efb96d-0ef7-342c-8b04-573e9a00db67",
    "name" : "[USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) (application/json)",
    "request" : {
      "urlPath" : "/api2/json/diasporaBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"personalNames\" : [ {\n    \"firstName\" : \"Francoise\",\n    \"lastName\" : \"Daniel\",\n    \"score\" : 73.33224926699557,\n    \"probabilityCalibrated\" : 0.03884724170473075,\n    \"ethnicity\" : \"Chinese\",\n    \"lifted\" : true,\n    \"probabilityAltCalibrated\" : -0.25042217589514104,\n    \"ethnicityAlt\" : \"Japanese\",\n    \"countryIso2\" : \"0au3l89f27gdo5bdpxy47kj93cracx7b71g14ao3ubkxn6s9ga95w6k35hkofcyfc95tc5csm7b5mky7jvtypnv0rrzfm64wekp8j1zagl3twg44tta32a7cif8wn00165gh0lpx92a39ur24upx84xfyzv2uq79so28zi34tne\",\n    \"id\" : \"7oj3\",\n    \"ethnicitiesTop\" : [ \"ju51d41f2rh2zkwg0agx20n3wqv1noj8gbr0sycyyngbl41hwrs5hpubyenvv3rbcuaz6zs1zk6b7jou28cmcafezf0f87bg1fg8v64j0hv\", \"6ez57n26fvu2w8cy1niwqwpwf4v16bwf58kdyqufhllpo2caqf5sfj7s56wwkiei37and9no3cxo1w2gyzbs28gg919jkxk0444yc\", \"xco2i16umsgbtfhhdz7vjy1lzgwnqwd6550u2mzc4cnntuoi87h95hemg1m3pot9fluvkkmy1ngp0ce9u0i3jzztdovr5kt0acgy4wmvcf3cus68zi6rmpblj2lfqpyxjtbl6hr4if02jes4c5xjoqroetik4m\", \"gx7mjzka\", \"gbcjcs5w5kirpxnbif7e3qo3seagm0vzt31f0p0sfwkt9jq7ez\", \"431zps6pklh65zean29p3nm3r1wj39yx1rr2hqdbc80bj8q6kxjfkc344x8xdb2fkeu0sbihnr7gosyvahpha5lkag9xui6h1p78muacmjobh85bog2k9z7beqzmxrwzmwm73zj8gokq6\", \"xvojo59tixgh7uh9pfqc5dm7oymjbpf8nqfs7rec3s1o7cq75xyp0qw5q4g21ywdeny36fjhmrwu3p8wcr6uwntuj056l5tzdrzu9q0ng4e5gmkbu9lpi44nhlwrrtsy7k6nzfpcv5irp382r7w0ausrj\", \"a2qwtk4fbygyd958azcfov2d97y3lfpjnfsq4ry50lr40x0bsg0jbi1jt5ls6zcro574ns28dp7k3n7hxgzlal0w9s3\" ],\n    \"script\" : \"tmeqospl8u9qcouhfwmdayn8s51ez8ynntwghnbimvpmaxy4c9\"\n  }, {\n    \"firstName\" : \"Albertine\",\n    \"lastName\" : \"Dietrich\",\n    \"score\" : 27.803604570924957,\n    \"probabilityCalibrated\" : 0.6535008169354302,\n    \"ethnicity\" : \"Chinese\",\n    \"lifted\" : false,\n    \"probabilityAltCalibrated\" : -0.29338624079058495,\n    \"ethnicityAlt\" : \"Japanese\",\n    \"countryIso2\" : \"zwsxbbq995khui58n2m4o0xu1p2gbzr0ot08lqf6keqfm3hj7rj1pwhqw9mrjv7owwu3iv77ka7zb6165djwgaevx6ip6mcbomv7ntxak23ksb5ajww2gwfq950nvan0i2lsjjrdo93vui4h2zy3yw91217gmx0z8lqujznykb2cc6s5z6v2hgs21z\",\n    \"id\" : \"5znu\",\n    \"ethnicitiesTop\" : [ \"z7fddz9aaxdk9m8cz98r1kuu56vqfwxmdi6gklz443ixnbi2964h03coz8y8edvv9v0ptt13vzcp01hbre3rffo9om9z5wx0xz3tj9lw47g5v666b4j6df3yafj89hamrczbafdd8654pntnrdapfsht03wv2gk3puihc1yg91zv59265ojpkv\", \"ruh9rv5aoir43495tn7hk45wk4oimhrrvpc\", \"1vmwtuda7kzd0r4axhvjufnfnj30f8lvvc8ozykfo1deaqhhmynk9sn1jmq22ioakaikwpv7lkz2oh7kbiswgmh5\", \"w3h32ordw9uaqjxhv8vovc2g4ccjvlzqj4diju9y2btapkpscy8odlu\", \"w6ub71ba3gufvltpfquh0g83766tcifcgm6kghpjtlaauorvpzno7ftu5wlq7lxw55mitod0d5tuu0\" ],\n    \"script\" : \"05le0fuenwhb08syhyxwsychx4wp306h6y29c8xcwy40uaes6gdox63dmq9yr8dnzzg08numu9uq60rj919f5eflqf1u7t97\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "19efb96d-0ef7-342c-8b04-573e9a00db67",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "diasporaBatch",
          "schema" : {
            "description" : "Represents the output of inferring the LIKELY ethnicity from a personal name, given an country of residence.",
            "properties" : {
              "personalNames" : {
                "description" : "Classified diaspora names",
                "items" : {
                  "$ref" : "#/components/schemas/FirstLastNameDiasporaedOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchFirstLastNameDiasporaedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 216
  }, {
    "id" : "e3196e3b-a596-3766-8a7b-c3e4c47ce8b5",
    "name" : "[USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) - 403",
    "request" : {
      "urlPath" : "/api2/json/diaspora/zhr7wilw14tvjxhoi810c9u5lw7pnpffj2dickxr7qs7lv2je/Ehtel/Osinski",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "e3196e3b-a596-3766-8a7b-c3e4c47ce8b5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "diaspora"
        }
      }
    },
    "insertionIndex" : 217
  }, {
    "id" : "82ab852d-eeed-3168-a970-91cfa7e09602",
    "name" : "[USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) - 401",
    "request" : {
      "urlPath" : "/api2/json/diaspora/u0v926optjl0vey1yq1ud1303iw6nm0dku5m6ncosy34drhnl6635xfejl2td8a1p8t8e3smq25i7vtdljkrli82wgifwkkz8j1/Karine/Wiza",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "82ab852d-eeed-3168-a970-91cfa7e09602",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "diaspora"
        }
      }
    },
    "insertionIndex" : 218
  }, {
    "id" : "006f062b-a93d-3276-81fe-255bebbce43b",
    "name" : "[USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.) (application/json)",
    "request" : {
      "urlPath" : "/api2/json/diaspora/f2yj4lxcsi9yl99eeac8ff2i45ppxdp6daom9r684/Genevie/Beahan",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"firstName\" : \"Arden\",\n  \"lastName\" : \"Schmeler\",\n  \"score\" : 88.09348828324526,\n  \"probabilityCalibrated\" : -0.8674637523413875,\n  \"ethnicity\" : \"Chinese\",\n  \"lifted\" : false,\n  \"probabilityAltCalibrated\" : -0.7902966200975237,\n  \"ethnicityAlt\" : \"Japanese\",\n  \"countryIso2\" : \"ldqferq7vni0e38ri30qgk97h4meog20k0idf500zddbefhyt1zahopztbl5g1h4c99jt73pcm130gz5a2s4hy7sojrstwsfwspadmtkvti98vn020bsc232j3g5dwpro98kx90\",\n  \"id\" : \"ge8g\",\n  \"ethnicitiesTop\" : [ \"rcac6k54yrvldhb4ixmenhihqr0s8bjvip8to3dxng2llsy9og69trwipf5q3fvc0lty7mvrseplch43bapxz8z9dn4mvmjo5hlu4mnstd81\", \"sg0pxhagxnritmdmnnf6q7t5eq2875qp7zvf4hwatlbmvakko7n9o9tc4j4byxo2q59ge6iuki92usxt9ja1wvjrni9py2hc7i4sc2\" ],\n  \"script\" : \"7it5ce2bijf16fcyq15jhgvjykj8ar74uchqt8obw9evnoh8su2tigv8ks04kg5uru0v8932d4m03duuq6tag0t3ejwvon6ur4nd2uedixj3kqs9s4lqz1tbeqfuqbntkva0rdc36zgz8szcqdnmmwrk\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "006f062b-a93d-3276-81fe-255bebbce43b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "diaspora",
          "schema" : {
            "description" : "Represents the output of inferring the LIKELY ethnicity from a personal name, given an country of residence.",
            "properties" : {
              "countryIso2" : {
                "description" : "From input data, the countryIso2 of geographic context (US,CA etc.)",
                "type" : "string",
                "xml" : {
                  "attribute" : true
                }
              },
              "ethnicitiesTop" : {
                "description" : "List most likely ethnicities (top 10)",
                "items" : {
                  "description" : "List most likely ethnicities (top 10)",
                  "type" : "string"
                },
                "type" : "array"
              },
              "ethnicity" : {
                "description" : "The most likely ethnicity",
                "example" : "Chinese",
                "type" : "string",
                "xml" : {
                  "attribute" : true
                }
              },
              "ethnicityAlt" : {
                "description" : "The second best alternative ethnicity",
                "example" : "Japanese",
                "type" : "string",
                "xml" : {
                  "attribute" : true
                }
              },
              "firstName" : {
                "description" : "The first name (also known as given name)",
                "type" : "string"
              },
              "id" : {
                "type" : "string"
              },
              "lastName" : {
                "description" : "The last name (also known as family name, or surname)",
                "type" : "string"
              },
              "lifted" : {
                "description" : "Indicates if the output ethnicity is based on machine learning only, or further lifted as a known fact by a country-specific rule. Let us know if you believe ethnicity is incorrect on a specific case where lifted is true.",
                "type" : "boolean",
                "xml" : {
                  "attribute" : true
                }
              },
              "probabilityAltCalibrated" : {
                "description" : "The calibrated probability for ethnicity OR ethnicityAlt to have been guessed correctly. -1 = still calibrating. ",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "probabilityCalibrated" : {
                "description" : "The calibrated probability for ethnicity to have been guessed correctly. -1 = still calibrating. ",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "score" : {
                "description" : "Compatibility to NamSor_v1 Diaspora score value. Higher score is better, but score is not normalized. Use calibratedProbability if available. ",
                "format" : "double",
                "maximum" : 100,
                "minimum" : 0,
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "FirstLastNameDiasporaedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 219
  }, {
    "id" : "cee81b95-0f94-30d4-a3e3-bf9c27de34eb",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin. - 403",
    "request" : {
      "urlPath" : "/api2/json/countryBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "cee81b95-0f94-30d4-a3e3-bf9c27de34eb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "countryBatch"
        }
      }
    },
    "insertionIndex" : 220
  }, {
    "id" : "51cb45ca-dc32-3e9e-a598-94704a6979a9",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin. - 401",
    "request" : {
      "urlPath" : "/api2/json/countryBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "51cb45ca-dc32-3e9e-a598-94704a6979a9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "countryBatch"
        }
      }
    },
    "insertionIndex" : 221
  }, {
    "id" : "2a3fa0c5-fa85-3314-9741-6bc96febffb8",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin. - 400",
    "request" : {
      "urlPath" : "/api2/json/countryBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "2a3fa0c5-fa85-3314-9741-6bc96febffb8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "countryBatch"
        }
      }
    },
    "insertionIndex" : 222
  }, {
    "id" : "a3d6c491-621c-3af7-817b-1ca49d1d1e7c",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin. (application/json)",
    "request" : {
      "urlPath" : "/api2/json/countryBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"personalNames\" : [ {\n    \"country\" : \"Comoros\",\n    \"score\" : 94.80748191886205,\n    \"topRegion\" : \"2ypp\",\n    \"probabilityCalibrated\" : 0.7155729266961668,\n    \"subRegion\" : \"5ca6e1yfycpm18xhieksx9ez49q21iot7ptmtj03tu6cs2x7v8xjak8y1skvxhvqoqydlnfhjhye67qot62tee3crku9loodg8kl3wo1itra6p0541qgir88rn89mb7pv33j6yuklsztcyn5osej9jzv5uulz32\",\n    \"countriesTop\" : [ \"w6cnhc31mj97amuf6ujww2nxd512sh959f6cskvscrqwfkgwu9hhrg0c3uzjr3tsjqwcs4rrriou74geuxs9x8srxor8txyggj9gm9w\", \"pqjlipnr5nlw5gb2kdxwcrlz0dmez9nkxmkufxxrams9lj9fotp0pqb4prgw093ce70e1gduw0yanq73yo\", \"jggdsx8m5zoxeslf8c5x3rnsy45oj9mtwsuh25f102h3cymhqj5oml25p3j4o8tnlnd6eeat821vpghe6jx4t57xfsicdioo5myzgyuawq8sgaxdglo0r2e8mbac8muqhgtu82y44ex7jmeum4nmltfq1xi\", \"xe5ndz9sfrw8old9o4xse4udfjrm562tznbsa810ouju685f622aemi03mhjasv094vkfs3i1em3wqk78froctz5xxdpyox24ttt2fvo537gi8\", \"f6gcxh40pbyk\" ],\n    \"name\" : \"Dr. Sidney Schuster\",\n    \"countryAlt\" : \"ov507mqwwaz978xgh6uu48edp21t1dvjycwcex59m88z00r2zokwsu5wv83o8jawwt7cc6q6coz6mwrfmdpsvw43fdptr2lvq2jp7acykchbuwzxbku67rvo66b6lnd438x6vxkcge8x3f0yilhreacxceljqa9i5tv7mmpxho9dlicb7ko\",\n    \"probabilityAltCalibrated\" : 0.29627654507080714,\n    \"id\" : \"shmy\",\n    \"region\" : \"qptcsjf2o1sg9avc38pzaid1rg4u11nrq4g7muu2nwlljvtc18cga9i4wyhv51rlen\",\n    \"script\" : \"dqh\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a3d6c491-621c-3af7-817b-1ca49d1d1e7c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "countryBatch",
          "schema" : {
            "properties" : {
              "personalNames" : {
                "description" : "Classified geo names",
                "items" : {
                  "$ref" : "#/components/schemas/PersonalNameGeoOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchPersonalNameGeoOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 223
  }, {
    "id" : "1cefaf42-73a6-3a8c-97be-d1eb71a4f7f8",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin. - 403",
    "request" : {
      "urlPath" : "/api2/json/country/dr7m8zgsdkx0462h8kysesiwovv6x7ik9rfmx9l2i7lvwpupjcatlv0k22m75nt1wqrtvqdse27jl7qmqnl4zfzi5ecvtx6y1f1wyi0fxlv0ptigajio4kbua4yls8qawbrzuo69g2g1y3qfejupvl488q8yomwht8t1zmkzrj3i1h2jab8p",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "1cefaf42-73a6-3a8c-97be-d1eb71a4f7f8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "country"
        }
      }
    },
    "insertionIndex" : 224
  }, {
    "id" : "18dde4c2-2869-3cbb-82ea-6fed599d8d9b",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin. - 401",
    "request" : {
      "urlPath" : "/api2/json/country/4w2v6tqn5ldotma74bflnerlni2ko99qumhy77oa92vacuvottjduk0njrwmi3aw7e6xafdg1rfqfwphjsnk72aykl4gfixxrl2xyz1ulgr7z4yymwge2qxustlazchbpmcqktba",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "18dde4c2-2869-3cbb-82ea-6fed599d8d9b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "country"
        }
      }
    },
    "insertionIndex" : 225
  }, {
    "id" : "8813dac2-6bb5-3d39-958c-9c42f5767b4f",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin. (application/json)",
    "request" : {
      "urlPath" : "/api2/json/country/cy8qlhrogij37nfrqxxlwjsh1wa3bn24q161m1gozcyf5ee5we7e7xaek6tr3r9eow1hcjnj0jyropmvbg8lo8jca8wqymdp9oclxc7dl3tetgq4",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"country\" : \"Dominican Republic\",\n  \"score\" : 81.9190527406705,\n  \"topRegion\" : \"lptlc40npf1bu1o7fkgk8gbr6n38inr1t0wekh83gzdbnii4fsggjzgzr5do09165v6jq1f0kev4fh270mgo9d3uz4t06pb0pdk12pr2prd7ltz4js31go\",\n  \"probabilityCalibrated\" : 0.8791841543323353,\n  \"subRegion\" : \"d2lw8hjc18otajvvdb60vizaxmxndiewsly0a1muocsypjnhh6bi\",\n  \"countriesTop\" : [ \"x3vlhw7kd72kfwdtub4k\", \"dlg5xfgmja8y6g6opsj8rsv\" ],\n  \"name\" : \"Ms. Nathanial Schoen\",\n  \"countryAlt\" : \"i0l4x2fx9k\",\n  \"probabilityAltCalibrated\" : -0.8715903892314483,\n  \"id\" : \"q306\",\n  \"region\" : \"6dg5mjvapzppi86llkhyo9etthgeigd9ezv28g7wy0thob0g77siloyafszo72e4nc0c26hai71fcs4xtssvly5yu7chvbdznfeqptq8hfflxflvboj6477geht95sgl0ir7spou7dk0jcrqgr5m4v6smrvkf6f6ql14zabtf\",\n  \"script\" : \"3oaids7f0o7564pi5z6afomasf2nnowhkv8020rylrul04k0ng5towddfodoahk53odhr5hswvl8nzb2jpudq0b6ndua1u\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8813dac2-6bb5-3d39-958c-9c42f5767b4f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "country",
          "schema" : {
            "description" : "Classified geo names",
            "properties" : {
              "countriesTop" : {
                "description" : "List countries (top 10)",
                "items" : {
                  "description" : "List countries (top 10)",
                  "type" : "string"
                },
                "type" : "array"
              },
              "country" : {
                "description" : "Most likely country ",
                "type" : "string"
              },
              "countryAlt" : {
                "description" : "Second best alternative : country ",
                "type" : "string"
              },
              "id" : {
                "type" : "string"
              },
              "name" : {
                "description" : "The input name.",
                "type" : "string"
              },
              "probabilityAltCalibrated" : {
                "description" : "The calibrated probability for country OR countryAlt to have been guessed correctly. -1 = still calibrating. ",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "probabilityCalibrated" : {
                "description" : "The calibrated probability for country to have been guessed correctly. -1 = still calibrating. ",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "region" : {
                "description" : "Most likely region (based on country ISO2 code)",
                "type" : "string"
              },
              "score" : {
                "description" : "Higher score is better, but score is not normalized. Use calibratedProbability if available. ",
                "format" : "double",
                "maximum" : 100,
                "minimum" : 0,
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              },
              "subRegion" : {
                "description" : "Most likely sub region (based on country ISO2 code)",
                "type" : "string"
              },
              "topRegion" : {
                "description" : "Most likely top region (based on country ISO2 code)",
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "PersonalNameGeoOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 226
  }, {
    "id" : "39b67b4d-ce70-3908-9e24-d009c24cc0b9",
    "name" : "[USES 20 UNITS PER NAME PAIR] Infer several classifications for up to 100 cross border interaction between names (ex. remit, travel, intl com) - 403",
    "request" : {
      "urlPath" : "/api2/json/corridorBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "39b67b4d-ce70-3908-9e24-d009c24cc0b9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "corridorBatch"
        }
      }
    },
    "insertionIndex" : 227
  }, {
    "id" : "e965e37e-27fd-3fe8-b09e-b340ee5737b2",
    "name" : "[USES 20 UNITS PER NAME PAIR] Infer several classifications for up to 100 cross border interaction between names (ex. remit, travel, intl com) - 401",
    "request" : {
      "urlPath" : "/api2/json/corridorBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "e965e37e-27fd-3fe8-b09e-b340ee5737b2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "corridorBatch"
        }
      }
    },
    "insertionIndex" : 228
  }, {
    "id" : "c67df600-0508-316c-a28c-8b791bab7209",
    "name" : "[USES 20 UNITS PER NAME PAIR] Infer several classifications for up to 100 cross border interaction between names (ex. remit, travel, intl com) - 400",
    "request" : {
      "urlPath" : "/api2/json/corridorBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "c67df600-0508-316c-a28c-8b791bab7209",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "corridorBatch"
        }
      }
    },
    "insertionIndex" : 229
  }, {
    "id" : "dfdc75d9-6896-301b-8fd7-2b15ab075a19",
    "name" : "[USES 20 UNITS PER NAME PAIR] Infer several classifications for up to 100 cross border interaction between names (ex. remit, travel, intl com) (application/json)",
    "request" : {
      "urlPath" : "/api2/json/corridorBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"corridorFromTo\" : [ {\n    \"FirstLastNameDiasporaedOut\" : {\n      \"firstName\" : \"BBBBo\",\n      \"lastName\" : \"Huels\",\n      \"score\" : 69.93712195083758,\n      \"probabilityCalibrated\" : -0.14521258758632727,\n      \"ethnicity\" : \"Chinese\",\n      \"lifted\" : false,\n      \"probabilityAltCalibrated\" : 0.6884586229295087,\n      \"ethnicityAlt\" : \"Japanese\",\n      \"countryIso2\" : \"zsrgs4crxsuv0exwgf2fdhmpji47kr34tfeehgx0aefa946etjwdw1zkanzp98pfm6sxc24qd8q7rprmuyaglq15nfwjka01ltjfvb1kdf1g0dm4sn82fz3eq7tnst53apkfpmp7bka7t9dvzx9ta95861r4vmnpysv9uzz3m1\",\n      \"id\" : \"yiyi\",\n      \"ethnicitiesTop\" : [ \"p7lqs1o0i44vlbwvvyuyyqxdhjf4olri9hqvb53twrp2a0x0a8ah9au6sxmiczpvgre7juk3iibuyf1qujvc81voerbxhwoua5dfxkuv3bxqc3k4v9p5e2wddvfrqc81fvja1y78apcnmteglk9ngmxf7vm3ggx6zdlw6c9xsz741\", \"jjf1ng8lcs1rc88iezifkf0yaf4ypr08wuron2\", \"wuoy758swsp9b1osb0odizur5r7aimfhfs6zkkgfzgpywp8r4xn9p0lxxq74nso1v9v05kze643hyu81ewshh70ffojqj1m2mfd7ef8j7h6n6sv1r5vntoccpxmonxrb7ke6ofkm3mh6n85now9dmot98xweetd4p94vazbi2lzc19shhks9ye3ysb1sxwk\", \"q6tn6ert13srb6cd767f7u9vycsr49mplxc5gvy0qek24qfi2m6jmcsvlwrwxbq7ti80pe\", \"02mi\", \"86df7uyl01832gy7glyfkj05agx07xmuhoop8ixlaus32t9kuc9m1dao9s0mal7rbngmh2j1ymns4duj1bvbriyu84nnghkkeu5o6cqphr4ykugnnsdys2liozs3t5lscx5p3fapz5ptc2g0obwmqlmkpadp2u93fen64re\", \"wjdrzyekkrmnuazur30paiz0teg6n6r1b3plzpueohhpawluoijifthcbpihgq5daaopttwopdvqt2r8no2hzyk1tkodq470394qkklmgcvdalka52tgmwcxuj8p7dgechrkhys05pzf2po\" ],\n      \"script\" : \"gemfzbw3imocllhbadxazbj39y99qsei1njw1qrxjw5mlqz8sg1vmmndv1n4l2bg6gzattkpiyme44z5lol45gh43o3jmf47btqe5qu3t2qlkpm80ju0ygnuj28yw3cbh7\"\n    },\n    \"FirstLastNameGenderedOut\" : {\n      \"firstName\" : \"Rosamond\",\n      \"genderScale\" : 0.8331042990323045,\n      \"lastName\" : \"Corwin\",\n      \"score\" : 17.80566387753354,\n      \"probabilityCalibrated\" : 0.548469034809792,\n      \"likelyGender\" : \"unknown\",\n      \"id\" : \"j92h\",\n      \"script\" : \"duerjgsfolkzy1wm4b49y501kd2qdv2xl4eoqz1j0bj2gc02zm2mcp3ob70gzl35vhnihch5ndhoumw4lvwfotap043sm1ehnrvzaosret11scubxue9st1pez64rqdhmkkyrjpus9peydww5f8q6qsg26aqjkaswiv7u3nhajv6z9xrtqlk4sw9b7zgcj970\"\n    },\n    \"id\" : \"m515\",\n    \"script\" : \"8echlwwhu0xz0pcupq93c540uzdwnq4q4mwwjj40do6qvfkj81afclyzh7d2w6um7wc6yz1fo75kfdajozp3auvrap89ctkptkcd\",\n    \"FirstLastNameOriginedOut\" : {\n      \"lastName\" : \"Schneider\",\n      \"probabilityCalibrated\" : -0.421770100101752,\n      \"script\" : \"0kxy7zsgwh5144rlzlhh6b7ynwaynunznch8namceoj8ovbt3ub498jcbeaa6uwesvq5yj8r9bu90hw5r1zh6upphfe0smpzgxyq12i8bmmqsxargs133v9uwa\",\n      \"regionOrigin\" : \"ed8tssd46jd88tsj6ojsjdk7bfit9ydu0zzotmyepr1fqxbl8173q3mnz83crtdwvbs68w6coq5ssvxl11wh64u546v1xfcf0ih6tc24x0pt4vw7z2lc\",\n      \"topRegionOrigin\" : \"nkgbvgr771q9vq9qf1\",\n      \"firstName\" : \"Johnnie\",\n      \"score\" : 19.292184926663936,\n      \"subRegionOrigin\" : \"his7axinszn1mt2iwsx7m6pz4ge8mzoay5h3jwcvkrm3etspvt0fiw91xbp2hey0gunofqysn5b3ck6b6byq8buv6mlpyn37jl6annbgw2312jijr5ndzylpzzikmt2y7rrqjiclmb5m\",\n      \"probabilityAltCalibrated\" : -0.23290615887156063,\n      \"countriesOriginTop\" : [ \"l4un8d12wpnpu4qmpqe0o9qwm48jt85iri7ebc50l5rlezo4j25dbr7uo0olb369p6lmoeocapsgwq51e72mj9ch9dqd3g01fdi43qxmbwmlmd6ufldq3d2wgfcl8uk3gzs09a0fezo1bgepufuj3agrubwq6f9m57l6kdel1t8wgrxw2ehjnsiafogzeq4qy\", \"pdodjr2idaca4eg7jj7lw5eg9b1r7yb32wspo59i12utrpqng93itzrwbjlgh8a383o1zrxfdrk4q5ignmkle3d6aujrob5acy4sz2gzll7kmuxim9fxn9uy0k7k8ox0j1filpxf9rxj2p8cu9fyr6zng0d7gibwe95zdd8jurh\" ],\n      \"countryOrigin\" : \"2q5rpoyo8910u7crf9bfa48t72y5mg9dky3xnhig7gvuko8eqzyzbkeoaaoorbfcgn880eemva43lm5yk9mg0n95e399t5vv5jcf7ru8fg5slaqlu7fkixi1bq4fg0yqldzrsaqnps2ho88avqcy85dpkxl71xkm6lpasdo4ms4w7ji810n3ak57iinsrnkwp3\",\n      \"id\" : \"136r\",\n      \"countryOriginAlt\" : \"y1vhud0wc44o6n8tq6bistz3m74nphm4mfojfigpt87dboix5eniu12f09vyfhrbtmfgd7olud\"\n    }\n  }, {\n    \"FirstLastNameDiasporaedOut\" : {\n      \"firstName\" : \"Tressie\",\n      \"lastName\" : \"Legros\",\n      \"score\" : 44.91021493399091,\n      \"probabilityCalibrated\" : -0.04853796048063286,\n      \"ethnicity\" : \"Chinese\",\n      \"lifted\" : true,\n      \"probabilityAltCalibrated\" : 0.7306690916395762,\n      \"ethnicityAlt\" : \"Japanese\",\n      \"countryIso2\" : \"ch1snpbb860bz63o6no7fjyskqz7o99semlu4ar3qlee15asbq\",\n      \"id\" : \"qdj7\",\n      \"ethnicitiesTop\" : [ \"fd35ubu4itx6vb1lesu4iso1b4kttqb2qpckhu63qykxs9w7urzv3auqmv4jgugdxt61pgz855orfv1c2p2nsln2dtqjofa86psk3t5hh82q15jfxxcfstficfodhejo8u6ajhbccxpw5684n3wogd6xfl9kq7vzijd\", \"ekc4on70jnqt4kk69es4f1i8c1dld0xi5k544p51ua3iu0nrfb\", \"kndbhjiy2dmxj13whif5d19nr6awi3vffngfz4ahf6i5v5aaft5dg1jb21z48lsdojzhilfwe9000pa6j7qa7u3vms\", \"9bgfsqxv064bujkc0xqdy6fzajxx3wilbt2iir2lvlufmbjdfpxvf5xb00j5oixkfk70is6k9k8ccxdjnj2qravk5bf7xl42738pbagqghfshh3dwo4f626snqqs370qam0aqd7wz62ehurtiaj8yc8hzzbblktak1o6rwth2pyv\", \"7cbyd4vv8ta2ciz4co3ox7r5rc9oq3as5u7uxzz8sm8mda075lo6cgc92mjv0q7m6fdkobzje0eh5rud84k00cdsoy6j04tldtp7xgt02oz263w6qu6m4z9c2i3fy6\", \"tbhihvxm3dz0fpxukjy11sb237ai0hu43x4bw45y62t3yu8rzwgnbzilh3ej38260ym406cidtf4f9a220n4z2xc9v3wzhmggk3523ncvfx2ywukfsz4v1q6zjmx6bz6u3jok1grd4ub\", \"7z07wrj6s6tbwnvftnll2snqxum131s449btdqtxu2h0oyai8mpk2laqkigpbw2acxxraerqrnq0pvjnb5r10mwtxw9cagz4rtbc1gpthvkpuql02ejbyfwdj4hsm0fw\" ],\n      \"script\" : \"76yd3m5lefh500d971hp8n015xowy27jucswpx7expe8le39m77idt8j\"\n    },\n    \"FirstLastNameGenderedOut\" : {\n      \"firstName\" : \"January\",\n      \"genderScale\" : -0.2605247829980111,\n      \"lastName\" : \"Hackett\",\n      \"score\" : 46.26938795174692,\n      \"probabilityCalibrated\" : 0.08170759073056533,\n      \"likelyGender\" : \"unknown\",\n      \"id\" : \"2kyx\",\n      \"script\" : \"tt4uqkyof63x9ynsvg7p7nwd\"\n    },\n    \"id\" : \"3o0z\",\n    \"script\" : \"hgkdzwl65lremx8k9jm5tsybea0ang20y46og2icnxvbuk6u4rs6wxwopinq663u991dhmek\",\n    \"FirstLastNameOriginedOut\" : {\n      \"lastName\" : \"McLaughlin\",\n      \"probabilityCalibrated\" : 0.165994845529424,\n      \"script\" : \"ayyy3f16cc9gp1w9lt6jd9ud5kpszk9rgjvb7g\",\n      \"regionOrigin\" : \"08xp58kwkmzzzke1jgzkmdsu2qzc0lnawiverpu23nh6cdczg4bvgtthz7o4x4xc0on9zq61f\",\n      \"topRegionOrigin\" : \"gt37dieglzhfuays2hlt947vin15ayhg8bxy0qu8bkp3pxk6mvz65xhgvacbxrhfmjdej0t240zkwwjvqqui8e64g572m9cy0hfrmpctj880gqvmgtz1oscjq\",\n      \"firstName\" : \"Hipolito\",\n      \"score\" : 88.52371797157113,\n      \"subRegionOrigin\" : \"h76iza4d9ewdsoqlpgx3sz4qyapvzbievpinsqh81gk2vwowpbljhkuw2bws1sld5ngf75m\",\n      \"probabilityAltCalibrated\" : 0.009145356840630336,\n      \"countriesOriginTop\" : [ \"960gy4qcmb0ndiajbhdunbal7o0aouxosaqlwnbchgi87ccucwm7nsp286tiwspy7orzifonwk2v98qpp77zw88keh31yqu3c5exgwnhzs2sg5ccwms9fb5vr22g3w52htvk9e16qfe7sohro\", \"ls21tkstnlfsz2bbqi3on1srs551imql428ikr7ade985lns5lxh7ata8tp68nn9j4bfqjp7v2neaai7mfxfwu8fql0x7528rou07x5hvz0ho6a4p1wwx2fjwdi1ggj0a0x568skgq5lhslzu514jq\", \"y9xhjmwpjdwioz5cjyjvnd9wuzwgg3w7j5dyw883fvp63z169kssagcss1izhmnuk6oxuxbe4ndxz6gyx\", \"uga3hebor2bpw02kvw4c52u52bsor0vdfmmm4ayhp131phn534afxugxwna7a2np3lremijuc30c7yjlwjq6rssw1wffsbrcnq48o2hnnsjqmxodbjp4fgc9ztozhwrj2l2kbb3pujj6hw07zeif8abx4vtlcob18l06ggvna1piexq7wgeh7is\", \"8pkt8p0nilgjslbu71x1e6cybtow4attb28hj0knn680sjzo73zh5faoh87z47u1nh8g4li4yznl5itczixwu2s8ekcg7vv5j4nbufd5ss3o6sicyh9lhryn42bxz1d0lx4qqzm3r4b04vp7st635sz\", \"3q5xibcxk2r8klvjp96zamtayr5y6u6s5vom7unurjfnm6etso09iphn34x59a213ic6gulcf7k2eabiesac185zjspdvq6uas5hykgn5mlpgw0wvxswvt563djg6ykrp1cvtaq4fygco8w\" ],\n      \"countryOrigin\" : \"b1rcf07z63vqnpihplmfas5z2guz0lhflotvy97fazs3x0szjfl70t8k4mi6ot8u1l9sdzemkatpwtdcxb9a0mnenx5nrhgqybmfcgm8t2yizqx5nvjzyaap3pv18nixhu6qmut1gdtqold33ie02nuxm5bp58g6h\",\n      \"id\" : \"b41q\",\n      \"countryOriginAlt\" : \"jfo9gm1gx1ab69khtzgbm09h2na3cfad9lppi6n2sstysz3d1869zuaq6z43sfb50sl48zpoi3fljnjl96c03nx27zf3bnrk9vmkil72ns0t411c4ntpxnb4sz3lmk32obtnh5u52brq1lg7fjnslqs4mavuww2bksy7f914jzikgrsop10834\"\n    }\n  }, {\n    \"FirstLastNameDiasporaedOut\" : {\n      \"firstName\" : \"Roberto\",\n      \"lastName\" : \"Schulist\",\n      \"score\" : 70.07792462227891,\n      \"probabilityCalibrated\" : 0.6906925533515422,\n      \"ethnicity\" : \"Chinese\",\n      \"lifted\" : false,\n      \"probabilityAltCalibrated\" : -0.8969401246149757,\n      \"ethnicityAlt\" : \"Japanese\",\n      \"countryIso2\" : \"ady3b0go0r5dsskp9obig6um3k030n39klkiniuaookd2ta34o8vyfur53kv1dn8n66dxfq6q78a2lh3bmcwgctzjuqdqtm33v86wm9wd4qe1u12tnuuxfju1pcccry6j0uy0li67915yygvaqudi2k13jt1qmh2h2d9a2g1vg69u68i6ncomezyecibdw\",\n      \"id\" : \"21qt\",\n      \"ethnicitiesTop\" : [ \"4sb0t5gf3vvuc26jwqxpfsnqz8orkrs0ttxu50ltorwc5h1cqefcqheeak4w65gfjiphczg26kcw2ymr5t2bq0hbos1weq3syr45ivkwy70ump65n1i2vybwy3tuggrdt4mnfwl43obj3avrosup8m1hrh90017bw627ip4ytlyjjwbbrec2329y4fcmqxgvbgdkh0b\", \"m0qqvh89u4pbzhsg0nmphqocr16n08\", \"na3d2xlgy41l45bgub9hv13g8s748jususw0panbm9n5amkraoygkeac2orhz18tz247pgwpwn9nxmc7p0eora0vq9n8gr9uu1al0fjktadt2cchgvu68psnixk611e96klg0etgtcgswou4fs6ujj6\", \"klx5p\", \"bpualhesqz2b6k\" ],\n      \"script\" : \"vlrbzdvaaajoickppsh4f6rfccc7liahwqw4n250ao9c9a8pg1eoa8hzhqqb4wz95cqjqvwi26p7s6njz5eobhi5hsop6ishlft9xp75q6mhpuf2g988pwdhf7uk675kg1c00nwgvhlqu0e6n9lnhq88nznkemyr24o5m82kw39tdbm8y\"\n    },\n    \"FirstLastNameGenderedOut\" : {\n      \"firstName\" : \"Kyung\",\n      \"genderScale\" : 0.9678687206692949,\n      \"lastName\" : \"Kiehn\",\n      \"score\" : 80.05446750334177,\n      \"probabilityCalibrated\" : -0.22407076433238515,\n      \"likelyGender\" : \"male\",\n      \"id\" : \"up08\",\n      \"script\" : \"zhgk6k3nh9w5fpzo0ogwcu0prhgvgufsg9lx686a21jkfk12mn1khrh0wwyy76hml83t93p9ormcrdh42palmlkk03tfkjced8402cpg60rzxj3zs0gn0y3my72iix\"\n    },\n    \"id\" : \"7f69\",\n    \"script\" : \"6kuvu26hxrjw0w6hfs5ame19h6rkc07w5ldjeyt96lic4jb39p8lcpggndogk2fedmo12sqg6qagdxwlpdkcb847ecs5fxlab1izicli\",\n    \"FirstLastNameOriginedOut\" : {\n      \"lastName\" : \"Nolan\",\n      \"probabilityCalibrated\" : -0.8458255633788707,\n      \"script\" : \"l73opet8z6akioq14cq59ze6hsli9e316m700bw23lz8fxyap7bx72ox95793d82r6m5vm3g4c7nmqkbkc15se1v4czhso\",\n      \"regionOrigin\" : \"lwjfwdn9j2x4brxkq9ydk3nxo1a9mw7gq60ms9\",\n      \"topRegionOrigin\" : \"ebxen78mv2piv6i646tzatar16129hbet41nwmlkdf6eiyrqk3kbu8mazywupeessu6z8ih9tz1a5st3ohncjtz6hggnotg85v75g2dialq6ou0o2m9tldas7tjmlz0fhj6jyewe2jplk2v5afxv92ajo1v781jkbbpf0uy92hq1reirim8\",\n      \"firstName\" : \"Isaac\",\n      \"score\" : 4.182087375242216,\n      \"subRegionOrigin\" : \"5y73smhj2qojyib7rm2tp3i9r641ptq2jxvmy2qbd2raykyloxtzxfci5e87kgh6x1xhkine4bl1alvptjf8f915cqgdirgqa9psmo1e17denzwt2j2u2vh7cl\",\n      \"probabilityAltCalibrated\" : 0.017330669671345333,\n      \"countriesOriginTop\" : [ \"yk5ipwe816ebw0sk2u9lyx26pflniapw1g867dybk5wloivcy70tzb94or6\", \"6u9ga3r7fsj76ho2d6ji1ltlsn0o9m7kx9270wvk14k78v5c559wuqhxiohas1w6013btuh8oeqhx32vkf9frambvgl4\", \"fpbtr50uf0chlh4n5mopdpefzckvn2f2zhlq916v9fawdbm3l42dvxwb4podp55x6yjlpmpruj1ymzslqwm8g0rjitwruqw8iypx8rw0egi1l81inds1fwrel8ydj7048e8tgo1qdd43dmml0t8\", \"x7e1c13b4jhnczhac91li50ez8ao5e2rvepvf1732zwbnfln9vujjk6b7la8nnu21gx9edwjuam42yz1mbrvirjb0u7j10zoanwb5edvh2gujijwneoojguly6xkhwmxobg9x4zwfz8cw0wcnv9b6cn5p\", \"ftbayl2goiseop7xvy2smmrln9i2wpmsgx60cwa66txf0bnvrdgtw1crwauthhodt9ohib16otm561\" ],\n      \"countryOrigin\" : \"z16b31zer2jvbyhen19ch3ydyzaju7r0vybxus0ji0ulh9f05767423itsmxwr3bgy3yj9amy1ld4qmxejfedsrorc1ozq7nl32grqt7gy0gqt095yo8ix21dgcw1ej0707j7\",\n      \"id\" : \"qg5q\",\n      \"countryOriginAlt\" : \"ilnmt3cy1uht916\"\n    }\n  }, {\n    \"FirstLastNameDiasporaedOut\" : {\n      \"firstName\" : \"Sterling\",\n      \"lastName\" : \"Walker\",\n      \"score\" : 90.96933927786233,\n      \"probabilityCalibrated\" : 0.9785208228488926,\n      \"ethnicity\" : \"Chinese\",\n      \"lifted\" : false,\n      \"probabilityAltCalibrated\" : 0.009144166248335583,\n      \"ethnicityAlt\" : \"Japanese\",\n      \"countryIso2\" : \"5ef98s0p3yrwknvjyfock9m20qhu65qx0c876c6i7p5gys6rwyc73m4zngu4xvtk10gu2wo0qze64fhe1d1tx3vn3j1gi8mrjrj19dpff0jw87tuiwjok90mnjq1rguqkcpdlya30shlo1p\",\n      \"id\" : \"1ocv\",\n      \"ethnicitiesTop\" : [ \"xrzsozdg82egoobveva5j00efnd0s5kb0nhtoxm74pm3efbaiioy8prt4rga00xatiimw1m0c71gscui65hhv0dus0oficvjy\", \"bngvdm4ptaq53nziy\", \"ocfqqu84q5n298g5hjuyix5tzy9gs26kh1xkahrqj9q40w4cmcdx015qwxu4uhw9766z07xcmc5cyk84xzwvamhlt1sxp0f4t1gtr5eqqefbaxcho2rsv6ifuhjjvgwft\" ],\n      \"script\" : \"dz263lnlvwh6jd56u8n0yavj4sm2j6dnsry9gn4kcsq3d2vqszf2dp6vcyj1tyu6d5jv\"\n    },\n    \"FirstLastNameGenderedOut\" : {\n      \"firstName\" : \"Cary\",\n      \"genderScale\" : -0.5556209329843562,\n      \"lastName\" : \"Bradtke\",\n      \"score\" : 51.97034855474922,\n      \"probabilityCalibrated\" : -0.44492794849909,\n      \"likelyGender\" : \"female\",\n      \"id\" : \"7q4z\",\n      \"script\" : \"5c440pus8bv99g1njj9zarfq3w77rx40ntcd3rsfnqqwvnlcm3smbgjhdizl2fyu3wjau80cxgpt790wphsnfd7kg42mwan0ispwvjp2mc08dutqc0h32aqax3mz7i92ztyblkzlzbz1l6p6dmnxkw9b4vk8i\"\n    },\n    \"id\" : \"v6d4\",\n    \"script\" : \"wp2nq0seoe5d20b56qa1wjtpcpbds4895c97liyjjo73\",\n    \"FirstLastNameOriginedOut\" : {\n      \"lastName\" : \"Kovacek\",\n      \"probabilityCalibrated\" : -0.528736948082867,\n      \"script\" : \"xq7wk4bz1w4ow06xezt5yd2udikl6bmpvowim9njfs6efh3nh0j9lcmkza3y5l9t1xetmv03esexuytnermzrpw1bf29pn\",\n      \"regionOrigin\" : \"qjquu9uebbt8flok288rz0eubh16x0b9kgpeerumq1r1alsdbun5t4jeev8bsnm68vgk77ce3xkzx3z5jfr09tzaaxae1irct7qlb9gwnar46o26qb5bf1ws74iiqu888osczhe2tj6o\",\n      \"topRegionOrigin\" : \"pixebrx3w1\",\n      \"firstName\" : \"Sean\",\n      \"score\" : 20.513203791561253,\n      \"subRegionOrigin\" : \"k8nwiqhlf3pm5i1rpx11ph4zwab6wv\",\n      \"probabilityAltCalibrated\" : -0.009382341101223934,\n      \"countriesOriginTop\" : [ \"3efuw3z84kbndjw8yzwfx62\", \"pfe36nqxgujner9p36y53uza8o23t60s7lo1lkjkz6fr9eqnh9wbzrm7s0bqpwse2er07j\", \"ksgfw8m8ueko9uvtc\", \"lv0lj5rgi9ujoa88iolgxxjxv9xds2bk818oiys70y2vi4fdphxr8pn91rqjepdewqesyx4mvbuhxl2467fmhpgs7x22ohmzofwmyaoxgpq9ew15x7ugt84ofg0p91xrsney3t04tfzhl762bp7ioolfq20lujsr\", \"77tl784agzw0twbnh4y7ttqb2svaf30tcbajr5itoa378d0pq1knf7vf8wl0aa3sq1hbvaknxksc0d2xqlxba2j6mdrewl9n9ttrn4iuddrcxdd9ldxqztomk3t49y272rv6ulb77552ex\", \"00ovjbn9kmc09v9iyo6389ze7settj3oms51vtljgxpoz4i5ybyrtkdco9d9kzputbjepwx24hh5rni7oer70lku43jur\", \"z4stfvlcfgqf9faxt3wnhxpk07sc5wninh8vv5xryqoeuz6c07cqcnedgpot6pmby44o5pj6\" ],\n      \"countryOrigin\" : \"rcooz63yklohuj7igrk3weor7qy493bbqbfoaap5ndpk4k4tco0798jsl4jj1box5ehw2ih09za01fxayaajiwpel5ixgy19et7ikzrij985ls4z\",\n      \"id\" : \"3x67\",\n      \"countryOriginAlt\" : \"prjqzo1t38jgriy2c9g0fix1fxaxmn5m9ozz7omqmsou2i16s59qrk9jxugq01be543ubd37ug4j6ps4iq43lifgzmtvjzd\"\n    }\n  }, {\n    \"FirstLastNameDiasporaedOut\" : {\n      \"firstName\" : \"Ricardo\",\n      \"lastName\" : \"Jenkins\",\n      \"score\" : 28.744549671194598,\n      \"probabilityCalibrated\" : -0.891500657721005,\n      \"ethnicity\" : \"Chinese\",\n      \"lifted\" : false,\n      \"probabilityAltCalibrated\" : -0.5314908401945144,\n      \"ethnicityAlt\" : \"Japanese\",\n      \"countryIso2\" : \"32srzgwaadij1gytgh9aaoyzigsr1i8sgtmt96a6x92q2bzf8caxysgo86d8v8ivsau217lu\",\n      \"id\" : \"a9p9\",\n      \"ethnicitiesTop\" : [ \"kwtejsyzt8g\", \"b1ss87wtb0ycsabfyivs61ikrd9or4qzsg6gdsp6cmm94quvfiqhpsop66aqqp760uw7k27oh0qwkxenabccejayidfqkzgjq7emr5l1d606wywlp53rkhxf\", \"da47si4j92nmeh4q9qsq896mgtrw82aykudpkbe56b2yo5z4t4ja8y0iefr9xo2ldfx5r1z0un0mhiu8s22nnug1dau4j1d7bbtsw7738nnhdpq2bki4ncqekjy1mazys4vscingeduwx9vuyy8yn1hv9kc6nvfs245op6upiy\", \"rqiihiaq3gs7irfc3puzf8l7jh\", \"pjz9ujzbbpcewz1n6uk6\", \"88aqr6hmp0r1ljxtk7qcz95km5etql8owzhj8f8a90swms5g6wfbhf73oscv0ajau3i2ux9ka936lbmqukkvrvy3ciliuczl8so7dxvi2\", \"up1guxoveirtukmmv34aj3l7achu0h7dyiyh0nah8ozjorb6u8kelkw409dmjatr6s60qhcgvcr1wyswfgpm0rxi1d300ppbp3dz4a0gzubopypxpzz4ivv3l6a8l74fgz3wyu0rj2vray3hxp5f2k\" ],\n      \"script\" : \"3a2ug23ximvc2j47k\"\n    },\n    \"FirstLastNameGenderedOut\" : {\n      \"firstName\" : \"Jarod\",\n      \"genderScale\" : 0.44865063660804316,\n      \"lastName\" : \"Bogan\",\n      \"score\" : 59.082335754573954,\n      \"probabilityCalibrated\" : -0.18544164025864007,\n      \"likelyGender\" : \"unknown\",\n      \"id\" : \"eorr\",\n      \"script\" : \"0ghbiqi5tluobzkd2n7hwg5fcm5c4iwp7yocho8pyt4na9p0wl4liw8vu4b07zvzti53wouiormlf8ahkqjm3adft6ruq1n0jau2n56l62w08v\"\n    },\n    \"id\" : \"on92\",\n    \"script\" : \"nce84hxh4q60166lxjcwo6wvhneui5owqsqc0mpv6tg6gvwcfwfpn1su5ut0phxasvw7qkuhdzpv9gt8ndin5kv3onldy7e5zj19ftgupnqo3sfh2ih2x7kxis24huy3u5ceici2dyhifruemmcyc34de29\",\n    \"FirstLastNameOriginedOut\" : {\n      \"lastName\" : \"O'Conner\",\n      \"probabilityCalibrated\" : 0.4025063075389579,\n      \"script\" : \"0ysb7vj150fcfdtzvm5vg1jlds73062k15mb7qw650ok5whbhqs0s2v5uioy4w\",\n      \"regionOrigin\" : \"bf3iyg5tnotauqixopervbt92ef5a2lrj82filwnr8q3yxx4vlxhk31mr66gllxr2xwqnt40fs5otlbwafksrd2tnws1lshw49m1qretvxgq7bvhkgt0nizmw554drfdlajonhiy7cn7jbriq6z1iar4we05qkitp78pyn4zr7\",\n      \"topRegionOrigin\" : \"yeoj86ggj628rcl39dbxg0ss1c4ob\",\n      \"firstName\" : \"Buddy\",\n      \"score\" : 77.09513369451545,\n      \"subRegionOrigin\" : \"4ww65n8kr2ktit8gpimi0b916hqiwclrt68styj99ve29iwk\",\n      \"probabilityAltCalibrated\" : -0.5733583406371701,\n      \"countriesOriginTop\" : [ \"agrt0yvgj13avbz6vpm6gs0hwd3chenu5hlsrevn41yr0ylcj1is5qv9mxbiygqth9rbfjxwcmfn6bups6gu4jqk1g1g\", \"xsipnck98sx76s133j0hauabqirp3dz0lkmbx8myfrlc2un04q54qrovkhduxac2p6640vzt8wexfcp477r1symvgp5066014w04uuk64e\", \"vl17js8h0eo\" ],\n      \"countryOrigin\" : \"dw0rzjbl12fpkbhntt93qfvao\",\n      \"id\" : \"0c2m\",\n      \"countryOriginAlt\" : \"k5r1gl5xb2x5oo13t122l7e6glu2vs37r2qr8b872l8u0e4g5w8cfhp7wod5z11yxk89mdsxll8xx9nm1mv9e82m6nfhpv6bdzyp7eklbg8rhocs1bc1mg1yhhzp53zurf3u6j4apnhyljlamer77tbbyca0uau07fczhif119ur1jz4b8\"\n    }\n  }, {\n    \"FirstLastNameDiasporaedOut\" : {\n      \"firstName\" : \"Lavonna\",\n      \"lastName\" : \"Jast\",\n      \"score\" : 56.56176856165752,\n      \"probabilityCalibrated\" : -0.1694673299182563,\n      \"ethnicity\" : \"Chinese\",\n      \"lifted\" : false,\n      \"probabilityAltCalibrated\" : 0.3375474926460549,\n      \"ethnicityAlt\" : \"Japanese\",\n      \"countryIso2\" : \"5kyob5hzguyxuqwo0hgt8ve4lsjb6t1s6wo9wqi54mfdcrblewc0608kslgvge0ca8kho5u0306y35bocy8ea1s30o26hbmunsdhx0w7sr437u0khe819g7n0\",\n      \"id\" : \"7s79\",\n      \"ethnicitiesTop\" : [ \"2lui7uvmf6s83e2caz1wpm3y28r9d3q1ql8trutvp6mn2kqkaelos603xy483oqojw40twphlrnb01y7mjer6emgor3exjflmonvkg5zg84c\" ],\n      \"script\" : \"grif5pts9ku5e9ijmij5oxzy8ady1w49akn6qfsfox11syvg55p1806d1o1pwml38qjpg8b5g5l9ut086bg7hcqe52wnmeo255pa6ct4penm17e7dgvpgejwo003bcle21bjb0ntqeuypm8whoott9qphqumgo96yinn5wcfsf\"\n    },\n    \"FirstLastNameGenderedOut\" : {\n      \"firstName\" : \"Rebbecca\",\n      \"genderScale\" : 0.018903116586809654,\n      \"lastName\" : \"Watsica\",\n      \"score\" : 59.67825342699798,\n      \"probabilityCalibrated\" : 0.8292633427476177,\n      \"likelyGender\" : \"male\",\n      \"id\" : \"7f86\",\n      \"script\" : \"zvwws10htzml6gtabbq7gr2599pprq45mv7bn942eqc79u\"\n    },\n    \"id\" : \"t4t3\",\n    \"script\" : \"z099danfzp\",\n    \"FirstLastNameOriginedOut\" : {\n      \"lastName\" : \"Bosco\",\n      \"probabilityCalibrated\" : -0.4238343711156567,\n      \"script\" : \"2cq949t4i9ww4qp8wgfqg9a7760wgh2s6td7c3wlxisa0hguc9\",\n      \"regionOrigin\" : \"88o7j9gkpkiba40vk5i3mhox0qz1wqbfb0oxx5rn03ty9fjgaxte1p58ghfhehg08pryml4jazwl3jiapb5ffbzk2bi880pv51mno2v6h8\",\n      \"topRegionOrigin\" : \"156jxmre1e02z85lueecwqbqifmf6g64jf\",\n      \"firstName\" : \"Earlene\",\n      \"score\" : 57.48855522553554,\n      \"subRegionOrigin\" : \"p4sfuyvb7r42nbpjx4d3wmz4tfkqvb\",\n      \"probabilityAltCalibrated\" : 0.010253410501074312,\n      \"countriesOriginTop\" : [ \"l6xnh1i1y4umaq0sj89b8piaqeb7b5q16y6rpm6e1k5w8yb31x2cdxc\", \"am424hxgngj4b2mb0gcrjgp8ig\", \"nmqt9fwjl8mfbnbfgvl078tdx7j22rsr8ae5janzmrmv61cn8sv3yw16bw8xfbl9ot3cioi6aiiue0awdphvy6tvy2\", \"4fw63jnblm9vkuojfb2d8xfoblab8dgw0le79q\" ],\n      \"countryOrigin\" : \"7yqul25pm9g763yano8n7wq4z80c9t3jsd3s4bzol0vfqkbt3yo0wekhh132am1jkv3drm14njv8ipxcgeephrsft\",\n      \"id\" : \"6444\",\n      \"countryOriginAlt\" : \"db16uob05ggmu5gbps1gekr4kqi4kx8jlqaneq4rg78ajtu8cnzn73qoujwlitgowiqtxf9hb8036iq1fdqlorulylwhxjkvtahhibyzdvtb2bbfahnamgtwjar468ukofctma3s6vr82x8l641y17xome8o\"\n    }\n  }, {\n    \"FirstLastNameDiasporaedOut\" : {\n      \"firstName\" : \"Breana\",\n      \"lastName\" : \"Homenick\",\n      \"score\" : 59.40730144366885,\n      \"probabilityCalibrated\" : 0.8843080086724222,\n      \"ethnicity\" : \"Chinese\",\n      \"lifted\" : false,\n      \"probabilityAltCalibrated\" : 0.16443845632252185,\n      \"ethnicityAlt\" : \"Japanese\",\n      \"countryIso2\" : \"rueg5tcwjbkvkytncs99hx63uxm65819x6qjcp97dfx6upzjx0tf4gbq\",\n      \"id\" : \"xw80\",\n      \"ethnicitiesTop\" : [ \"m3vanmqa5jc47bwhrfwhl6n\", \"nwf4iv99oyl1c90ttowa01sfagscqu7b2q8xk1r6huh2xi0\", \"g14uwvzp97s6c6fxqluldyvbhw4vcoccehignh49fzlfncxuy53caump2alzhco15ar8jly2nlvv8q514w2vj7kie8p1c9kfpgdneb0o8rj3x4inatkfvh4mmtdcr8k5mu7h5dc4c3sfvh6ykkfcrkzmrhwpy1oc0kt1u2wg2xim4zno065h7vtwzh2w2s7yz\", \"94n1w5f80byn06g05w3pgnimj589m3gh14mb3xq1xbo8bh04wgsfpe90b1zwyt6qdharbo9tjh\", \"gi8rvhghvrg21xrabel2dihw\", \"797nzcqlehb5698uf5pdzyz2gih4dunt8u3uwfvu4ipv3ye9y4t\", \"xgqr78fcjwfuku2tlxc109y9gz3qi5zmba52x941lcaec\", \"heeq4oynudvuxnq3hdpgd8b6s6wixc3ik21r9z4agq0fw4xewhixwbu34z2joq3usze4b6aaz5k40s35rs3wlh8fxsdn6g6aydwtxbwiy53fdhxi5p089h49i89lvyxdmbp634evn3t63558jd9qyxypkhmuogfjfdrehrlvna22\" ],\n      \"script\" : \"rxh\"\n    },\n    \"FirstLastNameGenderedOut\" : {\n      \"firstName\" : \"TTTTy\",\n      \"genderScale\" : -0.16277003689181457,\n      \"lastName\" : \"Purdy\",\n      \"score\" : 96.43874088003166,\n      \"probabilityCalibrated\" : -0.9627146611139024,\n      \"likelyGender\" : \"unknown\",\n      \"id\" : \"r13i\",\n      \"script\" : \"0oscm3cm9xv2vpxr6quh4wdlitozqt3i24nzqt30e4fo2qqjvpmbqcuns4g5pko7iba7vjcvqwk0ucmyne19r1w8eibvb2ktwy14pi8v05bho35g\"\n    },\n    \"id\" : \"hj3d\",\n    \"script\" : \"uk91dfr0u42zy2mec1w70ry8h90qphqdjk8jvt1nrcxiaaqc3qytv1wsmrk2k6dwt4ia4owwquwbhk8x06hfmmx0b5n6xmo82lj8g0ovidqztk5uvs90r\",\n    \"FirstLastNameOriginedOut\" : {\n      \"lastName\" : \"Bernier\",\n      \"probabilityCalibrated\" : -0.279818377389776,\n      \"script\" : \"5pz3cn0pxc7dxwcdc6pm7eonj\",\n      \"regionOrigin\" : \"260u63qttxht7sl1qjfgasgsztmgkuztasok8xouuhlgdx0m2awcoq1dvsz4juugikuryjs3vkoql0ycf1oraba3acd\",\n      \"topRegionOrigin\" : \"8n1tctnh01qrin2t6isd184l8gx4hxyd9sjq1tzkr3thty2fh3t383u2dwxabhsgz5cbv01v3ayjbhzfjudynz7iy4whd8umanz9kz78mjs1zwd1wfbmhcnh4f2a4c3duhlrlwt6vunupv21o372r2yfxq7oj3kgbw8j8o5lyxf3b2p4f91nx9jgig4h\",\n      \"firstName\" : \"Neta\",\n      \"score\" : 97.7724420896376,\n      \"subRegionOrigin\" : \"p3frxf5ckrvmi2muoipd2jw3bhg81cwx9v4u5pf7g9sp30i1cl9o1shicwphmjh1vp0e72dqvp25z2gbh2byki9m2ilqwdhffb03\",\n      \"probabilityAltCalibrated\" : 0.5697422980219435,\n      \"countriesOriginTop\" : [ \"ql4kvul0el477tdgm7aeo2l6fgnknagju5ko7s77wyv\", \"mogf5iymf8wwjt6q2uu5o4h36wfexjaazbrjqzhtyu6kdck42xx51u4gn3t2hr33ffw7821d5r9pop5gzjufdjn5pehhpr0kqd4kbzjbktfselse8x38gpww5q6w10e1v1ceo66iyfx8hghfyj107f53mmec5qw6bym\", \"jrak2zsb1ll7ld7pivhy8ts5u6ldb38ptwf5jblrs0a4i7v2aw4z9yr0zgg3kozjo6tjpxmig552td6mzzeb87hfztsppbu3qfohbyq75mahka7vfcf4t0esy03booepchkf11m8q516hjn7w4j1tu3d77nk7jf8\", \"f4fjhabok6i6au3tgjtm6rqv2nq9n9lckojcjc9k7qeh1cq9mls\" ],\n      \"countryOrigin\" : \"p5cduta49528clcpzredb3pfgbzqr752ner6u57dk0bvjeetictx7noqt9kzjfui31yj3ehva61k5hyz8iu13mnyhd58o3fhh7mi7sp0fs1fyzh02uqkvh8p3m2qqw4fg4b2tkiweabwm06rfqxqcrxtx1es5tizgopix50070fj5rxqonjbsl2uvfam1nr7z70tfw3\",\n      \"id\" : \"qp2f\",\n      \"countryOriginAlt\" : \"p4rjirudv725463mjscybhl9zijtnaj92ysferhu94j5oi7qf4dz806jq98jqv4rw83zdhuaod1687qkdos3vf70slr089ulfoa0szgkqdmwhhkz6xkx7cnz6nw8pm4qwzcs2cwapps36m9gu39x4zswbq8rb14j5lhg8wtkn1e\"\n    }\n  }, {\n    \"FirstLastNameDiasporaedOut\" : {\n      \"firstName\" : \"Corie\",\n      \"lastName\" : \"Haag\",\n      \"score\" : 51.17312778651279,\n      \"probabilityCalibrated\" : 0.9361879354302773,\n      \"ethnicity\" : \"Chinese\",\n      \"lifted\" : true,\n      \"probabilityAltCalibrated\" : 0.17271242585838165,\n      \"ethnicityAlt\" : \"Japanese\",\n      \"countryIso2\" : \"ibxmc9admf574zjnuo0travzl98\",\n      \"id\" : \"x459\",\n      \"ethnicitiesTop\" : [ \"24a9fqkiv4w09vhk3e71oj2kl8tsy8xgad1fjfqbwmvqotapzi7y5331v4tbjv104imwy6qowd53vym0ot2\", \"z99ooavtisx0rfk4q5pd60apjw1fu9cdllzws8720ibeuilfxkiohbz2zhlpj1opssof0atjs\" ],\n      \"script\" : \"m0d7jalyrzfhzyw7hem1qs3vsoc8d0umawqdm71oganrh5mvfcrvigovcu9wj7x8cox88qwv8abdhazj1ep62v2ogskev0amnj7ezjm66a299n1mqbokt398ho4k76lb32jsliomuncd3\"\n    },\n    \"FirstLastNameGenderedOut\" : {\n      \"firstName\" : \"Jesse\",\n      \"genderScale\" : -0.6659653007258024,\n      \"lastName\" : \"Mosciski\",\n      \"score\" : 28.512792515865648,\n      \"probabilityCalibrated\" : 0.7752376162644967,\n      \"likelyGender\" : \"female\",\n      \"id\" : \"m1h4\",\n      \"script\" : \"mbxpyif330bws6f3vvlh4jcitm0rve8yc1v793rkwllpr0ti65762qk4cdbl6srmit6j05o15pm1uryzsormi2jl9umjndjsbrd9ai2rrf7nq05tq2ensll58is7f2qzw2s9obdpdfjdyiag1nnncznqichwly2ggbo7e9m\"\n    },\n    \"id\" : \"cr55\",\n    \"script\" : \"gfkzjaemd8ev6afzutei92mfgdh3injqox8r6lsiaketsxv15y0v3hyzp6n8e\",\n    \"FirstLastNameOriginedOut\" : {\n      \"lastName\" : \"Morissette\",\n      \"probabilityCalibrated\" : 0.8587608771993323,\n      \"script\" : \"al87ynpff157g3tt9t6vlb7hyyip9fozor49xdqzeihrxv1vfqv3049u3ri91b0j3rzddxlthcdfhv2wzuirrtzbypx6ug1n1tfy4s7qxsvi9q95kk3ve4h0ghybg745neup17c4mlxfbicgn2equzkhp3jpgtg8w\",\n      \"regionOrigin\" : \"5myckhk62qh8u69vbmxsxjxmm6sig72xc9atglvkmdq6787vg8ey0i5oxy6giflf8n0p8ytwv0m9bwhc7y603pp22co8fk22v4kbx89lqatnoealt6qk07hfb4oep94l8r9h3j63\",\n      \"topRegionOrigin\" : \"xetr9bejdfq9eayw6u2uvon0pr80pv6absau2df0wk28tqr4ixhknyl4k5z4lg7zp8wiyvw10bb34tozbuy7nfx0erv87dysz8yuponwtp50q2d3e3mll3hunlt3jb655y5vi5t3nkpysu2xs60t7b\",\n      \"firstName\" : \"Christian\",\n      \"score\" : 58.69662514486357,\n      \"subRegionOrigin\" : \"qzchjdws5jhu73wusqdpqapwsp4c5hunnlmgjgf74pzz8gvcotq9b3knuyxwb25o3prea4mjdjej0qzcs74x\",\n      \"probabilityAltCalibrated\" : 0.2394450269957642,\n      \"countriesOriginTop\" : [ \"reyewkay6xxz7hwnjlc8l5j96trvdrwenu4bhy9ehuy163mvxqif1l\", \"wpyd48y9xz5h9316c6boyb4yhk7m\", \"m32934lgkoqx6e8zpko6awcv\", \"4k3ey7e1xho7zb5szq1dq3863eqk3cde47fv2twifvl6b03309b5cpl0nntdhs6dgb0sbnuu5lb69ahb4wrwip5zm6r6kr3qlyo2x20o2dmrxatimn1s67y2p105idzly2o38ta2scyynk6h72gjdce2b5gkpi25vh44lgdhju2l070nj1l4rr1elm\", \"gna8yev3fuke8idn149oq16fccmu9xj26zr5ui9p3j45cwujukc4\", \"g6a8lt3ebygvldrvth4oqt3uojbh20fmptc4pl2x9ns0gur1r0zzjd8ubnrqbsukzmowryqja7e4jmxzkxk6op4069kyoswo0nzacdjp1zqrg8hqkmbox4fzqh0b7drrda8tutqzu7njp9bmccu51qykyysgqya5tsmhrepp77uhwcse7jfhar4fbunprk\" ],\n      \"countryOrigin\" : \"liwq44wrr4f1l8c6xkee73wbebq9gl4mq2ufwd2n1urkcuzhddcnrdc9g1ij0amt0d4p642bp382ysdp62wkkec8bsip548v0\",\n      \"id\" : \"pyt5\",\n      \"countryOriginAlt\" : \"kj3szd1g0egv6dox158do4r4qc0d62f33gwdpkr66gy4\"\n    }\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "dfdc75d9-6896-301b-8fd7-2b15ab075a19",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "corridorBatch",
          "schema" : {
            "properties" : {
              "corridorFromTo" : {
                "description" : "Classified corridors",
                "items" : {
                  "$ref" : "#/components/schemas/CorridorOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchCorridorOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 230
  }, {
    "id" : "df318e1d-7339-325e-99b9-f18748b9f953",
    "name" : "[USES 20 UNITS PER NAME COUPLE] Infer several classifications for a cross border interaction between names (ex. remit, travel, intl com) - 403",
    "request" : {
      "urlPath" : "/api2/json/corridor/iksxut6nh6bobhd7y38xzu1a3hjaowgcxlkweq9n6zrbv0c30o2wr4sxgjq5rblqyg48jyh9lmzkqi5gu24q6y7fk408q0a56lel2wzg5jonmb4soewuo8l0d3k71ec8g7c290yo4nsrdjdzcnguiaa135uadt23te45qtnirqsd2pdnsqxcjxb5b9x4wp/5xwsc2q1idixt8id9xrwnaz52np7l33rpm6peai9psl9gzt96kauz86rcnhyfmh4scbt9blj9ev95qsn9myxtoa6vnfzoarlzrf83eni6tx1z5gsdzed18479j2r8xurqfde9l1kz2ztqxsgrngyuq31uiz9rvcmw8f4ovm64pcxqad6qpely27m9aq4lb/yyyvno7nunk3cvi3hnh9s0cm88yeyikp7942z3hnun5wm381pj6jrk0j5xweeojxzag87hkf4rx8prpol4j/n5f01kythsvtdpwk7gowifbha2jvl7c1hjogjmpsupdp6rxm95bzjg2y2x3uavw3bxixpmobcrovgkyi80o2rou927xp/gzow7xzlzskqq1iu2zupjpg7rrp71r54biuwbhs94lpmibxu45ywf7lbbmxw5rdu0juiqyn1kqc8i8vjsj1dmpe8n6ow66mzq3ylnhj1m3dcd4iopanmhi2vgdf10uuuiqituecc6osm3tdnt6we122rx9yqj73cj08i7vfnxls3o2pms3riki8l37l37g85953kh/9om7rd5zozgcs1xa1t4kf9o4l9vvqjgq9zm9ymf3pjsfxdcur9thurum3nf2yjnjsw4pljmbh5l9vyd4dzopbbry0qrbeaqjre6wgc20eq89dhgnhu6qpq7t6uqlcga2dakgex36418dgk1fycarhbeuby80p61xa7f65q5f5zqwoxc5we",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "df318e1d-7339-325e-99b9-f18748b9f953",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "corridor"
        }
      }
    },
    "insertionIndex" : 231
  }, {
    "id" : "72bf05d1-687b-30d5-84fa-b6d736044168",
    "name" : "[USES 20 UNITS PER NAME COUPLE] Infer several classifications for a cross border interaction between names (ex. remit, travel, intl com) - 401",
    "request" : {
      "urlPath" : "/api2/json/corridor/3asnzsa1j9qot811a18af26otqymzybjuegovqubgfhg5aivywcbfcrelh6lrndk09ujzh9zjd706jr4h8o9xx4542z7vgpx/13bjpcy07apkwudngwmnb0x1qc44n3e5o9zxgu7krhnarj859chbb2dixjtzmewfgwgck87nomofg4jscjvz1x5ejbbiy798ksktiqhfgm8ig2twrx1i32mv976ym7/78tikrhexny2hbhoe2t1s/wdbm3ddcpo3dh1dl95hhngrqb08wg7xvytd1qcts6ng97puqzna8davy941nm11eil31odlr9kpcx9sbqf9q4ooycjo2al/7b7vwnb90lfiyxaebgbkfwmu93tq0d8lf1r8vaxbekke03jvf65kflavblprgggjj6onfion1bc18wf6pumdb9yf0cemk79h4dqy839lq57x92fsl6bu6w2bpijnw7cw9vqs96ksra4oovxgo3stvj62xhdmjer7ucscrp6su0gnxirb9kc8b/jjvu62urjeyk7m3et3abgv9u29hzvot90ixuyj7r3ru5s",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "72bf05d1-687b-30d5-84fa-b6d736044168",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "corridor"
        }
      }
    },
    "insertionIndex" : 232
  }, {
    "id" : "1b8f42be-a534-3f3c-84b1-9e97ae93aee0",
    "name" : "[USES 20 UNITS PER NAME COUPLE] Infer several classifications for a cross border interaction between names (ex. remit, travel, intl com) (application/json)",
    "request" : {
      "urlPath" : "/api2/json/corridor/zphvfvxez52ijla15q0k7j2ryp149502ywsjko6et8682dktxjmf3fi0wiuwwsyr0gdcawx0mdl3rrgca7ggdrto3g9c4ftg1h6ba9h3o040a5zpzjosvr0fkuy7nk1e8lpdfsvvxnviv14odbcrk7hh6lgir9k06h75x6utejzfulkd/09hhl2y1q2wy56azmxw7plzkwqqixkznzkh28wbycce4881hmm/6vty35ckcdogex0gb0pn1l5yhqmws3i80fuokk6otk7ksv0ixveor2yyvf6pgypkoqlw89jw538mfbqykbb0u3cwvaivutlxr1ljfket98pc93kbkeol799xwt0i62ik/g2u7amyc2795jplkcmlu74rrxur83wk9gleejheo4ghz0an2wddw48zs8mz7c1fr29egpwq52bbsej02yzqpyzt86yjrogq1oqynic0ek9m0o2a3ldr7zcb7y3jkuj5ytqk0m0bffmfm863x5nmh10ss01a/qrxt4ljddvd8hxof70q0orcml3gtrt8g94j2tg9fppvkmwtlacwsmxw8zn6jdlkovdm5e1x6h03cyby5fq5v5bdcum6yugqw7mr6lokposqrf5ta7ab76h6nmgyegzhktbqdnfltb9ol4rcll1srzoopopybggpk27ub5bs5mnx2pobqux/bc7x14el2d8vlcw3il8ksze7oloj38h11plikv4a9y66i3kr187kxwtxnwux85cbqfn3kf8vk4l5s8nrtxkeh0clsujitmb7qo9v6sncb750qawg70z1pejnunap8ro6ud5qqovczzkoempq9hr6",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"FirstLastNameDiasporaedOut\" : {\n    \"firstName\" : \"Amberly\",\n    \"lastName\" : \"D'Amore\",\n    \"score\" : 8.61993450459444,\n    \"probabilityCalibrated\" : 0.5991055159754226,\n    \"ethnicity\" : \"Chinese\",\n    \"lifted\" : true,\n    \"probabilityAltCalibrated\" : 0.3717545717703894,\n    \"ethnicityAlt\" : \"Japanese\",\n    \"countryIso2\" : \"cu2m391mfpyviv6luu2n32ywwl48uhrx0cibmls0tmp61vjabb0y7cpnpps57zmlrwb0rc7u3j7qux6uyoe3qzai2gtp6gw56g22ysv\",\n    \"id\" : \"7v4a\",\n    \"ethnicitiesTop\" : [ \"xdn7mc4ryxcqsdetwsz4vqpuehgrqt0qi\" ],\n    \"script\" : \"2vpqricmoeygkk21mqagevtsnr7i64m628rb3ciz9yf0ech0tw50yz83v6acxtnazko5s77t9illy6wa2slna3wzfwnls7mb28w2f636urqja07snh9nl0tunp92s5qiaoqvkeye6ta2btfl3keat1beckdldx5ij3ycns8743a2gd\"\n  },\n  \"FirstLastNameGenderedOut\" : {\n    \"firstName\" : \"Jodi\",\n    \"genderScale\" : -0.49497217365846957,\n    \"lastName\" : \"Kuhn\",\n    \"score\" : 35.15082419188232,\n    \"probabilityCalibrated\" : -0.1049642764073655,\n    \"likelyGender\" : \"unknown\",\n    \"id\" : \"2i7e\",\n    \"script\" : \"yly31btyodo7xyy4j7brf46bn7gopgdytu0zr29v7yca3x99j9mdw68p33ajrjmyaf2bszj7haopdmplftv4brlvxxa7qsybub471hwk03l07aqs0mvd3c9wdaqukwq9d2l9t5rz6kks61plio0j8sjar0sc\"\n  },\n  \"id\" : \"501n\",\n  \"script\" : \"6uch0u810xexi674vvwkr5bxdwql3g7hb19tpyybe4mi3fz\",\n  \"FirstLastNameOriginedOut\" : {\n    \"lastName\" : \"Bogan\",\n    \"probabilityCalibrated\" : -0.18696249170265622,\n    \"script\" : \"cxgivdamz32lvly11b5x0ylnqfp9tzpo0bci3te1t9o1vqajt5fxbxo9ri3xn722f2peo3dkqijmkr91jk0u6g0m12kc4exm\",\n    \"regionOrigin\" : \"pag4mdsi4idfyg7s34oprquf6a4chwg1ul9r6em36s2cgbizopw2zqxzvpwfpuin4cqv3bnivagmb38x1rjuex1mdsq6gkatsn0wt5i6jxonrwyp9vspvi5sjtverio02t1ami0cpd42tmowadnsut2y\",\n    \"topRegionOrigin\" : \"d9isb772ffwh5dnbj0rkr4qp9g0j0143my3h3ysfbgh2wa1pgy3ppwk9ihiia1buzx1kxds4ysqhtvrfbesez7bn3xt5ggd5lop3z46g6u5e1l4ba69ynjpu7pm9qmjidpgpna6g86ci3zdfvguds99sgm3yh6jjg6gb9ot\",\n    \"firstName\" : \"Alex\",\n    \"score\" : 92.47998297709417,\n    \"subRegionOrigin\" : \"1f6wc1gxefbcp6vlb9z3oenj28jiachwqksw949gjtzbrxikjcf7vdsq18n0tgmdharzcwy7d84pjqhhv5fiyjm1e8c3gg2wjgow062wiaky512js\",\n    \"probabilityAltCalibrated\" : -0.16065827167064328,\n    \"countriesOriginTop\" : [ \"xx8lmc1f774okyvsa3moeibghrywaalyws9q4xj67yh50vqkob1d4b7k0knvj0u\", \"8zo8welgqcm23x5a5mx0rr5gkn7r2d6sgf5pryd6daj842skfcvbih1l0jv79gbyewk2j4qw3p7vzlhytcgnbjntdavtc3xfdddvm77ic6emjdorv36qrkokntxquj9nuu8kefxpslrukw48g8fas0w41082bexzx9h0anvoyhonm9pj1ghfkqhrgirx7x1ypb\", \"i2pjbwxi283b1xxwpaoowdwmsrn22u408zoalns4fynbc0o3t53irz0j81g862clspe42hrhqyjrh7ne95cey9dpo2f0ugv6ldyj814tshed54d0szpc9rw7km48n2venqct4ft64u1fcxoxyjq87231wwqe\", \"pxxqgtzwgc2vxxvg6bu3zz788rj2a6vlc3puewqaji00qzk2td3yl6j81i9c9ojzap8edw7hmb2bd7734elhelm7figx8k75rimz2fuuxmz8trhbz689j\", \"k0ejak5cxhvy25ei0zftyg\", \"fheg5jk9zos6u8owsgry34cn5p63c3rlqbjwytqcfafoqasrwnpszk4bxeflbmlvw10kewd1y73nzudclcq3w4aicdf11xbaoy93tmkotdzerxslyyk7e8ny4ah8tdsljy7qblg1nfl206w1wpdddnjdixb6sl5itl0c9xg4dtw2h7a\" ],\n    \"countryOrigin\" : \"qs6ad0j9d6uue8hgvezbc2c9ecj6y233ut\",\n    \"id\" : \"8099\",\n    \"countryOriginAlt\" : \"mu2wb\"\n  }\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1b8f42be-a534-3f3c-84b1-9e97ae93aee0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "corridor",
          "schema" : {
            "description" : "Represent multiple classifications for corridor sender and receiver (gender, country, origin, diaspora)",
            "properties" : {
              "FirstLastNameDiasporaedOut" : {
                "$ref" : "#/components/schemas/FirstLastNameDiasporaedOut"
              },
              "FirstLastNameGenderedOut" : {
                "$ref" : "#/components/schemas/FirstLastNameGenderedOut"
              },
              "FirstLastNameOriginedOut" : {
                "$ref" : "#/components/schemas/FirstLastNameOriginedOut"
              },
              "id" : {
                "type" : "string",
                "xml" : {
                  "attribute" : true
                }
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "CorridorOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 233
  }, {
    "id" : "afb3d130-b620-3e8a-b1d0-9db9986ad208",
    "name" : "Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname), ex. Wang Xiaoming - 403",
    "request" : {
      "urlPath" : "/api2/json/chineseNameMatchBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "afb3d130-b620-3e8a-b1d0-9db9986ad208",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "chineseNameMatchBatch"
        }
      }
    },
    "insertionIndex" : 234
  }, {
    "id" : "094f0100-866a-3938-95d8-35556568d6fc",
    "name" : "Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname), ex. Wang Xiaoming - 401",
    "request" : {
      "urlPath" : "/api2/json/chineseNameMatchBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "094f0100-866a-3938-95d8-35556568d6fc",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "chineseNameMatchBatch"
        }
      }
    },
    "insertionIndex" : 235
  }, {
    "id" : "1373314a-d3e8-3a1e-80ce-675427de3f1b",
    "name" : "Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname), ex. Wang Xiaoming - 400",
    "request" : {
      "urlPath" : "/api2/json/chineseNameMatchBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "1373314a-d3e8-3a1e-80ce-675427de3f1b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "chineseNameMatchBatch"
        }
      }
    },
    "insertionIndex" : 236
  }, {
    "id" : "df9a616c-5c64-3ac5-885b-75ed9fcfaa38",
    "name" : "Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname), ex. Wang Xiaoming (application/json)",
    "request" : {
      "urlPath" : "/api2/json/chineseNameMatchBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"matchedNames\" : [ {\n    \"score\" : 1.3415573255311376E308,\n    \"matchStatus\" : \"Match\",\n    \"id\" : \"j9i5\",\n    \"script\" : \"zetw7es5j9gp38b4h9x7uaei6eyxsnn0p1i3sxe2jyq2k\"\n  }, {\n    \"score\" : 9.905054066426176E307,\n    \"matchStatus\" : \"Match\",\n    \"id\" : \"02cy\",\n    \"script\" : \"f150erv4lzm4isdz41pz58c0fqumcremorr4q6ekqepjofemy9unhe23suss17f3f9wpm0h02rwlxmt6zvdip5bcc9hhk6o20k1bw6kr5mj8jthypk14y5p64gsvt34orgy29yvlkqvp0d9u7jrhs7yq2u2pkm2wt8aqsmuf6z0dpgvrl578itoj9o230b8uxt\"\n  }, {\n    \"score\" : 7.25261335309205E307,\n    \"matchStatus\" : \"Match\",\n    \"id\" : \"z0z6\",\n    \"script\" : \"4ce7dllb15\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "df9a616c-5c64-3ac5-885b-75ed9fcfaa38",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "chineseNameMatchBatch",
          "schema" : {
            "properties" : {
              "matchedNames" : {
                "description" : "Classified matched names",
                "items" : {
                  "$ref" : "#/components/schemas/NameMatchedOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchNameMatchedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 237
  }, {
    "id" : "ce381b82-cc1d-3cfc-9972-211aa0c6c3c0",
    "name" : "Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming - 403",
    "request" : {
      "urlPath" : "/api2/json/chineseNameMatch/quonaw34scem1i9g3o6li81lhxm2ziqhy7u7edysqoorfzt3z5h597gycr1umw21ek7hqrggmxeqrjecwz153u4ypzbyo72jusbwigfc3yxkpm0p02elj92oeq82d3oc2zjdr2l88bg8jsfz92hkq418qfug3wk926eo92vtzt7owpz394h7s3f6c7/mjwzkcct3elmgoz4z97erxbhznzjwwpyp6sn9rthb4iafmo9ygz0o751v8wk3cnhduze5xdzwsomchxkuubwer0th0rkhq8hf358a3wy56x61rf90bv2e8cge5n5zzzyu4q97genbeyivb1akmt44eiv65alzxkvjv5lsl3pp4jezmzgdhrnxioqcey73zglhmo5wdw/Miss+Season+Wisozk",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "ce381b82-cc1d-3cfc-9972-211aa0c6c3c0",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "chineseNameMatch"
        }
      }
    },
    "insertionIndex" : 238
  }, {
    "id" : "4eb71853-6758-31c2-bb55-e1c374e5be81",
    "name" : "Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming - 401",
    "request" : {
      "urlPath" : "/api2/json/chineseNameMatch/7rx2aaa5zl7iheig0gmwix9mm0xj3fa43mzef25x0hlwwr5y7ilnq3c0tae6ho6ctotwubmgrxpcjd34d57xhsv11d6pp56ipw8zsdw3kp368uenzhwql55v5ujg5nbia4wf7lvpc4mr8ywyclo29pqfi9vf61c/sukq3nsaxdp6jgnulx35/George+Koch",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "4eb71853-6758-31c2-bb55-e1c374e5be81",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "chineseNameMatch"
        }
      }
    },
    "insertionIndex" : 239
  }, {
    "id" : "fce01cca-7bd8-38c2-8cce-eec37cf45c4c",
    "name" : "Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming (application/json)",
    "request" : {
      "urlPath" : "/api2/json/chineseNameMatch/gwq79esm9h7mjxo3l25cjcf4jtje7ntantb1p3fj8aeg0dp84398i6rbcybx0be4d7cctkkdcablee7f2c00zjmsrzm1su35ighecl1vvl51h9sfoph4myv8ls4ifso5n6z90zolfrd0t0ato51cizgikz2sd2pljlyejkw4o3u16x7kp9bz1/ulmeu77ya8iyi53zgfrfdxk6bgjebjtbasb2k510lhfi7ra0aut32a3xcbtlkv9fjfzl2bxv5rel6jw0il2lnat2kff2uomsjoruxfjgqc/Mrs.+Ramonita+Breitenberg",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"score\" : 1.4680516461282119E308,\n  \"matchStatus\" : \"Match\",\n  \"id\" : \"3fy8\",\n  \"script\" : \"wsma2zqidleylurd2qo7uibcaj0lnso4230imh8627nuv6tqrv550wgmw\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fce01cca-7bd8-38c2-8cce-eec37cf45c4c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "chineseNameMatch",
          "schema" : {
            "description" : "Classified matched names",
            "properties" : {
              "id" : {
                "type" : "string"
              },
              "matchStatus" : {
                "description" : "The name matching status.",
                "enum" : [ "Match", "Mismatch" ],
                "type" : "string"
              },
              "score" : {
                "format" : "double",
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "NameMatchedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 240
  }, {
    "id" : "cdf13923-b7e0-3b2f-9438-7e118a4d5820",
    "name" : "Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender ('male' or 'female') - 403",
    "request" : {
      "urlPath" : "/api2/json/chineseNameGenderCandidates/sersx5adijrdup13csphh0602089z8agfpy7knhh/p86gpl0ye9z07ydkcfr0v5mscbm30592pe7v0ddc8ah6bn2x3hxmzqccnsmmnn1h8pk2y7kreluedzecfzljiap0h2dc/Female",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "cdf13923-b7e0-3b2f-9438-7e118a4d5820",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "chineseNameGenderCandidates"
        }
      }
    },
    "insertionIndex" : 241
  }, {
    "id" : "efeca750-e709-3935-a259-3140fda86c1a",
    "name" : "Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender ('male' or 'female') - 401",
    "request" : {
      "urlPath" : "/api2/json/chineseNameGenderCandidates/np1owhwfvaetslzm9li8shkj3x8s19ci52maoqm18j9wwbbf8nz39yvgbybry2q9jvoog9/4aov5l4z6367os9y87/Polygender",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "efeca750-e709-3935-a259-3140fda86c1a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "chineseNameGenderCandidates"
        }
      }
    },
    "insertionIndex" : 242
  }, {
    "id" : "2c9f1357-14cc-33e8-88f9-677528c1f9e3",
    "name" : "Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender ('male' or 'female') (application/json)",
    "request" : {
      "urlPath" : "/api2/json/chineseNameGenderCandidates/ycjswsnxln9p311wzpht2o9knb2mqxu0jy6vp90h608pjxndgz817j3h/uls0jjxko8tqosbr1hce2aijx1gwns34h9t2gawburiowbcvszpcgvl90zj262lko5iooubgwxbnjogehwcsnc06b5xfb0sf4v0b3ogijdeons0yggtim8cts4ughna1v2yu8kgg0j3lef88d75ze86bhur0emlwz61db9fneq5soocw8pkdrb40dobjk2jifjw1m7/Bigender",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"firstName\" : \"Staci\",\n  \"lastName\" : \"Renner\",\n  \"matchCandidates\" : [ {\n    \"predScoreGivenName\" : 1.0820827798269257E308,\n    \"candidateName\" : \"2022-12-29T16:12:57.998432Z\",\n    \"probability\" : 1.5936980802462359E308,\n    \"predScoreFamilyName\" : 3.310184874835556E307\n  }, {\n    \"predScoreGivenName\" : 3.609784317413967E307,\n    \"candidateName\" : \"2022-11-21T14:16:57.998473Z\",\n    \"probability\" : 1.2038229618470474E308,\n    \"predScoreFamilyName\" : 5.518078802516971E307\n  }, {\n    \"predScoreGivenName\" : 1.554436892005234E308,\n    \"candidateName\" : \"2022-05-04T13:04:57.998514Z\",\n    \"probability\" : 9.763960883518106E307,\n    \"predScoreFamilyName\" : 4.117267498902134E307\n  }, {\n    \"predScoreGivenName\" : 3.0957126442746666E307,\n    \"candidateName\" : \"2022-10-05T16:37:57.998553Z\",\n    \"probability\" : 1.334721392818713E308,\n    \"predScoreFamilyName\" : 1.4253887976487274E307\n  }, {\n    \"predScoreGivenName\" : 1.6939668566806956E308,\n    \"candidateName\" : \"2022-05-31T15:33:57.998593Z\",\n    \"probability\" : 3.548475505029946E306,\n    \"predScoreFamilyName\" : 1.1098825953074565E308\n  }, {\n    \"predScoreGivenName\" : 1.0687304127769626E308,\n    \"candidateName\" : \"2022-05-13T16:17:57.998635Z\",\n    \"probability\" : 1.7458735227871646E308,\n    \"predScoreFamilyName\" : 8.649618903872367E307\n  }, {\n    \"predScoreGivenName\" : 8.292100822615161E307,\n    \"candidateName\" : \"2022-08-01T16:48:57.998675Z\",\n    \"probability\" : 7.938014206363104E307,\n    \"predScoreFamilyName\" : 1.2810033546594224E308\n  } ],\n  \"orderOption\" : \"3vwe7x45coswie30jftcz9y9klwqouc7tcgmnng39vvjv2mg84n8b3or8ar6ho9i8rmi45w3m0u6e62v85i19uztc7z1tzgux6shtjso1al\",\n  \"id\" : \"e4fl\",\n  \"script\" : \"b1k95cogyxiek0w2ntqm0yotfn6qjdhvivqsnywjf8ntj80yb4h2\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2c9f1357-14cc-33e8-88f9-677528c1f9e3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "chineseNameGenderCandidates",
          "schema" : {
            "description" : "Classified matched names",
            "properties" : {
              "firstName" : {
                "description" : "The first name (also known as given name)",
                "type" : "string"
              },
              "id" : {
                "type" : "string"
              },
              "lastName" : {
                "description" : "The last name (also known as family name, or surname)",
                "type" : "string"
              },
              "matchCandidates" : {
                "description" : "The ordered list of name matching candidates",
                "items" : {
                  "$ref" : "#/components/schemas/NameMatchCandidateOut"
                },
                "type" : "array"
              },
              "orderOption" : {
                "description" : "The option for ordering",
                "type" : "string"
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "NameMatchCandidatesOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 243
  }, {
    "id" : "015fdcfa-f25f-3d14-b3a2-1a6a92e54056",
    "name" : "Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname) ex. Wang Xiaoming. - 403",
    "request" : {
      "urlPath" : "/api2/json/chineseNameCandidatesGenderBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "015fdcfa-f25f-3d14-b3a2-1a6a92e54056",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "chineseNameCandidatesGenderBatch"
        }
      }
    },
    "insertionIndex" : 244
  }, {
    "id" : "fcc0eb34-60f7-3ebb-81b5-310728810fe7",
    "name" : "Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname) ex. Wang Xiaoming. - 401",
    "request" : {
      "urlPath" : "/api2/json/chineseNameCandidatesGenderBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "fcc0eb34-60f7-3ebb-81b5-310728810fe7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "chineseNameCandidatesGenderBatch"
        }
      }
    },
    "insertionIndex" : 245
  }, {
    "id" : "2e641c33-efbf-3c6b-8c6a-e2b2caeaabe9",
    "name" : "Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname) ex. Wang Xiaoming. - 400",
    "request" : {
      "urlPath" : "/api2/json/chineseNameCandidatesGenderBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "2e641c33-efbf-3c6b-8c6a-e2b2caeaabe9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "chineseNameCandidatesGenderBatch"
        }
      }
    },
    "insertionIndex" : 246
  }, {
    "id" : "2c3505c7-4c2d-3b58-9062-f1e0033ba917",
    "name" : "Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname) ex. Wang Xiaoming. (application/json)",
    "request" : {
      "urlPath" : "/api2/json/chineseNameCandidatesGenderBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"namesAndMatchCandidates\" : [ {\n    \"firstName\" : \"Minh\",\n    \"lastName\" : \"Schultz\",\n    \"matchCandidates\" : [ {\n      \"predScoreGivenName\" : 8.68410900562086E307,\n      \"candidateName\" : \"2022-10-28T14:24:57.99621Z\",\n      \"probability\" : 3.774235610116893E306,\n      \"predScoreFamilyName\" : 8.760640490972143E307\n    } ],\n    \"orderOption\" : \"fdtejzsqc4b3qkwbf4owknaoaxi9gq3u\",\n    \"id\" : \"yv44\",\n    \"script\" : \"yh04sw1q80v755gx3fjtr6f3ujsj\"\n  }, {\n    \"firstName\" : \"Tamatha\",\n    \"lastName\" : \"Welch\",\n    \"matchCandidates\" : [ {\n      \"predScoreGivenName\" : 2.406628594827052E307,\n      \"candidateName\" : \"2022-03-30T13:13:57.996396Z\",\n      \"probability\" : 1.1661928206274565E308,\n      \"predScoreFamilyName\" : 7.615542537869655E306\n    }, {\n      \"predScoreGivenName\" : 3.1654773472105946E307,\n      \"candidateName\" : \"2022-12-02T13:32:57.99644Z\",\n      \"probability\" : 1.5662234808355161E308,\n      \"predScoreFamilyName\" : 1.731470722965688E308\n    }, {\n      \"predScoreGivenName\" : 1.374663201784072E308,\n      \"candidateName\" : \"2023-02-07T16:40:57.996484Z\",\n      \"probability\" : 1.5994672300698448E308,\n      \"predScoreFamilyName\" : 1.1074878291732776E308\n    } ],\n    \"orderOption\" : \"ll2rbd89yatb8bg20n52amkbxwmd1k5qat\",\n    \"id\" : \"00he\",\n    \"script\" : \"4z2m9eertaf83ga2x9vl7tjknkk7xwj1vf10s347xl3a2i193o33md86kh9s8f60tnkcxv7z70vsizq9rtglwkclww5qrztnoa55agobm033\"\n  }, {\n    \"firstName\" : \"Dennis\",\n    \"lastName\" : \"Keebler\",\n    \"matchCandidates\" : [ {\n      \"predScoreGivenName\" : 1.6833611974573164E308,\n      \"candidateName\" : \"2023-02-28T15:54:57.996667Z\",\n      \"probability\" : 1.2827441171614594E306,\n      \"predScoreFamilyName\" : 6.621444084001822E307\n    }, {\n      \"predScoreGivenName\" : 5.927562986790135E307,\n      \"candidateName\" : \"2022-05-15T13:25:57.99671Z\",\n      \"probability\" : 8.233541314119185E307,\n      \"predScoreFamilyName\" : 2.5907273087094285E307\n    }, {\n      \"predScoreGivenName\" : 2.0994051672742494E307,\n      \"candidateName\" : \"2022-05-03T13:59:57.996752Z\",\n      \"probability\" : 9.856140100284656E307,\n      \"predScoreFamilyName\" : 1.1896254325026194E308\n    }, {\n      \"predScoreGivenName\" : 1.3239041382022022E308,\n      \"candidateName\" : \"2022-11-25T15:52:57.996793Z\",\n      \"probability\" : 8.533489933035516E307,\n      \"predScoreFamilyName\" : 3.2538845987811476E307\n    }, {\n      \"predScoreGivenName\" : 1.6111686374106422E308,\n      \"candidateName\" : \"2022-08-09T16:20:57.996837Z\",\n      \"probability\" : 1.327009707594122E308,\n      \"predScoreFamilyName\" : 1.9591815806842795E306\n    }, {\n      \"predScoreGivenName\" : 1.775519134913842E308,\n      \"candidateName\" : \"2022-05-23T14:08:57.99688Z\",\n      \"probability\" : 7.324621208762262E307,\n      \"predScoreFamilyName\" : 1.3405063676541829E308\n    }, {\n      \"predScoreGivenName\" : 5.274191017440659E307,\n      \"candidateName\" : \"2022-06-23T16:38:57.996923Z\",\n      \"probability\" : 6.730314930097819E307,\n      \"predScoreFamilyName\" : 1.0391926904916627E307\n    } ],\n    \"orderOption\" : \"lujdpojfprvlz5q3hf70eqn01204vcd178x4x8u0gx6x9wci4kps6ejmm5ss1qgf9l8a9mjwzmzmpthom5ms4qqk5moe7fs5j01an9\",\n    \"id\" : \"o44w\",\n    \"script\" : \"gaza3w0pmdxl5qlc5ppnmbdgl7kzsywnifuelbybh98tfjjtvx7xbcynq4rt0rtqk0n2ts1cdsmy54zji9lw8urgqe0oylh\"\n  }, {\n    \"firstName\" : \"Lupe\",\n    \"lastName\" : \"Ankunding\",\n    \"matchCandidates\" : [ {\n      \"predScoreGivenName\" : 9.095802931409278E307,\n      \"candidateName\" : \"2022-05-11T14:21:57.997112Z\",\n      \"probability\" : 6.332508008593343E307,\n      \"predScoreFamilyName\" : 6.936536449194441E307\n    }, {\n      \"predScoreGivenName\" : 1.6430453906490699E308,\n      \"candidateName\" : \"2022-04-11T16:51:57.997155Z\",\n      \"probability\" : 1.3919084971524532E308,\n      \"predScoreFamilyName\" : 8.683518058224403E307\n    }, {\n      \"predScoreGivenName\" : 1.7278898813461887E308,\n      \"candidateName\" : \"2022-08-02T13:52:57.997197Z\",\n      \"probability\" : 1.78988682430196E307,\n      \"predScoreFamilyName\" : 1.7782571490706851E308\n    }, {\n      \"predScoreGivenName\" : 7.092345545956564E307,\n      \"candidateName\" : \"2022-12-26T15:37:57.99724Z\",\n      \"probability\" : 1.7908872467206206E308,\n      \"predScoreFamilyName\" : 1.6480439105839755E308\n    } ],\n    \"orderOption\" : \"jhccyzuydou7ej284l92dhc3ux30qf9cxu6zo9lunivqn9fwb0b3277a3l6tdtmbic5nqgiro15nd4djyxr3urcfd0gznv53418cs6uik94ylhtcp72m0q5dst9ohb9moyje75lrfl0uyru78k6ox66un\",\n    \"id\" : \"k9py\",\n    \"script\" : \"55ko4fhfqekvep5tldteppbnw5xumum68ep6h3p8vv0tbbnnv5861f3cov3vmoculzuh0nuxvjtsg371wvdtcgmjpyc90nnggyt95moulbk1vyhs9l9zgk8vuomj2ue9fhsug9nfajh1p7dwhgg0vkqprwnpdel4dio4lq03m\"\n  }, {\n    \"firstName\" : \"Inocencia\",\n    \"lastName\" : \"Abernathy\",\n    \"matchCandidates\" : [ {\n      \"predScoreGivenName\" : 1.6785348467343427E308,\n      \"candidateName\" : \"2022-04-08T14:21:57.997427Z\",\n      \"probability\" : 1.1977735139700303E308,\n      \"predScoreFamilyName\" : 1.4502503214505885E308\n    }, {\n      \"predScoreGivenName\" : 1.0236892574477114E308,\n      \"candidateName\" : \"2023-01-26T15:05:57.997469Z\",\n      \"probability\" : 6.26475148046733E307,\n      \"predScoreFamilyName\" : 9.7740774560289E307\n    }, {\n      \"predScoreGivenName\" : 1.4326659834482944E308,\n      \"candidateName\" : \"2022-05-12T13:15:57.99751Z\",\n      \"probability\" : 9.0408274793696E307,\n      \"predScoreFamilyName\" : 5.612655156193384E306\n    }, {\n      \"predScoreGivenName\" : 7.423182396636436E307,\n      \"candidateName\" : \"2022-11-07T16:53:57.997552Z\",\n      \"probability\" : 2.3521540090852116E307,\n      \"predScoreFamilyName\" : 1.0373118923092004E308\n    }, {\n      \"predScoreGivenName\" : 4.807555262714975E307,\n      \"candidateName\" : \"2022-06-23T16:40:57.997598Z\",\n      \"probability\" : 7.435225829811044E307,\n      \"predScoreFamilyName\" : 7.247400080745762E307\n    }, {\n      \"predScoreGivenName\" : 9.18811440501984E307,\n      \"candidateName\" : \"2022-11-05T16:37:57.997639Z\",\n      \"probability\" : 1.0702660601597716E308,\n      \"predScoreFamilyName\" : 2.1323241640366275E307\n    }, {\n      \"predScoreGivenName\" : 1.0186653785223681E308,\n      \"candidateName\" : \"2022-07-02T16:17:57.997682Z\",\n      \"probability\" : 9.067351266218315E307,\n      \"predScoreFamilyName\" : 1.1013178685348732E308\n    }, {\n      \"predScoreGivenName\" : 3.793774247411433E307,\n      \"candidateName\" : \"2022-08-05T15:19:57.997725Z\",\n      \"probability\" : 5.670600538874313E307,\n      \"predScoreFamilyName\" : 4.0466268716121003E307\n    } ],\n    \"orderOption\" : \"qiogh1no3l56fk9f5g3akhjf5fp2cgklch9oxtbklrkws2yaczwtxny702ltvcc6d0necbx93212ugrm0j58fi1\",\n    \"id\" : \"wnpy\",\n    \"script\" : \"quk9r3ju8nqziz6x1sp9ws\"\n  }, {\n    \"firstName\" : \"Aldo\",\n    \"lastName\" : \"Bednar\",\n    \"matchCandidates\" : [ {\n      \"predScoreGivenName\" : 1.7835348622770362E308,\n      \"candidateName\" : \"2022-08-21T13:35:57.997914Z\",\n      \"probability\" : 3.1275232489451856E307,\n      \"predScoreFamilyName\" : 1.3570970299330934E308\n    }, {\n      \"predScoreGivenName\" : 1.598802890747315E308,\n      \"candidateName\" : \"2022-05-31T16:41:57.997956Z\",\n      \"probability\" : 7.884512031570805E307,\n      \"predScoreFamilyName\" : 9.559821000200603E307\n    }, {\n      \"predScoreGivenName\" : 6.726378341077E307,\n      \"candidateName\" : \"2022-05-27T16:36:57.997998Z\",\n      \"probability\" : 4.272033584775149E307,\n      \"predScoreFamilyName\" : 1.420242584322186E308\n    } ],\n    \"orderOption\" : \"qtv55wq51a4u7zaatuh3z3w7wngfvar8\",\n    \"id\" : \"q26e\",\n    \"script\" : \"spqg2bduyyp5zvc67utr5kfr3uwu0a5jfl3gsdkmtws3ym4cq1c8prlwbei0274o8oqzkp69j6qt8sjm9tw4emo5345xl6h3uv7raj86vhcpppv2vbwxa91rngihlmpzltv3mok9t41ql5bjgz9ge8y10w57a8yo5v6y73kf58ejrdzmt0ulendnxh5tvilfjdza60\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "2c3505c7-4c2d-3b58-9062-f1e0033ba917",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "chineseNameCandidatesGenderBatch",
          "schema" : {
            "properties" : {
              "namesAndMatchCandidates" : {
                "description" : "Classified matched names",
                "items" : {
                  "$ref" : "#/components/schemas/NameMatchCandidatesOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchNameMatchCandidatesOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 247
  }, {
    "id" : "070bffff-8066-39e6-9a00-d0982d632d67",
    "name" : "Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname), ex. Wang Xiaoming - 403",
    "request" : {
      "urlPath" : "/api2/json/chineseNameCandidatesBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "070bffff-8066-39e6-9a00-d0982d632d67",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "chineseNameCandidatesBatch"
        }
      }
    },
    "insertionIndex" : 248
  }, {
    "id" : "bf0f9053-5fd8-357c-9fb7-a03479581a7e",
    "name" : "Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname), ex. Wang Xiaoming - 401",
    "request" : {
      "urlPath" : "/api2/json/chineseNameCandidatesBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "bf0f9053-5fd8-357c-9fb7-a03479581a7e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "chineseNameCandidatesBatch"
        }
      }
    },
    "insertionIndex" : 249
  }, {
    "id" : "68aa9135-2aaa-3e97-b8e3-c5fa2213440d",
    "name" : "Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname), ex. Wang Xiaoming - 400",
    "request" : {
      "urlPath" : "/api2/json/chineseNameCandidatesBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "68aa9135-2aaa-3e97-b8e3-c5fa2213440d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "chineseNameCandidatesBatch"
        }
      }
    },
    "insertionIndex" : 250
  }, {
    "id" : "149bffb3-877b-39f4-9485-905d867a2558",
    "name" : "Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname), ex. Wang Xiaoming (application/json)",
    "request" : {
      "urlPath" : "/api2/json/chineseNameCandidatesBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"namesAndMatchCandidates\" : [ {\n    \"firstName\" : \"Newton\",\n    \"lastName\" : \"Bergnaum\",\n    \"matchCandidates\" : [ {\n      \"predScoreGivenName\" : 2.60011973791425E307,\n      \"candidateName\" : \"2023-02-05T16:17:57.995074Z\",\n      \"probability\" : 1.0602716513938657E308,\n      \"predScoreFamilyName\" : 1.289890074280693E308\n    }, {\n      \"predScoreGivenName\" : 1.6397439290181071E308,\n      \"candidateName\" : \"2022-12-03T13:42:57.995118Z\",\n      \"probability\" : 1.453039218177304E308,\n      \"predScoreFamilyName\" : 1.016630725731195E308\n    }, {\n      \"predScoreGivenName\" : 1.689984364749109E307,\n      \"candidateName\" : \"2022-04-22T15:57:57.995161Z\",\n      \"probability\" : 1.117809546220954E308,\n      \"predScoreFamilyName\" : 1.4446893216963924E308\n    }, {\n      \"predScoreGivenName\" : 5.426776217084643E307,\n      \"candidateName\" : \"2022-05-27T15:08:57.995204Z\",\n      \"probability\" : 1.181487820747249E308,\n      \"predScoreFamilyName\" : 1.0917070184793106E308\n    }, {\n      \"predScoreGivenName\" : 2.7838911353439407E307,\n      \"candidateName\" : \"2022-07-04T15:05:57.995247Z\",\n      \"probability\" : 7.777450272297699E307,\n      \"predScoreFamilyName\" : 1.2134766692571094E308\n    }, {\n      \"predScoreGivenName\" : 1.089071734335183E308,\n      \"candidateName\" : \"2022-08-04T15:14:57.995288Z\",\n      \"probability\" : 1.3380163047871662E308,\n      \"predScoreFamilyName\" : 7.9748810046084E307\n    }, {\n      \"predScoreGivenName\" : 1.0165570350588462E308,\n      \"candidateName\" : \"2023-01-27T16:09:57.995332Z\",\n      \"probability\" : 2.5797727571439216E306,\n      \"predScoreFamilyName\" : 1.6393851775797242E308\n    }, {\n      \"predScoreGivenName\" : 7.702991406136347E307,\n      \"candidateName\" : \"2022-06-04T14:27:57.995375Z\",\n      \"probability\" : 1.5833593622476874E308,\n      \"predScoreFamilyName\" : 1.52560032965934E308\n    } ],\n    \"orderOption\" : \"ywjt3ldmrjasuypo97yarl3gvggrxunon4sii7wlu4t5qvmlabda3bn0do8z1cc\",\n    \"id\" : \"0z0c\",\n    \"script\" : \"vgi326vv82ds676xdc3ongf19ljpqctugtfzd8ob9b6uvgb39vp6yhwl85srjsdl90kpqx3pjf0co520w71gycieteg90uhp1x9shlc\"\n  }, {\n    \"firstName\" : \"Bee\",\n    \"lastName\" : \"Stoltenberg\",\n    \"matchCandidates\" : [ {\n      \"predScoreGivenName\" : 1.752756801026536E308,\n      \"candidateName\" : \"2022-07-05T13:15:57.995585Z\",\n      \"probability\" : 1.5501260256040688E308,\n      \"predScoreFamilyName\" : 3.257580100037694E307\n    }, {\n      \"predScoreGivenName\" : 1.0860907607352618E308,\n      \"candidateName\" : \"2022-12-09T13:09:57.995625Z\",\n      \"probability\" : 1.5656911688901055E308,\n      \"predScoreFamilyName\" : 1.0986043201891821E308\n    }, {\n      \"predScoreGivenName\" : 6.40686493248547E307,\n      \"candidateName\" : \"2023-03-07T14:09:57.995667Z\",\n      \"probability\" : 7.930186143494547E307,\n      \"predScoreFamilyName\" : 6.444300525832075E307\n    }, {\n      \"predScoreGivenName\" : 1.5177200735679056E308,\n      \"candidateName\" : \"2022-12-24T15:25:57.995709Z\",\n      \"probability\" : 1.1611955342096246E308,\n      \"predScoreFamilyName\" : 6.994534787719284E307\n    }, {\n      \"predScoreGivenName\" : 1.9413445961854463E307,\n      \"candidateName\" : \"2022-08-08T14:33:57.99575Z\",\n      \"probability\" : 1.5698452932488056E308,\n      \"predScoreFamilyName\" : 6.271987471409482E307\n    }, {\n      \"predScoreGivenName\" : 4.2652406582328263E307,\n      \"candidateName\" : \"2022-09-02T14:40:57.995792Z\",\n      \"probability\" : 1.2584554326445252E308,\n      \"predScoreFamilyName\" : 6.104090189893236E307\n    }, {\n      \"predScoreGivenName\" : 1.3303591412033597E308,\n      \"candidateName\" : \"2023-02-17T14:27:57.995833Z\",\n      \"probability\" : 6.991144850160481E307,\n      \"predScoreFamilyName\" : 1.339669807438158E308\n    } ],\n    \"orderOption\" : \"m1cq\",\n    \"id\" : \"69rf\",\n    \"script\" : \"si2cce78djqwr50nvwl0ghb64b7pru942n4krcrjjsubg2o9a9dt6vc0fkwqd8xjnyass0tjmu4qg6viba358aqmwtshlneeh69c0pb7j73z8g7c2ib37j4vxbns2qplmv0xfko5lpjhkprlrtmvrg82p8uvd66ocwc21k0v0m1xjhmfz2wpbdx8cp\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "149bffb3-877b-39f4-9485-905d867a2558",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "chineseNameCandidatesBatch",
          "schema" : {
            "properties" : {
              "namesAndMatchCandidates" : {
                "description" : "Classified matched names",
                "items" : {
                  "$ref" : "#/components/schemas/NameMatchCandidatesOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchNameMatchCandidatesOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 251
  }, {
    "id" : "8f3688a7-7016-3e7e-b598-81a7e88a370e",
    "name" : "Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - 403",
    "request" : {
      "urlPath" : "/api2/json/chineseNameCandidates/ldygb3md7uo4mjxthrm5fp4prwyyjh42l1aqr1bjq60qzlxox9m3gc4t3ji3ymv525ahpxaxwql3k53457ccl6m2shy81/cnlycw0l8l7i51tx3kn0ff5sb1mgi86muuizw0vqu681dpyvkdeulaapxn6ijep7yb0ado2ox6365ag7tbbrh7dcidklv7s3a2",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "8f3688a7-7016-3e7e-b598-81a7e88a370e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "chineseNameCandidates"
        }
      }
    },
    "insertionIndex" : 252
  }, {
    "id" : "90287ac4-5908-3e99-9868-34e48d891713",
    "name" : "Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - 401",
    "request" : {
      "urlPath" : "/api2/json/chineseNameCandidates/eiyygqe1ffv47utno1jtmddpqj3qdbg93qao4gdebubywuu3cd6lktvrjinmkzwj4loctnqjpsy43k32mrc6hsw5edyzf/xilz5sir8o4akmyrkvrymrute9jk7u9z65thuih2f7",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "90287ac4-5908-3e99-9868-34e48d891713",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "chineseNameCandidates"
        }
      }
    },
    "insertionIndex" : 253
  }, {
    "id" : "36757c65-3f8e-37bc-9435-5f613b504bcb",
    "name" : "Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming (application/json)",
    "request" : {
      "urlPath" : "/api2/json/chineseNameCandidates/db0ndj1filnht4n12iih6xksqzhqhlin5zn/rta1gsbdvc6s0",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"firstName\" : \"Dave\",\n  \"lastName\" : \"Sipes\",\n  \"matchCandidates\" : [ {\n    \"predScoreGivenName\" : 6.872590494326668E307,\n    \"candidateName\" : \"2023-01-03T13:16:57.994533Z\",\n    \"probability\" : 1.7107802756749953E308,\n    \"predScoreFamilyName\" : 1.6823466035705094E308\n  }, {\n    \"predScoreGivenName\" : 4.224263544323452E307,\n    \"candidateName\" : \"2023-02-17T14:47:57.994583Z\",\n    \"probability\" : 5.03482574576987E307,\n    \"predScoreFamilyName\" : 5.384995188692163E307\n  }, {\n    \"predScoreGivenName\" : 1.0062635375702123E306,\n    \"candidateName\" : \"2022-04-17T13:32:57.994625Z\",\n    \"probability\" : 1.2009734108433499E308,\n    \"predScoreFamilyName\" : 9.786027151720615E307\n  } ],\n  \"orderOption\" : \"x7exo8eiynpqtwhdf1hddieskzeir3veg224q9uswhny1m7yk77w0s168wvpstwwr533ue8qnpzszk836ghxhcncuc370kmtybdvp9fqmulry2vhaiplwc1r334gvpk4cyool34amch43oxa\",\n  \"id\" : \"157h\",\n  \"script\" : \"m1ffqxtiqu9lx6kykvmxksj5551hgqjgurv4tj61gvo2s7juisg4edcc9oq2i7fu35sby\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "36757c65-3f8e-37bc-9435-5f613b504bcb",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "chineseNameCandidates",
          "schema" : {
            "description" : "Classified matched names",
            "properties" : {
              "firstName" : {
                "description" : "The first name (also known as given name)",
                "type" : "string"
              },
              "id" : {
                "type" : "string"
              },
              "lastName" : {
                "description" : "The last name (also known as family name, or surname)",
                "type" : "string"
              },
              "matchCandidates" : {
                "description" : "The ordered list of name matching candidates",
                "items" : {
                  "$ref" : "#/components/schemas/NameMatchCandidateOut"
                },
                "type" : "array"
              },
              "orderOption" : {
                "description" : "The option for ordering",
                "type" : "string"
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "NameMatchCandidatesOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 254
  }, {
    "id" : "2409c039-c299-397d-b535-eddf29d62e0a",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names.  - 403",
    "request" : {
      "urlPath" : "/api2/json/castegroupIndianFullBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "2409c039-c299-397d-b535-eddf29d62e0a",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "castegroupIndianFullBatch"
        }
      }
    },
    "insertionIndex" : 255
  }, {
    "id" : "2e743a6e-cb5d-38c5-a5b8-622bb574f234",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names.  - 401",
    "request" : {
      "urlPath" : "/api2/json/castegroupIndianFullBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "2e743a6e-cb5d-38c5-a5b8-622bb574f234",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "castegroupIndianFullBatch"
        }
      }
    },
    "insertionIndex" : 256
  }, {
    "id" : "21889184-95d6-3554-af04-e5d4ff55e6c8",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names.  - 400",
    "request" : {
      "urlPath" : "/api2/json/castegroupIndianFullBatch",
      "method" : "POST"
    },
    "response" : {
      "status" : 400
    },
    "uuid" : "21889184-95d6-3554-af04-e5d4ff55e6c8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "castegroupIndianFullBatch"
        }
      }
    },
    "insertionIndex" : 257
  }, {
    "id" : "e79b678a-2ee0-3384-87a7-9e24eb6eca06",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of up to 100 personal full names.  (application/json)",
    "request" : {
      "urlPath" : "/api2/json/castegroupIndianFullBatch",
      "method" : "POST",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"personalNames\" : [ {\n    \"castegroup\" : \"1r1hq05zprmrfaafvd7np8bskdj9ckbx1s73z6lari8l67wshg351lshmjb8gkm0ejrqr3\",\n    \"castegroupTop\" : [ \"o2916adabnembjkuy2mgcdu0ym4tdn9mm9juhs554y3d08oqycqarhxdty1k3fg9xiebtp7k330abmoak9actkzztx6cdl9b9wnen1bszus905rfmle1v0fo3pdw7hvopv\", \"f3u7lrbr7hrtje6andpsklic2rqu4jocbe76b0d2qkszy41f20nhx4u2ym63sb4d\", \"dxgq3qyoo7u2ayy6p9gjx4labvayqpr6yajrmk5svd0u5hew48jgjuddpjg2s6w7n6fypcdksss7x6dpxwhvkkwc6tj43nqd9w1pd00i3irgitc501v3kkzm7gjwlx6rnwsnq6d1m30cuitjuzxz34rfexje7za21s5jr5oq3cwcnx9rx1a5wzighvjmgtvp\", \"vgkusz7pw5pbhnobltjf64dommjfnevyy8s1gzgtdlmbcodm0d51bz9cu7dap3ydvq885dd1sodr61mds69hyeamn5u8r53vvu6m0vg\", \"7iauoh4zls6b94g6bp3brdayhv7ma1ec\", \"ppddhcivjhnnodnaio5jnjejh66mf1xtkonpvszee62hvja442azq8ewfqbwh2uyvd4p7pvyiuyopvyj96919ia4zaz21ih6ay3ub7eynnrxrht1zdzxxbomaiza2oi965x3kcjc2mm6l2xo0s\", \"lgx87s9wdv8uhj52jb9ka4zuem4fd6ay4gkhl6stgr2f7etpxjhbbw826ql31bf9c0a8p\" ],\n    \"score\" : 91.6108965794746,\n    \"probabilityCalibrated\" : -0.7988374483503788,\n    \"name\" : \"Johnie Wolf\",\n    \"probabilityAltCalibrated\" : -0.23168423640471936,\n    \"id\" : \"3194\",\n    \"castegroupAlt\" : \"71q350kucoh1gq7h3rqs7gzpg9tnp08a38h6htw48fqnfkh8zmyjsmwrwemgumb\",\n    \"script\" : \"agzz6kym06biqcj3cuxvkz6ycewbcwwyxupa78rzdd40drq7m8u5bfddjkuh27zsk0ypktsgx98\"\n  }, {\n    \"castegroup\" : \"ipuhq7fjoq3lauatrnnnzxomzkj5fx12xgj2n6zc59kwxjrw30ouxo51zciukexs704vuum6twmcxa0lzfbfgtfg838b5bz2mz2ygybaojyz2hklfo0cndhaexekt374n2veny7o\",\n    \"castegroupTop\" : [ \"nlsuf2bvg300xwz66klixvyeotobdqgx09fu308nsyh2fjrc65jnk07je0nnt8i1h\", \"tztqe4161rc0cy9zmtnsi5zbp3dci04qletm\", \"vpdm2fwf9jh02enaxewmw8y50yk893u52dbg7cg944p6tlqhkp91u406dzrcbab7psoxr995cn752qhoodrdc75osgg24i8hbbhx07w64v8wd9j5h0r3l0\", \"69o3mzio79qccuahsbok54b0hnq11mbjpky1s60m673m7m7z6twhkr3l83zxd7m83ptcyp4ysjqbhlt1aljtrdumm8dzmksjgy0iy2ll\", \"utli2qasdurf0z1myg4cjyd87i0xu230e\", \"sjrh32p62uuyl1ai41pffkcq5e3tsjhhgaxjeki2tu3ni91190qc45mczj5mhg5uadixqqzrfgfab32xi6nfn2og5yg3o4c22u0bq5dg73idak4iy2s4slb38hsy352ynacsdyo52bw9mikd6so7ozt3wolo9q4hjsqyp37m8hxejitulhpgtp6qgn2sfbtr\", \"fdxuuhrfjw4mlw45745aghem1cw7elg21c3jhlwy3eqga9e38vsv6sfex8cjk3bgi70pw01d45tsh1y63284cn69oqaguagp3lhyk82k2ckv6bim00e5bu25yjr2jeh9x2hnlieb530o8dw03ilh1kcwzi2gn74xmj8z\" ],\n    \"score\" : 14.37253335638916,\n    \"probabilityCalibrated\" : -0.6867703454899547,\n    \"name\" : \"Reid Ortiz\",\n    \"probabilityAltCalibrated\" : 0.7181249480431124,\n    \"id\" : \"4hv1\",\n    \"castegroupAlt\" : \"zerj6umcgsgudrn6ni8tymo2b65b7urs5ous0k5889tu450bpzq11k6hapih0bcei9tk2vnzbbwurazrn56fuiek7aahn9h5i1483wrnedvjn2bdhc\",\n    \"script\" : \"oe341bsj866xwc\"\n  }, {\n    \"castegroup\" : \"aijdgnorbagucrwmgog41sixvxmy58j84oanrll3fz2q2gbtrq8v6m8on9j8klkuwprs2zk9\",\n    \"castegroupTop\" : [ \"618fyhubd89rjnw82k9ny2ysz3l0a3pq2hx8q26ttutx57f9o6rehlm1ojhj2ia7gu8plzv4ra507i00aecm2adh9zlmp1wtv3iy5icuwusfrnrhcdywtb97junj2s454thq1yqd\", \"kza0qfrf6p42jojcwevawdwtlraypqeg3bhykyy8ccv0k1omyhkxdvo9n8apb3rd4tl62g5nj11lpjdfy88q5eaw1ue\", \"7sst3hmmkjoum0pvamwqk3889rsz4ce70unalh7hscu1n0yna2h4jqwdj1m79ye6vxoshg2decci1kzzkxzjgig8ejtryyw5ahirejcoil5yylntp\", \"yfqmsxwhuz0vdbd2deg33yor\", \"wdxoiw8naql57q5af3vcwaw34m56vnm3wrh9rs8vyc8aimknlo2n6698afjoex5nmb52c24v6gabvdjucpc3sk3zgcwqhw6di2q6nnm398xt99b93rpkca75lbi1lpt31zz2erom3viju82myo4bg1okucf7s0ariyl97ilul2ky5benam6oicmaplwk34x3t4\", \"enwf3c4jhk75en7hx0l01a192xu4tx21usdblnc1ah0zq05y42h9o5h331sn4yinj5xm1u458kt31ihm4r1q7v4ecvgu5jvulyrhxnyz80lq533l4i2e4feskhlh4fcurrhfbcdnhpl7w9gnlvg1dynj73lx00lgpxgm06l9cnwnjh2k5mngvsfduftijc6mwz7\", \"8ex8uvwlimijtku0po5gdsyk9zg5kv7r1cs9hn6et5ijnsubx0qoxkzr4gmsg8xxqq1h8g09n9ppliv2avm1t7aw6trgcg1xlquj1ztv18yncm045wm1wmvs6uktkx1rjy5zk6i0zglkuxii0opxf09evi6vdqqm930okj7vx62sqelzk77h51h\", \"sjtjhom54l5adf6yfytp3jijfdg7rxml9bvetitr8w0vv0imoxbb4gng0d4xtr2r4yusgvy9fzf0ssqfy9xh6xlcm8t1u6mtlhb4yii8qb03xwpzg4uwtfbv2azq5f0zik23nnv0k4k\" ],\n    \"score\" : 8.140766933731191,\n    \"probabilityCalibrated\" : 0.8172095817276794,\n    \"name\" : \"Marquita Hintz\",\n    \"probabilityAltCalibrated\" : 0.31644622606950557,\n    \"id\" : \"2d82\",\n    \"castegroupAlt\" : \"8c1zeqa12gef4la6rnkx2o98k5fxuaux71rj1u48rgovv6k5xt3th9neuud944b61cs0cw0hfvydgi96z2j42plbac4iavk469ku50dns98dndwlvf4uf9jnrf9inr6udjj5320z496qxnljj7qn0iwzz6tu68zo7b94ni00zkshokg2fzxane4asx65oii6f\",\n    \"script\" : \"2cs8c3t10s2qc0vm7g6djqvwwxaf7lpxag\"\n  }, {\n    \"castegroup\" : \"4rortgyf91rrmlktlyto5a0j667ose93a9j1fjk078b40369apcs25ko6qoz98ua1bml7hsvsuymejuoa8qzjvd20fx5893l3vriy720c7j9gfxdia\",\n    \"castegroupTop\" : [ \"vthz11ja98cljcsic8j1995ewpc33e\", \"ir5jn7yw5hvn53aer1leale833foch\", \"xx0qa6\", \"l7le00mxd5unes2btp28sxowk55xk7q7wfhjvgauvzx3wpaeg8t4af0g1emso69ugasgio0m3whraq9eq0dipds65x9bu69p1sewkrzcpt5c5r3wbwumiqjva17giiufi9b1dlwt1e53\", \"jbqkaiuykanujm5e5xbtqjscrwnr150hawpwx07rcdr6oyg0ic0lx4e3zuj44t3aaz55dlsunzco6uglejskquiektk4im5bbzr7ss867ktxpt19978zc8lh9l1qf19utm2vaxxw607zdgrvnq8ho2p0ni67ehxx\", \"fs4nnszqttkn5tqid43yb14712sslnevipw96r61yywxpbqwreextvzbvggiupoo582hzlizrmjqctr3g7wx7i99c6erw0hackfp3l6hhp9niz16qwf6dxt4k6hmsh6zbb9ox8bejeepw\", \"9rrshep9uzlsxfi3vjdkzrkpr1zy0f1jztx0e8vw5e0bbnzd1fvclz6mrbd4dt33lr0tab4g00uqdlg5cu8norruqlqhkkwzwn4i5cnpl3gjy6xv2nfjz2u15fvu90ibykn76yurel0pf55i2846rx66v9v2f\" ],\n    \"score\" : 4.20467019914188,\n    \"probabilityCalibrated\" : 0.12792625300318927,\n    \"name\" : \"Ms. Terrilyn Carter\",\n    \"probabilityAltCalibrated\" : 0.9024472507310992,\n    \"id\" : \"0p25\",\n    \"castegroupAlt\" : \"ypse7k912qtljn631k5j5jlnlskv2sswlcduj2t9e6hjkg4n9ov1941m76vpmgzw35x5se5wgnuqzhb4p3zqs99vjd36uvykv4b06yc0mqtlxyqvuf746w3n06yduzqeyq16\",\n    \"script\" : \"5nj2ei73upztk7prfgb7joippouocv4vzaj7lssikxhnfide7ga6su9o13jr1le1mdilwn2doxa4rouuqnf1fwe1hp7228ftmgt9co3t51w49g40yiozte1g09oj64211xyvxrswiez6xwb65r31t79ddc\"\n  }, {\n    \"castegroup\" : \"rvma19js66lkf9j5k5zcet0grercl9xvomn09p1gxhta0qr5n0qt46mnptyz5vutuptgktwgennmr6yipv0w778dvvgt9e3i9as1sfhoi5msqpukbjs3uv8olryob9o2nebzjf73knvp0apqxcky930o0ofvd9xc11vibjie5h2r8pi9imqbsmsv87xjx1\",\n    \"castegroupTop\" : [ \"iulbaj64ca7heog7145p47kj2b7p2af99gjrjav407uxkoamqz0jjwa11dyijmabgdkesopo17l9dxz3qjs6vc1hdlieqolwhpliw9ttwz8zzt2ao4xbkk3ow2tmcxlhvjw6od\", \"grs0avlp3jo03sbkjvccinpi8ncgag0hmmkg5k4aolfeh\", \"258hhmb2d6ijgfzv44ikehuz9o7kwsmh8y42mj51qlexkjn9g4vjryh6osn9xj61i9ivg0i0krcnrmdl903rbh47qukoivwusrxz7bpdm5c0zb775xqndovlzx1lnqj36s\", \"47vq1fgwra4tmt7o0ycvit33pchzqivbo9hi256btyulfyni21hicd55gx9yjaqd1d7gjpay2dhsd6j4z2c90\", \"bfybz3xv7t117lmfl8frn1hbjrkxv0ghwwcsen1ffudaht7ryv8cvjog97nmcnurpa1uw14v35ztrgz95lffkdbgh\", \"3soafih354xyoreey6gnyw62onc4ssoqi4cadem9ji44davglg2tgxfsrhljxn2aych4s4gz7m8dcuqwvgq5xf7g1j5k3sznr5d1l\" ],\n    \"score\" : 6.942579220222999,\n    \"probabilityCalibrated\" : 0.15525138954583317,\n    \"name\" : \"Aline Bradtke MD\",\n    \"probabilityAltCalibrated\" : 0.15372566313625136,\n    \"id\" : \"f6k8\",\n    \"castegroupAlt\" : \"81dlfvuhj3mzl0oiw4inazm25mua6ld8t43l73r28\",\n    \"script\" : \"w6gaui08v9e60drqzejycqksebt7ekysepbe3nzoxkiak7wzclrubo5ncpumsisfg5g85cq44dt9mexqx3uzelix5n49b2\"\n  }, {\n    \"castegroup\" : \"rm7ramd3rcy9b9jcx6szhbexbxcncws00k40lhty7z1r9c5v5cvf4bmmh1e2w48u78gt9v36rh07xdd2lmmaq7enwyvcgl1h95vzi2fofhf12q0amsiowraatvdft6jsdc16lcb22s9hma9\",\n    \"castegroupTop\" : [ \"8cv1xiehc12o1qirk8xuwzdtyth2m7rhpi26g24cw3s\", \"5uk1nb8v0vy7nvd9bd4n503lw97dzxqhhbl1aic\", \"lmyp8tsw57hbwndzaxbfw3nz0yw8iy5cmj4y84wp8q4bi6dy7srh2jlwmrnsfi1rr4fahi0milwukxi928ew6q0ub293v2c4ugylklzrkdaxadnddabbuachcnsb5090pc32m4x65hebkrw1elkf3seqtvii86w1d\", \"bxzepzx12k9cpktub9y96oewppxoslaa4xgfl7ers6pow0kupwm806xmayq2kgu2cf4gzxc2qb8963u03uzhi1bn1rl4koq3mmaat5cyz2wwmpqwfvh1e3pjm1y5dpjbvbs1hj4bcwfxkygif4ro2tq2o8tmxrgk7ph9h7f\", \"qfv982zcztvcwec9tbp1su0o32vdy0asdjpvwf3cq5zu4ucsn98jpfufa2k2gmg9olb8sdd8gvgnifesrjmyo6rku3ic97355c6en33sgkmz0dby09fdtckt11m7l361y1luzpa1vsaye8tlayabor3rq8z28yxwboh8e7vmzyoj6cppls4uktugy7rf1x3na\", \"q0x6dfg5fxle6hfcc67zhsk1u8dgnfxs1mbi0lknhpzz81zb71wyamgria4kd3oibvnl9cso8zjr8zdleiksnrhlssjc8kl15i093okcmzxl3wi72r37fskbvay23lkrxiekuabqkoezoutpby92rs1ad0147zit4qd47liny7pf\", \"cfp337uzf0zxmj1is4efb5898upb39lr3imwb98m9dnk6pkv3mu7ncnnhi2ms5bp2dlpfa41pdg1ag250221ww1k1wi5krhavy0a3q60rek6aie6p1w6flbbpkxaqbcq01ij21xc76t53l5bca7gf8tw1ttrz5seewbnkoaw\", \"nteej2ayb4ob04w29phe90xbotzce84fsd2rbh797lqkmidbmow92d98she7qbjyrf81i04toqvmvcjylou3y38wiw9usp5m354gurti9su3a3fvad53bn9vrtxofb7pqqqfopysjh8\" ],\n    \"score\" : 24.889290318249436,\n    \"probabilityCalibrated\" : -0.2703158781204775,\n    \"name\" : \"Tad Luettgen\",\n    \"probabilityAltCalibrated\" : 0.8703095840496913,\n    \"id\" : \"vf7i\",\n    \"castegroupAlt\" : \"wwp7usn6mnitbyqhhq3f769bhk94ly4p8hyoh10sbzwqa6egslc9s86iz79eocnunk006cvhkyfnm3pckhl9xqh7jflrujcmx1bg826n0chwof55klzat88apptulpjx0xrsamb4kujmvjcvd9d1r4pfbw\",\n    \"script\" : \"hf92ernthlpfthjyot4m2eiwv00yjl75b9gvss6csxcdhfvhazdl1ebazbhk7lrmezl9t9guipgxcyp8o82po0fsw7u1yolfs\"\n  }, {\n    \"castegroup\" : \"l9vmevkj038tst4twjbdxs7f9taqb6djmg09irfjnbahtlg6dv70emkyqr5400903e6qq87hsshe2hhawh981tmdjkzo71ji9gdr541zymfvk3x49cm5d3a2gf9i45bns9yi\",\n    \"castegroupTop\" : [ \"9ibdchnalunp4j0o0ts0k94vowug7t425oj4y2482c5ehax46nx87aeav3osk3u9uyximksoo3wffkx2qhddw288dp37h9t4fy0na3dtronvikr3w78j0yq2v8azlrc7wkd7vwl0wyco0296lvbee\", \"hp6oupkobnu5shns12wly2exv86gn4uvh0aqyk9kypff5j5syrrc80dt6240xx9r3gx4n180sqsc5r1xn47f\", \"wmdoovsnuxulbtnc835mf6w1mqln7ci97hww1v4tktw8d2p4j2um3d0rcdyvdzlkep5\" ],\n    \"score\" : 26.633830772046817,\n    \"probabilityCalibrated\" : 0.7927370434768062,\n    \"name\" : \"Miss Nery Denesik\",\n    \"probabilityAltCalibrated\" : 0.04954746489338535,\n    \"id\" : \"40wk\",\n    \"castegroupAlt\" : \"vpm3ln2b76rl4v7ehrlgd8oudz1n3n6rownuux4msqxzz6aazfaoov6lzl8lppidqtej0bkxbcy9hu477arvuspt4g4vsz4qpv79n8qkv02t92ithopp8q47x395ubrmg2m90\",\n    \"script\" : \"cm9k31lti410t77i\"\n  }, {\n    \"castegroup\" : \"a5maun1k1r5mkj\",\n    \"castegroupTop\" : [ \"h496db07p98e6mglfv36td042blezke19yeh7dxizksay\", \"e66h4hv52ddnz4sm5qpqa7829obhwona5ubz7t6fxnyca3ywpu5fdhd\", \"gndt4j6de6jsu7puuhdo\", \"delprvc5eeaelnn7aktmil04mjgdvjg\", \"lyvzeg5kj712uxre0tbgi9ibow1fh17y6danld33qxz59xr6r7gykgwe284z7tn7hw28uwieooqbr3sm237b13pn5movyur09xiy9wmloiz60g5r9zyzze1xwmwbq80mz2f96m7cfwmgpvr8zo7zxzttzzzroph4e95eulyi9erckdsqp6\", \"mmjytmpmy1yysn7qdqpd7uv58vqsa6k1a8919c2r9k9fpsezsjvipvujpfhejf1qc5pjnn9f2y5gnqrsjrlect25kvl7xzb8wiypru6cui0yotfgtjyf79lvfgcbheurnpsqyg08up58sklckmi2zbgpvt0dnnt036z\", \"br5dbpmt0gmdfg8xl35wroj789n80c8fyqx18xxqfwbt21k043pt\" ],\n    \"score\" : 46.05375905536129,\n    \"probabilityCalibrated\" : 0.5009130100665156,\n    \"name\" : \"Vernetta Heller\",\n    \"probabilityAltCalibrated\" : -0.04022212840847583,\n    \"id\" : \"987n\",\n    \"castegroupAlt\" : \"n2hgtvak9co0hcy5i2mpt4a43evtofcfojgzd3ybpybtxtieu183catqtj3uhaus9y6qgjaui02kw6c9pd7kp1gz3re3gjx1vk4hn71hyx9zgc5tbq72\",\n    \"script\" : \"trn98zp55bq8s8vf9f7vm67ffc80a0chs89hz5i3cv4hqkoykec2zcbpu2vfl9mjz6h344ewils8uyhonjkh82knccqog63vspmcihi405av0rvib03gsi3pw6l53rjgggc21r5iaansdqt0c\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e79b678a-2ee0-3384-87a7-9e24eb6eca06",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "castegroupIndianFullBatch",
          "schema" : {
            "properties" : {
              "personalNames" : {
                "description" : "Caste group-coded names",
                "items" : {
                  "$ref" : "#/components/schemas/PersonalNameCastegroupOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "BatchPersonalNameCastegroupOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 258
  }, {
    "id" : "c3615b4e-b308-3bf5-bb82-588020278181",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name. - 403",
    "request" : {
      "urlPath" : "/api2/json/castegroupIndianFull/g4fyofmoayd7ixjm2taklop0fjz7mzitf/ows1jqfbi80gzy4sggm0sm8nah1tz7yqqlsrz43hmmh7sfrp4stra7eb4dukzdjwcnftcpwcfxbqgsf0v36fzlnaixyo46cuotzxz620iinxbxe2ctyw",
      "method" : "GET"
    },
    "response" : {
      "status" : 403
    },
    "uuid" : "c3615b4e-b308-3bf5-bb82-588020278181",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "castegroupIndianFull"
        }
      }
    },
    "insertionIndex" : 259
  }, {
    "id" : "ef318dfa-82e5-3d4e-b70b-059417b2e952",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name. - 401",
    "request" : {
      "urlPath" : "/api2/json/castegroupIndianFull/uct2wths1djnt5864gjw454c4z0r6d11b4qvjes10tg8fti2xy339nvd4850rg6llzak41bc5tim08omq3k86tujkgow54q6lt9xuropchzxj6y5/tfymv1ispj9ezxey53m1pf1521k1qcq69zf",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "ef318dfa-82e5-3d4e-b70b-059417b2e952",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "castegroupIndianFull"
        }
      }
    },
    "insertionIndex" : 260
  }, {
    "id" : "5957c35a-de93-3d54-9b72-f89b8d336c94",
    "name" : "[USES 10 UNITS PER NAME] Infer the likely Indian name castegroup of a personal full name. (application/json)",
    "request" : {
      "urlPath" : "/api2/json/castegroupIndianFull/zjrtax0ydvcahp3sec8oavneo4zravxhnicropdlm3v6lv5j5n5hqmlricn2q4uv5jdnmchapp3xnbiezezaowwqkszju1dvc1pml0zvno3sp27c0gy3gyelmhxx43cax89zzdbyvbkjgwbrlysptlxu9qi5h5levxl/xjacziheimw4j1ijjju3y2os9jrb6uqo122wps3vrdf3jf8p2cxulftvktgedv6wc6hfpoodiuvgnwvhb42kz3id7as5zl84o76rzpn8tp8hfb5i6nunbm19t0vyt74g3debd4qz2e3wuxruz50tr9c5ht6f6a2sf8f05s770dfk",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"castegroup\" : \"xh7udxw4dd5ohak3lgw6c8ucbbyjh2e9\",\n  \"castegroupTop\" : [ \"lplmes5qa7t4eahdl43u8kt4ru9dtj3dtjjad92qfu5ubowxnexrr53c6tid9lbo7i11tjse9rk5i8y9rvjp9\", \"ba194brpi9fjd6w5w5ynj306slanzq3oumwikq0rqnjqg36umvc0zrrdk6nceuwpypvrqcy809tv6aijd9efrm6mde8xfylo3ssi9mu5szyyz8xlfoiqch3oaz8fpb2ijdhufy3\", \"4v8feffcr6w4q90cmx1symusiidpg3ar9heixs7yin0k1910jp7xuxundf51q5oi3j5iwk9vy9d9il48mfs4l9\", \"124b8twhx0ed8te0wdrkz5fkabcn3beumd7y8gj51es81eyt4ga4cr9f4d8calmfl1y8efrtxlrc52oo84e10k\", \"9xzgfk7m97q6y6o8v0mvcnkg79mhgjiyi5miaypdeq3fkbmhabl88usth7qpp1wq7wusfb8zx57367ar7hw28hf9hbzr5omq48c0vyws822sv7btm4rx41p21vyf5czgq2hndbd98m4l\" ],\n  \"score\" : 45.709590212870175,\n  \"probabilityCalibrated\" : 0.3103953562633319,\n  \"name\" : \"Glen Lebsack\",\n  \"probabilityAltCalibrated\" : -0.725005589051366,\n  \"id\" : \"22wv\",\n  \"castegroupAlt\" : \"2lfqcypq6lqfav7kmpuibw9favxgss7e8kt81d7vrp404lt7kuu54ltz59cmg0drkfohkcu317l0d1ldpvt477vgbevyj7afndcw7azyi0bcep0ztbzpe3puya9jwmhegy9ncxgg7ykjwy06r886vlq24w0es3zm5074psgm7duvahc\",\n  \"script\" : \"qhsthn0qy465cfccnye62dgmcty0dffzvotfw8rwnd7zai3aygyfmwfizatc1z8\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5957c35a-de93-3d54-9b72-f89b8d336c94",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "castegroupIndianFull",
          "schema" : {
            "description" : "Caste group-coded names",
            "properties" : {
              "castegroup" : {
                "description" : "Most likely caste group",
                "type" : "string"
              },
              "castegroupAlt" : {
                "description" : "Second best alternative : caste group ",
                "type" : "string"
              },
              "castegroupTop" : {
                "description" : "List caste group (top 10)",
                "items" : {
                  "description" : "List caste group (top 10)",
                  "type" : "string"
                },
                "type" : "array"
              },
              "id" : {
                "type" : "string"
              },
              "name" : {
                "description" : "The input name.",
                "type" : "string"
              },
              "probabilityAltCalibrated" : {
                "description" : "The calibrated probability for country OR countryAlt to have been guessed correctly. -1 = still calibrating. ",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "probabilityCalibrated" : {
                "description" : "The calibrated probability for country to have been guessed correctly. -1 = still calibrating. ",
                "format" : "double",
                "maximum" : 1,
                "minimum" : -1,
                "type" : "number"
              },
              "score" : {
                "description" : "Higher score is better, but score is not normalized. Use calibratedProbability if available. ",
                "format" : "double",
                "maximum" : 100,
                "minimum" : 0,
                "type" : "number"
              },
              "script" : {
                "type" : "string"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "PersonalNameCastegroupOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 261
  }, {
    "id" : "61796353-604a-330e-90eb-e74a804f5056",
    "name" : "Print historical API usage (in an aggregated view, by service, by day/hour/min). - 401",
    "request" : {
      "urlPath" : "/api2/json/apiUsageHistoryAggregate",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "61796353-604a-330e-90eb-e74a804f5056",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "apiUsageHistoryAggregate"
        }
      }
    },
    "insertionIndex" : 262
  }, {
    "id" : "1de1e2e4-2857-3dc4-a1b4-7e2596b50819",
    "name" : "Print historical API usage (in an aggregated view, by service, by day/hour/min). (application/json)",
    "request" : {
      "urlPath" : "/api2/json/apiUsageHistoryAggregate",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"rowHeaders\" : [ \"u7vep7ckgg58kbilnin03yy2els1tuz49yun4tl4pa1xotkuhq2ml3ba6z5m3lu57xy0ce765drfaucvgxkac4n7gs1y15tv1989x9vbvuvad2j862ddqaghap2auvdwbwa25e1394lbhbhl9dyyn0z8uh3xb3168shgubcipyuhr3lyi6d6xbvg98nrn5i6q4\", \"7llshb7c\", \"kq5au\", \"qnegnkgcbstno2xmym87o412rqyo0t7mmnagiuk4r1pieh27268s9gypnpzah12g3dj1qw3zo4dwmtjowac3axze7wukqe6ew3uksaojrtzptqojywzyug9sag5jv3semf0o33sqsolju836mar9txc\", \"gpuc7lm2fmrdjdkczbmsz9ygyoyuyoaifsmw9j9i2mswdab4ej1wsvbypyez5uygs\", \"fobgk4hy9ur8ufyqg58pqoxd51toyd9gylo7ftug92i9tgywt1t7mayps4kunqtvzpx4h83nlnjz88qpzfjerj1hdkzsebkbnoahmts5ktxpsr9lylsi2k2l0jhrfgu0iz7mubiwsenr854o2pebd\" ],\n  \"data\" : [ [ 1352379686, 268849738, 1926099827, 778124090, 215398264 ], [ 2025942706, 77784414, 817885644, 211552682, 1481282568, 1295739388 ], [ 570490369, 429502829, 1358698447, 2072922301 ] ],\n  \"historyTruncated\" : true,\n  \"colHeaders\" : [ \"jobf2lxnxvl7skr8edfmsm92dbyqfy7kp377o1rbpotgdgvhcydublpthlceaoqn3tggytyqlkfzqedz6oqe1vsazwmnjtsysrq3gdyf6eu2\", \"ufohi118ecjbuddk8s8bme0mc4he77kuqkhf7s2be0b07uqad35poeqg8njqk513ezz13l0ufbp1ri80tnqoj2k8ibr5xldjdjs699mgh9burer6i6w7i60p00\", \"1hpuaoosiq6moklsbpljcrv59k393xvhlsvszijkmvkcrmnohizlxvudxggtxpg920jlw46s4u8nfqf16i5un2jbp2djlt78509upc6t8eoy1vg3kkjo0sfr6pr145jm5lsavlryjvyv7r2fhcegjthaguy17q9c0ieb4fv\", \"4q8x3wmuczb49xvakcr5yt03hh5ovvohgzbb8thhe68ws040l5ingdwvrwitww2lg932zk3ec60jucep3h8c9olf2jqjz1umi497b8hiepmt6zdvi36elug4wuza97cwbjbe9lil85mvc1dbmgf8x\", \"rgkg2id95l0ocx4uanz5t0wyalloh9pe6qjdeg55xr8ai0d3kzogkwxh0svnr0ul8mnvlvbofd1v81fea8zev0d6fm1m5o4fmx3adk2v8f0q8gghve6jaf00\", \"9k1oxhgktz5mk4hdz4xi2loe2zxlxmbtl4r8y4f9oxeq9tc77t49tasxdextzl9pkn1ghrt6v336wbat5o1xcdop5kkilv032j7uub8a92k2uanswt4j7i3rbmpu79r4zzww4vdy0bmrjfzr0t4eiifigihgzywjrb86gs86wc0f2mq0pi1jwpy0622drz6eif7mtd5e\", \"lbb6cp2767z67fuy7ls6k8d1r8c5so9tqy5mfe06y8z8cqpapev4yd92s1lkb5eimz2nkblbxj6uvbt4n87mkgxnx0k5cqay7z2s8pesm6mnem6rci4luusu8o57a7p2uc1auknvq1d79intek\" ],\n  \"totalUsage\" : 1661699411260475158,\n  \"periodStart\" : 710194725653196782,\n  \"periodEnd\" : 3935218500091766826,\n  \"timeUnit\" : \"2023-01-11T13:41:57.991906Z\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1de1e2e4-2857-3dc4-a1b4-7e2596b50819",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "apiUsageHistoryAggregate",
          "schema" : {
            "properties" : {
              "colHeaders" : {
                "description" : "apiServices as column headers ",
                "items" : {
                  "description" : "apiServices as column headers ",
                  "type" : "string"
                },
                "type" : "array"
              },
              "data" : {
                "description" : "Data points : usage per DAY, WEEK or MONTH and per apiService",
                "items" : {
                  "description" : "Data points : usage per DAY, WEEK or MONTH and per apiService",
                  "items" : {
                    "description" : "Data points : usage per DAY, WEEK or MONTH and per apiService",
                    "format" : "int32",
                    "type" : "integer"
                  },
                  "type" : "array"
                },
                "type" : "array"
              },
              "historyTruncated" : {
                "description" : "If the history was truncaded due to data limit",
                "type" : "boolean"
              },
              "periodEnd" : {
                "description" : "End datetime of the reporting period",
                "format" : "int64",
                "type" : "integer"
              },
              "periodStart" : {
                "description" : "Start datetime of the reporting period",
                "format" : "int64",
                "type" : "integer"
              },
              "rowHeaders" : {
                "description" : "dates as row headers ",
                "items" : {
                  "description" : "dates as row headers ",
                  "type" : "string"
                },
                "type" : "array"
              },
              "timeUnit" : {
                "description" : "Time unit is DAY, WEEK or MONTH depending on prior usage",
                "type" : "string"
              },
              "totalUsage" : {
                "description" : "Total usage in the current period",
                "format" : "int64",
                "type" : "integer"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "APIUsageAggregatedOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 263
  }, {
    "id" : "4f458177-8f70-380e-a014-c1c28dcbdd6f",
    "name" : "Print historical API usage. - 401",
    "request" : {
      "urlPath" : "/api2/json/apiUsageHistory",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "4f458177-8f70-380e-a014-c1c28dcbdd6f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "apiUsageHistory"
        }
      }
    },
    "insertionIndex" : 264
  }, {
    "id" : "20ea54a9-befb-3de2-a3fa-d10e4eecdaf3",
    "name" : "Print historical API usage. (application/json)",
    "request" : {
      "urlPath" : "/api2/json/apiUsageHistory",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"detailedUsage\" : [ {\n    \"apiKey\" : {\n      \"striped\" : false,\n      \"apiKey\" : \"9qbij5xpssa2t6wyamm0aca55hi\",\n      \"partner\" : true,\n      \"corporate\" : true,\n      \"anonymized\" : false,\n      \"learnable\" : false,\n      \"admin\" : false,\n      \"disabled\" : true,\n      \"userId\" : \"36is\",\n      \"vetted\" : true\n    },\n    \"serviceFeaturesUsage\" : { },\n    \"apiService\" : \"iraryc71pv7uekx1ne1umtffwa03a0harphqsywljcq3dwirymbpv3pfo4obyrzy511b2hk22xoferpuwv1ywcbzc0txauyfzz2o5lqhelok1jwtz8r8bg1yayiplxtcdox3hipdsdn\",\n    \"createdDateTime\" : 3898373531210748583,\n    \"lastFlushedDateTime\" : 8685096022640972912,\n    \"totalUsage\" : 4071689430900734786,\n    \"hostAddress\" : \"u99sg85j0l7sfo6nt1vfzufmg604rp3hqwkq44h90ikqb1diai9sia28b2y3rxyl4kx1uzbfcpxhlsqcavn30l3wgnffw2qtki5958inzr2alb1wg3udg84wbr\",\n    \"lastUsedDateTime\" : 4184213566256984804\n  }, {\n    \"apiKey\" : {\n      \"striped\" : true,\n      \"apiKey\" : \"x72v97ksv6a7jtxzrmwy119viftbca2eb5vzp8h3s7d4pre3u590rsceybxm3o8q8c4bbmiot3jqx8isu9mwp3ax1gb8lyy6khbcliyu5euyz1bcmw5rqxbf8myjkis7uj6y55q9p740vorz3yk9t88xu4chu6ronyjxml8mhz631jaz18ohcrc15ac\",\n      \"partner\" : true,\n      \"corporate\" : false,\n      \"anonymized\" : true,\n      \"learnable\" : false,\n      \"admin\" : false,\n      \"disabled\" : true,\n      \"userId\" : \"i139\",\n      \"vetted\" : false\n    },\n    \"serviceFeaturesUsage\" : { },\n    \"apiService\" : \"9fae0xnd3dok56zl36vd0xom6yxtaum0kjig2e2l7xhxc9f7ezx23quvf6ksrwj9\",\n    \"createdDateTime\" : 8503459770669684712,\n    \"lastFlushedDateTime\" : 6762288043437185058,\n    \"totalUsage\" : 4717396698617088165,\n    \"hostAddress\" : \"duadh2fspxnq03kivu49sm4fvjdvy9pycdm0mok9i1kby8tpam2li5r42wuqbxilzzgqmqcn55b4bzztb70us7yytp476nhq7kmfckkv52wexmkhvac00a7y4n5hn5z6stp6m6jjo8uqnjzp92vi9vy6e0q2v9b75mlxgse6be37dkhtn49ygrqdswr0\",\n    \"lastUsedDateTime\" : 3321534113085632771\n  }, {\n    \"apiKey\" : {\n      \"striped\" : true,\n      \"apiKey\" : \"2ub0runwlnn2k8oty4eh5y919b3bup71tcpc6bq43pjkouo0v1qt8o2gdvuvfij10qhl6zib6gxrr7fuqxhbtuqjcmpqn4m3jstq2l3cy4yne4t5\",\n      \"partner\" : false,\n      \"corporate\" : false,\n      \"anonymized\" : false,\n      \"learnable\" : true,\n      \"admin\" : true,\n      \"disabled\" : false,\n      \"userId\" : \"55uw\",\n      \"vetted\" : false\n    },\n    \"serviceFeaturesUsage\" : { },\n    \"apiService\" : \"hdcyx9uuroumdlqrocx5xa22598aoiyufkonc1jfsbcs0p21wrzxb1015cseg3kpalwxobjrv39j58z670lgegv25i5m4u4unrye283p13i056zzarr1073r5mbwpp64kcen1bd51sbl048f7srriec8h\",\n    \"createdDateTime\" : 5159196432669305643,\n    \"lastFlushedDateTime\" : 526450435801503914,\n    \"totalUsage\" : 1296578686845392155,\n    \"hostAddress\" : \"5yea2q1d9i4ex3ofin6cuxb5l5o70zp7giy3v2m2on4l917b6g59hhkqk45irqvozjpm04gdslwid1kyth03k1\",\n    \"lastUsedDateTime\" : 2033475569551069958\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "20ea54a9-befb-3de2-a3fa-d10e4eecdaf3",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "apiUsageHistory",
          "schema" : {
            "properties" : {
              "detailedUsage" : {
                "description" : "Detailed usage as reported by the deduplicating API counter.",
                "items" : {
                  "$ref" : "#/components/schemas/APICounterV2Out"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "APIUsageHistoryOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 265
  }, {
    "id" : "7dc1c712-6663-3dd3-8b52-f7764b203de6",
    "name" : "Print current API usage. - 401",
    "request" : {
      "urlPath" : "/api2/json/apiUsage",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "7dc1c712-6663-3dd3-8b52-f7764b203de6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "apiUsage"
        }
      }
    },
    "insertionIndex" : 266
  }, {
    "id" : "fffbbc36-681b-3f6b-94fe-254108412905",
    "name" : "Print current API usage. (application/json)",
    "request" : {
      "urlPath" : "/api2/json/apiUsage",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"overageInclTax\" : 7.837263981073526E307,\n  \"overageQuantity\" : 5190124492254690875,\n  \"billingPeriod\" : {\n    \"apiKey\" : \"201cdmgcwnlmoxh1zwm9zgbfa6nos6nzprnrjpbscw7rgtki7iena3f9pcqod7eif6iy16mdbr8ka0wtjjtj8i2559qgoo1kauv8ucqmdb\",\n    \"periodStarted\" : 7104334610474436994,\n    \"stripeCurrentPeriodEnd\" : 7678507585886866364,\n    \"usage\" : 520745578972796117,\n    \"hardLimit\" : 8890600888541904759,\n    \"periodEnded\" : 7798389972312211310,\n    \"subscriptionStarted\" : 495653665846102654,\n    \"billingStatus\" : \"9q174teogmlkl70hn357iahwzxoogvjkjs27nio494sz34\",\n    \"softLimit\" : 4678065572665237742,\n    \"stripeCurrentPeriodStart\" : 1355611800194393994\n  },\n  \"overageCurrency\" : \"ILS\",\n  \"subscription\" : {\n    \"stripeStatus\" : \"9twk0it6ec8smf5\",\n    \"planBaseFeesKey\" : \"0ktn6z46fh9\",\n    \"planQuota\" : 8780513252603287519,\n    \"apiKey\" : \"djyexacxr2p4sfl1zd43rlfnnr73gofuaozprd8c9s7mfiv588c4ssewn7ufsjrqbee6724gs08q9oi9eebug3vqxf2dwzm7zxhl5z7cidwpc32dw74j05uk9vlbs40qx4yef2be95tz3di0oypp2q3yn3pex4kzi0sljjh6v2kkjt7j0s5ftq1db25yz1i03\",\n    \"priceOverageUSD\" : 1.3012235410950447E308,\n    \"priceUSD\" : 1.3693203090847738E308,\n    \"planStarted\" : 2260785862249882874,\n    \"planName\" : \"Kirsten Gleason\",\n    \"planStatus\" : \"vn7py0bg886oalj74wyrkbm7xncvqon9feeubi6j5nxhxvg13mkebtmszxshmfxg25g3ay8nuu5ynt63yl1pdczzfldmmskqrl0fpxiyyzb7jatyy4g7rsmwkyteez2vakcedbyet8qakf32qweajllwushgybuwsxd6af26bs70742sj3feiimdmvkc65kvg47\",\n    \"priceOverage\" : 9.68630646525535E307,\n    \"userId\" : \"5ha4\",\n    \"planEnded\" : 5735228492449884931,\n    \"taxRate\" : 1.208401651131372E308,\n    \"price\" : 1.5299540912840816E308,\n    \"currency\" : \"JPY\",\n    \"currencyFactor\" : 1.580889090252117E308,\n    \"stripeSubscription\" : \"te81xifqhqnpejrj41k439gc8o52n163djyrmciph6xkkuo2nztgupldns6qvhersfqrkyfh1ei6wzskteh24ny929vgj83rk2f7fidq3pp5hubwgu051h4xc05wbktkx7elm7r59\",\n    \"stripeCustomerId\" : \"zw11\",\n    \"priorPlanStarted\" : 7011331052710509261\n  },\n  \"overageExclTax\" : 9.737613652844079E307\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fffbbc36-681b-3f6b-94fe-254108412905",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "apiUsage",
          "schema" : {
            "properties" : {
              "billingPeriod" : {
                "$ref" : "#/components/schemas/APIBillingPeriodUsageOut"
              },
              "overageCurrency" : {
                "description" : "Currency of the overage amount.",
                "type" : "string"
              },
              "overageExclTax" : {
                "description" : "Overage amount including any tax.",
                "format" : "double",
                "type" : "number"
              },
              "overageInclTax" : {
                "description" : "Overage amount including tax (if applicable).",
                "format" : "double",
                "type" : "number"
              },
              "overageQuantity" : {
                "description" : "Quantity above monthly quota of the current subscritpion, in units.",
                "format" : "int64",
                "type" : "integer"
              },
              "subscription" : {
                "$ref" : "#/components/schemas/APIPlanSubscriptionOut"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "APICurrentUsageOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 267
  }, {
    "id" : "66fa409e-fc64-3d9f-8205-c4e59bd6230e",
    "name" : "Prints the current status of the classifiers. A classifier name in apiStatus corresponds to a service name in apiServices. - 401",
    "request" : {
      "urlPath" : "/api2/json/apiStatus",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "66fa409e-fc64-3d9f-8205-c4e59bd6230e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "apiStatus"
        }
      }
    },
    "insertionIndex" : 268
  }, {
    "id" : "d93c4c23-05c8-3e50-84bf-33ea4612793e",
    "name" : "Prints the current status of the classifiers. A classifier name in apiStatus corresponds to a service name in apiServices. (application/json)",
    "request" : {
      "urlPath" : "/api2/json/apiStatus",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"classifiers\" : [ {\n    \"probabilityCalibrated\" : false,\n    \"shuttingDown\" : false,\n    \"learning\" : true,\n    \"classifierName\" : \"Tora Brown\",\n    \"serving\" : false\n  } ],\n  \"softwareVersion\" : {\n    \"softwareNameAndVersion\" : \"kvppa0xuonksbfut0aesvxfe65att5i9cgsrkmbgkrh064l61n5da13ok7zymj0f3508pq0rz494x8ggnhjm2upty4ec9u8qx5iv1synyhfqx3io6lmsnv2g2v9r2utktua305njogwf023hx7sdhpgmku5kdgoi0b06a5\",\n    \"softwareVersion\" : [ 482157407, 1895619354, 905457802 ]\n  }\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d93c4c23-05c8-3e50-84bf-33ea4612793e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "apiStatus",
          "schema" : {
            "properties" : {
              "classifiers" : {
                "description" : "The list of classifiers and versions.",
                "items" : {
                  "$ref" : "#/components/schemas/APIClassifierOut"
                },
                "type" : "array"
              },
              "softwareVersion" : {
                "$ref" : "#/components/schemas/SoftwareVersionOut"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "APIClassifiersStatusOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 269
  }, {
    "id" : "f5542473-073d-3617-8480-a6bd67e154e4",
    "name" : "List of classification services and usage cost in Units per classification (default is 1=ONE Unit). Some API endpoints (ex. Corridor) combine multiple classifiers. - 401",
    "request" : {
      "urlPath" : "/api2/json/apiServices",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "f5542473-073d-3617-8480-a6bd67e154e4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "availableServices"
        }
      }
    },
    "insertionIndex" : 270
  }, {
    "id" : "928d2386-7f8a-30b1-9f1e-91c1be55670c",
    "name" : "List of classification services and usage cost in Units per classification (default is 1=ONE Unit). Some API endpoints (ex. Corridor) combine multiple classifiers. (application/json)",
    "request" : {
      "urlPath" : "/api2/json/apiServices",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"apiServices\" : [ {\n    \"costInUnits\" : 1203638489,\n    \"serviceGroup\" : \"cz3ybd76khtbezgn917fdtie48q8kwamb4nz7s84acjtnycdg40kdcla1a7j3s353xrlc5au761em0jviqceubs2rsnwpt1jp9b7go3fq2bvtoqhkv80e600dz1abqkf05ij8\",\n    \"serviceName\" : \"Jerald Boyer\"\n  }, {\n    \"costInUnits\" : 269896034,\n    \"serviceGroup\" : \"ufhao2pu2417eknlzynjggmitfbdil9q0dmo1w5gwreeyu854kqu40j4jovwtc6o5vnmcz7ulf5i8abe4qzhvff79nub0374qn1qu7m8dyylmdnr417rnhu7fnurtqhod7cel8idbx97iyr1fuqnvf\",\n    \"serviceName\" : \"Elias Ortiz\"\n  }, {\n    \"costInUnits\" : 922592384,\n    \"serviceGroup\" : \"b2ej4k2hu3f8wn6ab3jzn4d6qzacnwvjna9oc676xk0iuhwgdfr3nfayftjfo7bghv36tz4hs3lnfesw06oz6r2wdnhu5fgdumwo3mgob49x2yq3sh5pxytmdldouk1mlmbnuvkihtahqx3wcs4i6e4f28nrgenczwerjyakvvaztvrn9e4e3hm06379lhtykj4whn\",\n    \"serviceName\" : \"Genie Wuckert\"\n  }, {\n    \"costInUnits\" : 1180953611,\n    \"serviceGroup\" : \"9i6pcao1ya1sr8mrgjpxcdl08g2q66k71h0hsqr80605wbxl8pujq4m2ynqm3bc632xntg77y8z4bc7yhao8vzqop5lp52otkx51zgxkkwiposj13zj8jqi16tx4n5ph4dfjevkyqj8kogxuqz2f6gl9dg7r19e4ei9fyzw2jl3gq\",\n    \"serviceName\" : \"Randolph Bruen\"\n  }, {\n    \"costInUnits\" : 1302590056,\n    \"serviceGroup\" : \"jbk9n0egfd8puwzzeg5976t98p4omqqg1o4tivpj7srdnv6cyycwgahs2jvkpgzncgn3qln30v67qh6vglwqs2jyr04xgvre671374pjirqdy227v2ygi2i5bz8bvntxg6n0fybn9n\",\n    \"serviceName\" : \"Philip Turner DDS\"\n  }, {\n    \"costInUnits\" : 1722565446,\n    \"serviceGroup\" : \"m9ztjwmluwus2viivv0olaliynkh7tz9khjhpzac2ye89p82z5mcxgazvstukaxww3gma9dkwr4ah6ahfsvkoehwv2\",\n    \"serviceName\" : \"Ms. Lou Cartwright\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "928d2386-7f8a-30b1-9f1e-91c1be55670c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "availableServices",
          "schema" : {
            "properties" : {
              "apiServices" : {
                "description" : "List of API Services",
                "items" : {
                  "$ref" : "#/components/schemas/APIServiceOut"
                },
                "type" : "array"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "APIServicesOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 271
  }, {
    "id" : "623b4bfa-9fbb-312d-b73d-d8a3f9fc35fe",
    "name" : "Read API Key info. - 401",
    "request" : {
      "urlPath" : "/api2/json/apiKeyInfo",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "623b4bfa-9fbb-312d-b73d-d8a3f9fc35fe",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "apiKeyInfo"
        }
      }
    },
    "insertionIndex" : 272
  }, {
    "id" : "12bc1ed6-d239-3fcf-8528-2b8fd4b36f63",
    "name" : "Read API Key info. (application/json)",
    "request" : {
      "urlPath" : "/api2/json/apiKeyInfo",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"striped\" : false,\n  \"apiKey\" : \"kkwz0k6hl6d8t6mkh1bzktfkdwj0mgdunrs\",\n  \"partner\" : true,\n  \"corporate\" : false,\n  \"anonymized\" : false,\n  \"learnable\" : false,\n  \"admin\" : false,\n  \"disabled\" : false,\n  \"userId\" : \"u7ui\",\n  \"vetted\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "12bc1ed6-d239-3fcf-8528-2b8fd4b36f63",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "apiKeyInfo",
          "schema" : {
            "properties" : {
              "admin" : {
                "description" : "The API Key has admin role.",
                "type" : "boolean"
              },
              "anonymized" : {
                "description" : "The API Key is anonymized (using SHA-252 digest for logging). Set learnable=false and anonymized=true for highest privacy (ie. to forget data as it's processed).",
                "type" : "boolean"
              },
              "apiKey" : {
                "description" : "The user API Key.",
                "type" : "string",
                "xml" : {
                  "name" : "api_key"
                }
              },
              "corporate" : {
                "description" : "The API Key has role corporate (ex SWIFT payments instead of Stripe payments).",
                "type" : "boolean"
              },
              "disabled" : {
                "description" : "The API Key is temporarily or permanently disabled.",
                "type" : "boolean"
              },
              "learnable" : {
                "description" : "The API Key is learnable (without assuming truthfulness) for machine learning. Set learnable=false and anonymized=true for highest privacy (ie. to forget data as it's processed).",
                "type" : "boolean"
              },
              "partner" : {
                "description" : "The API Key has partner role.",
                "type" : "boolean"
              },
              "striped" : {
                "description" : "The API Key is associated to a valid Stripe account.",
                "type" : "boolean"
              },
              "userId" : {
                "description" : "The user identifier.",
                "type" : "string"
              },
              "vetted" : {
                "description" : "The API Key is vetted (assumed truthful) for machine learning.",
                "type" : "boolean"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "APIKeyOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 273
  }, {
    "id" : "a44b8668-4852-3c9f-8a7a-d9d06bcfd6ea",
    "name" : "Activate/deactivate anonymization for a source. - 401",
    "request" : {
      "urlPath" : "/api2/json/anonymize/42glhqlqx9zzbup585oqrjqxsaztr8c941di4oze1trcaxeuqv6uojyi1mvrqhezlju7b2mwgickqcftjyz53pn9b1istpfxctjqrkdvm8ad8mbnh8pkohklavgabc0c1rk9fbywye9w8wksmjm9kby4dfxohzsn4/false/ekuf7i8s5mopu77adynwmfl5n285u8vkzsz9hje5xwc2ay0v57xdpw0e0fpqodl000pp7kmw72i08p0rwf136l59rzuv1r76dsts1uj31pv4ag6g8t9dyf7c2ryvuz2yhclo3wm0cmp1y2fcq9zoc9odr9r2a190m5b06s24kci0k1e",
      "method" : "GET"
    },
    "response" : {
      "status" : 401
    },
    "uuid" : "a44b8668-4852-3c9f-8a7a-d9d06bcfd6ea",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "anonymize"
        }
      }
    },
    "insertionIndex" : 274
  }, {
    "id" : "87eeae0d-4d61-3e75-aeff-0d5e78585b84",
    "name" : "Activate/deactivate anonymization for a source. (application/json)",
    "request" : {
      "urlPath" : "/api2/json/anonymize/avvt3zq6hg0m383dess036xqc28p6k49ofmsg60rnky1n2eqtydnajkx38azg9saddnzha2k4k35958rdpz8yu9lgvosl3u8ahqblvio24kc2/true/4x9l3aarsqympsosdl2sd1jfeigx3wqsvo70bwszg1",
      "method" : "GET",
      "headers" : {
        "Accept" : {
          "contains" : "application/json"
        }
      }
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"striped\" : false,\n  \"apiKey\" : \"d8b5jwm5feizl53xxbhz03x283nsaj94lygfiuw23vxotyxxrv6psmxaxzh8197f1hytgq3b837dclgt78mrt948kcc7hf4l2bqd1977iewqi\",\n  \"partner\" : true,\n  \"corporate\" : true,\n  \"anonymized\" : true,\n  \"learnable\" : false,\n  \"admin\" : false,\n  \"disabled\" : false,\n  \"userId\" : \"4k6e\",\n  \"vetted\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "87eeae0d-4d61-3e75-aeff-0d5e78585b84",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "anonymize",
          "schema" : {
            "properties" : {
              "admin" : {
                "description" : "The API Key has admin role.",
                "type" : "boolean"
              },
              "anonymized" : {
                "description" : "The API Key is anonymized (using SHA-252 digest for logging). Set learnable=false and anonymized=true for highest privacy (ie. to forget data as it's processed).",
                "type" : "boolean"
              },
              "apiKey" : {
                "description" : "The user API Key.",
                "type" : "string",
                "xml" : {
                  "name" : "api_key"
                }
              },
              "corporate" : {
                "description" : "The API Key has role corporate (ex SWIFT payments instead of Stripe payments).",
                "type" : "boolean"
              },
              "disabled" : {
                "description" : "The API Key is temporarily or permanently disabled.",
                "type" : "boolean"
              },
              "learnable" : {
                "description" : "The API Key is learnable (without assuming truthfulness) for machine learning. Set learnable=false and anonymized=true for highest privacy (ie. to forget data as it's processed).",
                "type" : "boolean"
              },
              "partner" : {
                "description" : "The API Key has partner role.",
                "type" : "boolean"
              },
              "striped" : {
                "description" : "The API Key is associated to a valid Stripe account.",
                "type" : "boolean"
              },
              "userId" : {
                "description" : "The user identifier.",
                "type" : "string"
              },
              "vetted" : {
                "description" : "The API Key is vetted (assumed truthful) for machine learning.",
                "type" : "boolean"
              }
            },
            "type" : "object",
            "xml" : {
              "name" : "APIKeyOut"
            }
          }
        }
      }
    },
    "insertionIndex" : 275
  } ]
}