{
  "mappings" : [ {
    "id" : "1cebfba2-e83e-4dc0-a923-6126a21230f8",
    "name" : "Updates the information about the specified namespace. Only the namespace visibi...",
    "request" : {
      "urlPath" : "/v1beta1/Ms.+Ivory+Yost",
      "method" : "PUT"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"servingVisibility\" : \"UNLISTED\",\n  \"namespaceName\" : \"Corinna Wilderman\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1cebfba2-e83e-4dc0-a923-6126a21230f8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:53:49.602131Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "proximitybeacon.namespaces.update",
          "schema" : {
            "description" : "An attachment namespace defines read and write access for all the attachments created under it. Each namespace is globally unique, and owned by one project which is the only project that can create attachments under it.",
            "properties" : {
              "namespaceName" : {
                "description" : "Resource name of this namespace. Namespaces names have the format: namespaces/namespace.",
                "type" : "string"
              },
              "servingVisibility" : {
                "description" : "Specifies what clients may receive attachments under this namespace via `beaconinfo.getforobserved`.",
                "enum" : [ "VISIBILITY_UNSPECIFIED", "UNLISTED", "PUBLIC" ],
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 0
  }, {
    "id" : "0d78b52b-31b7-4f99-bf01-6615f0ec9ba1",
    "name" : "Decommissions the specified beacon in the service. This beacon will no longer be...",
    "request" : {
      "urlPath" : "/v1beta1/Nathaniel+Kessler:decommission",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0d78b52b-31b7-4f99-bf01-6615f0ec9ba1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:53:49.60196Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "proximitybeacon.beacons.decommission",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 1
  }, {
    "id" : "1665a565-d778-4a0f-b3d0-c644f4ea280f",
    "name" : "Deactivates a beacon. Once deactivated, the API will not return information nor ...",
    "request" : {
      "urlPath" : "/v1beta1/Alan+Erdman:deactivate",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1665a565-d778-4a0f-b3d0-c644f4ea280f",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:53:49.601861Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "proximitybeacon.beacons.deactivate",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 2
  }, {
    "id" : "dab889b4-5b46-4985-9ed2-74509e7b9ea6",
    "name" : "Activates a beacon. A beacon that is active will return information and attachme...",
    "request" : {
      "urlPath" : "/v1beta1/Benito+Olson+I:activate",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "dab889b4-5b46-4985-9ed2-74509e7b9ea6",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:53:49.601778Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "proximitybeacon.beacons.activate",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 3
  }, {
    "id" : "eb5594c0-9282-4340-a1fa-e5043a2ca931",
    "name" : "List the diagnostics for a single beacon. You can also list diagnostics for all ...",
    "request" : {
      "urlPath" : "/v1beta1/Dalton+Stoltenberg/diagnostics",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"diagnostics\" : [ {\n    \"alerts\" : [ \"LOW_ACTIVITY\", \"LOW_ACTIVITY\", \"LOW_BATTERY\", \"WRONG_LOCATION\" ],\n    \"beaconName\" : \"Denisha Harvey\",\n    \"estimatedLowBatteryDate\" : {\n      \"month\" : 982294751,\n      \"year\" : 20052996,\n      \"day\" : 914805564\n    }\n  }, {\n    \"alerts\" : [ \"LOW_BATTERY\" ],\n    \"beaconName\" : \"Mr. Irwin Herman\",\n    \"estimatedLowBatteryDate\" : {\n      \"month\" : 1352724905,\n      \"year\" : 1989894777,\n      \"day\" : 1903189572\n    }\n  }, {\n    \"alerts\" : [ \"LOW_ACTIVITY\", \"LOW_BATTERY\", \"WRONG_LOCATION\", \"LOW_ACTIVITY\" ],\n    \"beaconName\" : \"Sam Bahringer\",\n    \"estimatedLowBatteryDate\" : {\n      \"month\" : 489921503,\n      \"year\" : 1508072579,\n      \"day\" : 483164821\n    }\n  } ],\n  \"nextPageToken\" : \"rdxxjhu34y8mjl52d3r1l6ptqadvitc116updl4eelw5yyo4mdsrwb24j6j8szdcsl37i8iye6229awavfwgdk56fyeem39t32btcp0o9qzmpj1qf9r5wardsv2sqhsqgej5wkxc5iq7qbn9myi9wcqfx25vokd7ujhaxa7es4rrwiu2s\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "eb5594c0-9282-4340-a1fa-e5043a2ca931",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:53:49.601684Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "proximitybeacon.beacons.diagnostics.list",
          "schema" : {
            "description" : "Response that contains the requested diagnostics.",
            "properties" : {
              "diagnostics" : {
                "description" : "The diagnostics matching the given request.",
                "items" : {
                  "$ref" : "#/components/schemas/Diagnostics"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "Token that can be used for pagination. Returned only if the request matches more beacons than can be returned in this response.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 4
  }, {
    "id" : "0b3f9bfa-0da6-445e-8068-0bccff6f0502",
    "name" : "Deletes multiple attachments on a given beacon. This operation is permanent and ...",
    "request" : {
      "urlPath" : "/v1beta1/Miss+Evan+Russel/attachments:batchDelete",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"numDeleted\" : 985947002\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0b3f9bfa-0da6-445e-8068-0bccff6f0502",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:53:49.601291Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "proximitybeacon.beacons.attachments.batchDelete",
          "schema" : {
            "description" : "Response for a request to delete attachments.",
            "properties" : {
              "numDeleted" : {
                "description" : "The number of attachments that were deleted.",
                "format" : "int32",
                "type" : "integer"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 5
  }, {
    "id" : "b8cf55ad-0379-42d3-9dda-527c71482873",
    "name" : "Associates the given data with the specified beacon. Attachment data must contai...",
    "request" : {
      "urlPath" : "/v1beta1/Andrew+Friesen/attachments",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"creationTimeMs\" : \"2022-05-08T09:49:49.600973Z\",\n  \"data\" : \"cnbzltlb426ch1kgkmnr7pxd0swjsmk6xsjvq6xu5fwqyrt741df85vvi0zlnrck0fvbzeu0tnomk4qcq5um3izdwd2ol6wugwemowenmyvsv5k9lgac\",\n  \"maxDistanceMeters\" : 6.849685309115067E307,\n  \"namespacedType\" : \"0orszpoarhfi9gk4edwlrxgvndbi7g30x8kcm7dz150sz4kqxhydl6\",\n  \"attachmentName\" : \"Herbert Reinger\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b8cf55ad-0379-42d3-9dda-527c71482873",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:53:49.601177Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "proximitybeacon.beacons.attachments.create",
          "schema" : {
            "description" : "Project-specific data associated with a beacon.",
            "properties" : {
              "attachmentName" : {
                "description" : "Resource name of this attachment. Attachment names have the format: beacons/ beacon_id/attachments/attachment_id. Leave this empty on creation.",
                "type" : "string"
              },
              "creationTimeMs" : {
                "description" : "The UTC time when this attachment was created, in milliseconds since the UNIX epoch.",
                "format" : "google-datetime",
                "type" : "string"
              },
              "data" : {
                "description" : "An opaque data container for client-provided data. Must be [base64](http://tools.ietf.org/html/rfc4648#section-4) encoded in HTTP requests, and will be so encoded (with padding) in responses. Required.",
                "format" : "byte",
                "type" : "string"
              },
              "maxDistanceMeters" : {
                "description" : "The distance away from the beacon at which this attachment should be delivered to a mobile app. Setting this to a value greater than zero indicates that the app should behave as if the beacon is \"seen\" when the mobile device is less than this distance away from the beacon. Different attachments on the same beacon can have different max distances. Note that even though this value is expressed with fractional meter precision, real-world behavior is likley to be much less precise than one meter, due to the nature of current Bluetooth radio technology. Optional. When not set or zero, the attachment should be delivered at the beacon's outer limit of detection. Negative values are invalid and return an error.",
                "format" : "double",
                "type" : "number"
              },
              "namespacedType" : {
                "description" : "Specifies what kind of attachment this is. Tells a client how to interpret the `data` field. Format is namespace/type. Namespace provides type separation between clients. Type describes the type of `data`, for use by the client when parsing the `data` field. Required.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 6
  }, {
    "id" : "e5398b4b-9b0c-436c-b240-3cccb7afb4e9",
    "name" : "Returns the attachments for the specified beacon that match the specified namesp...",
    "request" : {
      "urlPath" : "/v1beta1/Ms.+Neil+Batz/attachments",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"attachments\" : [ {\n    \"creationTimeMs\" : \"2022-05-24T09:52:49.600069Z\",\n    \"data\" : \"kvys6v8pg2yam00jq1j43ckxm8dxd0fs35alm3scz9g54579c\",\n    \"maxDistanceMeters\" : 1.958144482326214E307,\n    \"namespacedType\" : \"hvgx4fibd963flempvzn39r4he3xcc0hrfmdv4h97\",\n    \"attachmentName\" : \"Kennith Labadie\"\n  }, {\n    \"creationTimeMs\" : \"2022-12-18T08:01:49.600196Z\",\n    \"data\" : \"ify5ltujy5hc0hl9bqw9la5fo61q843ilenjzi48jx0ls3\",\n    \"maxDistanceMeters\" : 4.581768431085041E307,\n    \"namespacedType\" : \"cezym4z6n2fez5ap7w7iumh360a5cmjt2i2662zergx4bn8kkkg59vqoy07c8frkn035pru5vg2akm72qcyd6xwdc1a28lljfeb79bs1xigo7ye3yyi\",\n    \"attachmentName\" : \"Darrick Wyman\"\n  }, {\n    \"creationTimeMs\" : \"2023-03-04T09:30:49.600303Z\",\n    \"data\" : \"xfuu9138ovzuu36bdwu\",\n    \"maxDistanceMeters\" : 8.713208926282163E307,\n    \"namespacedType\" : \"ezaf9my8jlb4q0xyizbtgvlaxor6exa29w78pj64gs055y3ia5cgdo757p57upb1vymv8vrww4bsw0tsjk9oe1uvq9g\",\n    \"attachmentName\" : \"Dino Will\"\n  }, {\n    \"creationTimeMs\" : \"2022-05-02T11:11:49.600408Z\",\n    \"data\" : \"att6o2shkjksvngdgyx8hu2ifbzixft3tsobuvqdeqgpuqaisvm3heajh4seglwoj46g8bov337wj0egh35sfutew6z5k1n9g2amoox6dvvxuahdab8ktevqpps13xaa71t9h3aaq9uc7mytsz4reelo7crc33a\",\n    \"maxDistanceMeters\" : 9.466074197389748E307,\n    \"namespacedType\" : \"1754gpt8t377qgrt3snw5bo3wh18tfgynrgswgu60dki511myyakpnzidzlqxvlnf7r6t5k36rauv9lvkkv0xaerm6qfivq699rwp008z5u2kngxqzceq14xj0flk4nsci0knk5levg78nds37fkqzt9hr76n59sxiexbxvlw1sy3ek3kc0taolv70vkburz7\",\n    \"attachmentName\" : \"Mrs. Tresa Wyman\"\n  }, {\n    \"creationTimeMs\" : \"2022-09-23T08:10:49.600523Z\",\n    \"data\" : \"c7q9xukvmf76hrwh3mp4p5emtfha24k1hx5joxs0lkx9k3d3qdd3m21d\",\n    \"maxDistanceMeters\" : 1.7341995985224163E308,\n    \"namespacedType\" : \"md9rjvg86lw5lt4apoioto3zmzuv9hrirumxadjaywz37ahivimk8aubn9zo459zmhxffr4mty\",\n    \"attachmentName\" : \"Shawnna Koelpin\"\n  }, {\n    \"creationTimeMs\" : \"2023-02-22T09:30:49.60063Z\",\n    \"data\" : \"0f4lapx1kw25xhx8jqawhi2w8byf30vhp6t0zfdw0aejk6vpy\",\n    \"maxDistanceMeters\" : 6.921101720064784E307,\n    \"namespacedType\" : \"qmlvo2fkrpmwfpu8optlyyr8mbqwlh5hzz3t0lki7jpbjpasfypg9t9mbyptievdkhmvqxc5sg5eacdx72was8gny97htv8tidl2fzblvquf1polmpxy02429nhghlm1ndx4vulxy65qr4aibc0\",\n    \"attachmentName\" : \"Miss Corliss Tromp\"\n  }, {\n    \"creationTimeMs\" : \"2022-11-12T10:20:49.600743Z\",\n    \"data\" : \"wlp66vu628r8vze2g9vz9ngpf181lcn1u\",\n    \"maxDistanceMeters\" : 4.813604164523409E307,\n    \"namespacedType\" : \"4lllyehvlnufx16sl6pc5srmn4015tlkiyl9piy54bhn7r4hx494k2ladv87b71txuruzo19pkjw70ig94a2stw\",\n    \"attachmentName\" : \"Anneliese Williamson\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e5398b4b-9b0c-436c-b240-3cccb7afb4e9",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:53:49.600936Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "proximitybeacon.beacons.attachments.list",
          "schema" : {
            "description" : "Response to `ListBeaconAttachments` that contains the requested attachments.",
            "properties" : {
              "attachments" : {
                "description" : "The attachments that corresponded to the request params.",
                "items" : {
                  "$ref" : "#/components/schemas/BeaconAttachment"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 7
  }, {
    "id" : "f020f5eb-d444-44be-a274-5297f96ba3ff",
    "name" : "Updates the information about the specified beacon. **Any field that you do not ...",
    "request" : {
      "urlPath" : "/v1beta1/Creola+Dickens",
      "method" : "PUT"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"ephemeralIdRegistration\" : {\n    \"serviceEcdhPublicKey\" : \"n99zaqh4dmm934jp0m47v0jqebqvh0vlud810xw5xd3pmo5ejffx9m846y9t27x7fv7cnibthd59g2xy8e07eea3zshgdmimr9gqb32cpz6ognlq9kpu3em7j3dwvdarr4qi1y119numeq5mzx947h0mop8hat5ax8p4wmb0xdzvrf78itkqjbon8fsvyci65hh8505\",\n    \"initialClockValue\" : \"r6i31iiruh1egljc9pnem1jwklhcrgmmo98v55ltjgj\",\n    \"initialEid\" : \"c22d\",\n    \"rotationPeriodExponent\" : 6140733010314519456,\n    \"beaconEcdhPublicKey\" : \"bxc54xae8g6al9lh0i00g4v0iqnlh4yshw829adl2payzd293muo2b9jbhv1qn8c2etf09m98yr2gdamrjzie3w0\",\n    \"beaconIdentityKey\" : \"t6e4pochzjn9ac6tmx6\"\n  },\n  \"advertisedId\" : {\n    \"id\" : \"vz7h\",\n    \"type\" : \"EDDYSTONE\"\n  },\n  \"expectedStability\" : \"ROVING\",\n  \"indoorLevel\" : {\n    \"name\" : \"Casper\"\n  },\n  \"placeId\" : \"mxn7\",\n  \"description\" : \"Aliquam animi qui aut. Iure vitae aut itaque numquam debitis. Facilis molestiae eius.\",\n  \"provisioningKey\" : \"k8o3c5oftcyx78xg5n325209ssh4gskng3m8al0ehdjor8rkezaefdjbfyufq3rjqkw1mg39c5l0xndgnn58pcnsf27s9nt9jnv4bpigr1u8h9bu5f6ri89udrotz1p6qln0c2bj9scx20p8vjx4hm3akh\",\n  \"beaconName\" : \"Jean Medhurst\",\n  \"latLng\" : {\n    \"latitude\" : 1.0418469190636374E308,\n    \"longitude\" : 1.2394592677132998E308\n  },\n  \"properties\" : { },\n  \"status\" : \"INACTIVE\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f020f5eb-d444-44be-a274-5297f96ba3ff",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:53:49.600007Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "proximitybeacon.beacons.update",
          "schema" : {
            "description" : "Details of a beacon device.",
            "properties" : {
              "advertisedId" : {
                "$ref" : "#/components/schemas/AdvertisedId"
              },
              "beaconName" : {
                "description" : "Resource name of this beacon. A beacon name has the format \"beacons/N!beaconId\" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are `3` for Eddystone, `1` for iBeacon, or `5` for AltBeacon. This field must be left empty when registering. After reading a beacon, clients can use the name for future operations.",
                "type" : "string"
              },
              "description" : {
                "description" : "Free text used to identify and describe the beacon. Maximum length 140 characters. Optional.",
                "type" : "string"
              },
              "ephemeralIdRegistration" : {
                "$ref" : "#/components/schemas/EphemeralIdRegistration"
              },
              "expectedStability" : {
                "description" : "Expected location stability. This is set when the beacon is registered or updated, not automatically detected in any way. Optional.",
                "enum" : [ "STABILITY_UNSPECIFIED", "STABLE", "PORTABLE", "MOBILE", "ROVING" ],
                "type" : "string"
              },
              "indoorLevel" : {
                "$ref" : "#/components/schemas/IndoorLevel"
              },
              "latLng" : {
                "$ref" : "#/components/schemas/LatLng"
              },
              "placeId" : {
                "description" : "The [Google Places API](/places/place-id) Place ID of the place where the beacon is deployed. This is given when the beacon is registered or updated, not automatically detected in any way. Optional.",
                "type" : "string"
              },
              "properties" : {
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Properties of the beacon device, for example battery type or firmware version. Optional.",
                "type" : "object"
              },
              "provisioningKey" : {
                "description" : "Some beacons may require a user to provide an authorization key before changing any of its configuration (e.g. broadcast frames, transmit power). This field provides a place to store and control access to that key. This field is populated in responses to `GET /v1beta1/beacons/3!beaconId` from users with write access to the given beacon. That is to say: If the user is authorized to write the beacon's confidential data in the service, the service considers them authorized to configure the beacon. Note that this key grants nothing on the service, only on the beacon itself.",
                "format" : "byte",
                "type" : "string"
              },
              "status" : {
                "description" : "Current status of the beacon. Required.",
                "enum" : [ "STATUS_UNSPECIFIED", "ACTIVE", "DECOMMISSIONED", "INACTIVE" ],
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 8
  }, {
    "id" : "013930b7-6a3f-4edd-8135-b6b4f22aca44",
    "name" : "Returns detailed information about the specified beacon. Authenticate using an [...",
    "request" : {
      "urlPath" : "/v1beta1/Lynna+Haag",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"ephemeralIdRegistration\" : {\n    \"serviceEcdhPublicKey\" : \"p6uk5lz1r977rxqgvhnph5u5gohsymakbtgoumltam9xxv10t25r3qr92eexo5jhb389nl3bcmq6c91ffaz0n8jejl360a7ncb5vnv9639xqjhu5supl5yg2xdt4fcm2218erfnstjerz2stcfqws9z1run25\",\n    \"initialClockValue\" : \"1xcdeo4sdmh16sinynqcsa3rrxjua8uaymfeyjo3j9y7eom1a6l4iui24olmlvdblz8wc\",\n    \"initialEid\" : \"nlpg\",\n    \"rotationPeriodExponent\" : 7326834360262146520,\n    \"beaconEcdhPublicKey\" : \"n5kff2p1d9h\",\n    \"beaconIdentityKey\" : \"aucw8c9hyqlzd3tkje7ra087s9dwa4fxua6nlsd1doodgtqzudvm5t\"\n  },\n  \"advertisedId\" : {\n    \"id\" : \"3fus\",\n    \"type\" : \"EDDYSTONE\"\n  },\n  \"expectedStability\" : \"STABILITY_UNSPECIFIED\",\n  \"indoorLevel\" : {\n    \"name\" : \"Witting\"\n  },\n  \"placeId\" : \"574z\",\n  \"description\" : \"Dignissimos qui maxime. Optio enim veritatis dolor non porro officia mollitia. Voluptas beatae consequatur at necessitatibus optio hic.\",\n  \"provisioningKey\" : \"x8a6gvqksf1tajrnbkpsx1kax9tih8hz8f\",\n  \"beaconName\" : \"Apolonia O'Keefe\",\n  \"latLng\" : {\n    \"latitude\" : 9.323299717521833E307,\n    \"longitude\" : 4.157191647084548E306\n  },\n  \"properties\" : { },\n  \"status\" : \"INACTIVE\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "013930b7-6a3f-4edd-8135-b6b4f22aca44",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:53:49.599383Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "proximitybeacon.beacons.get",
          "schema" : {
            "description" : "Details of a beacon device.",
            "properties" : {
              "advertisedId" : {
                "$ref" : "#/components/schemas/AdvertisedId"
              },
              "beaconName" : {
                "description" : "Resource name of this beacon. A beacon name has the format \"beacons/N!beaconId\" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are `3` for Eddystone, `1` for iBeacon, or `5` for AltBeacon. This field must be left empty when registering. After reading a beacon, clients can use the name for future operations.",
                "type" : "string"
              },
              "description" : {
                "description" : "Free text used to identify and describe the beacon. Maximum length 140 characters. Optional.",
                "type" : "string"
              },
              "ephemeralIdRegistration" : {
                "$ref" : "#/components/schemas/EphemeralIdRegistration"
              },
              "expectedStability" : {
                "description" : "Expected location stability. This is set when the beacon is registered or updated, not automatically detected in any way. Optional.",
                "enum" : [ "STABILITY_UNSPECIFIED", "STABLE", "PORTABLE", "MOBILE", "ROVING" ],
                "type" : "string"
              },
              "indoorLevel" : {
                "$ref" : "#/components/schemas/IndoorLevel"
              },
              "latLng" : {
                "$ref" : "#/components/schemas/LatLng"
              },
              "placeId" : {
                "description" : "The [Google Places API](/places/place-id) Place ID of the place where the beacon is deployed. This is given when the beacon is registered or updated, not automatically detected in any way. Optional.",
                "type" : "string"
              },
              "properties" : {
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Properties of the beacon device, for example battery type or firmware version. Optional.",
                "type" : "object"
              },
              "provisioningKey" : {
                "description" : "Some beacons may require a user to provide an authorization key before changing any of its configuration (e.g. broadcast frames, transmit power). This field provides a place to store and control access to that key. This field is populated in responses to `GET /v1beta1/beacons/3!beaconId` from users with write access to the given beacon. That is to say: If the user is authorized to write the beacon's confidential data in the service, the service considers them authorized to configure the beacon. Note that this key grants nothing on the service, only on the beacon itself.",
                "format" : "byte",
                "type" : "string"
              },
              "status" : {
                "description" : "Current status of the beacon. Required.",
                "enum" : [ "STATUS_UNSPECIFIED", "ACTIVE", "DECOMMISSIONED", "INACTIVE" ],
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 9
  }, {
    "id" : "7af8b9ef-47bc-44f6-8f56-7dad45e3457d",
    "name" : "Deletes the specified beacon including all diagnostics data for the beacon as we...",
    "request" : {
      "urlPath" : "/v1beta1/Jamee+Streich",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7af8b9ef-47bc-44f6-8f56-7dad45e3457d",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:53:49.598752Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "proximitybeacon.beacons.delete",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 10
  }, {
    "id" : "0cd6a39f-85fe-4407-b2a8-2ff30de499b4",
    "name" : "Deletes the specified attachment for the given beacon. Each attachment has a uni...",
    "request" : {
      "urlPath" : "/v1beta1/Mr.+Kory+Powlowski",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0cd6a39f-85fe-4407-b2a8-2ff30de499b4",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:53:49.598671Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "proximitybeacon.beacons.attachments.delete",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 11
  }, {
    "id" : "6b689cff-3782-4cde-ab93-6539da068b19",
    "name" : "Lists all attachment namespaces owned by your Google Developers Console project....",
    "request" : {
      "urlPath" : "/v1beta1/namespaces",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"namespaces\" : [ {\n    \"servingVisibility\" : \"UNLISTED\",\n    \"namespaceName\" : \"Ngoc Lesch\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "6b689cff-3782-4cde-ab93-6539da068b19",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:53:49.598563Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "proximitybeacon.namespaces.list",
          "schema" : {
            "description" : "Response to ListNamespacesRequest that contains all the project's namespaces.",
            "properties" : {
              "namespaces" : {
                "description" : "The attachments that corresponded to the request params.",
                "items" : {
                  "$ref" : "#/components/schemas/Namespace"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 12
  }, {
    "id" : "f28eafb0-3286-44ef-80d8-6410e1eca1d5",
    "name" : "Gets the Proximity Beacon API's current public key and associated parameters use...",
    "request" : {
      "urlPath" : "/v1beta1/eidparams",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"serviceEcdhPublicKey\" : \"y3iqambbj2ml\",\n  \"minRotationPeriodExponent\" : 6876884960032397086,\n  \"maxRotationPeriodExponent\" : 5525768777997159484\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f28eafb0-3286-44ef-80d8-6410e1eca1d5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:53:49.598437Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "proximitybeacon.getEidparams",
          "schema" : {
            "description" : "Information a client needs to provision and register beacons that broadcast Eddystone-EID format beacon IDs, using Elliptic curve Diffie-Hellman key exchange. See [the Eddystone specification](https://github.com/google/eddystone/tree/master/eddystone-eid) at GitHub.",
            "properties" : {
              "maxRotationPeriodExponent" : {
                "description" : "Indicates the maximum rotation period supported by the service. See EddystoneEidRegistration.rotation_period_exponent",
                "format" : "uint32",
                "type" : "integer"
              },
              "minRotationPeriodExponent" : {
                "description" : "Indicates the minimum rotation period supported by the service. See EddystoneEidRegistration.rotation_period_exponent",
                "format" : "uint32",
                "type" : "integer"
              },
              "serviceEcdhPublicKey" : {
                "description" : "The beacon service's public key for use by a beacon to derive its Identity Key using Elliptic Curve Diffie-Hellman key exchange.",
                "format" : "byte",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 13
  }, {
    "id" : "3b0a2be5-4c86-48b9-a904-b254bf5966ab",
    "name" : "Registers a previously unregistered beacon given its `advertisedId`. These IDs a...",
    "request" : {
      "urlPath" : "/v1beta1/beacons:register",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"ephemeralIdRegistration\" : {\n    \"serviceEcdhPublicKey\" : \"8fd1td\",\n    \"initialClockValue\" : \"0ntlam17wg9vzwhmeoabuuilpzninjcioapq9kcf5ppn0o63ppso4uj3f70rlmxlaup40xch15b2evcm6y9gowl1mohtbz26wd3cqob8387k4zsp7w5su1ef0eirnu5ncajccpadjay7fis2edxyhcpcr9\",\n    \"initialEid\" : \"8km6\",\n    \"rotationPeriodExponent\" : 3595093706224503057,\n    \"beaconEcdhPublicKey\" : \"x13eht845ntpei5bu2ghiivw3fr66f83872p0aoiow9s40f9ljck1x39tmh8c5ql4tth45hdjm1mjhq0iqqff5t3mfdru13ikpnw4v1k80hnsdu856tx75tr7ervzmafcqd7xq\",\n    \"beaconIdentityKey\" : \"7560xc2q3ets84d\"\n  },\n  \"advertisedId\" : {\n    \"id\" : \"0bfj\",\n    \"type\" : \"TYPE_UNSPECIFIED\"\n  },\n  \"expectedStability\" : \"MOBILE\",\n  \"indoorLevel\" : {\n    \"name\" : \"Abshire\"\n  },\n  \"placeId\" : \"09j7\",\n  \"description\" : \"Quia veritatis autem id voluptatem est labore. Modi excepturi aut. Odit totam omnis omnis officiis est. Consectetur placeat sequi expedita. Et voluptas consequatur ea totam est ut.\",\n  \"provisioningKey\" : \"v6468a6ri80stewc624s4sbokwt9samy4qvfkryyhw0mvdsz7gasf4l3zsmm7gbazsp9quvncbkvzzed5792hvi6jnyqib4al0qs1vtdjlz41hgc0wc7efj4dgjix4uvyhm8ljdohlbgihfis2ly\",\n  \"beaconName\" : \"Herma Rolfson\",\n  \"latLng\" : {\n    \"latitude\" : 1.3716287286082075E308,\n    \"longitude\" : 1.2355067429286418E308\n  },\n  \"properties\" : { },\n  \"status\" : \"DECOMMISSIONED\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3b0a2be5-4c86-48b9-a904-b254bf5966ab",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:53:49.598317Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "proximitybeacon.beacons.register",
          "schema" : {
            "description" : "Details of a beacon device.",
            "properties" : {
              "advertisedId" : {
                "$ref" : "#/components/schemas/AdvertisedId"
              },
              "beaconName" : {
                "description" : "Resource name of this beacon. A beacon name has the format \"beacons/N!beaconId\" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are `3` for Eddystone, `1` for iBeacon, or `5` for AltBeacon. This field must be left empty when registering. After reading a beacon, clients can use the name for future operations.",
                "type" : "string"
              },
              "description" : {
                "description" : "Free text used to identify and describe the beacon. Maximum length 140 characters. Optional.",
                "type" : "string"
              },
              "ephemeralIdRegistration" : {
                "$ref" : "#/components/schemas/EphemeralIdRegistration"
              },
              "expectedStability" : {
                "description" : "Expected location stability. This is set when the beacon is registered or updated, not automatically detected in any way. Optional.",
                "enum" : [ "STABILITY_UNSPECIFIED", "STABLE", "PORTABLE", "MOBILE", "ROVING" ],
                "type" : "string"
              },
              "indoorLevel" : {
                "$ref" : "#/components/schemas/IndoorLevel"
              },
              "latLng" : {
                "$ref" : "#/components/schemas/LatLng"
              },
              "placeId" : {
                "description" : "The [Google Places API](/places/place-id) Place ID of the place where the beacon is deployed. This is given when the beacon is registered or updated, not automatically detected in any way. Optional.",
                "type" : "string"
              },
              "properties" : {
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Properties of the beacon device, for example battery type or firmware version. Optional.",
                "type" : "object"
              },
              "provisioningKey" : {
                "description" : "Some beacons may require a user to provide an authorization key before changing any of its configuration (e.g. broadcast frames, transmit power). This field provides a place to store and control access to that key. This field is populated in responses to `GET /v1beta1/beacons/3!beaconId` from users with write access to the given beacon. That is to say: If the user is authorized to write the beacon's confidential data in the service, the service considers them authorized to configure the beacon. Note that this key grants nothing on the service, only on the beacon itself.",
                "format" : "byte",
                "type" : "string"
              },
              "status" : {
                "description" : "Current status of the beacon. Required.",
                "enum" : [ "STATUS_UNSPECIFIED", "ACTIVE", "DECOMMISSIONED", "INACTIVE" ],
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 14
  }, {
    "id" : "5c34cbe4-7b61-49c1-aa97-055f7b98c9e7",
    "name" : "Searches the beacon registry for beacons that match the given search criteria. O...",
    "request" : {
      "urlPath" : "/v1beta1/beacons",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"nextPageToken\" : \"nm20945ualyahmd6ejmtuq053cp1qfoe5uriuux0653qndogr0vz1r62li9ughgdu91dlvminebds9h0xr0nh6bemjlzc7yz7k1se8blds65f5ba1b4282d\",\n  \"totalCount\" : \"3z1esgs4eykupmo2gjoq90la21p9i\",\n  \"beacons\" : [ {\n    \"ephemeralIdRegistration\" : {\n      \"serviceEcdhPublicKey\" : \"zplz6fnw4ya3fu5kr2v8g57wuu\",\n      \"initialClockValue\" : \"j6pym0a85nijhslp2vq2y697cb5kaebyc6yg4hgmumljdy78lnbeihf96ne8e7w09ybwvzv8201i3mdzjmdrozmj84p0qovotgf7hbpsb8xlh51a0cdc86hv64o6gyvv1oj0bh6k7iisx3d1pl6uek7z551edow3j4n4twsm\",\n      \"initialEid\" : \"fpym\",\n      \"rotationPeriodExponent\" : 5364254696985357211,\n      \"beaconEcdhPublicKey\" : \"ewqw8n7ad55lphyxu48t16ts8xrwnkwh2\",\n      \"beaconIdentityKey\" : \"kassyig1xpmscdl1vlzhbsa9og5i3jwgjagfygt86u7hr5cd90vf2c2xsmqsdo5b8cde5acy7tpapqdx3\"\n    },\n    \"advertisedId\" : {\n      \"id\" : \"m198\",\n      \"type\" : \"TYPE_UNSPECIFIED\"\n    },\n    \"expectedStability\" : \"MOBILE\",\n    \"indoorLevel\" : {\n      \"name\" : \"Prosacco\"\n    },\n    \"placeId\" : \"6n9r\",\n    \"description\" : \"Sed sed corrupti minima. Dicta molestiae exercitationem perferendis tempore. Officia tempore asperiores.\",\n    \"provisioningKey\" : \"3qomxkaef4hg9\",\n    \"beaconName\" : \"Gino Dibbert\",\n    \"latLng\" : {\n      \"latitude\" : 1.2785268481707543E308,\n      \"longitude\" : 1.3055272678403344E308\n    },\n    \"properties\" : { },\n    \"status\" : \"STATUS_UNSPECIFIED\"\n  }, {\n    \"ephemeralIdRegistration\" : {\n      \"serviceEcdhPublicKey\" : \"e3e7ohft9b7mp0sum0e9ut85eyw6utu7jbpif7b4vfrfhnospg897oska2fi34zgyufcit348gmv8fqx8l7msz9ag7cse3epau80esv9vjxb7ek7nqvrlrgnmhn\",\n      \"initialClockValue\" : \"atnmzioqwcqj8uumuinu9s5uujmiwxcq\",\n      \"initialEid\" : \"ew3a\",\n      \"rotationPeriodExponent\" : 5239184607257505557,\n      \"beaconEcdhPublicKey\" : \"93pvl6mo41jr8hr3ggr4usczznpuej7aw8668a8bo0l1i1qhsrwrzp9t7zhlqozvyhbm9tt4gvg6scdzpeeh48r69xolmr9x8773kztb9praso7fopqkmb98u85680odx9n7hs7tays9c7sr1dfa3zweptq3brtevsw4c\",\n      \"beaconIdentityKey\" : \"csh9bydqzdqq88pctz4d3eurimgce2xj7zn78skciqkvzg7u63fd6p83ygsx0qneu74g6abru5tpwlmew7ix4ewn99hcw8k00zfpc3x85yf6taqw4tij70tyf20dchzwmsdxyby3mtscwzl2prnx1sz9rg9omos8kvao472j39ddv9hh37d545vwyxvm4hk\"\n    },\n    \"advertisedId\" : {\n      \"id\" : \"zbo9\",\n      \"type\" : \"IBEACON\"\n    },\n    \"expectedStability\" : \"STABLE\",\n    \"indoorLevel\" : {\n      \"name\" : \"Mills\"\n    },\n    \"placeId\" : \"8vbe\",\n    \"description\" : \"Labore a sit numquam veniam sed earum sunt. Architecto quam dolorem laborum rerum qui eos. Dignissimos a omnis natus officiis consequatur. Quibusdam est ex ab cumque molestias et possimus.\",\n    \"provisioningKey\" : \"9fcdurw70w7ya152sxgbd3mwtr949vaw3gyor0lh029f2pf1kkqqhqp7o2sjs7z6z3db7ir9gi51hx4m5njimn81w5v1oqs9l0a29jcnq9c\",\n    \"beaconName\" : \"Peg Daugherty\",\n    \"latLng\" : {\n      \"latitude\" : 4.660785276870104E307,\n      \"longitude\" : 1.4690258507997979E308\n    },\n    \"properties\" : { },\n    \"status\" : \"ACTIVE\"\n  }, {\n    \"ephemeralIdRegistration\" : {\n      \"serviceEcdhPublicKey\" : \"iupot1pj2cya0ks3bvrdcisk1fdiysizctf2v8ypp3zky45131t3g114fkih2jerpg5c89htc3xmhv7uxgla8tx5vz6vcijf81wy8rzur2kcwc6331iam4slq0djla64yeaeoc\",\n      \"initialClockValue\" : \"ccn4oasppyzmplegpnmv085akggblwvks481ool4nj1f3fhclbpqc1ao8g9kx36qid2uaebtlr5oa56s268e51rlhtuze2yl2rqj28js6xoufkvbqxd8eek3rxv1dfvgjzbghqld2l91pol0unzwge496qptev95vh183gdgt488eh7ln83az30npwy44m4zl\",\n      \"initialEid\" : \"91q3\",\n      \"rotationPeriodExponent\" : 7315448453102709927,\n      \"beaconEcdhPublicKey\" : \"0g7xlt0c1bktecje3mqgdaq23h7lfysqs96qn2vzvp29p3gg43li6imxl0be9n2prv6lqxl59y5s2fzmjnwkspzhgznk7giqxe06ql34r1bzimejq9ltk7aeyyssim8d2xmp86sjxxf05o146i6r88nf91k8lsipexervpl8bri\",\n      \"beaconIdentityKey\" : \"n0hwz4wdkro31xqwhki7lpmwxs7o9srna3cz5k2uh3mc0te2bd6vblyd5hgg77do1ifcxd506tif5r8iztta87ykwi8sf583b4izyexigyj9yqk7op2dyccilwrpeie3wjmz77usl6qbsazunc2ka6hipez08q5mdgvanssvb06bzgrq74tf3rt0ixxn1uk\"\n    },\n    \"advertisedId\" : {\n      \"id\" : \"5m27\",\n      \"type\" : \"ALTBEACON\"\n    },\n    \"expectedStability\" : \"MOBILE\",\n    \"indoorLevel\" : {\n      \"name\" : \"Rutherford\"\n    },\n    \"placeId\" : \"u155\",\n    \"description\" : \"Fuga tempore facere voluptatum quisquam eius. Nulla eos quam possimus. Aut numquam id sed optio eum pariatur excepturi. Alias in accusantium iste quo sapiente ad expedita.\",\n    \"provisioningKey\" : \"jbn5kg5532e5labj8ift0qstg7rcoi0cglhq69tokctbhdpdyfei76tlf2wyxz4o899xuyb5fdjhkuf4qk4hsm5g6fc6is9sptjbi9n8a60jgdce5yiocltvk5a3q6rpiyqxb0887rr1ie8mex78jfp9d1cjvwuawbvd9\",\n    \"beaconName\" : \"Doug Reilly\",\n    \"latLng\" : {\n      \"latitude\" : 8.189744007875321E307,\n      \"longitude\" : 4.400276091738287E307\n    },\n    \"properties\" : { },\n    \"status\" : \"DECOMMISSIONED\"\n  }, {\n    \"ephemeralIdRegistration\" : {\n      \"serviceEcdhPublicKey\" : \"1rrf84samj5u1wrkban5vib2abvi2ewqg744s2k9exoy0kvqanknchcuikf12lfogl2j2vo8w2gk6zu9hxrgkrpgf2d3zpm02zcne12m9n74rxnkv7mg11xnl3o251db53sc8s6kw1nvnci8l637hjoxfu7htx1x2382k0et26pziq70qr3difnr6a\",\n      \"initialClockValue\" : \"x72iiclnrw63gpojcl38i6jfrtwp1en63lgjivmcpc98chj0scfub0ema\",\n      \"initialEid\" : \"py78\",\n      \"rotationPeriodExponent\" : 4910271765406812194,\n      \"beaconEcdhPublicKey\" : \"p9qjjyy0uda8i5jkzoanwau6atzo1i18uam\",\n      \"beaconIdentityKey\" : \"ipnz7ltr8e6ggccxg6gntaprz5b04s1mgfgsjjvnqtf4bxgun4b2q0k2lrzg\"\n    },\n    \"advertisedId\" : {\n      \"id\" : \"7asb\",\n      \"type\" : \"TYPE_UNSPECIFIED\"\n    },\n    \"expectedStability\" : \"ROVING\",\n    \"indoorLevel\" : {\n      \"name\" : \"Maggio\"\n    },\n    \"placeId\" : \"567b\",\n    \"description\" : \"Ullam consequuntur aliquid distinctio doloremque aut. Sapiente ipsa sunt id sit ipsam facere. Asperiores dignissimos ut. Omnis commodi quia similique deserunt dolor voluptas enim. Tempora officia non \",\n    \"provisioningKey\" : \"1ra4avm5f4qzxdmd2yzhkado5d4xsmva5bziuplrpcn8465fjwieg7f3lhfmnd6nd0myvmfo5t6nkhz1vxpmotp4qlcoybyc6aan67e5rhthvsi9adptrisnyhufy8z78d5iisdvmur5kf7pblcgdsjoi2dq6suhm2uesoq0wuwnrw1aszfeqnn2\",\n    \"beaconName\" : \"Ernesto Ziemann\",\n    \"latLng\" : {\n      \"latitude\" : 1.2515783907127179E308,\n      \"longitude\" : 1.7503390881078764E308\n    },\n    \"properties\" : { },\n    \"status\" : \"DECOMMISSIONED\"\n  }, {\n    \"ephemeralIdRegistration\" : {\n      \"serviceEcdhPublicKey\" : \"nm3lu4bx6xztqba4yhfluvsgkndfzaru6o1g880cjsnx7q5u0l33cnrw334c1mh3brwoyxzf\",\n      \"initialClockValue\" : \"4fvfm08hbrj82yfozcyhwpuo8yde2ek0pwr15i34eq2dpfpjaw0qlx9ayvjckze8rv8xuac2n9cluygelwt6m1w18i8frtknnpz202a3ngyknbq9bl90ww6abiia3frglyhcl1to6jfkn\",\n      \"initialEid\" : \"9h8j\",\n      \"rotationPeriodExponent\" : 6349996069723540134,\n      \"beaconEcdhPublicKey\" : \"svrvojiczga2unky8457vzr924wvomxpxq\",\n      \"beaconIdentityKey\" : \"mgs6jdpfzfzgjx7us1kiq8mvrr0x32jjiq2etganaovhefyd13jt4i2zkrx8nxpjl8e0le63x72uxt802jljcl3de5r7m1kvuicwlao882wm7hq6sd7ec3wia32wan5nulbb7od2eahxemedv8t5ybxyvjdqljbu4bdfddowvzc7pd21auf0w2a\"\n    },\n    \"advertisedId\" : {\n      \"id\" : \"98e7\",\n      \"type\" : \"EDDYSTONE_EID\"\n    },\n    \"expectedStability\" : \"ROVING\",\n    \"indoorLevel\" : {\n      \"name\" : \"Nienow\"\n    },\n    \"placeId\" : \"w2a9\",\n    \"description\" : \"Maxime veritatis omnis. Eos praesentium et. Ex ab qui reprehenderit ea animi provident. Qui est unde velit aliquid nihil facere.\",\n    \"provisioningKey\" : \"ook2g3fw8cmr1jpceo44u67q4u65y7koq7i3mfiz0qpt843znybr1t76tratg7c94lvcvrk4lzytjcvuul8h01sua2o6r1qzxqgki9hcq8jz418kq0ufra52dulgo566ippinew2cwplx671t8293l73\",\n    \"beaconName\" : \"Kimi Runte\",\n    \"latLng\" : {\n      \"latitude\" : 6.152284083270734E307,\n      \"longitude\" : 8.894054524726672E306\n    },\n    \"properties\" : { },\n    \"status\" : \"ACTIVE\"\n  }, {\n    \"ephemeralIdRegistration\" : {\n      \"serviceEcdhPublicKey\" : \"py8ez8hmtyrsli8518eiqsdnh7kp2cihlqr7jsegtoeoxlczy78vmp4nvrdkuul14i0k0jksqnfqqz7ddlcqhzakwb7pii9zcytm9cjvs0q9tiwzlpfb6hbzchk21cl6rbj4f0k9fdvptn0pcv1j9gp26rm\",\n      \"initialClockValue\" : \"pvtyfocjtl5aoh1pof4e0kjwi9796bqnqwvs0ztucwrd652qsdkw84ht84xm4v0cllq8dhsm68h3kyagg9nn24exsunp3ord35jj5lx\",\n      \"initialEid\" : \"8ae8\",\n      \"rotationPeriodExponent\" : 2446518333733613752,\n      \"beaconEcdhPublicKey\" : \"7gttoop6c6w6s45cmjg7pbf455kdfgrd3hgh5unr8zgtqsakt60v3xi0suyfi7qnaw3muptw82iroql5eprnn9cbmkcmstq550vx2g8tg0u8n5a4w097hje02n66hum6ra72qr93opb3vttor6t6gs2o4z4nhqq2oegxea\",\n      \"beaconIdentityKey\" : \"ea92sv9ws4xgpli0ob0i\"\n    },\n    \"advertisedId\" : {\n      \"id\" : \"xe9v\",\n      \"type\" : \"EDDYSTONE\"\n    },\n    \"expectedStability\" : \"STABILITY_UNSPECIFIED\",\n    \"indoorLevel\" : {\n      \"name\" : \"Rolfson\"\n    },\n    \"placeId\" : \"950h\",\n    \"description\" : \"Neque recusandae nisi. Quos distinctio et quae corrupti. Aut eius porro ipsa mollitia laboriosam repudiandae consequuntur. Repellendus suscipit nemo voluptas.\",\n    \"provisioningKey\" : \"krezi8pvysihx8xhuhjggaccizkscxcfqyknsra\",\n    \"beaconName\" : \"Dr. Bruce Huel\",\n    \"latLng\" : {\n      \"latitude\" : 8.188317000900111E307,\n      \"longitude\" : 7.109266351096727E307\n    },\n    \"properties\" : { },\n    \"status\" : \"INACTIVE\"\n  }, {\n    \"ephemeralIdRegistration\" : {\n      \"serviceEcdhPublicKey\" : \"dnr\",\n      \"initialClockValue\" : \"d0mkj8fola272dw4xviq4qgztifhvgozmj5w81nbkxcrm8cxpi2gtkz98cppq13hy83ldfrl8q4c697u\",\n      \"initialEid\" : \"3amt\",\n      \"rotationPeriodExponent\" : 8034455460651624588,\n      \"beaconEcdhPublicKey\" : \"qxoysk8vt6e2u5gkjlmxvjpg4sl0nf\",\n      \"beaconIdentityKey\" : \"q9ows2yg0s1m419i1xhlzwa48bij2ys47gp9c4dpi00zdsbcmv63he9kci42k90q2isod2wtmf68gb3mg64puxusqbcltmx6vjmi6o17izr3prdoma7rpej\"\n    },\n    \"advertisedId\" : {\n      \"id\" : \"gz5a\",\n      \"type\" : \"ALTBEACON\"\n    },\n    \"expectedStability\" : \"PORTABLE\",\n    \"indoorLevel\" : {\n      \"name\" : \"Morissette\"\n    },\n    \"placeId\" : \"w5ng\",\n    \"description\" : \"Ut nostrum consequatur minima omnis autem expedita maxime. Voluptatem et saepe asperiores. Eum omnis eum. Quia consequatur odit voluptas amet aspernatur.\",\n    \"provisioningKey\" : \"02cpbvn9yoayme2hia4tyvn6qk97fxnbkkspvmhyz8m0moeprsgr10rfs7vwikiyfwvpmygkjgoi5dfhl4jphwp0oh507gzr1ra00o7t7wf1hsif7w8ibxapptmr2sdcli1eeobc6ln4harc2ajf19ubgvycs922svxcqxvw6\",\n    \"beaconName\" : \"Horace Weissnat\",\n    \"latLng\" : {\n      \"latitude\" : 1.5702294223593329E308,\n      \"longitude\" : 1.1118427100671886E308\n    },\n    \"properties\" : { },\n    \"status\" : \"STATUS_UNSPECIFIED\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5c34cbe4-7b61-49c1-aa97-055f7b98c9e7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:53:49.597643Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "proximitybeacon.beacons.list",
          "schema" : {
            "description" : "Response that contains list beacon results and pagination help.",
            "properties" : {
              "beacons" : {
                "description" : "The beacons that matched the search criteria.",
                "items" : {
                  "$ref" : "#/components/schemas/Beacon"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "An opaque pagination token that the client may provide in their next request to retrieve the next page of results.",
                "type" : "string"
              },
              "totalCount" : {
                "description" : "Estimate of the total number of beacons matched by the query. Higher values may be less accurate.",
                "format" : "int64",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 15
  }, {
    "id" : "57115506-7945-401a-9132-fe633761a4a5",
    "name" : "Given one or more beacon observations, returns any beacon information and attach...",
    "request" : {
      "urlPath" : "/v1beta1/beaconinfo:getforobserved",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"beacons\" : [ {\n    \"advertisedId\" : {\n      \"id\" : \"qgjx\",\n      \"type\" : \"TYPE_UNSPECIFIED\"\n    },\n    \"attachments\" : [ {\n      \"data\" : \"kwxf3l952lzc7l8hjf5jdqzm6jhbq1c20zb2u24zozkq403eky3yxm41rhk1laihrwy63an4ieea0dyz7glpw56o72c9aobp5lm1pyi7gf721w18d5p0ikawcj36em3v6yk1t841d9y9yqmg5pdrg2o5fge3f41m2ljsyn653anigin3m3sjxrn6o1mi\",\n      \"maxDistanceMeters\" : 1.7859102755209876E308,\n      \"namespacedType\" : \"7wzhw5bk00e\"\n    }, {\n      \"data\" : \"h8brime4i3ew2dhsz23bb8qgrnv27yygev81ohz9e8gv5u8ozcos7xr13gu3telo86h1mxaq7qqcgqzwd\",\n      \"maxDistanceMeters\" : 4.948170169780195E307,\n      \"namespacedType\" : \"rmsfxm7a5ljnhwquvwfp8vplfx06c162z9n2ahp4wyzpnspvlq9rva9kzmi4wxawokiguvhiek9rmwfouq3qk6zpfy57j\"\n    }, {\n      \"data\" : \"fzdsbuadpkuqyslqz12jtfc1v2m1kja1k6359kzr7zwc4j7gagzwv6sj49kqf7wm2fg0pzg3nae6m8xch41i\",\n      \"maxDistanceMeters\" : 1.6789860010001415E308,\n      \"namespacedType\" : \"szl5s8ebak4x03vg7mdn0bfct1sdxhtulexz3bk7t7cda8zg2csyj4wi8rpei3vkuxzhzfp15e2ufdc3ygqsqszgm7u8ww\"\n    }, {\n      \"data\" : \"41nix09vd67j3pxhvilmluua0k7diwdo0cg04e3i3bws2fifwmjjh2mwfbiv2ctx0030uardh9o5chq02nsjmbbeoc9jwhu6pg0ivodxe0j4re2edmi3dcnpmxg30f1vyfu2jpi1qf9f5jomou7o\",\n      \"maxDistanceMeters\" : 5.053133880621335E307,\n      \"namespacedType\" : \"w0t2bpkcei0x8za12zpoly0omgctmqsqtlv878hiy0zn76x9c8dzbtum6avdbbyj60uup4hx0wrrj9031gchifd3655pxcvnvv5sq20saycgp2brwohhayxak0j5d2tjd3db6mipiyjrkpmshikvfzyte6kjrcu6e\"\n    }, {\n      \"data\" : \"zzm9a9himy15x1liua4vnr3sdj49rvonw9bqpj328gxqtanya47t8spdp2uro71stcuvqfpuvsp2k272syzkqhpontdfm9poepwaays5zjgf6as3dvvhlq0thpxmygdjb4v8orsw09akw9k4rkrengubaq66nks\",\n      \"maxDistanceMeters\" : 1.1967405709826042E308,\n      \"namespacedType\" : \"7d5gz1gqo1ctmdtehg5ocmzod9n\"\n    } ],\n    \"beaconName\" : \"Edgar Larson\"\n  }, {\n    \"advertisedId\" : {\n      \"id\" : \"1z7i\",\n      \"type\" : \"IBEACON\"\n    },\n    \"attachments\" : [ {\n      \"data\" : \"6kibnedbepckry\",\n      \"maxDistanceMeters\" : 1.6464067169048303E308,\n      \"namespacedType\" : \"krb951is9qev7afxamf9oejzhfkaiufkxjcb9heh0n33ddweq1onjpyhf19ojh3xw1210akg67f4rk83tvkyy8kaarf53qo2xou75u3p4hg6xhzu98wba2akeimofnx5wlf85n8p8hgc220l8lvhfyg2g9k3i6khhj9xr70mzzq7vg08\"\n    }, {\n      \"data\" : \"3yqtt2gvr1pcrk5q4zcr68r3x0fntusir0mrv7skibvaaj1n0j835z14nlu84sdwh7u19d1\",\n      \"maxDistanceMeters\" : 1.1706388491834156E308,\n      \"namespacedType\" : \"3t41x6eokvl5fsvvwiz0qvunie5sks0efe28ce6t29apafec2fhpwa9tgvp782sxseglnt5l1bxw1q9d6klfocpcmj0srgv9lun1hd3wdxho5b0zmf5u87i83tj79k0x7xwwphx6kosftcggskv6us2yjeikgs3qq4d1ldys8c1epnc30e4yxsml85\"\n    }, {\n      \"data\" : \"53nsa0cpd3lq0nb2ksfaofejkvbmylblw68945ru2w9mc99\",\n      \"maxDistanceMeters\" : 1.1115320128084958E308,\n      \"namespacedType\" : \"6vrbki81q3s7ctzyxpt24yf2k09xf01cct6e0my7aoa940bplayuygdg6aezm\"\n    }, {\n      \"data\" : \"tdshx3vvd6bpmzuuuhgjckqdf3w3klzfol6a14jzmf0slmt48vt7g446u50uxy81pdrmq8tn8ewkv9mywjni7db5lrphh13q2f1m8nei407vzw3a8z0klgra3gadyykp86a0wnqqurkg2dkyq\",\n      \"maxDistanceMeters\" : 1.10222759911277E308,\n      \"namespacedType\" : \"jdrze\"\n    } ],\n    \"beaconName\" : \"Ms. Sylvester Trantow\"\n  }, {\n    \"advertisedId\" : {\n      \"id\" : \"7h8f\",\n      \"type\" : \"TYPE_UNSPECIFIED\"\n    },\n    \"attachments\" : [ {\n      \"data\" : \"s1aywsq7trdj3440h66vle5u56txgfgzafdbrl44tp2vpwazf0n8ygid94k3p8er1j9bnb9vfgx3da0ej3rxluf4938idpc0nerro27ztpb7q206erfr4vgic45wlmwhzo\",\n      \"maxDistanceMeters\" : 1.068744075034206E308,\n      \"namespacedType\" : \"df7j95co6vhp464v0cc08n4wyuxrahoezqj9ylp9u0asagtmdx3egwlflntxf2\"\n    } ],\n    \"beaconName\" : \"Laquita Konopelski\"\n  }, {\n    \"advertisedId\" : {\n      \"id\" : \"jsc4\",\n      \"type\" : \"ALTBEACON\"\n    },\n    \"attachments\" : [ {\n      \"data\" : \"bd7o1t8dv1oneru0hu2iyxam7x3yk8n9305oeiq\",\n      \"maxDistanceMeters\" : 1.2038528805680362E308,\n      \"namespacedType\" : \"l7gwetw7vn6akv86bg1517enmd4pw4nqtz4ojgquqyv55g53twhcxw40jf99l14s99lifkh1drhueh0q0lvezjaf2xme0g1s5dyicfp513pjg016s1wtbw6wv86suvj4nmrs4fn5t6iam30ja8730nl4i3t268ssld1swepaxbt964h\"\n    }, {\n      \"data\" : \"hbobre2t2fms6nvxolivj1drf0dbac7xkqh3zsu5hyvzi\",\n      \"maxDistanceMeters\" : 1.2914309091575516E308,\n      \"namespacedType\" : \"0phmnsa6pjujtm36k13zb6gsm1s0zhjyhkqh14948ssbva0oc2cxxhr37xazoozimxiqlyad4wbyxxfmugkijwjyaq73f58meo21279vog4optjbx6yntcj90hj8ugiwm\"\n    }, {\n      \"data\" : \"6jybl4y4r23qzvojkrtik426h22pilfyb19j9bi2omwuz83bevn0ke5ytq2u3c9a8x24at94rz95iy183q464up8wzok8x0xqp9j9fyaozcfn\",\n      \"maxDistanceMeters\" : 1.3509883994942823E308,\n      \"namespacedType\" : \"jzmuisj4lkrysadw2t3szofx1tl3dh5mcd5ocjv32m98dvq1s14emq4pvh27srbnslm2pfulm1esrf2fj2a37uh2vz8gih73rstue83e6mixhcupj8kathw8dxcsy3s4ltuanmwq3ra187mzw6ms9mfr\"\n    }, {\n      \"data\" : \"2e6r4dolrcecpju8pnixc6oopptyoywldrksqjiehc9nn3zv25s8dmyz1oci5h5xsia3gex033ht5khwsi4b0cvgnob3lgf8ur1jd1dqhoyawi6e34j60xjojkgx0uoazy19y4ecwdpufhpqct\",\n      \"maxDistanceMeters\" : 1.7776986831527006E308,\n      \"namespacedType\" : \"c19kflnpkfswqrvb4v1626dhia6jw3xhai22ijkhuf\"\n    }, {\n      \"data\" : \"l4zo7hide5zjudfl2n551gktpwy4py6vjsmswio1cgfizby5fsx2vwkin8ya1sqhir0csanmd3rj4ms6aanuypv321zq8xbz2lu4v6gnn9o19h\",\n      \"maxDistanceMeters\" : 8.330676113329034E307,\n      \"namespacedType\" : \"4dwbnk9d6xg26byj1921wnyiyebtjcqa1b5rlqi625ue79hqural9765o337d63juvgti9v3v0gfjjpxc1x66454hwnbtx0av0s\"\n    } ],\n    \"beaconName\" : \"Isaac Moore I\"\n  }, {\n    \"advertisedId\" : {\n      \"id\" : \"c277\",\n      \"type\" : \"TYPE_UNSPECIFIED\"\n    },\n    \"attachments\" : [ {\n      \"data\" : \"jpihojlbot3xbt6x8vyqasjs87bxu0j2wziar447stwby3udcnco4tjhbkvqcmfv\",\n      \"maxDistanceMeters\" : 2.939818469207625E307,\n      \"namespacedType\" : \"zsvs4uk7dzwjxmrbrb9s3d0ju15va2mttgmin5pw1b8ltdxh5qkzb0ogagx98q8fn9icnvr31s5dbw5k86hpjq5nc7t7xgv7h6bu3oiabq19hmve1kmisukjpht4u8mt6nkmbb38sxn\"\n    }, {\n      \"data\" : \"y2jksp58mqpzpum26brqnv7zcr9kpe8g4\",\n      \"maxDistanceMeters\" : 9.58396177885411E307,\n      \"namespacedType\" : \"k5xdeal9r78jj1wygjzlit4ffg5w9k2mt6ef1ybcm84j4q\"\n    }, {\n      \"data\" : \"9ojscrbhtd7a9jmibl\",\n      \"maxDistanceMeters\" : 8.589746596229253E306,\n      \"namespacedType\" : \"1vpd5pim00lkrdin8cebebz91uieaig7ip3\"\n    }, {\n      \"data\" : \"zag1vlohb4u1zff5ilvukgewixbo4pt1uqjjxxqim041ytce915j9xiw2qcd8kvfh5utamg7gcyn0lnq54bjujb0822htlr5bn83cvey7tqmpt27mvdafiri55ts79avs0visb1yfyk3pa67s8a2b81kop57\",\n      \"maxDistanceMeters\" : 1.620912813733287E307,\n      \"namespacedType\" : \"ihfnxvv8a5vaclms4qxqt3jly30ufgx8ulmulcc56scagcu9yvbbnh56o34316u32k43ikxf35pe2v6ge2rckfxxldv1nta6qb6x4t\"\n    }, {\n      \"data\" : \"20c9xlh78r6lim35rw1nmxhdq614e0cy4zh1xp0ejatvkx5738jsllszx98ox4upq3msvrh2rq1z9e8sc20rkt1lowrs946gwhg90i6mx4fcd6eugor9\",\n      \"maxDistanceMeters\" : 1.2783888893419034E308,\n      \"namespacedType\" : \"65jwrxeiu7wgl5esasysthdvgbxrkplsqzgb5pprosa54ur2bx5b48dozxvz2n0lp8b6vvfquprnh95reqhsuhe3k59260tog30fp58xcok8m2i1xcwswdbngy4ct9vliwvjmoof2sburo37m6hb1ouw94xv2q8x6kxty02oomu259jtn5tgq6\"\n    }, {\n      \"data\" : \"7pzthbvnfw2tp97g4r84fynlqeqj4h951zdeiwfvpiwkufcqslupnx1gae0egws00aglp0kdd93ragzajeq3aix9qtqq8lfy8lfntm6ov14i42fk9p4esv5qnkighoq5xoy7j0483rawxniorqtlm2oa0mj8b5twb46me8\",\n      \"maxDistanceMeters\" : 1.6947893177803485E308,\n      \"namespacedType\" : \"en28zzpw8adfg635xercghmy2890lsokrs2sdrxez2u082uo8pwd1qnj2qgy5i8qlnkv063k6qam53k9u90a2ifcihn99odsr509b9zgrp5corpd6x4p5tv4xqy2kqryeh\"\n    }, {\n      \"data\" : \"rtadqjyaxnpjkjpjknk46r4zusw31o6lvipaokt7yj5psqetn3frur0rntb1dxt\",\n      \"maxDistanceMeters\" : 1.3933669384670388E308,\n      \"namespacedType\" : \"c2fag6mka8e5vqqaereorndiqh1z0vfmjadtroj4e7a6trxiqhaspv866ce85t14tdgf9z1xxiv8s7u0u37honxbt9nvxzdgygq56kbp4udxqx8esy3p0uxrxojpkvawlloyzji3mx8c16vein9x2lsb39ehk76xrm2b2n1utdrap6pd5x57h\"\n    }, {\n      \"data\" : \"db7flat6y4v3i72dpugg80cg9l89fr8cc0x0uso1bbqu3cdq89d2qesa1y428qz04ptfax7g6n7phhtne9l8lbuqs2fksrdesuuh5ulij7avvodoiv7jtyhnfs2jt0gnpq3ynbm\",\n      \"maxDistanceMeters\" : 1.0781732456513413E308,\n      \"namespacedType\" : \"pu6m2bxuqk5vjyjxqsdl81o58qbl8pn3fpbq14hsdu4dosug8a991h50859a2zrdfbnvom8kozyt2sgqcc6nbbngbqgqjxt9bnq0uqaoro0q0ymt8rfozou8nod1v3k416aesmnjhogheds42movc5tumvvtdxi0zqpkm7ipoco21zmb4qhe3sxmu4\"\n    } ],\n    \"beaconName\" : \"Harold Veum DDS\"\n  }, {\n    \"advertisedId\" : {\n      \"id\" : \"c7q4\",\n      \"type\" : \"ALTBEACON\"\n    },\n    \"attachments\" : [ {\n      \"data\" : \"lw13x4syq2ufnk68jn0kv4aaih3a86z2n4uzyv\",\n      \"maxDistanceMeters\" : 9.568253641343277E306,\n      \"namespacedType\" : \"22l7jlbjhrk6397bppk6fjhq94tjext11tz5kxmwdug5ggsv2pb9nwmnvaeuztg3w8dythtqm0dl9hv5on1txlp3uifcu93b2i3utjh2pjy1jhqzamcmh23gjhvcn1tk\"\n    }, {\n      \"data\" : \"cwhh62yygu0z038voe1evtyps9iuyoisqu76zxipzc2i2hy8bacq6l6hvdz5etq0gggj1bw4brs1bg2jkjp45kazw7b5y8vu9bprhrjmevzwvxpea3qv81ubsdq0ag9bd5lezz1h20ej28zq0lib2ka5pqqhcvo\",\n      \"maxDistanceMeters\" : 5.975907231148071E307,\n      \"namespacedType\" : \"jkxadaixp9flbx5ai81f1oxiqv0rnh6ueyprl3qd2ug80ysaxdiiox3n7qs7ebujiptw1hgkrxavq1n23g4x6iupwq0hw90ibekjl9obpv0lhb\"\n    }, {\n      \"data\" : \"6u9gqyjnsfal50vttw6rkimbsev32nrxsqfoh4japnh95qjo3j36mqzd80m2utlhu0tlhmq4fzy6e94vexu6so2forg9er3zdgvy1t6\",\n      \"maxDistanceMeters\" : 4.057963509468518E307,\n      \"namespacedType\" : \"pbyokblh6nu0kwizn830sb3rpqruxffcijk58fd63l1gaml0q6y210xaglbdd4tlvsdmo50gtxfh0r4fvn1ipqpttg088narkm010kq1znst0eo1craj7h2ghuc8u9qa883wgtbr2vqqdswhw1rhyilqodoeuajp8os6x6oyxp\"\n    }, {\n      \"data\" : \"43rvljcrm75yz5ipzd8vy65qruajh9320zgkjocmsqms477fj8y1vlsr9axv9c54ouwo1bnucdv4xjpb4gl2bddyj5e9lzt2wgvgbo7xcw1gsis0oqlbds4\",\n      \"maxDistanceMeters\" : 1.2476068050263627E306,\n      \"namespacedType\" : \"nxgg7n44p79hg79f5fq69o9liyf1h6itlirizcc955xm5rp2i9z1qr\"\n    } ],\n    \"beaconName\" : \"Sanford Emmerich\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "57115506-7945-401a-9132-fe633761a4a5",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:53:49.593924Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "proximitybeacon.beaconinfo.getforobserved",
          "schema" : {
            "description" : "Information about the requested beacons, optionally including attachment data.",
            "properties" : {
              "beacons" : {
                "description" : "Public information about beacons. May be empty if the request matched no beacons.",
                "items" : {
                  "$ref" : "#/components/schemas/BeaconInfo"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 16
  } ]
}