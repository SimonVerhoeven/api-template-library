{
  "mappings" : [ {
    "id" : "b8a61a4e-574f-313b-a2d7-d69a24c49cfd",
    "name" : "Creates a model in Firebase ML. The longrunning operation will eventually return...",
    "request" : {
      "urlPath" : "/v1beta2/su8h5d59fpnvri9tw4ebi5su3azfs0uoiphzw0ijaztstwmw6bqjxm6bmvpeaj25w0proeiqufzakis0dw6dq6y53z9nrdjbutj7noije9tgg8jg2xs8tj7/models",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Charlena Tillman\",\n  \"error\" : {\n    \"code\" : 1198575981,\n    \"details\" : [ { }, { }, { } ],\n    \"message\" : \"Eos quos repellendus mollitia quis inventore. Consequatur blanditiis nulla eum omnis velit facere consequatur. Magni et sint.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "b8a61a4e-574f-313b-a2d7-d69a24c49cfd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "firebaseml.projects.models.create",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 0
  }, {
    "id" : "91c17088-e885-36e1-8fd9-136661ea38f7",
    "name" : "Lists the models",
    "request" : {
      "urlPath" : "/v1beta2/xstkj5/models",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"models\" : [ {\n    \"tfliteModel\" : {\n      \"gcsTfliteUri\" : \"https://web.example.mocklab.io/625507\",\n      \"automlModel\" : \"johewlij7x640obi2g3cnghyjltgjovglntew6fp134o9df3fhj\",\n      \"sizeBytes\" : \"ahxen3isothedat53gg8tn3sqasj39f3valb1\"\n    },\n    \"createTime\" : \"2022-12-26T16:45:58.10284Z\",\n    \"modelHash\" : \"0x28ud0zcj2h763tgcsojkwdk5dn38wf1qfdck54042e4xl35w55mxc0epns2mrkv1gnkkt25kf4w63y5300xu1aj6dk08kghledff8db2yswn18axxplazazeygvb4n720jxu\",\n    \"displayName\" : \"Ms. Freddy Maggio\",\n    \"activeOperations\" : [ {\n      \"metadata\" : { },\n      \"response\" : { },\n      \"name\" : \"Cruz Hansen\",\n      \"error\" : {\n        \"code\" : 1126136765,\n        \"details\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n        \"message\" : \"Sit exercitationem eligendi voluptatibus. Natus est quia laboriosam. Quibusdam omnis eos magni. Dolor amet quo impedit. Sit in non.\"\n      },\n      \"done\" : true\n    }, {\n      \"metadata\" : { },\n      \"response\" : { },\n      \"name\" : \"Wes Herman DVM\",\n      \"error\" : {\n        \"code\" : 104827151,\n        \"details\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n        \"message\" : \"Perferendis est veritatis suscipit. Ad et illum. Sit sit exercitationem iusto tenetur dolores quam. Libero vel aspernatur sunt. Voluptatum quidem doloremque.\"\n      },\n      \"done\" : false\n    } ],\n    \"name\" : \"Dr. German Terry\",\n    \"etag\" : \"eeeet\",\n    \"updateTime\" : \"2022-03-11T16:37:58.103244Z\",\n    \"state\" : {\n      \"published\" : true,\n      \"validationError\" : {\n        \"code\" : 775354692,\n        \"details\" : [ { }, { }, { }, { }, { }, { }, { } ],\n        \"message\" : \"Ut sed sit est totam. Ab commodi alias sed et provident eos assumenda. Eos vel nihil quos. Esse reiciendis non sed quos dolores et.\"\n      }\n    },\n    \"tags\" : [ \"yg73jlxew6lqyhvzi9a7o83ee8zpfd422m5rtc18bkhbanmrfkbkznxyimcc39u2c7ewubbflxwl4bsvr4bjaon8zlp8leswonpz\", \"dww8r4s1sis8m4n847jjxxde7rg58artf6d6q5b\", \"gu2479utnbvr94xhb\", \"rxe3kk6whnf9el4bq8j5kokjvoq68lm63vnjkzizhr10amrig8p7mxkvei0t5g83jeva6jf5dssksk9ybl4wlt0lf\", \"k6iqe7m1lxigbo95i0qfjpotz75e0bzhnxspte8t0th3kdncjq2c69hbq4d3c7z2tk352gm\", \"u7s62x3fx4bmo5zu4pfhzq03wptg94arkgk6ntsjp3yabekmwubexwm8o8ykj3rslzd5aq5ip83s8t1x4qnfqpbp5k36d3h2xar\" ]\n  }, {\n    \"tfliteModel\" : {\n      \"gcsTfliteUri\" : \"https://web.example.mocklab.io/533030\",\n      \"automlModel\" : \"q37m32w97z030932p1k6ibok5iswblnheltppv2j1mqcz2h1pgoq1i8hqbrj9k1gj2byi947pm2decck4x3r6jpfyv27iu6x1r3br267rn8tufrftjwozagqf5sxlc9c38gquri7n4cixbjjxfdy63giju352cqpys28t9apg566thrvscsklm\",\n      \"sizeBytes\" : \"duyedpltoiy11449pdz6b59d2lhfn8qzileslh\"\n    },\n    \"createTime\" : \"2022-12-26T15:41:58.103504Z\",\n    \"modelHash\" : \"v2zrehhbwrcd5o91klklpydw9t7w6zwgxi7tw1epx5kzt4a12cvryfqqc6x9op0x78zs5s8k4yxp2hmkbccnse3ukpe5pu0e3mtiqj8zhvaconx82gitw6f1v5\",\n    \"displayName\" : \"Sherman Satterfield\",\n    \"activeOperations\" : [ {\n      \"metadata\" : { },\n      \"response\" : { },\n      \"name\" : \"Silvia Ritchie PhD\",\n      \"error\" : {\n        \"code\" : 1149025563,\n        \"details\" : [ { }, { }, { }, { }, { }, { }, { } ],\n        \"message\" : \"Asperiores vel maiores. Ea voluptate ut quo dolorem id tempora. Itaque ipsum quo enim autem ratione aut beatae. Nihil dolores nemo distinctio. Aliquid est beatae ullam doloribus optio labore.\"\n      },\n      \"done\" : true\n    } ],\n    \"name\" : \"Elias Considine\",\n    \"etag\" : \"modi\",\n    \"updateTime\" : \"2022-08-20T14:07:58.103792Z\",\n    \"state\" : {\n      \"published\" : false,\n      \"validationError\" : {\n        \"code\" : 1900177447,\n        \"details\" : [ { }, { }, { }, { }, { }, { } ],\n        \"message\" : \"Reprehenderit et molestiae dolorem vero. Doloremque rerum nulla veritatis ut. At eum eos consectetur eveniet et dolores. Sint reprehenderit voluptatem fugit.\"\n      }\n    },\n    \"tags\" : [ \"wi9612wcac2qhh8da83bjstsr240bjgk16anf85swrcuul361a468oe32cl665w5wbtto2bruhuvxqeo4yi7jqpo21ont7g100h6620rq7ys5xz8n9v6scn07anvvtfdyd8zgyrv83pz2nap5mc6cdre07nhojacen8jm4pcd9j6wil376lop85qiz4ahx8yne388a0\", \"kmk7m\", \"pikjlpq5d05076st4dacrb87470pwd9ov7qg3f2swaimsu7i4kkk2sfsmegcnfilu172b0175ym\" ]\n  }, {\n    \"tfliteModel\" : {\n      \"gcsTfliteUri\" : \"https://web.example.mocklab.io/603258\",\n      \"automlModel\" : \"xvahgd09meidlqgup3s5w6fxf68olpmaw2dc7qprnmc2j1a6ajlnb4mc1wn3txkwawau3ivnsa0le4d5pc\",\n      \"sizeBytes\" : \"efgmmlz0fmkj4f64yybk9mjhbmcm792zgi23fx5k363wcilvmqoqdr0jij1c5tiwngv164tx7yq40tr48m3bskoy43durkv7pp1qfd09cmn76osanv4bc3ew5c8if09wabroa65f2l9ccwtig9nsofnr1a5eontxshw\"\n    },\n    \"createTime\" : \"2023-02-08T15:51:58.103995Z\",\n    \"modelHash\" : \"u6k19p1wa2llthuvplm85gew0jze65tdslprz2n10yp\",\n    \"displayName\" : \"Eliseo Osinski\",\n    \"activeOperations\" : [ {\n      \"metadata\" : { },\n      \"response\" : { },\n      \"name\" : \"Arnold Bahringer\",\n      \"error\" : {\n        \"code\" : 776548182,\n        \"details\" : [ { }, { }, { }, { }, { } ],\n        \"message\" : \"Deleniti eos architecto animi sed harum aut. Ad dolor aperiam et aliquid inventore. Ipsa cupiditate nesciunt fugit sed sequi ea non. Ut id ut dolorem.\"\n      },\n      \"done\" : false\n    }, {\n      \"metadata\" : { },\n      \"response\" : { },\n      \"name\" : \"Anthony Franecki PhD\",\n      \"error\" : {\n        \"code\" : 375597963,\n        \"details\" : [ { }, { }, { }, { }, { } ],\n        \"message\" : \"Voluptates rem ut asperiores vel recusandae. Voluptate vel ipsam aliquid. Inventore laborum saepe. Exercitationem porro repellat possimus. Voluptas deleniti alias odio.\"\n      },\n      \"done\" : true\n    }, {\n      \"metadata\" : { },\n      \"response\" : { },\n      \"name\" : \"Luciano Ratke\",\n      \"error\" : {\n        \"code\" : 1475077600,\n        \"details\" : [ { } ],\n        \"message\" : \"Iste modi nostrum possimus non porro deserunt vel. Possimus consequatur eum dolor odio sed eos exercitationem. In quas placeat omnis.\"\n      },\n      \"done\" : false\n    }, {\n      \"metadata\" : { },\n      \"response\" : { },\n      \"name\" : \"Edgar Hermiston\",\n      \"error\" : {\n        \"code\" : 1208039145,\n        \"details\" : [ { }, { }, { }, { }, { }, { }, { } ],\n        \"message\" : \"Fugiat rem maiores quis rem blanditiis ut. Et architecto dolorem consequuntur asperiores. Officiis illum itaque tempore ipsam distinctio. Nam reprehenderit animi impedit inventore qui quia ullam. Qui \"\n      },\n      \"done\" : true\n    } ],\n    \"name\" : \"Loretta Greenfelder\",\n    \"etag\" : \"eos\",\n    \"updateTime\" : \"2022-09-04T14:42:58.104556Z\",\n    \"state\" : {\n      \"published\" : false,\n      \"validationError\" : {\n        \"code\" : 1410834617,\n        \"details\" : [ { }, { }, { } ],\n        \"message\" : \"Deleniti eaque itaque voluptas maxime velit. Quam earum animi odit quis eligendi. A asperiores excepturi dolores aperiam corrupti error.\"\n      }\n    },\n    \"tags\" : [ \"3s8a13lhiza08lgcu8buyj12is6kw5sonaa2ac0398qf7jf0lv\", \"cz9g9dprhob8oh9o0g0id9muwfdivlofm8vk6yjiquxk\", \"5u92y9okjjo6tf30u6nl8al14htdtbrqfmms4z569pu5o0v5n0wrtpso51s2bwu6zgkz9kbjq3n46b91f6sebifertgh6lprdj74w1z5biysjmzk0cwjlohmalfjv0hqh3zame962ocw1ym64cmew5khiuffle21fxxfqnt9clnhlfhohd4bbc6\", \"f9zv5ffjot1fmup2612n09fe9vhown2zwaseuar9v7tgcrcemqqwk0k8szt6a9jmovgkz9mcnztwmff9btnfncny2z36qx9aw1edg7hl8851qpu3zf07bdeb23edugy2wxct1tno1s56n65jv0upmcz8hj7195dz39o02iosi54swkxq2w5ja5upan2\", \"xosax66n1vgrqcputcrwwh7ztkdtzk9wt37hh22wwofu03ipf09y9h53q4zkf2cdidy\", \"19p8b5tlgo16ralhjqw6zz57uow023kycraq9i8n3q3cmgmxmvy1rzz4gym7x9094o5e8fvchkppvuar9lkbut\", \"t0e\" ]\n  }, {\n    \"tfliteModel\" : {\n      \"gcsTfliteUri\" : \"https://web.example.mocklab.io/042501\",\n      \"automlModel\" : \"xkrgcucy4k75ijp46fmuvzvvsz1fugm5a37ouytbb4frpowg6u4tqed4n24y22j7q72jl96ebuei5dwifsc96ygxdgs8o7nyqv7icw5yrew0jr4n3cgj0s1qd3iwaq0m15svzuckos7al9wb74l9ljfrs9umigg7knfomfuc5glpdnpdteb97kefdb\",\n      \"sizeBytes\" : \"5d2fmfqlzjgzpawroyiz5j6ockcqjsgw6bzi7prhmdg6l6rf9npf4911cck5i3ef8cep5gynb71mvpme1ehhz7u6jaaihjq38p3\"\n    },\n    \"createTime\" : \"2022-08-31T16:20:58.104777Z\",\n    \"modelHash\" : \"28nnm\",\n    \"displayName\" : \"Sidney Turner\",\n    \"activeOperations\" : [ {\n      \"metadata\" : { },\n      \"response\" : { },\n      \"name\" : \"Emery Goldner\",\n      \"error\" : {\n        \"code\" : 1257710804,\n        \"details\" : [ { }, { }, { }, { }, { } ],\n        \"message\" : \"Omnis iure incidunt animi molestias. Eos rerum numquam eum non id. Eos distinctio eum iste et. Consequatur optio modi aut.\"\n      },\n      \"done\" : true\n    }, {\n      \"metadata\" : { },\n      \"response\" : { },\n      \"name\" : \"Armand West III\",\n      \"error\" : {\n        \"code\" : 826035965,\n        \"details\" : [ { }, { } ],\n        \"message\" : \"Labore et quod atque. Nulla omnis ipsum tempora ullam. Eum ullam quae sit adipisci provident. Perferendis quaerat doloremque. Et expedita iure perspiciatis tempora suscipit.\"\n      },\n      \"done\" : false\n    }, {\n      \"metadata\" : { },\n      \"response\" : { },\n      \"name\" : \"Miguel Bahringer Jr.\",\n      \"error\" : {\n        \"code\" : 610018681,\n        \"details\" : [ { }, { }, { }, { }, { }, { }, { } ],\n        \"message\" : \"Eaque error sunt temporibus suscipit neque eos. Ab voluptas nisi eveniet nihil. Tempore possimus tempora. Dolorem excepturi et quisquam quas aut quas et.\"\n      },\n      \"done\" : true\n    }, {\n      \"metadata\" : { },\n      \"response\" : { },\n      \"name\" : \"Jennette Cronin V\",\n      \"error\" : {\n        \"code\" : 131317259,\n        \"details\" : [ { }, { }, { }, { }, { }, { }, { }, { } ],\n        \"message\" : \"Accusamus accusantium nostrum. Labore quidem ratione corrupti. Tempore dolore sed. Dolorem eos aliquid enim ratione porro. Accusantium assumenda repellendus aliquam eos qui ea dolorem.\"\n      },\n      \"done\" : false\n    }, {\n      \"metadata\" : { },\n      \"response\" : { },\n      \"name\" : \"Colby Beatty\",\n      \"error\" : {\n        \"code\" : 390908378,\n        \"details\" : [ { }, { }, { }, { } ],\n        \"message\" : \"Laborum autem nulla ea dolorum placeat aut rerum. Consequatur ratione eligendi. Consequatur eos iure quasi. At voluptas nihil eveniet ut. In velit ut quae.\"\n      },\n      \"done\" : true\n    }, {\n      \"metadata\" : { },\n      \"response\" : { },\n      \"name\" : \"Ena Blick\",\n      \"error\" : {\n        \"code\" : 988855978,\n        \"details\" : [ { }, { }, { } ],\n        \"message\" : \"Eaque velit magnam quas ut quia. Harum omnis voluptas eius odit eum commodi. Voluptate fugiat molestiae perferendis. Aperiam nihil non rem itaque. Architecto officia repellendus vero quia est sed.\"\n      },\n      \"done\" : false\n    }, {\n      \"metadata\" : { },\n      \"response\" : { },\n      \"name\" : \"Silva Kunde\",\n      \"error\" : {\n        \"code\" : 2098894622,\n        \"details\" : [ { }, { }, { }, { }, { } ],\n        \"message\" : \"Voluptatum corporis et est numquam consequuntur in. Eum modi assumenda aliquam odit voluptatum reprehenderit. Vel earum perferendis quia ratione laudantium voluptate. Quia est est. Voluptatem impedit \"\n      },\n      \"done\" : false\n    }, {\n      \"metadata\" : { },\n      \"response\" : { },\n      \"name\" : \"Mrs. Garrett Renner\",\n      \"error\" : {\n        \"code\" : 49489720,\n        \"details\" : [ { }, { }, { }, { } ],\n        \"message\" : \"Facere est soluta natus. Fugit quaerat aut incidunt. In blanditiis suscipit.\"\n      },\n      \"done\" : false\n    } ],\n    \"name\" : \"Ashlyn Boyer\",\n    \"etag\" : \"voluptatem\",\n    \"updateTime\" : \"2022-07-08T16:19:58.105776Z\",\n    \"state\" : {\n      \"published\" : true,\n      \"validationError\" : {\n        \"code\" : 2048566211,\n        \"details\" : [ { }, { }, { } ],\n        \"message\" : \"Reprehenderit est enim non quos non. Odit ut quia. Doloremque rerum quia molestiae. Vero necessitatibus ut voluptas sed inventore rerum. Blanditiis tempore voluptate illo alias ipsam similique.\"\n      }\n    },\n    \"tags\" : [ \"14w7naa7sb3p1g6py6iyjt3h0qdr9ufvzom47axiw7m5j03svhb07p4wq6yxurt6xfslsyxq9gem46z0iqycrjttvl99vrk4q61h7fcpimq2zmita9m9y0hb17nvmjcdued1rhocrdzvtv0rv18spbusd8vjlb5c1xlvefqbgto\", \"k5xwubbxw1hexrck3igd3zhh2mu3j8ddqe5uyd3gv410jpl6ukkt1lbr7tx24hghbr06v18ofgcw6yvorog1q824fjjp8e5nlz\", \"bluzojhj3xd7gwunqjr0jsh1842i0y5mfak2uwtvpdn6eiiixxajl65bj9jdsxoz681dkgz9j89qqzhbwdis6j55zyik59ndf8p9cdezgpvwsgt70abgi90l2ogm2bir76gy94zr5o8o9zso9pd31nbl6ib4bpi2mlxkrpxs1qulrd29rt7p3k9\", \"0ir321dj746zbaoi5zetat1xo730w2cjr8253n9cze9c1ftm8948qmxb2qjyb7jlrg4uf4uwpfnq2g\", \"l6foojhbdx5sl6oydtsrwwexmldnq90qulee32mqs9dj8l4qwuj0j2cckdqnud20cgf3wsioam13ynxaukvjbob\", \"dr2sxgbdph226yzn8au6uumbu2ad0loemvni4j7ttn7bi61ehoyr75mmobnkvari8grktyj0x65mepllfxfkmczyv9zzw5wlxd30pnvms7z39hd808mbcl3nzutve2xis3ywokfcftqpkcncm2j9cfkypbe2nqop6\" ]\n  }, {\n    \"tfliteModel\" : {\n      \"gcsTfliteUri\" : \"https://web.example.mocklab.io/343656\",\n      \"automlModel\" : \"lh22tjoqjo7944pysgidwx9uer2puqkalgzp8nuyiq5e3r6q3rxyji8j67tafbdn3uy9fixxx09vwvsi50t78ofkcw1coa1jbawc7o5e26yz2r0ug25t4gdzbcyz5oysda0ysb6iz15jmvedng2jqdmmb5h09pq3ulylt8r17vw98dut6w3tg\",\n      \"sizeBytes\" : \"ce3ve3hurmdgvs7myffumvpc6ufa52pazw4bxjgr9mp7sb9ojpb3t5wgbpat7mrqvgg5y4z012duktcjg8cz5ykf8ykd6542y68xhia\"\n    },\n    \"createTime\" : \"2022-04-17T15:40:58.106005Z\",\n    \"modelHash\" : \"7asdyixqow71thu169qc0js\",\n    \"displayName\" : \"Paulita Shields\",\n    \"activeOperations\" : [ {\n      \"metadata\" : { },\n      \"response\" : { },\n      \"name\" : \"Jose Erdman IV\",\n      \"error\" : {\n        \"code\" : 819018681,\n        \"details\" : [ { } ],\n        \"message\" : \"Culpa illo provident. Sed ratione quam accusantium. Eaque et enim dolor id laudantium.\"\n      },\n      \"done\" : false\n    } ],\n    \"name\" : \"Robbie Batz\",\n    \"etag\" : \"consectetur\",\n    \"updateTime\" : \"2022-10-29T14:41:58.106246Z\",\n    \"state\" : {\n      \"published\" : true,\n      \"validationError\" : {\n        \"code\" : 1870745602,\n        \"details\" : [ { }, { }, { }, { } ],\n        \"message\" : \"Omnis ad maxime recusandae nisi. Laboriosam omnis vitae explicabo quibusdam accusantium. Est voluptatibus dolor corrupti et dolorem. Cum et esse odit et. Sapiente dignissimos inventore laboriosam expe\"\n      }\n    },\n    \"tags\" : [ \"blxgpy1sey3fq4sx4rbmlwse2roft9g9xfptqot4zqfk2nlqeu3fwvs5kpplw3acbbmf8kzsynuas91560eri3ev6jrdr0unex1vflscb3878d1spxunshvvvhakmv4cy7igw1j9e0m7319kzl9qt8dgg3fhthj432d261pouka9s6spbhhtl1w01agh5\", \"jpdys5ztf5m3xeto6xwnz9z6b9n42j2u8milzd69584040zzfdhqej5cfvwpdr9vqpn8se7ykagb\", \"3jwaykfo9fitqz7qcctc6orelgrel69m55kjv3fabuu8rxg4ha1ybs53y3c02311lsm0475f9dxft21iaty8gis56i62mgvb53qfs8r7r3zl0o90l8eo0rwsroh0c9r73boxcem3tw94b0\" ]\n  } ],\n  \"nextPageToken\" : \"adcqd978xkh3n7vooxzdrztoh709t0uusni9ljzbrm2hfl14av2iovfz23j7n5qi99f6ctr5w6kkc6c5fwfuew6lkwxdf0hxow07qa4m8fyigks7dr9p9ywzc3d60yzua8l4jugn8axl4yh9r0cnc1co9378ft0a59p72ahnr7tynpr\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "91c17088-e885-36e1-8fd9-136661ea38f7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "firebaseml.projects.models.list",
          "schema" : {
            "description" : "The response for list models",
            "properties" : {
              "models" : {
                "description" : "The list of models",
                "items" : {
                  "$ref" : "#/components/schemas/Model"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "Token to retrieve the next page of results, or empty if there are no more results in the list.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 1
  }, {
    "id" : "c534a3e8-a03d-3af5-9531-4fb4a17206cd",
    "name" : "Gets Download information for a model. This is meant for downloading model resou...",
    "request" : {
      "urlPath" : "/v1beta2/Magaret+Torp:download",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"modelFormat\" : \"TFLITE\",\n  \"expireTime\" : \"2023-01-01T15:01:58.102479Z\",\n  \"downloadUri\" : \"https://web.example.mocklab.io/578743\",\n  \"sizeBytes\" : \"qm5xkc7mdgkh3uvfqbboqxs22yjud\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "c534a3e8-a03d-3af5-9531-4fb4a17206cd",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "firebaseml.projects.models.download",
          "schema" : {
            "description" : "The response for downloading a model to device.",
            "properties" : {
              "downloadUri" : {
                "description" : "Output only. A download URI for the model/zip file.",
                "readOnly" : true,
                "type" : "string"
              },
              "expireTime" : {
                "description" : "Output only. The time that the download URI link expires. If the link has expired, the REST call must be repeated.",
                "format" : "google-datetime",
                "readOnly" : true,
                "type" : "string"
              },
              "modelFormat" : {
                "description" : "Output only. The format of the model being downloaded.",
                "enum" : [ "MODEL_FORMAT_UNSPECIFIED", "TFLITE" ],
                "readOnly" : true,
                "type" : "string"
              },
              "sizeBytes" : {
                "description" : "Output only. The size of the file(s), if this information is available.",
                "format" : "int64",
                "readOnly" : true,
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 2
  }, {
    "id" : "9118f985-be8b-302b-ba0d-e045284bf1c2",
    "name" : "Updates a model. The longrunning operation will eventually return a Model.",
    "request" : {
      "urlPath" : "/v1beta2/Mohammad+West",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Deedee Ankunding\",\n  \"error\" : {\n    \"code\" : 2041039830,\n    \"details\" : [ { }, { } ],\n    \"message\" : \"Delectus delectus deleniti asperiores non. Nam accusamus quasi. Ut quis qui velit illo facere.\"\n  },\n  \"done\" : false\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "9118f985-be8b-302b-ba0d-e045284bf1c2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "firebaseml.projects.models.patch",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 3
  }, {
    "id" : "8c62c3ef-4ea8-306f-aa9f-1d71cd7394b2",
    "name" : "Gets the latest state of a long-running operation. Clients can use this method t...",
    "request" : {
      "urlPath" : "/v1beta2/Janeen+Zulauf",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"metadata\" : { },\n  \"response\" : { },\n  \"name\" : \"Mrs. Joeann Grant\",\n  \"error\" : {\n    \"code\" : 1593986103,\n    \"details\" : [ { }, { }, { }, { }, { }, { } ],\n    \"message\" : \"Expedita omnis aut dignissimos nihil molestias in. Unde blanditiis delectus sunt. Id ut minima rerum commodi. Voluptatibus animi est excepturi libero quia.\"\n  },\n  \"done\" : true\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "8c62c3ef-4ea8-306f-aa9f-1d71cd7394b2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "firebaseml.projects.operations.get",
          "schema" : {
            "description" : "This resource represents a long-running operation that is the result of a network API call.",
            "properties" : {
              "done" : {
                "description" : "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                "type" : "boolean"
              },
              "error" : {
                "$ref" : "#/components/schemas/Status"
              },
              "metadata" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                "type" : "object"
              },
              "name" : {
                "description" : "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                "type" : "string"
              },
              "response" : {
                "additionalProperties" : {
                  "description" : "Properties of the object. Contains field @type with type URL."
                },
                "description" : "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                "type" : "object"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 4
  }, {
    "id" : "1a9a3e9d-24c7-3ba9-a201-8aad37b0a50b",
    "name" : "Deletes a model",
    "request" : {
      "urlPath" : "/v1beta2/Thomas+Lubowitz",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{ }",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "1a9a3e9d-24c7-3ba9-a201-8aad37b0a50b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "oas" : {
          "operationId" : "firebaseml.projects.models.delete",
          "schema" : {
            "description" : "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 5
  } ]
}