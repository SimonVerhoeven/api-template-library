{
  "mappings" : [ {
    "id" : "d86efb22-65a1-4947-8280-1c7bb43631a2",
    "name" : "Updates or insert a given session.",
    "request" : {
      "urlPath" : "/4295/sessions/00xw",
      "method" : "PUT"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"activeTimeMillis\" : \"2022-10-31T15:07:43.910928Z\",\n  \"endTimeMillis\" : \"2023-01-22T15:39:43.910956Z\",\n  \"application\" : {\n    \"detailsUrl\" : \"https://web.example.mocklab.io/667735\",\n    \"name\" : \"Dr. Jude Daniel\",\n    \"packageName\" : \"Dr. Kimber Block\",\n    \"version\" : \"bs6u5v98dv3ovzvei5739fkox25vcuexomrt8fc2nlw1\"\n  },\n  \"startTimeMillis\" : \"2022-12-08T12:20:43.911136Z\",\n  \"name\" : \"Mac O'Conner\",\n  \"description\" : \"Eum dolorem iusto. Libero labore voluptate tempora dolores quia. Qui ad quo. Rem autem nostrum minus est et fugiat. Totam ut ex libero rerum dolor.\",\n  \"modifiedTimeMillis\" : \"2022-06-05T15:28:43.911227Z\",\n  \"id\" : \"h4gm\",\n  \"activityType\" : 1288562123\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "d86efb22-65a1-4947-8280-1c7bb43631a2",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:43.911542Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "fitness.users.sessions.update",
          "schema" : {
            "description" : "Sessions contain metadata, such as a user-friendly name and time interval information.",
            "properties" : {
              "activeTimeMillis" : {
                "description" : "Session active time. While start_time_millis and end_time_millis define the full session time, the active time can be shorter and specified by active_time_millis. If the inactive time during the session is known, it should also be inserted via a com.google.activity.segment data point with a STILL activity value",
                "format" : "int64",
                "type" : "string"
              },
              "activityType" : {
                "description" : "The type of activity this session represents.",
                "format" : "int32",
                "type" : "integer"
              },
              "application" : {
                "$ref" : "#/components/schemas/Application"
              },
              "description" : {
                "description" : "A description for this session.",
                "type" : "string"
              },
              "endTimeMillis" : {
                "description" : "An end time, in milliseconds since epoch, inclusive.",
                "format" : "int64",
                "type" : "string"
              },
              "id" : {
                "description" : "A client-generated identifier that is unique across all sessions owned by this particular user.",
                "type" : "string"
              },
              "modifiedTimeMillis" : {
                "description" : "A timestamp that indicates when the session was last modified.",
                "format" : "int64",
                "type" : "string"
              },
              "name" : {
                "description" : "A human readable name of the session.",
                "type" : "string"
              },
              "startTimeMillis" : {
                "description" : "A start time, in milliseconds since epoch, inclusive.",
                "format" : "int64",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 0
  }, {
    "id" : "b3a3405b-b34b-4940-9ecd-859d8af7359b",
    "name" : "Deletes a session specified by the given session ID. - 200",
    "request" : {
      "urlPath" : "/5566/sessions/620a",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200
    },
    "uuid" : "b3a3405b-b34b-4940-9ecd-859d8af7359b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:43.910895Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "fitness.users.sessions.delete"
        }
      }
    },
    "insertionIndex" : 1
  }, {
    "id" : "a76fb1da-00d1-4740-b330-88a237419da1",
    "name" : "Lists sessions previously created.",
    "request" : {
      "urlPath" : "/rt0l/sessions",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"nextPageToken\" : \"bimhp8kwowmwrbgtehdrimju6zb52kfn1xmnmztawfevzazmn06m3f4pb7xnycdg7kt3gvhoq5b89om0b0o4nwmff99xmh2sx2jc3ya6lkr84hejkp3elwuzhy3wy3i4ff9jeqm08442lpb0w38fyd7p7d4flu1i9cdsa8a7xry03koa1b\",\n  \"session\" : [ {\n    \"activeTimeMillis\" : \"2023-03-11T12:40:43.90766Z\",\n    \"endTimeMillis\" : \"2022-11-25T14:48:43.907688Z\",\n    \"application\" : {\n      \"detailsUrl\" : \"https://web.example.mocklab.io/496938\",\n      \"name\" : \"Dr. Edwin Pollich\",\n      \"packageName\" : \"Miki Osinski\",\n      \"version\" : \"mqx2m9hf5na2c0w87pz8kck0yaa1h2y69ugol\"\n    },\n    \"startTimeMillis\" : \"2022-07-20T11:54:43.90788Z\",\n    \"name\" : \"Mr. Shelia Treutel\",\n    \"description\" : \"Quidem beatae iure nulla sed enim id. Eligendi ut debitis. Maiores amet adipisci vero ut cumque. Enim dicta omnis adipisci nulla et. Magnam repellat amet.\",\n    \"modifiedTimeMillis\" : \"2022-06-21T12:33:43.907985Z\",\n    \"id\" : \"9je2\",\n    \"activityType\" : 127973128\n  }, {\n    \"activeTimeMillis\" : \"2022-03-30T13:27:43.908089Z\",\n    \"endTimeMillis\" : \"2022-05-17T12:21:43.908118Z\",\n    \"application\" : {\n      \"detailsUrl\" : \"https://web.example.mocklab.io/748764\",\n      \"name\" : \"Mr. Lynwood Davis\",\n      \"packageName\" : \"Mr. Bob Heidenreich\",\n      \"version\" : \"izb6yip9s0twrdpe88tpr\"\n    },\n    \"startTimeMillis\" : \"2023-03-11T13:23:43.908307Z\",\n    \"name\" : \"Ludie Wilderman\",\n    \"description\" : \"Sit soluta odit autem. Inventore autem reprehenderit. Quod illum culpa alias officia facere nisi. Corporis fugiat ab mollitia cupiditate est. Sed dicta et mollitia ut.\",\n    \"modifiedTimeMillis\" : \"2022-08-25T13:10:43.908406Z\",\n    \"id\" : \"870n\",\n    \"activityType\" : 474174105\n  }, {\n    \"activeTimeMillis\" : \"2023-03-02T14:18:43.908506Z\",\n    \"endTimeMillis\" : \"2022-07-12T12:25:43.908534Z\",\n    \"application\" : {\n      \"detailsUrl\" : \"https://web.example.mocklab.io/724349\",\n      \"name\" : \"Miss Yajaira Denesik\",\n      \"packageName\" : \"Vance Deckow\",\n      \"version\" : \"hoapg20zbtr4j0kn7en3gyir6qi4eirvi3ja66339fjcrbbby96axeqo4lm246ywy3147rydsrgp3syxywc3vec317ejbm7kjowpzar7kpqwb429td0bt1epmqkwgal152ak5vf25yy0yidrph6sl49mh9vsu8aheyeqiomp8w4lgvo\"\n    },\n    \"startTimeMillis\" : \"2022-04-13T13:30:43.908717Z\",\n    \"name\" : \"Leone Crona\",\n    \"description\" : \"Eos occaecati reprehenderit molestias mollitia non expedita optio. Voluptas et et odio deleniti sit. Sint est ratione veniam delectus est omnis.\",\n    \"modifiedTimeMillis\" : \"2023-02-25T15:35:43.908814Z\",\n    \"id\" : \"q7bj\",\n    \"activityType\" : 1602936093\n  } ],\n  \"hasMoreData\" : false,\n  \"deletedSession\" : [ {\n    \"activeTimeMillis\" : \"2022-09-14T11:57:43.908934Z\",\n    \"endTimeMillis\" : \"2022-05-20T14:54:43.908961Z\",\n    \"application\" : {\n      \"detailsUrl\" : \"https://web.example.mocklab.io/977436\",\n      \"name\" : \"Dr. Louise Feil\",\n      \"packageName\" : \"Lovetta Ryan\",\n      \"version\" : \"qa9pk6wk9b6tfdjclza7uzjxmdxytjwx9ctl3fzyrbfd1psck641t82p5o89867hacq1o4lesau177l2zx1dh72elngrlzur4iddnd888bgiztcw26yidbum6bh4zzu5ltxxiid4fasg04q5ejutehprgz53qyztolycu7bahgue8s7ttgqhvu0o3366gkdm1ntb1w\"\n    },\n    \"startTimeMillis\" : \"2022-10-25T12:34:43.909148Z\",\n    \"name\" : \"Gerry Turcotte\",\n    \"description\" : \"Quis aut officia sed excepturi quae quisquam. Aut aut et. Sunt ut et amet.\",\n    \"modifiedTimeMillis\" : \"2022-12-02T14:02:43.909235Z\",\n    \"id\" : \"4rx1\",\n    \"activityType\" : 787906974\n  }, {\n    \"activeTimeMillis\" : \"2022-05-28T14:39:43.90934Z\",\n    \"endTimeMillis\" : \"2022-10-18T13:07:43.909367Z\",\n    \"application\" : {\n      \"detailsUrl\" : \"https://web.example.mocklab.io/861227\",\n      \"name\" : \"Oralia Homenick I\",\n      \"packageName\" : \"Breanna Collier\",\n      \"version\" : \"j7b9u7btgnjr62eggw1qbkscsofoq3b69f72fyej8rfnjxfmr77a88mlcrbymcyziuo0l4lu1n0\"\n    },\n    \"startTimeMillis\" : \"2022-06-13T13:10:43.909548Z\",\n    \"name\" : \"Adam Legros\",\n    \"description\" : \"Natus eum ea. Dolorum necessitatibus ut blanditiis rerum. Ipsa nisi occaecati. Et non rerum ea officiis dolorum qui excepturi.\",\n    \"modifiedTimeMillis\" : \"2022-11-06T13:37:43.909644Z\",\n    \"id\" : \"vs67\",\n    \"activityType\" : 2088876848\n  }, {\n    \"activeTimeMillis\" : \"2022-12-09T14:56:43.909748Z\",\n    \"endTimeMillis\" : \"2022-08-13T15:07:43.909775Z\",\n    \"application\" : {\n      \"detailsUrl\" : \"https://web.example.mocklab.io/530315\",\n      \"name\" : \"Rosita Trantow DVM\",\n      \"packageName\" : \"Ling Schultz\",\n      \"version\" : \"kbp4l4awna0wzmyex38alikv758ndldebmym37razybhk55qh94ddfz5mdlqr7o79fxkyk8\"\n    },\n    \"startTimeMillis\" : \"2022-08-25T15:22:43.909954Z\",\n    \"name\" : \"Brooke Brown DVM\",\n    \"description\" : \"Et est consequatur adipisci doloribus possimus. Molestias corrupti ut sunt velit deleniti nihil. Architecto delectus sunt id.\",\n    \"modifiedTimeMillis\" : \"2023-01-13T13:28:43.910047Z\",\n    \"id\" : \"m59m\",\n    \"activityType\" : 1623903937\n  }, {\n    \"activeTimeMillis\" : \"2022-12-21T13:25:43.910152Z\",\n    \"endTimeMillis\" : \"2022-10-06T12:51:43.910179Z\",\n    \"application\" : {\n      \"detailsUrl\" : \"https://web.example.mocklab.io/377719\",\n      \"name\" : \"Oretha Wisozk IV\",\n      \"packageName\" : \"Beau Schumm DVM\",\n      \"version\" : \"vla9mfsjdp3xbkn1qekc92c06k8w3n1qi6t5zuf96qkbrqweru5ckzrzsghvjecdnat2tpip3imskdtmt4lbylq1oa9ay50vuieossenisdbzdmtef6x2vyfw4ppp86nr66bj4260323\"\n    },\n    \"startTimeMillis\" : \"2022-11-04T12:24:43.910358Z\",\n    \"name\" : \"Moses Kemmer PhD\",\n    \"description\" : \"Exercitationem aliquam vel nihil architecto qui rerum nemo. Dolore maiores sunt. Hic ab perferendis quae dignissimos ut ipsum. Voluptas nemo sit.\",\n    \"modifiedTimeMillis\" : \"2022-07-08T14:07:43.910451Z\",\n    \"id\" : \"oj41\",\n    \"activityType\" : 462370573\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a76fb1da-00d1-4740-b330-88a237419da1",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:43.910725Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "fitness.users.sessions.list",
          "schema" : {
            "properties" : {
              "deletedSession" : {
                "description" : "If includeDeleted is set to true in the request, and startTime and endTime are omitted, this will include sessions which were deleted since the last sync.",
                "items" : {
                  "$ref" : "#/components/schemas/Session"
                },
                "type" : "array"
              },
              "hasMoreData" : {
                "description" : "Flag to indicate server has more data to transfer. DO NOT USE THIS FIELD. It is never populated in responses from the server.",
                "type" : "boolean"
              },
              "nextPageToken" : {
                "description" : "The sync token which is used to sync further changes. This will only be provided if both startTime and endTime are omitted from the request.",
                "type" : "string"
              },
              "session" : {
                "description" : "Sessions with an end time that is between startTime and endTime of the request.",
                "items" : {
                  "$ref" : "#/components/schemas/Session"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 2
  }, {
    "id" : "95b450c6-335f-4a51-8f03-b5809e0db771",
    "name" : "Aggregates data of a certain type or stream into buckets divided by a given type...",
    "request" : {
      "urlPath" : "/qv9g/dataset:aggregate",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"bucket\" : [ {\n    \"endTimeMillis\" : \"2022-07-25T12:57:43.906147Z\",\n    \"activity\" : 1621022209,\n    \"startTimeMillis\" : \"2022-12-05T13:36:43.906185Z\",\n    \"session\" : {\n      \"activeTimeMillis\" : \"2022-06-25T13:55:43.906224Z\",\n      \"endTimeMillis\" : \"2023-02-26T12:50:43.906256Z\",\n      \"application\" : {\n        \"detailsUrl\" : \"https://web.example.mocklab.io/260677\",\n        \"name\" : \"Ms. Neville Schaefer\",\n        \"packageName\" : \"Rhett Goodwin\",\n        \"version\" : \"5nq5ctpi455h5l8czb2rngistxstqcpys408dzc6tuk6k6j0r2zcog3xlia3er4eb7x8kfhi81a6xgtlycgkhmx9404auowoyanejcdxx6molajrsyt482wizh0c6td2rvwhkc7d39mtf1\"\n      },\n      \"startTimeMillis\" : \"2022-04-16T12:35:43.906467Z\",\n      \"name\" : \"Doreen Satterfield DDS\",\n      \"description\" : \"Ut fugiat itaque. Ut non id eum eaque qui. Deserunt dolorem et dolorem.\",\n      \"modifiedTimeMillis\" : \"2022-06-11T12:05:43.906576Z\",\n      \"id\" : \"c78n\",\n      \"activityType\" : 286446998\n    },\n    \"type\" : \"activityType\",\n    \"dataset\" : [ {\n      \"dataSourceId\" : \"x9r7\",\n      \"maxEndTimeNs\" : \"2022-12-05T14:50:43.906772Z\",\n      \"minStartTimeNs\" : \"2022-05-26T15:27:43.906804Z\",\n      \"nextPageToken\" : \"8hc58i85si51nrr2noabqkdahnqjm\",\n      \"point\" : [ { } ]\n    }, {\n      \"dataSourceId\" : \"8xao\",\n      \"maxEndTimeNs\" : \"2022-05-18T14:21:43.906921Z\",\n      \"minStartTimeNs\" : \"2022-09-29T13:57:43.906951Z\",\n      \"nextPageToken\" : \"n7wfyy5f43sxlftqhab4q3lxlgiu8i5l9fk4mv5z7dsgeb0tq3cys2qldtq8gmeqvcnnj807lmihlg7d7mxnx6ousi823582q67z991mjtotbymy54m36wqqfo78ra8xee6h5ttawuhve84cru3764kra57vk6p3in6c69oyy5ck87t6kn8i9d7a1vnvs14c\",\n      \"point\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"dataSourceId\" : \"3974\",\n      \"maxEndTimeNs\" : \"2022-05-18T12:55:43.907069Z\",\n      \"minStartTimeNs\" : \"2022-05-02T13:27:43.907099Z\",\n      \"nextPageToken\" : \"4uks6v0llxgc201ronqoin0gsktoxu6nhop2liht4il4mrtudlwxbs7b3v3qbg0\",\n      \"point\" : [ { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"dataSourceId\" : \"9a6v\",\n      \"maxEndTimeNs\" : \"2022-11-16T13:59:43.907226Z\",\n      \"minStartTimeNs\" : \"2022-04-24T13:29:43.907255Z\",\n      \"nextPageToken\" : \"5xcyzr7ff62i757mwd4rcvxz6gu6at8dk60lvj4gvrrpc1yqy0w7ti2qm1ft16bo3wdgwiz1x9qd2dve21r6y989epwoot3x12v4cfctb0aj6ce5cktsgm4mswtatu3kwcx\",\n      \"point\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"dataSourceId\" : \"a5h3\",\n      \"maxEndTimeNs\" : \"2023-01-05T14:42:43.90738Z\",\n      \"minStartTimeNs\" : \"2022-04-07T14:29:43.90741Z\",\n      \"nextPageToken\" : \"ubt0vkland3ij7kbf5pl679yt26likpfder7asll2c4c176q19d5k0xrghayz7wuzk6ow63edbr1mqje03gxfdiz8660rrs9bqf0iv7u4nq1ckfwr6w1sequ2ufrwdanmd2lyml42130ean02c\",\n      \"point\" : [ { }, { }, { }, { }, { }, { }, { } ]\n    } ]\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "95b450c6-335f-4a51-8f03-b5809e0db771",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:43.907589Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "fitness.users.dataset.aggregate",
          "schema" : {
            "properties" : {
              "bucket" : {
                "description" : "A list of buckets containing the aggregated data.",
                "items" : {
                  "$ref" : "#/components/schemas/AggregateBucket"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 3
  }, {
    "id" : "829b3d16-4152-4a30-ab1a-e34fe815d790",
    "name" : "Adds data points to a dataset. The dataset need not be previously created. All p...",
    "request" : {
      "urlPath" : "/4w68/dataSources/eq7e/datasets/93w8",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"dataSourceId\" : \"n185\",\n  \"maxEndTimeNs\" : \"2022-09-26T14:14:43.905461Z\",\n  \"minStartTimeNs\" : \"2022-07-04T14:14:43.905489Z\",\n  \"nextPageToken\" : \"3u35d755cvyabfzeexnok0tm3s2i8iwq7wus0uh2zg9v0gmpvsmem5cm1ran6d007xac5dcrbphuoxto6gjp8z0zj7e1xuqsephawvdp72p4j2vxf0u7uqs8nh0g1sx9hzlmecpe0ivlpksypdflc5k2y168ml6zkzo76nfd6q996dx69yq3ye\",\n  \"point\" : [ {\n    \"originDataSourceId\" : \"08qp\",\n    \"endTimeNanos\" : \"2022-04-12T15:08:43.905602Z\",\n    \"dataTypeName\" : \"James Reichert\",\n    \"startTimeNanos\" : \"2022-04-15T14:58:43.905667Z\",\n    \"modifiedTimeMillis\" : \"2023-01-06T13:11:43.905695Z\",\n    \"rawTimestampNanos\" : \"2023-01-22T14:58:43.905723Z\",\n    \"computationTimeMillis\" : \"2023-01-06T12:03:43.905749Z\",\n    \"value\" : [ {\n      \"intVal\" : 1529342147,\n      \"fpVal\" : 1.6270102912073034E308,\n      \"stringVal\" : \"w0ax7gcywi8cotozr8w3ray3lqr6dcmi9diezqro0c18s6jw3obifl331id22q8hqhizkrugktfmjd01ms4i6me0ke1l7zdxbqxlpd2vnpyczqfmv4z9zuzaie8o0jmn519yg8u4zw6fivnivonu8w304wappneboa04ovi4wibs3moe9s\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1167614369,\n      \"fpVal\" : 1.053074828143999E308,\n      \"stringVal\" : \"c7a1wcohvm5efg5zlbesfv2498u8ebd6qll92us0c826q7b4y1p2wbx2kajrusb6wkqir1u9r3bc1wc4\",\n      \"mapVal\" : [ { }, { }, { }, { }, { } ]\n    } ]\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "829b3d16-4152-4a30-ab1a-e34fe815d790",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:43.906093Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "fitness.users.dataSources.datasets.patch",
          "schema" : {
            "description" : "A dataset represents a projection container for data points. They do not carry any info of their own. Datasets represent a set of data points from a particular data source. A data point can be found in more than one dataset.",
            "properties" : {
              "dataSourceId" : {
                "description" : "The data stream ID of the data source that created the points in this dataset.",
                "type" : "string"
              },
              "maxEndTimeNs" : {
                "description" : "The largest end time of all data points in this possibly partial representation of the dataset. Time is in nanoseconds from epoch. This should also match the second part of the dataset identifier.",
                "format" : "int64",
                "type" : "string"
              },
              "minStartTimeNs" : {
                "description" : "The smallest start time of all data points in this possibly partial representation of the dataset. Time is in nanoseconds from epoch. This should also match the first part of the dataset identifier.",
                "format" : "int64",
                "type" : "string"
              },
              "nextPageToken" : {
                "description" : "This token will be set when a dataset is received in response to a GET request and the dataset is too large to be included in a single response. Provide this value in a subsequent GET request to return the next page of data points within this dataset.",
                "type" : "string"
              },
              "point" : {
                "description" : "A partial list of data points contained in the dataset, ordered by endTimeNanos. This list is considered complete when retrieving a small dataset and partial when patching a dataset or retrieving a dataset that is too large to include in a single response.",
                "items" : {
                  "$ref" : "#/components/schemas/DataPoint"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 4
  }, {
    "id" : "90ad48f9-1792-46aa-83af-2cb3827edf7c",
    "name" : "Returns a dataset containing all data points whose start and end times overlap w...",
    "request" : {
      "urlPath" : "/264a/dataSources/9gba/datasets/38u8",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"dataSourceId\" : \"pr8i\",\n  \"maxEndTimeNs\" : \"2022-05-15T14:28:43.902951Z\",\n  \"minStartTimeNs\" : \"2022-09-27T15:20:43.902983Z\",\n  \"nextPageToken\" : \"2h3tsjgk44ogskllt6vf5bp0lr14bn4fum91m6o00uvo8d9zzyflsjd1hqdaiqufe3oqncc1txp1nbi6nknlfd2ioamoyk8re6\",\n  \"point\" : [ {\n    \"originDataSourceId\" : \"z98h\",\n    \"endTimeNanos\" : \"2022-11-02T13:37:43.903102Z\",\n    \"dataTypeName\" : \"Lonnie Block\",\n    \"startTimeNanos\" : \"2023-02-23T13:29:43.903167Z\",\n    \"modifiedTimeMillis\" : \"2022-05-26T14:15:43.903196Z\",\n    \"rawTimestampNanos\" : \"2022-04-21T14:45:43.903223Z\",\n    \"computationTimeMillis\" : \"2022-07-26T12:34:43.903251Z\",\n    \"value\" : [ {\n      \"intVal\" : 494610609,\n      \"fpVal\" : 1.0380379869786652E308,\n      \"stringVal\" : \"jvw3cuvre0c53ty5v0labcyvt3\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1169121813,\n      \"fpVal\" : 3.9188429559747744E306,\n      \"stringVal\" : \"bks312id9l09opjmksm0lbhwd7eabnmipimlb54q4iizk0ntf761iczzceoh8154ib4podxnrwpqzp2yb4banoab4oohett4q9xh5yjcingak\",\n      \"mapVal\" : [ { }, { } ]\n    } ]\n  }, {\n    \"originDataSourceId\" : \"14wp\",\n    \"endTimeNanos\" : \"2022-06-01T13:47:43.903425Z\",\n    \"dataTypeName\" : \"Mr. Gustavo Wilkinson\",\n    \"startTimeNanos\" : \"2023-03-05T15:41:43.903491Z\",\n    \"modifiedTimeMillis\" : \"2023-03-01T13:15:43.903518Z\",\n    \"rawTimestampNanos\" : \"2022-08-14T14:17:43.903547Z\",\n    \"computationTimeMillis\" : \"2022-11-17T12:42:43.903573Z\",\n    \"value\" : [ {\n      \"intVal\" : 1913104546,\n      \"fpVal\" : 2.857754501925174E307,\n      \"stringVal\" : \"32cj9686yfdi6nf5enh24tqa631d2h4xr5qe0gd01yseujksbc2rdt9x59i\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 908957423,\n      \"fpVal\" : 1.68681530935306E308,\n      \"stringVal\" : \"13yyyl5hd3budnfs9u6f83ek3mk9w3w3jvfs0w54kqhnpv64qgrekrr474swoob5wctdamkm3wkhr61933j2un6ehfktwybhvs02dna411hzjxg316a8zpdxonf5g2m183zi2ec6i64usfwijpv8v36fxpq8l5780jnyb05djm4pg\",\n      \"mapVal\" : [ { }, { } ]\n    }, {\n      \"intVal\" : 1080337682,\n      \"fpVal\" : 5.857446338322415E307,\n      \"stringVal\" : \"7wgaohhet7coniw8ym22idyfn7u17jqxphfwbe7j9p9xxam8s1rqjrb6g9u6bkwa0ar83cvazj891o0q4orojdcx\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1069090074,\n      \"fpVal\" : 1.6014016940765834E308,\n      \"stringVal\" : \"085d406d401gnpvasrecojt3epfw1wivre72ejodv9rsa63hl7pwihktka6ey53iyodqx4p6krcdt1my402uo74oulriscivzxgnrn974txufgy376aamdpqof5mi8fxx6jnepsduge8fax762j4vzrq3o54996xpu0r7cq23rycm8pjzw5r\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1319695430,\n      \"fpVal\" : 1.5962226507134066E307,\n      \"stringVal\" : \"505b0aucty8i73k7w1ztus2ttqvohlrdhr0jmcrcisico7w1g6lzc35kzp2ljtdxelj813pjs52bzdd6b41fmaibz\",\n      \"mapVal\" : [ { }, { } ]\n    } ]\n  }, {\n    \"originDataSourceId\" : \"n82i\",\n    \"endTimeNanos\" : \"2022-08-17T12:49:43.903844Z\",\n    \"dataTypeName\" : \"Dorsey Torp DVM\",\n    \"startTimeNanos\" : \"2022-07-04T15:41:43.90391Z\",\n    \"modifiedTimeMillis\" : \"2022-09-23T12:47:43.903937Z\",\n    \"rawTimestampNanos\" : \"2022-08-16T14:26:43.903964Z\",\n    \"computationTimeMillis\" : \"2023-03-06T12:11:43.903992Z\",\n    \"value\" : [ {\n      \"intVal\" : 660640219,\n      \"fpVal\" : 1.696389946815775E308,\n      \"stringVal\" : \"889egx4h9gq8\",\n      \"mapVal\" : [ { } ]\n    } ]\n  }, {\n    \"originDataSourceId\" : \"741z\",\n    \"endTimeNanos\" : \"2022-06-20T13:27:43.904121Z\",\n    \"dataTypeName\" : \"Janette Lakin\",\n    \"startTimeNanos\" : \"2022-12-30T13:44:43.904187Z\",\n    \"modifiedTimeMillis\" : \"2022-10-05T14:45:43.904213Z\",\n    \"rawTimestampNanos\" : \"2022-11-13T12:26:43.904241Z\",\n    \"computationTimeMillis\" : \"2022-11-04T13:47:43.904268Z\",\n    \"value\" : [ {\n      \"intVal\" : 1816744725,\n      \"fpVal\" : 1.2150488787220619E308,\n      \"stringVal\" : \"ucxdefwu0uytkyzslt4152x9sptp6sgxb960ir6pxj88561oa4dp39gakey9o0cspk583yxuaw9607srbd3kfal59g1e5zc5a3e0wpxu9hjf8\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1333187867,\n      \"fpVal\" : 1.7205384328896259E308,\n      \"stringVal\" : \"taspolktmj9u9msaothtw85qqctk31v2vsitgcg8m1wycwip626ei80qqkn80rlouejklyriknizhqpj7dzpk08mzeem6d1kqzqg8q\",\n      \"mapVal\" : [ { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1654610010,\n      \"fpVal\" : 4.46819667431584E307,\n      \"stringVal\" : \"051d3h6phmvuupgmf3e92lrucwxl2941wc1lfrkpfinnhnzfe48lzrbepgs2rqec0kdj7e3q1xsw8vpum41mmfd0xetsqa43m\",\n      \"mapVal\" : [ { }, { } ]\n    }, {\n      \"intVal\" : 409463460,\n      \"fpVal\" : 1.8624234157291957E307,\n      \"stringVal\" : \"xzejr59bu9ezoh4v1hhfcxthq3lipkxc0xecxemtyitp0j4cw5qm8en5imqpx4v5ph9cx7a84zde5uhmgqwu0d7gbqp5b3ce\",\n      \"mapVal\" : [ { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 721826637,\n      \"fpVal\" : 4.272025316013754E307,\n      \"stringVal\" : \"sjbyogwszt\",\n      \"mapVal\" : [ { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1529107315,\n      \"fpVal\" : 1.0929252636599042E308,\n      \"stringVal\" : \"3wbvnd64i2xajgclec6kbjn1vclmki1pn0d83u3scbr3dtmuvq5o88yp5jimksb2iaog5\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1138576822,\n      \"fpVal\" : 1.8792761944654356E307,\n      \"stringVal\" : \"f5yp9pr823uufrqkikioyp07gcyssjdt7n0e3ur09s7zmj9wh02e2edbva90cwnbl6491wzow4pq9jqtg4x37hq6gtnw4950rz4yfhhprjxll5yzxr7xyix6m4xauli0smsd8rrbboyqizv24ib6u1o14gfk6swk9j92hof92sc2cf373lqftydz\",\n      \"mapVal\" : [ { }, { } ]\n    } ]\n  }, {\n    \"originDataSourceId\" : \"4pgm\",\n    \"endTimeNanos\" : \"2022-12-17T11:50:43.904599Z\",\n    \"dataTypeName\" : \"Tracey Jacobson Sr.\",\n    \"startTimeNanos\" : \"2023-02-03T12:49:43.904665Z\",\n    \"modifiedTimeMillis\" : \"2022-06-06T12:57:43.904692Z\",\n    \"rawTimestampNanos\" : \"2022-10-20T15:33:43.90472Z\",\n    \"computationTimeMillis\" : \"2022-12-21T12:53:43.904747Z\",\n    \"value\" : [ {\n      \"intVal\" : 761919535,\n      \"fpVal\" : 7.783003308975447E307,\n      \"stringVal\" : \"vvss6djblpxr6qx5padp3zfgwta4ydm8065ozgshgaexeao5ic74ufnl4w8ekpf3xzyu41phmcij2bwwb44v8mdmu2r0up3k8opv0zy3h44zj\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 954687543,\n      \"fpVal\" : 1.601573795265654E308,\n      \"stringVal\" : \"iet9gpktk03tpu71amtok15i0yot5vm253a28mlmjtt4qva572o93igqkt5ujz8r9h44g1jum82g4knt6x2hlozjjsjyvl6mkqurw6np9b0eksn\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 677685984,\n      \"fpVal\" : 3.147033139523333E307,\n      \"stringVal\" : \"k0nguwfy6q3untnx0vglj1litixncozya8q5jwk2uumafv5al9ue7ztn0scxzzdynm6f7k4oap6qi6vy6j4p\",\n      \"mapVal\" : [ { }, { } ]\n    }, {\n      \"intVal\" : 1314205381,\n      \"fpVal\" : 1.6089298029344073E308,\n      \"stringVal\" : \"885aom3dxijfd5bxoqlhky0xklh3xx9jwza1q3d96lqhr69qqolfn3rgllxjh1jd3l7vv\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 639562380,\n      \"fpVal\" : 1.4241928360643182E308,\n      \"stringVal\" : \"67ri49q8us1shgod2bsnv98xk43evyp7gi49gghs5xszs31xo3152o9elfdlj4qvytigrwtu5j6giniaj05qd48hph80wi63n623wypsp9267zay3vy9cfuk\",\n      \"mapVal\" : [ { }, { } ]\n    }, {\n      \"intVal\" : 1236528619,\n      \"fpVal\" : 1.556198291581356E308,\n      \"stringVal\" : \"fg8bc3b0x8tm50iojximacrr4vila1vkov4uu0k5ev6k556nm2imephpi4tluz3pzcdv9gwm\",\n      \"mapVal\" : [ { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 264172542,\n      \"fpVal\" : 1.508399117921697E308,\n      \"stringVal\" : \"vygurlpd1tq5s24hcnrqom9f6js23y3069r89wd0n9\",\n      \"mapVal\" : [ { }, { } ]\n    } ]\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "90ad48f9-1792-46aa-83af-2cb3827edf7c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:43.905346Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "fitness.users.dataSources.datasets.get",
          "schema" : {
            "description" : "A dataset represents a projection container for data points. They do not carry any info of their own. Datasets represent a set of data points from a particular data source. A data point can be found in more than one dataset.",
            "properties" : {
              "dataSourceId" : {
                "description" : "The data stream ID of the data source that created the points in this dataset.",
                "type" : "string"
              },
              "maxEndTimeNs" : {
                "description" : "The largest end time of all data points in this possibly partial representation of the dataset. Time is in nanoseconds from epoch. This should also match the second part of the dataset identifier.",
                "format" : "int64",
                "type" : "string"
              },
              "minStartTimeNs" : {
                "description" : "The smallest start time of all data points in this possibly partial representation of the dataset. Time is in nanoseconds from epoch. This should also match the first part of the dataset identifier.",
                "format" : "int64",
                "type" : "string"
              },
              "nextPageToken" : {
                "description" : "This token will be set when a dataset is received in response to a GET request and the dataset is too large to be included in a single response. Provide this value in a subsequent GET request to return the next page of data points within this dataset.",
                "type" : "string"
              },
              "point" : {
                "description" : "A partial list of data points contained in the dataset, ordered by endTimeNanos. This list is considered complete when retrieving a small dataset and partial when patching a dataset or retrieving a dataset that is too large to include in a single response.",
                "items" : {
                  "$ref" : "#/components/schemas/DataPoint"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 5
  }, {
    "id" : "432582f9-134f-4015-938b-23914a4eed86",
    "name" : "Performs an inclusive delete of all data points whose start and end times have a... - 200",
    "request" : {
      "urlPath" : "/8718/dataSources/u5bs/datasets/xm5w",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200
    },
    "uuid" : "432582f9-134f-4015-938b-23914a4eed86",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:43.902843Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "fitness.users.dataSources.datasets.delete"
        }
      }
    },
    "insertionIndex" : 6
  }, {
    "id" : "fc2e75a4-5556-4747-92bc-23ef88799614",
    "name" : "Queries for user's data point changes for a particular data source.",
    "request" : {
      "urlPath" : "/k442/dataSources/5297/dataPointChanges",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"dataSourceId\" : \"v778\",\n  \"deletedDataPoint\" : [ {\n    \"originDataSourceId\" : \"0t1i\",\n    \"endTimeNanos\" : \"2023-01-10T13:53:43.899204Z\",\n    \"dataTypeName\" : \"Freddy Walsh\",\n    \"startTimeNanos\" : \"2022-09-19T12:47:43.899274Z\",\n    \"modifiedTimeMillis\" : \"2023-03-20T13:59:43.899305Z\",\n    \"rawTimestampNanos\" : \"2023-01-22T15:05:43.899337Z\",\n    \"computationTimeMillis\" : \"2022-06-02T14:05:43.899369Z\",\n    \"value\" : [ {\n      \"intVal\" : 5827591,\n      \"fpVal\" : 1.558409095221054E308,\n      \"stringVal\" : \"sa5rqhxz9hrq6z7kavi2xblnwaghoo8w78ulq1weaa7\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 289694575,\n      \"fpVal\" : 8.825817167990524E307,\n      \"stringVal\" : \"4ow5jhoqvgyd0z8c4qvf3uxfpm1x1cmo3lvoua9mok\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { } ]\n    } ]\n  }, {\n    \"originDataSourceId\" : \"666c\",\n    \"endTimeNanos\" : \"2023-01-27T12:10:43.899566Z\",\n    \"dataTypeName\" : \"Harriette Klein\",\n    \"startTimeNanos\" : \"2023-01-15T14:00:43.89963Z\",\n    \"modifiedTimeMillis\" : \"2023-02-04T12:48:43.899657Z\",\n    \"rawTimestampNanos\" : \"2022-05-30T12:53:43.899685Z\",\n    \"computationTimeMillis\" : \"2022-12-30T14:16:43.899714Z\",\n    \"value\" : [ {\n      \"intVal\" : 999421217,\n      \"fpVal\" : 1.2147822851827087E308,\n      \"stringVal\" : \"9sfa5smvxsqksnz5g6q9xqhyjj1ivraq7dtwrdgixy8ye7o4mr2htrqmc\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 736327910,\n      \"fpVal\" : 6.688311573970513E307,\n      \"stringVal\" : \"8sdqz0mo25hw8gyyr62d3n9djzryb70zyg1y2z9lm04mkl4cejd1\",\n      \"mapVal\" : [ { }, { } ]\n    }, {\n      \"intVal\" : 1542874565,\n      \"fpVal\" : 5.803156629684159E307,\n      \"stringVal\" : \"n175gg4ltjmfaacephucwgc2tlygqwuf0p2s0lhr2jp5eub7l9e18i7ytcnqzzr71u4xmlv26pso9qnly\",\n      \"mapVal\" : [ { } ]\n    }, {\n      \"intVal\" : 154883939,\n      \"fpVal\" : 9.053173258437462E307,\n      \"stringVal\" : \"mj5ik0x2085n7jt3rj5t6sev5a3b5hgbi9gxuee89jg1wi7eib20b2x6og5aombrr8r1sddkgojyq8s9hmokf3wpw\",\n      \"mapVal\" : [ { }, { }, { }, { } ]\n    } ]\n  } ],\n  \"nextPageToken\" : \"ds1nis22mhchpzo26pr7dpde15g8xx8d6oxhvmhl6v5q7omznzxy3lpo3p9iqla10pe2k87bblrid31vnemuvm\",\n  \"insertedDataPoint\" : [ {\n    \"originDataSourceId\" : \"53k8\",\n    \"endTimeNanos\" : \"2022-08-31T11:58:43.899965Z\",\n    \"dataTypeName\" : \"Dustin Hills\",\n    \"startTimeNanos\" : \"2023-02-09T15:22:43.900029Z\",\n    \"modifiedTimeMillis\" : \"2022-04-09T14:39:43.900057Z\",\n    \"rawTimestampNanos\" : \"2022-10-06T14:26:43.900085Z\",\n    \"computationTimeMillis\" : \"2022-11-13T12:06:43.900113Z\",\n    \"value\" : [ {\n      \"intVal\" : 1292504740,\n      \"fpVal\" : 4.1268194810382746E307,\n      \"stringVal\" : \"3jmgww\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1511728763,\n      \"fpVal\" : 8.645604786746833E307,\n      \"stringVal\" : \"0egige\",\n      \"mapVal\" : [ { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 383268551,\n      \"fpVal\" : 3.503810197316367E307,\n      \"stringVal\" : \"obvlnac5f74g34oahlfm82q45ul8b4lt481x8yxe2vm2pyc06b9mnf74w4ha272z0boe0dhy5b0ajfvel9hu7xzkxi7ejspyn56mx73fxu8qopa39rq23k0k1rpaln9aup0fg1c3a5gc061rnm\",\n      \"mapVal\" : [ { }, { } ]\n    }, {\n      \"intVal\" : 177123364,\n      \"fpVal\" : 8.690910857880573E307,\n      \"stringVal\" : \"0cfxmezp3dg0dzc5vejdz194j5yz1wcgn0r29qxhu9xanc2v4555tkvrxuhvp5f7fy0gr\",\n      \"mapVal\" : [ { }, { }, { } ]\n    } ]\n  }, {\n    \"originDataSourceId\" : \"odt8\",\n    \"endTimeNanos\" : \"2022-05-09T12:37:43.900353Z\",\n    \"dataTypeName\" : \"Frederick McClure\",\n    \"startTimeNanos\" : \"2022-10-07T12:32:43.900419Z\",\n    \"modifiedTimeMillis\" : \"2022-09-21T15:34:43.900448Z\",\n    \"rawTimestampNanos\" : \"2022-04-27T13:44:43.900478Z\",\n    \"computationTimeMillis\" : \"2022-09-27T14:12:43.900507Z\",\n    \"value\" : [ {\n      \"intVal\" : 1019888092,\n      \"fpVal\" : 9.946348775715825E307,\n      \"stringVal\" : \"awetbmy4iglwev2axfzvmgeol2skinmxwryuyay85fot2pzauflp4aa1em8i41yq5cra08wnhqz9qsh6hq3gz1tn9zamz\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1699917557,\n      \"fpVal\" : 1.6570278206612993E308,\n      \"stringVal\" : \"5s4s6dh6zyecx1of0trmyti040ypuizuf5y3ze2j2yyvvkg59pkl53o55so453pxhhvefetpvj2cxrihiea5ry11bqr3zu8flory38lwav6ybzzrpsxcx69r42l57rs5l2u12j3r7nfdyym63yx9a7hsd7l62642amxkokbntb\",\n      \"mapVal\" : [ { }, { } ]\n    } ]\n  }, {\n    \"originDataSourceId\" : \"553w\",\n    \"endTimeNanos\" : \"2022-04-24T13:01:43.900684Z\",\n    \"dataTypeName\" : \"Arnulfo Bins\",\n    \"startTimeNanos\" : \"2022-09-04T11:44:43.900749Z\",\n    \"modifiedTimeMillis\" : \"2022-12-31T14:26:43.900776Z\",\n    \"rawTimestampNanos\" : \"2022-05-13T12:08:43.900805Z\",\n    \"computationTimeMillis\" : \"2022-12-23T12:05:43.900832Z\",\n    \"value\" : [ {\n      \"intVal\" : 1967974498,\n      \"fpVal\" : 1.3106205756434078E308,\n      \"stringVal\" : \"7nol0yzzjlupv30eb5gk71ufq3reeh4n5hgp5ljsjuee5e4qll46ebeh9lcfz5hdfw9ify8hnxpcscjhk7ffzth9st1jimn25ej7dmi0c\",\n      \"mapVal\" : [ { } ]\n    } ]\n  }, {\n    \"originDataSourceId\" : \"y5lh\",\n    \"endTimeNanos\" : \"2022-07-09T13:54:43.900959Z\",\n    \"dataTypeName\" : \"Raven Murray\",\n    \"startTimeNanos\" : \"2022-06-10T12:12:43.901022Z\",\n    \"modifiedTimeMillis\" : \"2023-02-02T11:47:43.90105Z\",\n    \"rawTimestampNanos\" : \"2022-07-01T13:40:43.901077Z\",\n    \"computationTimeMillis\" : \"2022-12-22T12:17:43.901103Z\",\n    \"value\" : [ {\n      \"intVal\" : 1689713595,\n      \"fpVal\" : 1.1614112590479766E307,\n      \"stringVal\" : \"kziref4f6x2e42tbahw6n17bpg\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1243738894,\n      \"fpVal\" : 2.7204924419353635E307,\n      \"stringVal\" : \"jszqqdxiu00427g0hl77yfl8nhlt2lau2azufcmng8\",\n      \"mapVal\" : [ { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1229362249,\n      \"fpVal\" : 1.569145042846264E308,\n      \"stringVal\" : \"zqqmgvihxzf1inlfucu6ykc5gr7ay2m8gdakn\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1800773255,\n      \"fpVal\" : 1.8428145113237315E307,\n      \"stringVal\" : \"53ti3pkp1ltcrdc23a0wm\",\n      \"mapVal\" : [ { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1359113246,\n      \"fpVal\" : 7.420769778190717E306,\n      \"stringVal\" : \"tub829kvuvzy6iu1szeo76877e5v07ox4w2n7sa1jlz12g6gffwt2a9ns6taznj7ghcb6y6eqj3dk4puqarb26mfu81c7p1y19lm61228mpme8l7nezwgu174ski3ggiweoh16kws5\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 938033102,\n      \"fpVal\" : 1.6312722366773515E308,\n      \"stringVal\" : \"mmkfcwj2iq98ze4ku2zkz776j\",\n      \"mapVal\" : [ { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1760337939,\n      \"fpVal\" : 4.244837343369244E307,\n      \"stringVal\" : \"nbbok07gvyofdgi02hhoe8el2eg1qi826ng3anwy70z54nvepgqc0ot86cl18cklboqoyyi8c39m6g13i\",\n      \"mapVal\" : [ { } ]\n    } ]\n  }, {\n    \"originDataSourceId\" : \"dd84\",\n    \"endTimeNanos\" : \"2022-06-02T14:12:43.90144Z\",\n    \"dataTypeName\" : \"Cami Vandervort\",\n    \"startTimeNanos\" : \"2023-02-10T12:27:43.901504Z\",\n    \"modifiedTimeMillis\" : \"2022-07-18T15:25:43.90153Z\",\n    \"rawTimestampNanos\" : \"2023-02-27T12:30:43.901558Z\",\n    \"computationTimeMillis\" : \"2022-07-31T14:56:43.901586Z\",\n    \"value\" : [ {\n      \"intVal\" : 1213318116,\n      \"fpVal\" : 8.248449260224558E307,\n      \"stringVal\" : \"3b95p52zabv8y8rgvslf8lk37iwg3xdxsgsh9bnuwguxyzsyblzrg5fagym88ou6zymavl2mpox5uc93ymy853kohj7ivv9zbavnzcyb97tlca7x4vmhy8vtsp2hnu70qtfh2w19jxgxym1d3kzynv3tf5zqokrwyeea38vn47k3v7gfttdg59l7n\",\n      \"mapVal\" : [ { } ]\n    } ]\n  }, {\n    \"originDataSourceId\" : \"i9y7\",\n    \"endTimeNanos\" : \"2022-05-17T14:48:43.901714Z\",\n    \"dataTypeName\" : \"Lawrence O'Conner\",\n    \"startTimeNanos\" : \"2022-07-15T12:03:43.901779Z\",\n    \"modifiedTimeMillis\" : \"2023-02-20T13:47:43.901808Z\",\n    \"rawTimestampNanos\" : \"2022-06-05T12:36:43.901835Z\",\n    \"computationTimeMillis\" : \"2023-02-07T13:35:43.901862Z\",\n    \"value\" : [ {\n      \"intVal\" : 77955108,\n      \"fpVal\" : 1.516860593625869E308,\n      \"stringVal\" : \"cut51p2ic2dhwxd638jsykonvfsq09fs5110whazhehwtu46almma3490dtmsug9uxcv7hs2fjp6z5d6m4dgsxsrs2br7g6w3g1wcm74nx464yo8itxl62v5oi04w13nxglfcfij4techlaevd\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1161942346,\n      \"fpVal\" : 1.5550435196609689E308,\n      \"stringVal\" : \"9ag1tyyco897xm5k23uh1bizeki17yw9zzqz829byfeywsx192oisqfbr3y57y\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1473296133,\n      \"fpVal\" : 1.2840922710741693E308,\n      \"stringVal\" : \"oql4tyubrurroswe5nuhpnkq5jkt1ucmx7nlocyym3lvrmbsi8ht8x822kcm6p6i5mnnoj71kxy2dkhn2541en3qcurf460uwimltouejvf6o0wt0a0jjpq1s4n0irv3lc8cjkto\",\n      \"mapVal\" : [ { } ]\n    }, {\n      \"intVal\" : 301267999,\n      \"fpVal\" : 1.4939503119066466E308,\n      \"stringVal\" : \"zqrwge8db3o7thwoso1qw7tgm6ua8rd2mk9qobl802gw6koa0238sjrsz9tz0tpy8ikh1n6i9fi0exxs0ic2k7f9t5ji03738hsjcnuq9i3jhl6eixk87t5ycc2m2d4iw1d3kl6xhzl11bcr4rbnm3w0akebjn8a623dik2veqyl13js8kuxrg9qa21ddybksob4x113\",\n      \"mapVal\" : [ { }, { }, { } ]\n    } ]\n  }, {\n    \"originDataSourceId\" : \"vy6s\",\n    \"endTimeNanos\" : \"2022-05-15T12:32:43.902093Z\",\n    \"dataTypeName\" : \"Merri Rolfson Jr.\",\n    \"startTimeNanos\" : \"2023-03-14T11:50:43.902159Z\",\n    \"modifiedTimeMillis\" : \"2022-10-10T12:26:43.902188Z\",\n    \"rawTimestampNanos\" : \"2022-07-28T13:29:43.902215Z\",\n    \"computationTimeMillis\" : \"2022-10-24T12:27:43.902242Z\",\n    \"value\" : [ {\n      \"intVal\" : 391825042,\n      \"fpVal\" : 9.548896558026418E307,\n      \"stringVal\" : \"q8kkynswhk22qps8kpj3xai90dzkhw7axbdb74j4g94u8g6ynqweb1\",\n      \"mapVal\" : [ { }, { }, { }, { }, { } ]\n    } ]\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "fc2e75a4-5556-4747-92bc-23ef88799614",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:43.902603Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "fitness.users.dataSources.dataPointChanges.list",
          "schema" : {
            "properties" : {
              "dataSourceId" : {
                "description" : "The data stream ID of the data source with data point changes.",
                "type" : "string"
              },
              "deletedDataPoint" : {
                "description" : "Deleted data points for the user. Note, for modifications this should be parsed before handling insertions.",
                "items" : {
                  "$ref" : "#/components/schemas/DataPoint"
                },
                "type" : "array"
              },
              "insertedDataPoint" : {
                "description" : "Inserted data points for the user.",
                "items" : {
                  "$ref" : "#/components/schemas/DataPoint"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 7
  }, {
    "id" : "f76a93d7-4197-41a5-9492-270c39db906e",
    "name" : "Updates the specified data source. The dataStreamId, dataType, type, dataStreamN...",
    "request" : {
      "urlPath" : "/861m/dataSources/uj59",
      "method" : "PUT"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"dataStreamName\" : \"Bart Stiedemann IV\",\n  \"application\" : {\n    \"detailsUrl\" : \"https://web.example.mocklab.io/338996\",\n    \"name\" : \"Josef Cummerata IV\",\n    \"packageName\" : \"Hipolito Witting\",\n    \"version\" : \"w4pofzt6d5wg999tepkq62ij2q6yjtp1ghx6lhhcfctgmsgiv2ouzx2vq0v45sci3jqumrur22v340iclzna2b1ycvgexe02l3z309wi8372bxtf0bwvj3v78ic9w44qnp9nx7\"\n  },\n  \"dataType\" : {\n    \"field\" : [ {\n      \"format\" : \"map\",\n      \"name\" : \"Mrs. Don Dare\",\n      \"optional\" : true\n    }, {\n      \"format\" : \"floatPoint\",\n      \"name\" : \"Lottie Ortiz\",\n      \"optional\" : true\n    }, {\n      \"format\" : \"floatList\",\n      \"name\" : \"Lino Witting MD\",\n      \"optional\" : true\n    }, {\n      \"format\" : \"integer\",\n      \"name\" : \"Monica Murphy\",\n      \"optional\" : true\n    }, {\n      \"format\" : \"blob\",\n      \"name\" : \"Franklin Predovic\",\n      \"optional\" : true\n    } ],\n    \"name\" : \"Phil Fisher II\"\n  },\n  \"name\" : \"Bulah Nitzsche\",\n  \"dataQualityStandard\" : [ \"dataQualityBloodPressureBhsBB\", \"dataQualityBloodPressureBhsBB\", \"dataQualityBloodPressureAami\", \"dataQualityBloodPressureBhsBA\", \"dataQualityBloodPressureBhsBA\", \"dataQualityBloodPressureAami\", \"dataQualityBloodPressureBhsAA\" ],\n  \"type\" : \"derived\",\n  \"device\" : {\n    \"uid\" : \"g3n1\",\n    \"model\" : \"h2kdde4zdom38vzo8v58zden3txopcpy116xuw5t2tect3dvs5ihkbi8du8eh54d13n5o3guerbhpmlq4tcctn9mpy0vdi3ngec\",\n    \"type\" : \"phone\",\n    \"version\" : \"rnb8lflumo0\",\n    \"manufacturer\" : \"jmrp7wlly9pmygv5efmc63z1bwg6kw35fzql60xr5302cub22ftg65ztbju0jysex2h139j9zsngajvkwf3a3el\"\n  },\n  \"dataStreamId\" : \"nx72\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "f76a93d7-4197-41a5-9492-270c39db906e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:43.899001Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "fitness.users.dataSources.update",
          "schema" : {
            "description" : "Definition of a unique source of sensor data. Data sources can expose raw data coming from hardware sensors on local or companion devices. They can also expose derived data, created by transforming or merging other data sources. Multiple data sources can exist for the same data type. Every data point inserted into or read from this service has an associated data source. The data source contains enough information to uniquely identify its data, including the hardware device and the application that collected and/or transformed the data. It also holds useful metadata, such as the hardware and application versions, and the device type. Each data source produces a unique stream of data, with a unique identifier. Not all changes to data source affect the stream identifier, so that data collected by updated versions of the same application/device can still be considered to belong to the same data stream.",
            "properties" : {
              "application" : {
                "$ref" : "#/components/schemas/Application"
              },
              "dataQualityStandard" : {
                "description" : "DO NOT POPULATE THIS FIELD. It is never populated in responses from the platform, and is ignored in queries. It will be removed in a future version entirely.",
                "items" : {
                  "enum" : [ "dataQualityUnknown", "dataQualityBloodPressureEsh2002", "dataQualityBloodPressureEsh2010", "dataQualityBloodPressureAami", "dataQualityBloodPressureBhsAA", "dataQualityBloodPressureBhsAB", "dataQualityBloodPressureBhsBA", "dataQualityBloodPressureBhsBB", "dataQualityBloodGlucoseIso151972003", "dataQualityBloodGlucoseIso151972013" ],
                  "type" : "string"
                },
                "type" : "array"
              },
              "dataStreamId" : {
                "description" : "A unique identifier for the data stream produced by this data source. The identifier includes: - The physical device's manufacturer, model, and serial number (UID). - The application's package name or name. Package name is used when the data source was created by an Android application. The developer project number is used when the data source was created by a REST client. - The data source's type. - The data source's stream name. Note that not all attributes of the data source are used as part of the stream identifier. In particular, the version of the hardware/the application isn't used. This allows us to preserve the same stream through version updates. This also means that two DataSource objects may represent the same data stream even if they're not equal. The exact format of the data stream ID created by an Android application is: type:dataType.name:application.packageName:device.manufacturer:device.model:device.uid:dataStreamName The exact format of the data stream ID created by a REST client is: type:dataType.name:developer project number:device.manufacturer:device.model:device.uid:dataStreamName When any of the optional fields that make up the data stream ID are absent, they will be omitted from the data stream ID. The minimum viable data stream ID would be: type:dataType.name:developer project number Finally, the developer project number and device UID are obfuscated when read by any REST or Android client that did not create the data source. Only the data source creator will see the developer project number in clear and normal form. This means a client will see a different set of data_stream_ids than another client with different credentials.",
                "type" : "string"
              },
              "dataStreamName" : {
                "description" : "The stream name uniquely identifies this particular data source among other data sources of the same type from the same underlying producer. Setting the stream name is optional, but should be done whenever an application exposes two streams for the same data type, or when a device has two equivalent sensors.",
                "type" : "string"
              },
              "dataType" : {
                "$ref" : "#/components/schemas/DataType"
              },
              "device" : {
                "$ref" : "#/components/schemas/Device"
              },
              "name" : {
                "description" : "An end-user visible name for this data source.",
                "type" : "string"
              },
              "type" : {
                "description" : "A constant describing the type of this data source. Indicates whether this data source produces raw or derived data.",
                "enum" : [ "raw", "derived" ],
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 8
  }, {
    "id" : "7c444e9c-e23b-427a-8505-9348a8121d03",
    "name" : "Returns the specified data source.",
    "request" : {
      "urlPath" : "/d6io/dataSources/tmto",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"dataStreamName\" : \"Clifford Dooley\",\n  \"application\" : {\n    \"detailsUrl\" : \"https://web.example.mocklab.io/060807\",\n    \"name\" : \"Mrs. Kraig Wolff\",\n    \"packageName\" : \"Allyson Rath\",\n    \"version\" : \"4j926q1593k0ak871ql1jb73e5pyg0ilprzfub3h3tzbtfbyavvqodf9wqls4hs4viy6g2ntr3l9rodefxnaw5vcjx1yxb26yn55oqs8tskp4\"\n  },\n  \"dataType\" : {\n    \"field\" : [ {\n      \"format\" : \"floatList\",\n      \"name\" : \"Kazuko McDermott PhD\",\n      \"optional\" : false\n    }, {\n      \"format\" : \"string\",\n      \"name\" : \"Jessica Halvorson III\",\n      \"optional\" : true\n    } ],\n    \"name\" : \"Hermila Beatty\"\n  },\n  \"name\" : \"Jeramy Boehm III\",\n  \"dataQualityStandard\" : [ \"dataQualityBloodPressureEsh2010\" ],\n  \"type\" : \"derived\",\n  \"device\" : {\n    \"uid\" : \"97z4\",\n    \"model\" : \"7ms50xtxfplxuz1nk2b1vc2iomcjygsdokxr1rgdaeyxz2ejez255000bbipfxfw8o8ixla3l79evug2t92vnx9uk6syk4tv0sxd2nue5sc5ym3mi0twdgzi3bzfyq6m7obsikt552pd0vs51s7zrx82pirg1\",\n    \"type\" : \"smartDisplay\",\n    \"version\" : \"yaxi4j1e4ahdp9j9tnpybj69669w38w1qnb1a672jheouz1x4duv7yfnaboyc204dsv2lj9ju6329qcnozipjtnel5isukn47usxedrvpdxvio82tv8uibokhalsk39igp2hpwk20e1nmosk7dezwxac8j8pu9554op\",\n    \"manufacturer\" : \"x9kqc6hlvbwag2xdy2z5\"\n  },\n  \"dataStreamId\" : \"26rc\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "7c444e9c-e23b-427a-8505-9348a8121d03",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:43.898013Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "fitness.users.dataSources.get",
          "schema" : {
            "description" : "Definition of a unique source of sensor data. Data sources can expose raw data coming from hardware sensors on local or companion devices. They can also expose derived data, created by transforming or merging other data sources. Multiple data sources can exist for the same data type. Every data point inserted into or read from this service has an associated data source. The data source contains enough information to uniquely identify its data, including the hardware device and the application that collected and/or transformed the data. It also holds useful metadata, such as the hardware and application versions, and the device type. Each data source produces a unique stream of data, with a unique identifier. Not all changes to data source affect the stream identifier, so that data collected by updated versions of the same application/device can still be considered to belong to the same data stream.",
            "properties" : {
              "application" : {
                "$ref" : "#/components/schemas/Application"
              },
              "dataQualityStandard" : {
                "description" : "DO NOT POPULATE THIS FIELD. It is never populated in responses from the platform, and is ignored in queries. It will be removed in a future version entirely.",
                "items" : {
                  "enum" : [ "dataQualityUnknown", "dataQualityBloodPressureEsh2002", "dataQualityBloodPressureEsh2010", "dataQualityBloodPressureAami", "dataQualityBloodPressureBhsAA", "dataQualityBloodPressureBhsAB", "dataQualityBloodPressureBhsBA", "dataQualityBloodPressureBhsBB", "dataQualityBloodGlucoseIso151972003", "dataQualityBloodGlucoseIso151972013" ],
                  "type" : "string"
                },
                "type" : "array"
              },
              "dataStreamId" : {
                "description" : "A unique identifier for the data stream produced by this data source. The identifier includes: - The physical device's manufacturer, model, and serial number (UID). - The application's package name or name. Package name is used when the data source was created by an Android application. The developer project number is used when the data source was created by a REST client. - The data source's type. - The data source's stream name. Note that not all attributes of the data source are used as part of the stream identifier. In particular, the version of the hardware/the application isn't used. This allows us to preserve the same stream through version updates. This also means that two DataSource objects may represent the same data stream even if they're not equal. The exact format of the data stream ID created by an Android application is: type:dataType.name:application.packageName:device.manufacturer:device.model:device.uid:dataStreamName The exact format of the data stream ID created by a REST client is: type:dataType.name:developer project number:device.manufacturer:device.model:device.uid:dataStreamName When any of the optional fields that make up the data stream ID are absent, they will be omitted from the data stream ID. The minimum viable data stream ID would be: type:dataType.name:developer project number Finally, the developer project number and device UID are obfuscated when read by any REST or Android client that did not create the data source. Only the data source creator will see the developer project number in clear and normal form. This means a client will see a different set of data_stream_ids than another client with different credentials.",
                "type" : "string"
              },
              "dataStreamName" : {
                "description" : "The stream name uniquely identifies this particular data source among other data sources of the same type from the same underlying producer. Setting the stream name is optional, but should be done whenever an application exposes two streams for the same data type, or when a device has two equivalent sensors.",
                "type" : "string"
              },
              "dataType" : {
                "$ref" : "#/components/schemas/DataType"
              },
              "device" : {
                "$ref" : "#/components/schemas/Device"
              },
              "name" : {
                "description" : "An end-user visible name for this data source.",
                "type" : "string"
              },
              "type" : {
                "description" : "A constant describing the type of this data source. Indicates whether this data source produces raw or derived data.",
                "enum" : [ "raw", "derived" ],
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 9
  }, {
    "id" : "261ca06f-5b56-427b-9285-2c00578cab66",
    "name" : "Deletes the specified data source. The request will fail if the data source cont...",
    "request" : {
      "urlPath" : "/9203/dataSources/ir38",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"dataStreamName\" : \"Miss Aubrey Brekke\",\n  \"application\" : {\n    \"detailsUrl\" : \"https://web.example.mocklab.io/221297\",\n    \"name\" : \"Miss Dwight Hills\",\n    \"packageName\" : \"Muoi Conroy\",\n    \"version\" : \"0f5d9g4c9srpabrocqppvjjig9xs59lno0yxlxd413q5sk1iqxn5ebnv3nnrlmo6cvt5odp36urda6s8634xrcx5ix1kfii4i71vbx5hkaig91qf5pnes4nc546nnxntniqz9qcr4bnnj1tufaes3e0poj47l7\"\n  },\n  \"dataType\" : {\n    \"field\" : [ {\n      \"format\" : \"blob\",\n      \"name\" : \"Maxine Leannon\",\n      \"optional\" : false\n    }, {\n      \"format\" : \"integer\",\n      \"name\" : \"Cortez Kemmer\",\n      \"optional\" : true\n    }, {\n      \"format\" : \"floatList\",\n      \"name\" : \"Alfonso Marvin\",\n      \"optional\" : true\n    }, {\n      \"format\" : \"floatPoint\",\n      \"name\" : \"Wilmer Carter\",\n      \"optional\" : false\n    }, {\n      \"format\" : \"string\",\n      \"name\" : \"Marcela Hirthe\",\n      \"optional\" : false\n    }, {\n      \"format\" : \"integer\",\n      \"name\" : \"Dr. Maxwell Deckow\",\n      \"optional\" : false\n    }, {\n      \"format\" : \"map\",\n      \"name\" : \"Ms. Mitch Hickle\",\n      \"optional\" : true\n    }, {\n      \"format\" : \"integerList\",\n      \"name\" : \"Trenton Kassulke I\",\n      \"optional\" : true\n    } ],\n    \"name\" : \"Linwood Ratke\"\n  },\n  \"name\" : \"Mohammad Williamson\",\n  \"dataQualityStandard\" : [ \"dataQualityBloodPressureEsh2002\", \"dataQualityBloodPressureEsh2002\", \"dataQualityBloodGlucoseIso151972003\", \"dataQualityBloodPressureBhsBB\", \"dataQualityBloodPressureBhsBA\", \"dataQualityBloodGlucoseIso151972013\", \"dataQualityBloodGlucoseIso151972013\" ],\n  \"type\" : \"derived\",\n  \"device\" : {\n    \"uid\" : \"cqg7\",\n    \"model\" : \"40yaftumxeqo3syrnv1x2o2jksjh6r\",\n    \"type\" : \"phone\",\n    \"version\" : \"nqsl37zzxrl8u4t505oqoz4ndfk54pp5bchm658m6fzyjctf8tkiovgdoaxk4c6uo7rbx53v8h367rokaswlebwliwt6iodep4dpaqy07p8jnwn26i5ugrawfb4z5g2729fuptzy3vn22gza5kta6u02barcelkjjnm8sajxlzje5u6n2wkbxxzb20x00apb82d7\",\n    \"manufacturer\" : \"nrbmwoypggguzvc6d8zejhl0flybgeo9b4hypj79vl0p5chus7zedb5pmecpj5on3ztj2pqafsqbjyhv9qy6h4bvf8z4ha4gabgyycdv7mi72li9q58m7yc0fz4wmrgdcudn2j51wvvvqht9iwcpmfx0pzyw1cf1hlqam2f\"\n  },\n  \"dataStreamId\" : \"1np8\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "261ca06f-5b56-427b-9285-2c00578cab66",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:43.8972Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "fitness.users.dataSources.delete",
          "schema" : {
            "description" : "Definition of a unique source of sensor data. Data sources can expose raw data coming from hardware sensors on local or companion devices. They can also expose derived data, created by transforming or merging other data sources. Multiple data sources can exist for the same data type. Every data point inserted into or read from this service has an associated data source. The data source contains enough information to uniquely identify its data, including the hardware device and the application that collected and/or transformed the data. It also holds useful metadata, such as the hardware and application versions, and the device type. Each data source produces a unique stream of data, with a unique identifier. Not all changes to data source affect the stream identifier, so that data collected by updated versions of the same application/device can still be considered to belong to the same data stream.",
            "properties" : {
              "application" : {
                "$ref" : "#/components/schemas/Application"
              },
              "dataQualityStandard" : {
                "description" : "DO NOT POPULATE THIS FIELD. It is never populated in responses from the platform, and is ignored in queries. It will be removed in a future version entirely.",
                "items" : {
                  "enum" : [ "dataQualityUnknown", "dataQualityBloodPressureEsh2002", "dataQualityBloodPressureEsh2010", "dataQualityBloodPressureAami", "dataQualityBloodPressureBhsAA", "dataQualityBloodPressureBhsAB", "dataQualityBloodPressureBhsBA", "dataQualityBloodPressureBhsBB", "dataQualityBloodGlucoseIso151972003", "dataQualityBloodGlucoseIso151972013" ],
                  "type" : "string"
                },
                "type" : "array"
              },
              "dataStreamId" : {
                "description" : "A unique identifier for the data stream produced by this data source. The identifier includes: - The physical device's manufacturer, model, and serial number (UID). - The application's package name or name. Package name is used when the data source was created by an Android application. The developer project number is used when the data source was created by a REST client. - The data source's type. - The data source's stream name. Note that not all attributes of the data source are used as part of the stream identifier. In particular, the version of the hardware/the application isn't used. This allows us to preserve the same stream through version updates. This also means that two DataSource objects may represent the same data stream even if they're not equal. The exact format of the data stream ID created by an Android application is: type:dataType.name:application.packageName:device.manufacturer:device.model:device.uid:dataStreamName The exact format of the data stream ID created by a REST client is: type:dataType.name:developer project number:device.manufacturer:device.model:device.uid:dataStreamName When any of the optional fields that make up the data stream ID are absent, they will be omitted from the data stream ID. The minimum viable data stream ID would be: type:dataType.name:developer project number Finally, the developer project number and device UID are obfuscated when read by any REST or Android client that did not create the data source. Only the data source creator will see the developer project number in clear and normal form. This means a client will see a different set of data_stream_ids than another client with different credentials.",
                "type" : "string"
              },
              "dataStreamName" : {
                "description" : "The stream name uniquely identifies this particular data source among other data sources of the same type from the same underlying producer. Setting the stream name is optional, but should be done whenever an application exposes two streams for the same data type, or when a device has two equivalent sensors.",
                "type" : "string"
              },
              "dataType" : {
                "$ref" : "#/components/schemas/DataType"
              },
              "device" : {
                "$ref" : "#/components/schemas/Device"
              },
              "name" : {
                "description" : "An end-user visible name for this data source.",
                "type" : "string"
              },
              "type" : {
                "description" : "A constant describing the type of this data source. Indicates whether this data source produces raw or derived data.",
                "enum" : [ "raw", "derived" ],
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 10
  }, {
    "id" : "97eff61e-56e0-4cb4-af9b-70a4f38ff28c",
    "name" : "Creates a new data source that is unique across all data sources belonging to th...",
    "request" : {
      "urlPath" : "/04jq/dataSources",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"dataStreamName\" : \"Nelson Barrows\",\n  \"application\" : {\n    \"detailsUrl\" : \"https://web.example.mocklab.io/597819\",\n    \"name\" : \"Trey Runte\",\n    \"packageName\" : \"Shonna Gutmann\",\n    \"version\" : \"pbcvmeyd2r526z02ss5v77zh4dmodsuvkdpqtyfr9uxxjgkx1hwmo6soxfkqwfh2jcj9pa54loax56og4bdbkgrwm6d23xgir5g15uf3ztwziui2ux8ae8psmqseiv2r051gn3xdbw65gbx0yb8vkix9efr0dsbz12m4ycoekbahlmleh4eedrj3lw460hnj7ly\"\n  },\n  \"dataType\" : {\n    \"field\" : [ {\n      \"format\" : \"map\",\n      \"name\" : \"Rhea Hilpert\",\n      \"optional\" : true\n    }, {\n      \"format\" : \"floatPoint\",\n      \"name\" : \"Laverne Ritchie\",\n      \"optional\" : false\n    }, {\n      \"format\" : \"floatPoint\",\n      \"name\" : \"Laverne Cremin\",\n      \"optional\" : false\n    }, {\n      \"format\" : \"integerList\",\n      \"name\" : \"Russell Langosh\",\n      \"optional\" : false\n    }, {\n      \"format\" : \"floatList\",\n      \"name\" : \"Melony Kozey DDS\",\n      \"optional\" : false\n    }, {\n      \"format\" : \"map\",\n      \"name\" : \"Misty DuBuque MD\",\n      \"optional\" : false\n    } ],\n    \"name\" : \"Cecil Koepp\"\n  },\n  \"name\" : \"Eulalia Huels\",\n  \"dataQualityStandard\" : [ \"dataQualityBloodPressureAami\", \"dataQualityBloodGlucoseIso151972013\", \"dataQualityBloodPressureEsh2010\", \"dataQualityBloodGlucoseIso151972003\" ],\n  \"type\" : \"derived\",\n  \"device\" : {\n    \"uid\" : \"58wp\",\n    \"model\" : \"0ufaxybkkr6z6nzi705a7xkadbsp0r0hfv7dwyhywt0vjgu74bbw1951mj85\",\n    \"type\" : \"tablet\",\n    \"version\" : \"e83ie4evwdyprdm7hmwcshd8rzcr77s5hrpi9ct4l6sko1eiunx6wq98a4pryi9eg2bb4rryv81u181rhdfk3mvvgbwk0xt\",\n    \"manufacturer\" : \"vtm2jzc22iqy92px9gudot3tl3objr8d4mo5w7zbta5npzoxbd3es7yke9u17pvxjkqycn0dcchk2eoy6ynslidykc19ylz4uodhwf6s79mzgl3h22ud5c36xk2pos2jwe0yw\"\n  },\n  \"dataStreamId\" : \"gx2y\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "97eff61e-56e0-4cb4-af9b-70a4f38ff28c",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:43.896041Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "fitness.users.dataSources.create",
          "schema" : {
            "description" : "Definition of a unique source of sensor data. Data sources can expose raw data coming from hardware sensors on local or companion devices. They can also expose derived data, created by transforming or merging other data sources. Multiple data sources can exist for the same data type. Every data point inserted into or read from this service has an associated data source. The data source contains enough information to uniquely identify its data, including the hardware device and the application that collected and/or transformed the data. It also holds useful metadata, such as the hardware and application versions, and the device type. Each data source produces a unique stream of data, with a unique identifier. Not all changes to data source affect the stream identifier, so that data collected by updated versions of the same application/device can still be considered to belong to the same data stream.",
            "properties" : {
              "application" : {
                "$ref" : "#/components/schemas/Application"
              },
              "dataQualityStandard" : {
                "description" : "DO NOT POPULATE THIS FIELD. It is never populated in responses from the platform, and is ignored in queries. It will be removed in a future version entirely.",
                "items" : {
                  "enum" : [ "dataQualityUnknown", "dataQualityBloodPressureEsh2002", "dataQualityBloodPressureEsh2010", "dataQualityBloodPressureAami", "dataQualityBloodPressureBhsAA", "dataQualityBloodPressureBhsAB", "dataQualityBloodPressureBhsBA", "dataQualityBloodPressureBhsBB", "dataQualityBloodGlucoseIso151972003", "dataQualityBloodGlucoseIso151972013" ],
                  "type" : "string"
                },
                "type" : "array"
              },
              "dataStreamId" : {
                "description" : "A unique identifier for the data stream produced by this data source. The identifier includes: - The physical device's manufacturer, model, and serial number (UID). - The application's package name or name. Package name is used when the data source was created by an Android application. The developer project number is used when the data source was created by a REST client. - The data source's type. - The data source's stream name. Note that not all attributes of the data source are used as part of the stream identifier. In particular, the version of the hardware/the application isn't used. This allows us to preserve the same stream through version updates. This also means that two DataSource objects may represent the same data stream even if they're not equal. The exact format of the data stream ID created by an Android application is: type:dataType.name:application.packageName:device.manufacturer:device.model:device.uid:dataStreamName The exact format of the data stream ID created by a REST client is: type:dataType.name:developer project number:device.manufacturer:device.model:device.uid:dataStreamName When any of the optional fields that make up the data stream ID are absent, they will be omitted from the data stream ID. The minimum viable data stream ID would be: type:dataType.name:developer project number Finally, the developer project number and device UID are obfuscated when read by any REST or Android client that did not create the data source. Only the data source creator will see the developer project number in clear and normal form. This means a client will see a different set of data_stream_ids than another client with different credentials.",
                "type" : "string"
              },
              "dataStreamName" : {
                "description" : "The stream name uniquely identifies this particular data source among other data sources of the same type from the same underlying producer. Setting the stream name is optional, but should be done whenever an application exposes two streams for the same data type, or when a device has two equivalent sensors.",
                "type" : "string"
              },
              "dataType" : {
                "$ref" : "#/components/schemas/DataType"
              },
              "device" : {
                "$ref" : "#/components/schemas/Device"
              },
              "name" : {
                "description" : "An end-user visible name for this data source.",
                "type" : "string"
              },
              "type" : {
                "description" : "A constant describing the type of this data source. Indicates whether this data source produces raw or derived data.",
                "enum" : [ "raw", "derived" ],
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 11
  }, {
    "id" : "511f7d0f-47d8-4f02-b64a-1858dc193951",
    "name" : "Lists all data sources that are visible to the developer, using the OAuth scopes...",
    "request" : {
      "urlPath" : "/56ai/dataSources",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"dataSource\" : [ {\n    \"dataStreamName\" : \"Ms. Norene Will\",\n    \"application\" : {\n      \"detailsUrl\" : \"https://web.example.mocklab.io/882436\",\n      \"name\" : \"Tamatha Goyette\",\n      \"packageName\" : \"Cammie Auer\",\n      \"version\" : \"uvwaho86lmuo3sx8fymvx438orqs5e47al6yznuge7f9temum4te5diliadwak7uagf3aevid14sriv8l1cxobllod10457cnt9t3tq8ey4aet4ii5zwfrd29wtgyxhdtei0hjkd\"\n    },\n    \"dataType\" : {\n      \"field\" : [ {\n        \"format\" : \"integer\",\n        \"name\" : \"Edda Kerluke\",\n        \"optional\" : false\n      }, {\n        \"format\" : \"map\",\n        \"name\" : \"Cordell Hayes\",\n        \"optional\" : true\n      }, {\n        \"format\" : \"blob\",\n        \"name\" : \"Katherina Schmitt\",\n        \"optional\" : true\n      }, {\n        \"format\" : \"blob\",\n        \"name\" : \"Mrs. Mertie Fahey\",\n        \"optional\" : false\n      }, {\n        \"format\" : \"floatList\",\n        \"name\" : \"Mr. Jacob Hirthe\",\n        \"optional\" : true\n      }, {\n        \"format\" : \"floatPoint\",\n        \"name\" : \"Damion Treutel\",\n        \"optional\" : false\n      } ],\n      \"name\" : \"Kori Bednar Jr.\"\n    },\n    \"name\" : \"Bettyann Schaden\",\n    \"dataQualityStandard\" : [ \"dataQualityBloodPressureBhsBB\", \"dataQualityBloodPressureBhsAA\", \"dataQualityBloodGlucoseIso151972003\", \"dataQualityUnknown\", \"dataQualityBloodPressureBhsAA\", \"dataQualityBloodPressureBhsAB\", \"dataQualityBloodPressureBhsBB\" ],\n    \"type\" : \"raw\",\n    \"device\" : {\n      \"uid\" : \"0yx0\",\n      \"model\" : \"49ezc65vq2f15oe1k0dny3tagodkh3ahfku56pzp7m5yrd9hq1uu7g30mihrxan1ocsfo9q3ra9sawmu39ysuwnc4zbcsi4w6dkx924uhlwqu9kcs76bkzdifgtdedgi2mhqv48ltdbl3kgj0cz8nei664ggr9k0wbl0eoc0h2kty55gxsr2pfatfvs9cdf90aepk\",\n      \"type\" : \"smartDisplay\",\n      \"version\" : \"2ke7h17oquz39zavn3x4qoa9x1tu2qmb5teaiiv6eqcfrtaoqi1gfofqs688j1emm6ztovp22uqxzdzaiufz378ul7ezj7bxg3s1ala\",\n      \"manufacturer\" : \"gnrv95q8i1uqlrjih2f8wn6isbpflcyi6xjxclorglbij2jb0jofz5q2eog7xiy0zuw2b77xtkpw3crrsbfugncfd1kha8wg31jo0a59zh3y5k4blhudy8rcmuscz7tghojtjqi04vmfmum2nfc\"\n    },\n    \"dataStreamId\" : \"4835\"\n  }, {\n    \"dataStreamName\" : \"Jewell Champlin\",\n    \"application\" : {\n      \"detailsUrl\" : \"https://web.example.mocklab.io/556320\",\n      \"name\" : \"Yetta Goodwin\",\n      \"packageName\" : \"Johnathan Hickle\",\n      \"version\" : \"aocdv05rr0varp\"\n    },\n    \"dataType\" : {\n      \"field\" : [ {\n        \"format\" : \"floatList\",\n        \"name\" : \"Catina Lakin DVM\",\n        \"optional\" : false\n      }, {\n        \"format\" : \"integer\",\n        \"name\" : \"Numbers Johns\",\n        \"optional\" : true\n      }, {\n        \"format\" : \"integerList\",\n        \"name\" : \"Mr. Savannah Effertz\",\n        \"optional\" : false\n      }, {\n        \"format\" : \"floatPoint\",\n        \"name\" : \"Antony Wilkinson\",\n        \"optional\" : false\n      } ],\n      \"name\" : \"Nelson Ward III\"\n    },\n    \"name\" : \"Yessenia Paucek\",\n    \"dataQualityStandard\" : [ \"dataQualityBloodGlucoseIso151972003\", \"dataQualityUnknown\", \"dataQualityBloodPressureBhsBA\", \"dataQualityBloodPressureAami\" ],\n    \"type\" : \"derived\",\n    \"device\" : {\n      \"uid\" : \"lmp5\",\n      \"model\" : \"xrn05exjfekev63na6vplm3w7276zdq480p3krf9fwa7d0swrywh173t0o0hzf4sp5ipp9rifmilpv0mioencucjc4zuwp28dhbbj3x6nup7c4mkthy1rwcje4s2imm61mrbzmpnv2dhtf03a7f59\",\n      \"type\" : \"tablet\",\n      \"version\" : \"dabm7x26q0jlihd941hyuuu49k3v0\",\n      \"manufacturer\" : \"q13ouob93056t1hydcrb3k140gzdetlct6igz883wlrq91nurnx4t6d0rrgydkpp4n1ibps3ufnccrlfg8e23nzj96ri63afr29jtw77dwkv3ozym554z09ailulweypyydx2cloyaugqblzjp7nylz36ghkc2za1mtvymmujb1ychmmenz9vtnyub36mj\"\n    },\n    \"dataStreamId\" : \"ly7v\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "511f7d0f-47d8-4f02-b64a-1858dc193951",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-23T15:41:43.894986Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "fitness.users.dataSources.list",
          "schema" : {
            "properties" : {
              "dataSource" : {
                "description" : "A previously created data source.",
                "items" : {
                  "$ref" : "#/components/schemas/DataSource"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 12
  } ]
}