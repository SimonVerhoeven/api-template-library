{
  "mappings" : [ {
    "id" : "215e31f5-e97d-4985-930e-f991e8fb6632",
    "name" : "Updates or insert a given session.",
    "request" : {
      "urlPath" : "/80f8/sessions/3w51",
      "method" : "PUT"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"activeTimeMillis\" : \"2022-05-14T08:41:02.824657Z\",\n  \"endTimeMillis\" : \"2023-02-08T11:11:02.824688Z\",\n  \"application\" : {\n    \"detailsUrl\" : \"https://web.example.mocklab.io/402047\",\n    \"name\" : \"Landon Ziemann\",\n    \"packageName\" : \"Sandy DuBuque V\",\n    \"version\" : \"dd13ollox7oy8o92cimngmnetk724g4u619c07jmklakfelhjvx5t6nokplmw1s8off4nmctrjswudd3uv4srhq1j08w9fq65bojcq5lw8hsr2fu140zh6yt3\"\n  },\n  \"startTimeMillis\" : \"2022-05-21T08:20:02.824913Z\",\n  \"name\" : \"Sophia Hand\",\n  \"description\" : \"Omnis aspernatur quae. Sit et maxime suscipit qui et. Eveniet recusandae modi consequatur. Voluptatem provident laborum et et ipsa. Ipsum in omnis aliquam.\",\n  \"modifiedTimeMillis\" : \"2022-09-08T10:10:02.825064Z\",\n  \"id\" : \"6f39\",\n  \"activityType\" : 58774022\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "215e31f5-e97d-4985-930e-f991e8fb6632",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:02.825374Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "fitness.users.sessions.update",
          "schema" : {
            "description" : "Sessions contain metadata, such as a user-friendly name and time interval information.",
            "properties" : {
              "activeTimeMillis" : {
                "description" : "Session active time. While start_time_millis and end_time_millis define the full session time, the active time can be shorter and specified by active_time_millis. If the inactive time during the session is known, it should also be inserted via a com.google.activity.segment data point with a STILL activity value",
                "format" : "int64",
                "type" : "string"
              },
              "activityType" : {
                "description" : "The type of activity this session represents.",
                "format" : "int32",
                "type" : "integer"
              },
              "application" : {
                "$ref" : "#/components/schemas/Application"
              },
              "description" : {
                "description" : "A description for this session.",
                "type" : "string"
              },
              "endTimeMillis" : {
                "description" : "An end time, in milliseconds since epoch, inclusive.",
                "format" : "int64",
                "type" : "string"
              },
              "id" : {
                "description" : "A client-generated identifier that is unique across all sessions owned by this particular user.",
                "type" : "string"
              },
              "modifiedTimeMillis" : {
                "description" : "A timestamp that indicates when the session was last modified.",
                "format" : "int64",
                "type" : "string"
              },
              "name" : {
                "description" : "A human readable name of the session.",
                "type" : "string"
              },
              "startTimeMillis" : {
                "description" : "A start time, in milliseconds since epoch, inclusive.",
                "format" : "int64",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 0
  }, {
    "id" : "db3afc89-7d3a-4f89-b6ea-3946dcab2f30",
    "name" : "Deletes a session specified by the given session ID. - 200",
    "request" : {
      "urlPath" : "/4eo0/sessions/1m56",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200
    },
    "uuid" : "db3afc89-7d3a-4f89-b6ea-3946dcab2f30",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:02.824616Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "fitness.users.sessions.delete"
        }
      }
    },
    "insertionIndex" : 1
  }, {
    "id" : "93e01531-dc25-4c1b-b29c-83e931636192",
    "name" : "Lists sessions previously created.",
    "request" : {
      "urlPath" : "/iie8/sessions",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"nextPageToken\" : \"tnpq4lq\",\n  \"session\" : [ {\n    \"activeTimeMillis\" : \"2023-01-17T10:37:02.819769Z\",\n    \"endTimeMillis\" : \"2022-05-03T10:16:02.819799Z\",\n    \"application\" : {\n      \"detailsUrl\" : \"https://web.example.mocklab.io/868784\",\n      \"name\" : \"Dillon Daniel\",\n      \"packageName\" : \"Latonya Olson\",\n      \"version\" : \"uvt4r3f9ce3rsxacgt17925g96d1gq9aj2teolnrorqsuzkeys34ubcx0xchd3stakxz2ay5o8mlvkpifwjr3df5hszkida2s72c25srjbsiy1v7up5zi8dik9d5jixjs9jlakhh\"\n    },\n    \"startTimeMillis\" : \"2022-11-14T11:46:02.820016Z\",\n    \"name\" : \"Arnette Rice\",\n    \"description\" : \"Explicabo quibusdam ut suscipit. Dolorem culpa deserunt corporis tenetur. Voluptas qui tempore.\",\n    \"modifiedTimeMillis\" : \"2022-04-07T08:49:02.820145Z\",\n    \"id\" : \"u484\",\n    \"activityType\" : 911833671\n  } ],\n  \"hasMoreData\" : true,\n  \"deletedSession\" : [ {\n    \"activeTimeMillis\" : \"2022-04-13T08:42:02.820261Z\",\n    \"endTimeMillis\" : \"2022-06-05T09:39:02.820291Z\",\n    \"application\" : {\n      \"detailsUrl\" : \"https://web.example.mocklab.io/004499\",\n      \"name\" : \"Karmen Homenick\",\n      \"packageName\" : \"Marcelino Reilly\",\n      \"version\" : \"08alieu1v9977yr4pg36kqoslu6ppdvc1s95e62a0jj9ae7ar6f5kowy2x1dhpvcc9osotetybdzgmoiv3ytoqibz7w6en3t76zhb4olv9lw8yztjyj5cpb3g42dv2vmckmeox23d4elj69duna6fhoqtpzlkb649q2deh19akxeomrw7rvw1mq5qmkbqn5hgo\"\n    },\n    \"startTimeMillis\" : \"2022-07-03T09:44:02.820512Z\",\n    \"name\" : \"Loriann Kling\",\n    \"description\" : \"Nemo nisi iure aut magnam ullam. Suscipit dolorum nobis. Temporibus facilis ratione et veniam in et sit. Omnis et hic nisi ducimus.\",\n    \"modifiedTimeMillis\" : \"2023-02-25T09:32:02.820661Z\",\n    \"id\" : \"1592\",\n    \"activityType\" : 713421272\n  }, {\n    \"activeTimeMillis\" : \"2023-01-23T09:50:02.820766Z\",\n    \"endTimeMillis\" : \"2022-05-04T10:34:02.820796Z\",\n    \"application\" : {\n      \"detailsUrl\" : \"https://web.example.mocklab.io/829066\",\n      \"name\" : \"Ettie Witting III\",\n      \"packageName\" : \"Jan Emard\",\n      \"version\" : \"m2praye05g7wqnsq4q\"\n    },\n    \"startTimeMillis\" : \"2022-06-12T09:54:02.821013Z\",\n    \"name\" : \"Mr. Kimberely Daugherty\",\n    \"description\" : \"Reprehenderit corporis possimus labore ipsa minima maxime. Quidem magnam ut. Eos ut iusto quo sint laboriosam.\",\n    \"modifiedTimeMillis\" : \"2022-03-17T08:05:02.821148Z\",\n    \"id\" : \"19vw\",\n    \"activityType\" : 561555323\n  }, {\n    \"activeTimeMillis\" : \"2022-11-09T09:46:02.821255Z\",\n    \"endTimeMillis\" : \"2022-08-09T08:57:02.821285Z\",\n    \"application\" : {\n      \"detailsUrl\" : \"https://web.example.mocklab.io/264244\",\n      \"name\" : \"Scott Grady\",\n      \"packageName\" : \"Ola Ankunding\",\n      \"version\" : \"iktfl1bo5p8em17pxpr7l340ujdw2j7no002a2i5apfl3gsegye9ictexeoqs2z14b0psn556tji4m49qzzfwropnkj3ghft9t4ula2h4161kzig7qcgp7g3m3u15gsc8im0bjtd1sqyr2a0gev0y1qqac5navhhtxsrop4o5c45ob0o1etjr7sa6fv55\"\n    },\n    \"startTimeMillis\" : \"2023-01-07T08:53:02.821486Z\",\n    \"name\" : \"Ericka Blick\",\n    \"description\" : \"Vero deleniti voluptatem rerum mollitia et. Harum molestiae quia consequatur quia quam incidunt nesciunt. Libero eius aut totam. Provident praesentium alias ullam odit ullam dolorum.\",\n    \"modifiedTimeMillis\" : \"2022-09-10T10:55:02.821639Z\",\n    \"id\" : \"69w1\",\n    \"activityType\" : 1583235216\n  }, {\n    \"activeTimeMillis\" : \"2022-07-19T09:24:02.82174Z\",\n    \"endTimeMillis\" : \"2023-01-03T09:51:02.821768Z\",\n    \"application\" : {\n      \"detailsUrl\" : \"https://web.example.mocklab.io/312310\",\n      \"name\" : \"Dr. Santina Quigley\",\n      \"packageName\" : \"Nydia Wisozk III\",\n      \"version\" : \"f1txk3aia1mgducfaly5psrh2kz78hrxfn324r2gzjuek5powfj4j4mpf8wtd1tyz6t2e581ddmmv4xtnhzl62h3bdgp7s4nec3rn7p0fbneajx9f4gzhcs8xg7pqkdfl59ulrl56w1knesgu0o5d0keig5marvn8tnj6big2wkpb5m3u09q4\"\n    },\n    \"startTimeMillis\" : \"2023-02-28T09:02:02.82198Z\",\n    \"name\" : \"Oleta Hirthe\",\n    \"description\" : \"Sed illo ipsam qui cupiditate aut id. Ducimus tenetur eligendi. Et qui reprehenderit laboriosam suscipit dicta. Earum et voluptatum aperiam ut incidunt at. Est error cum cupiditate nulla quo.\",\n    \"modifiedTimeMillis\" : \"2022-10-15T08:34:02.822141Z\",\n    \"id\" : \"rdmc\",\n    \"activityType\" : 717270537\n  }, {\n    \"activeTimeMillis\" : \"2023-02-06T09:16:02.822242Z\",\n    \"endTimeMillis\" : \"2022-10-04T08:50:02.822273Z\",\n    \"application\" : {\n      \"detailsUrl\" : \"https://web.example.mocklab.io/885476\",\n      \"name\" : \"Tama Barrows III\",\n      \"packageName\" : \"Ms. Fernando Beer\",\n      \"version\" : \"4x4i42y7fgqxm2c460wtm3809js6bimluabee6adynekn0kngt4gr1mxaqrrlnmm9sckbv01z7lpzt9kkotmdenugds554i\"\n    },\n    \"startTimeMillis\" : \"2022-10-20T10:37:02.822481Z\",\n    \"name\" : \"Ms. Daren Wintheiser\",\n    \"description\" : \"Consequatur ducimus explicabo eius delectus molestiae perspiciatis. Qui expedita impedit velit. Eum at aut in sit est dicta. Vel et iure voluptates dolor quia. Omnis ea et qui sint quibusdam.\",\n    \"modifiedTimeMillis\" : \"2023-02-22T10:24:02.822647Z\",\n    \"id\" : \"9j0s\",\n    \"activityType\" : 1132552708\n  }, {\n    \"activeTimeMillis\" : \"2023-02-01T11:09:02.822752Z\",\n    \"endTimeMillis\" : \"2022-07-27T09:58:02.822782Z\",\n    \"application\" : {\n      \"detailsUrl\" : \"https://web.example.mocklab.io/664960\",\n      \"name\" : \"Mrs. Weston Hayes\",\n      \"packageName\" : \"Miss Cameron Ondricka\",\n      \"version\" : \"n2eswvn8t6fq8j85z55is88ovxlszxub36lhjigcs154d2d9zm8bk1gt47xy0q9loygb4qc00fsmaz7ftm4vkxpxoxh2282s5jnicnb9ledqfalve\"\n    },\n    \"startTimeMillis\" : \"2022-11-23T08:02:02.822991Z\",\n    \"name\" : \"Dr. Victor King\",\n    \"description\" : \"Harum dolores ullam voluptate. Quis et maiores rerum et voluptate. Qui minima voluptatem dolorum ex. Adipisci et placeat. Aut sint delectus sed et iusto pariatur.\",\n    \"modifiedTimeMillis\" : \"2022-04-29T10:34:02.823147Z\",\n    \"id\" : \"n22e\",\n    \"activityType\" : 1095476032\n  }, {\n    \"activeTimeMillis\" : \"2022-08-28T08:05:02.823248Z\",\n    \"endTimeMillis\" : \"2022-11-09T11:14:02.823278Z\",\n    \"application\" : {\n      \"detailsUrl\" : \"https://web.example.mocklab.io/547652\",\n      \"name\" : \"Kacey Cartwright\",\n      \"packageName\" : \"Yulanda Gislason\",\n      \"version\" : \"xl66kyp7iqxf3y32j4rj5kcjypveu01nodkh61u6h1y3y157bbgrt7076hy2k7qu4ppba22c2vy9ow2fphu1139b2voafrx8a9420tpk9v9vdy8jrckddqnw2tbcu\"\n    },\n    \"startTimeMillis\" : \"2022-07-19T11:01:02.823485Z\",\n    \"name\" : \"Mandi Cruickshank\",\n    \"description\" : \"Voluptas aliquid quia dignissimos possimus error quidem quam. Et est et similique pariatur ducimus voluptate. Perferendis minima at necessitatibus itaque sapiente quasi. Rerum sunt hic ducimus consequ\",\n    \"modifiedTimeMillis\" : \"2022-11-10T11:13:02.823661Z\",\n    \"id\" : \"dcv8\",\n    \"activityType\" : 310798310\n  }, {\n    \"activeTimeMillis\" : \"2022-07-29T09:51:02.823765Z\",\n    \"endTimeMillis\" : \"2022-03-26T09:47:02.823795Z\",\n    \"application\" : {\n      \"detailsUrl\" : \"https://web.example.mocklab.io/285811\",\n      \"name\" : \"Era Kreiger\",\n      \"packageName\" : \"Tamekia Homenick\",\n      \"version\" : \"ey09373q8qi1v5rbbxn0zs8voe20izks\"\n    },\n    \"startTimeMillis\" : \"2023-02-18T11:17:02.823996Z\",\n    \"name\" : \"Mr. Gregory Wilderman\",\n    \"description\" : \"Quae qui exercitationem. Rerum eos alias nihil sint est natus sed. Optio et tempora ullam tempora porro. Rerum eligendi aut reiciendis magnam nulla. Sed dolorem voluptate non molestiae laboriosam quam\",\n    \"modifiedTimeMillis\" : \"2022-08-26T10:19:02.824164Z\",\n    \"id\" : \"p5ew\",\n    \"activityType\" : 1294677590\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "93e01531-dc25-4c1b-b29c-83e931636192",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:02.824452Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "fitness.users.sessions.list",
          "schema" : {
            "properties" : {
              "deletedSession" : {
                "description" : "If includeDeleted is set to true in the request, and startTime and endTime are omitted, this will include sessions which were deleted since the last sync.",
                "items" : {
                  "$ref" : "#/components/schemas/Session"
                },
                "type" : "array"
              },
              "hasMoreData" : {
                "description" : "Flag to indicate server has more data to transfer. DO NOT USE THIS FIELD. It is never populated in responses from the server.",
                "type" : "boolean"
              },
              "nextPageToken" : {
                "description" : "The sync token which is used to sync further changes. This will only be provided if both startTime and endTime are omitted from the request.",
                "type" : "string"
              },
              "session" : {
                "description" : "Sessions with an end time that is between startTime and endTime of the request.",
                "items" : {
                  "$ref" : "#/components/schemas/Session"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 2
  }, {
    "id" : "ca0d0cca-d667-4c5c-8d3e-f0213fda92b8",
    "name" : "Aggregates data of a certain type or stream into buckets divided by a given type...",
    "request" : {
      "urlPath" : "/s0f2/dataset:aggregate",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"bucket\" : [ {\n    \"endTimeMillis\" : \"2023-01-02T09:36:02.818663Z\",\n    \"activity\" : 1277047168,\n    \"startTimeMillis\" : \"2022-06-27T09:25:02.818703Z\",\n    \"session\" : {\n      \"activeTimeMillis\" : \"2022-11-21T09:46:02.818743Z\",\n      \"endTimeMillis\" : \"2022-09-06T10:23:02.818774Z\",\n      \"application\" : {\n        \"detailsUrl\" : \"https://web.example.mocklab.io/120043\",\n        \"name\" : \"Yuko Kuhlman\",\n        \"packageName\" : \"Marni Ruecker\",\n        \"version\" : \"y64yydtdev72iunzf4zevcjpz5p6iseqmvllur5mfmnqlaqm776e4cd8gml7lkw2z65sgdq5u1nvq\"\n      },\n      \"startTimeMillis\" : \"2023-02-12T10:04:02.819009Z\",\n      \"name\" : \"Song Marks\",\n      \"description\" : \"Eius repellendus ipsum. Quibusdam inventore et qui fuga adipisci porro. Incidunt occaecati molestias minus ea dolorum sit vero.\",\n      \"modifiedTimeMillis\" : \"2022-07-10T08:09:02.819166Z\",\n      \"id\" : \"3znn\",\n      \"activityType\" : 1024760201\n    },\n    \"type\" : \"activityType\",\n    \"dataset\" : [ {\n      \"dataSourceId\" : \"ag7z\",\n      \"maxEndTimeNs\" : \"2023-01-17T09:41:02.819364Z\",\n      \"minStartTimeNs\" : \"2022-11-17T09:41:02.819394Z\",\n      \"nextPageToken\" : \"7rpl5clkar3rmuhujbay0nwnh35c8n6\",\n      \"point\" : [ { }, { }, { }, { }, { } ]\n    }, {\n      \"dataSourceId\" : \"0q74\",\n      \"maxEndTimeNs\" : \"2023-03-10T08:33:02.819521Z\",\n      \"minStartTimeNs\" : \"2022-12-09T09:12:02.819549Z\",\n      \"nextPageToken\" : \"me35ae45tc5r8rt8r9z17kp79f6zf5l3qpafopczx9trc5ppur\",\n      \"point\" : [ { }, { }, { }, { } ]\n    } ]\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "ca0d0cca-d667-4c5c-8d3e-f0213fda92b8",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:02.819701Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "fitness.users.dataset.aggregate",
          "schema" : {
            "properties" : {
              "bucket" : {
                "description" : "A list of buckets containing the aggregated data.",
                "items" : {
                  "$ref" : "#/components/schemas/AggregateBucket"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 3
  }, {
    "id" : "570e091d-48f2-45a4-8b0c-52d7a23482a7",
    "name" : "Adds data points to a dataset. The dataset need not be previously created. All p...",
    "request" : {
      "urlPath" : "/cv6r/dataSources/o350/datasets/e10t",
      "method" : "PATCH"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"dataSourceId\" : \"7mp4\",\n  \"maxEndTimeNs\" : \"2022-09-15T11:21:02.815835Z\",\n  \"minStartTimeNs\" : \"2023-03-10T10:12:02.81586Z\",\n  \"nextPageToken\" : \"d7ln5s7u5ximma2tp415ywdxbfmmsyvqxmlzdpcca12i6phyhlbfumvrsjxgdcv1myghqdro9ygqybvtgd6naoztyjzy38jhon1f57f9e5apn2ybubcb5cbebuwn66ahr\",\n  \"point\" : [ {\n    \"originDataSourceId\" : \"6r8z\",\n    \"endTimeNanos\" : \"2022-06-04T09:32:02.815969Z\",\n    \"dataTypeName\" : \"Marcie Becker\",\n    \"startTimeNanos\" : \"2022-11-04T11:54:02.816045Z\",\n    \"modifiedTimeMillis\" : \"2022-08-24T08:38:02.816072Z\",\n    \"rawTimestampNanos\" : \"2022-09-14T11:24:02.816099Z\",\n    \"computationTimeMillis\" : \"2023-01-02T10:18:02.816127Z\",\n    \"value\" : [ {\n      \"intVal\" : 159708273,\n      \"fpVal\" : 1.4099259581437072E308,\n      \"stringVal\" : \"3ap6q34i8zgbfsotj5t51puodeotxl2\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 282436206,\n      \"fpVal\" : 4.391132592207047E307,\n      \"stringVal\" : \"6956hsfngvd1nu2vgdt3zdhnli85p2jim7nnqn6sx5dubzahbr7nzf5wl2wrd93mumdj7wzf6ctbrlphgolc6yypsa5obqrrdi1yol1bbuk\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 975025225,\n      \"fpVal\" : 7.611958390954998E307,\n      \"stringVal\" : \"uxebs8izsv77aak6y4mnu5tckyypeuznnrszsp0tgvzp6brteev7f1jbo4kwt7z7tk1k2qzh1gvbxx33zk9z8wk5zmfdxs4cfipz3g3joy3vcd6hzb7i62h4qesd8cy2acfn8v0zwm2djyvxu5zsan464a6aogbppmg5nf3a5fx62uxc7tqvifz9ydjc70omttkd\",\n      \"mapVal\" : [ { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1968770209,\n      \"fpVal\" : 5.725729358937403E307,\n      \"stringVal\" : \"1mkja74u9k55tq1hduxw59zdkuxfixolb3dhbl6n2bi\",\n      \"mapVal\" : [ { }, { } ]\n    }, {\n      \"intVal\" : 507238400,\n      \"fpVal\" : 4.167215421927397E307,\n      \"stringVal\" : \"kl7ww8tz067sqdstucoymnerficux87bt8os9z481ttjhjrdei7wfdaie1h0fdt8xmmpfha9blvpbgtlcxg6c8u9vpy3e1cvpz39gfuf5wvt4mvf7s\",\n      \"mapVal\" : [ { }, { }, { }, { } ]\n    } ]\n  }, {\n    \"originDataSourceId\" : \"28lt\",\n    \"endTimeNanos\" : \"2023-02-09T08:36:02.816393Z\",\n    \"dataTypeName\" : \"Emerita Wolff\",\n    \"startTimeNanos\" : \"2022-11-22T11:05:02.816471Z\",\n    \"modifiedTimeMillis\" : \"2022-06-17T08:17:02.816497Z\",\n    \"rawTimestampNanos\" : \"2022-10-07T11:12:02.816526Z\",\n    \"computationTimeMillis\" : \"2023-01-26T09:39:02.816553Z\",\n    \"value\" : [ {\n      \"intVal\" : 156962748,\n      \"fpVal\" : 1.2067227157081418E308,\n      \"stringVal\" : \"6xqymma7kbd15q\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 27003988,\n      \"fpVal\" : 1.3273869549407143E308,\n      \"stringVal\" : \"38kqjh7l90l59ibuvmrc3ov1lp37jwxqcg3gylqkwpjlfuosfy2pi8wxd7fa\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { } ]\n    } ]\n  }, {\n    \"originDataSourceId\" : \"05w4\",\n    \"endTimeNanos\" : \"2022-04-04T10:49:02.816715Z\",\n    \"dataTypeName\" : \"Karry Nader\",\n    \"startTimeNanos\" : \"2022-05-11T08:34:02.816803Z\",\n    \"modifiedTimeMillis\" : \"2022-10-04T10:28:02.81683Z\",\n    \"rawTimestampNanos\" : \"2023-03-07T09:53:02.816857Z\",\n    \"computationTimeMillis\" : \"2022-07-15T10:44:02.816885Z\",\n    \"value\" : [ {\n      \"intVal\" : 497512631,\n      \"fpVal\" : 6.39187254434867E307,\n      \"stringVal\" : \"5o4r17fcm1dzgn3eprof0bphay7qqt8rmotzci5yvboh6qzk3wjgmkx45ckjgof4eb26u7crtuk7t3stq2wm1mwnaggfsx0alx0wsqw5eh1dvvj\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1404708822,\n      \"fpVal\" : 5.968858709275483E307,\n      \"stringVal\" : \"z4t0y2b7vznsp2n4uleua619rddb5g8h4c7se7qkdbwkzrrl4140lxn7is5475ov05l9v5m5\",\n      \"mapVal\" : [ { }, { }, { } ]\n    }, {\n      \"intVal\" : 1831900582,\n      \"fpVal\" : 1.150740823230299E308,\n      \"stringVal\" : \"hg2wsk8prrcz7uopzu0h3565g5h3e539ce70do1gkq5l3u6dmqviu8dfx10ncj47n58q68e3y3fp4biya90enmm8cy2hwklke2mu3o1a0jahdhl0rg8z5m23dzo88dy5nohwscwtums7gplounynhbyo1d5v68ft\",\n      \"mapVal\" : [ { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1818915041,\n      \"fpVal\" : 1.0053171228471314E308,\n      \"stringVal\" : \"3lrw5ytu3qyfsx9g2tnjnxan5iy46aq0orv\",\n      \"mapVal\" : [ { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1903204254,\n      \"fpVal\" : 6.558891370970745E307,\n      \"stringVal\" : \"jsbmsm04rtyqayjd8jhu2e6lv1nei2rvnzkupz2rvbzx4ngd212bg4llsyawlg3i40i226vlukyupj9a0mym1a5zr96oske38sxxocnklxbmske8fo4yxxr7rhxa3y3zj5c3ft633d23k4z82r1cl4dm028j6he2nhcqrwpdcwihfgdoy9psjltq7we2tjzpz\",\n      \"mapVal\" : [ { } ]\n    } ]\n  }, {\n    \"originDataSourceId\" : \"1y5e\",\n    \"endTimeNanos\" : \"2023-01-04T09:11:02.817134Z\",\n    \"dataTypeName\" : \"Leanora Beer\",\n    \"startTimeNanos\" : \"2022-09-23T09:00:02.81721Z\",\n    \"modifiedTimeMillis\" : \"2023-01-31T09:21:02.817238Z\",\n    \"rawTimestampNanos\" : \"2022-10-29T11:05:02.817265Z\",\n    \"computationTimeMillis\" : \"2022-11-20T10:26:02.817292Z\",\n    \"value\" : [ {\n      \"intVal\" : 635060520,\n      \"fpVal\" : 7.030333491068401E307,\n      \"stringVal\" : \"0qs8yfwnxrsm523fhb6lbaylwgz8zl5cz2aq5f02bttj351ape1sxder4iomuw1zklye93t4nzq3ot8g067b8i5y2lqto59ezzklmvrtvx66mwyagj6efpb65fp9qkt45slurdaxq4y0thhwcdiacx4flnynoe5\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 977191094,\n      \"fpVal\" : 1.8122095721228784E307,\n      \"stringVal\" : \"srglelffgibk2hvvwrrhtbptv0iwnpqw7ckt1y3mgkajbujza8bt12pgf2i7o9\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1091836008,\n      \"fpVal\" : 1.0525928205605867E308,\n      \"stringVal\" : \"skz5llzn1esedx56yang\",\n      \"mapVal\" : [ { }, { } ]\n    }, {\n      \"intVal\" : 1931454217,\n      \"fpVal\" : 8.527344154363247E307,\n      \"stringVal\" : \"py63haeywplpkoknbni\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 206657854,\n      \"fpVal\" : 2.1104258292912433E307,\n      \"stringVal\" : \"wkddek5sht1uk5vl6fznutjae8a8oqv6mahu83tbo2e2m2omyy710if1mwye0a6ul0awvb5rmx6iy6qcu8b606tavrrjkul76rao55xqz298ufi3pk28muxxx2xe7hjqdqbdwfyui4buw2b8lv28aws3nco811odmueh3u460j4tn7iu3xy6su1qa6w\",\n      \"mapVal\" : [ { }, { }, { }, { } ]\n    } ]\n  }, {\n    \"originDataSourceId\" : \"oso3\",\n    \"endTimeNanos\" : \"2022-09-26T11:47:02.817546Z\",\n    \"dataTypeName\" : \"Kerry Fadel\",\n    \"startTimeNanos\" : \"2022-11-11T09:34:02.817622Z\",\n    \"modifiedTimeMillis\" : \"2023-01-21T09:28:02.81765Z\",\n    \"rawTimestampNanos\" : \"2022-07-25T10:34:02.817679Z\",\n    \"computationTimeMillis\" : \"2022-05-13T08:35:02.817708Z\",\n    \"value\" : [ {\n      \"intVal\" : 970157899,\n      \"fpVal\" : 6.594521704864383E307,\n      \"stringVal\" : \"lrugucvo6xl6y2mtt99qa6wn0ylt35j292hudh60fl60ddtoilujlaawdifz0zn1znav9ppd4b5vtr4gah7t77dyj8cr962wjvzreweyo\",\n      \"mapVal\" : [ { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 2091527182,\n      \"fpVal\" : 5.046617246482885E307,\n      \"stringVal\" : \"mdpkps\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 237911004,\n      \"fpVal\" : 1.3379791063633316E308,\n      \"stringVal\" : \"ode3q772vrw5qwoxkmzyzsb6186vufs8y4du8l56j5gkqjlatwaj6j3zyt9vvvlrzxp8nrztiam3st6ob1g4hj760f6ybdk1bomebarx0j92wfsvxvtobc9z3jk7s05\",\n      \"mapVal\" : [ { }, { }, { } ]\n    }, {\n      \"intVal\" : 1058897116,\n      \"fpVal\" : 2.4485185624207384E307,\n      \"stringVal\" : \"c610zj73nfw3rllav7scg4su8zwn9nq1hqblhxhl36w7992ut1h0q6snp4ve90zp1ra2dd7a9v7iykhn4e3m55i603bb4awvhqn1oji7n796qupouc1kgkvh7qomrx5k5vvjh7ebi22p6kf9apffo7qboia7syh0eyxcwaymis3hx\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { }, { } ]\n    } ]\n  }, {\n    \"originDataSourceId\" : \"t0v2\",\n    \"endTimeNanos\" : \"2022-05-04T09:58:02.817942Z\",\n    \"dataTypeName\" : \"Iona Torphy\",\n    \"startTimeNanos\" : \"2022-05-12T09:40:02.818032Z\",\n    \"modifiedTimeMillis\" : \"2022-12-03T09:21:02.818062Z\",\n    \"rawTimestampNanos\" : \"2023-03-13T11:18:02.818091Z\",\n    \"computationTimeMillis\" : \"2022-09-24T11:12:02.81812Z\",\n    \"value\" : [ {\n      \"intVal\" : 442119142,\n      \"fpVal\" : 1.2176450702507685E308,\n      \"stringVal\" : \"fqjv5h74tkrjpkuwgxhvg74nv9kvs3fmarc4s06\",\n      \"mapVal\" : [ { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1601295799,\n      \"fpVal\" : 2.557428970053985E307,\n      \"stringVal\" : \"oh0fej7aoxfue4vypjy3xc0kukoaczgqnoe89l35ubk1a0ojtplc1sa721u62dwah7ykax9xs67c60czquzgqphh340kac5txt4qvs5myi596g00bo9o7z4y2luib9kdoc\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1446652612,\n      \"fpVal\" : 1.5335485880646377E308,\n      \"stringVal\" : \"3qx2\",\n      \"mapVal\" : [ { }, { }, { } ]\n    }, {\n      \"intVal\" : 916257126,\n      \"fpVal\" : 1.6130143632861477E308,\n      \"stringVal\" : \"bio7u5n765ptkr51wc6eosfas7w4xwa\",\n      \"mapVal\" : [ { }, { }, { }, { }, { } ]\n    } ]\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "570e091d-48f2-45a4-8b0c-52d7a23482a7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:02.818601Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "fitness.users.dataSources.datasets.patch",
          "schema" : {
            "description" : "A dataset represents a projection container for data points. They do not carry any info of their own. Datasets represent a set of data points from a particular data source. A data point can be found in more than one dataset.",
            "properties" : {
              "dataSourceId" : {
                "description" : "The data stream ID of the data source that created the points in this dataset.",
                "type" : "string"
              },
              "maxEndTimeNs" : {
                "description" : "The largest end time of all data points in this possibly partial representation of the dataset. Time is in nanoseconds from epoch. This should also match the second part of the dataset identifier.",
                "format" : "int64",
                "type" : "string"
              },
              "minStartTimeNs" : {
                "description" : "The smallest start time of all data points in this possibly partial representation of the dataset. Time is in nanoseconds from epoch. This should also match the first part of the dataset identifier.",
                "format" : "int64",
                "type" : "string"
              },
              "nextPageToken" : {
                "description" : "This token will be set when a dataset is received in response to a GET request and the dataset is too large to be included in a single response. Provide this value in a subsequent GET request to return the next page of data points within this dataset.",
                "type" : "string"
              },
              "point" : {
                "description" : "A partial list of data points contained in the dataset, ordered by endTimeNanos. This list is considered complete when retrieving a small dataset and partial when patching a dataset or retrieving a dataset that is too large to include in a single response.",
                "items" : {
                  "$ref" : "#/components/schemas/DataPoint"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 4
  }, {
    "id" : "3413394b-fccb-447e-9fa2-eadb85ee1a30",
    "name" : "Returns a dataset containing all data points whose start and end times overlap w...",
    "request" : {
      "urlPath" : "/a64i/dataSources/1zcb/datasets/60l2",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"dataSourceId\" : \"70o3\",\n  \"maxEndTimeNs\" : \"2022-09-18T10:15:02.813289Z\",\n  \"minStartTimeNs\" : \"2022-09-27T08:37:02.813319Z\",\n  \"nextPageToken\" : \"pavlfx4taxky2ezz9924gn4v7whreav43k4qp1egsbm90otv9ou8cnoyvazam626tdcwc7d8v9hmco3c24cfa7a\",\n  \"point\" : [ {\n    \"originDataSourceId\" : \"lt4e\",\n    \"endTimeNanos\" : \"2022-11-27T08:35:02.813428Z\",\n    \"dataTypeName\" : \"Mr. Rosario Runte\",\n    \"startTimeNanos\" : \"2023-02-28T10:42:02.81351Z\",\n    \"modifiedTimeMillis\" : \"2022-08-31T09:41:02.813539Z\",\n    \"rawTimestampNanos\" : \"2022-05-15T09:17:02.813567Z\",\n    \"computationTimeMillis\" : \"2022-11-09T11:03:02.813594Z\",\n    \"value\" : [ {\n      \"intVal\" : 1413857272,\n      \"fpVal\" : 1.6183429508349848E308,\n      \"stringVal\" : \"r3w5oryrha3q43e1vndwifen6h02p251l6l64k2k4gb2respelw3026rwkqvruwoswawdirseh5p2o0vyc1ius99vxk87m6pg41n4t6sjn0urovl1fmj4a4kec5d7799j4ost6p8i898sm3c\",\n      \"mapVal\" : [ { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1647940963,\n      \"fpVal\" : 1.1446837292232203E308,\n      \"stringVal\" : \"lfmkk61z39unv0u4loaey9so28zy28wu9dpcikje4mz85ct0lcrt3equs2k2saj7mr358idx5pgb3kt0lu34t5mxg3b67d6ney\",\n      \"mapVal\" : [ { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1793225774,\n      \"fpVal\" : 5.864930235232546E307,\n      \"stringVal\" : \"t0f6kfyaodykic61nxhqj4c32fxd940yiv7qu1i5j7gsu6m2ng9dg5o1cl0t11r8aocbm35e69dlmjdqog9pmpocxrgwbmkg9vs1b6bjiu907dxvuo65pgd8gst4ff3ar9mr7y4ztv0lkes4dcq\",\n      \"mapVal\" : [ { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 2048627159,\n      \"fpVal\" : 1.7747568894894662E308,\n      \"stringVal\" : \"8qitlsu127be4ezdc2orbcl87x35q2qwm4ft4wkrrhiqmk8tixmdxkidz\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1121683241,\n      \"fpVal\" : 7.203243435268722E307,\n      \"stringVal\" : \"z4nvbefw8ycmfffc6ma7tmsmnuqyphjjgwsihfsly\",\n      \"mapVal\" : [ { }, { }, { } ]\n    }, {\n      \"intVal\" : 1552122881,\n      \"fpVal\" : 1.22602804900307E308,\n      \"stringVal\" : \"i8n55jqiipr34nnuwlnfdhdk01g62qdoi5032f71qhaw9xzb6s09bl86wgruaw6t2k352g9zvw8hehx5xwuo55dmzoy1cwehe4s6\",\n      \"mapVal\" : [ { } ]\n    }, {\n      \"intVal\" : 1953133537,\n      \"fpVal\" : 7.464797619723124E307,\n      \"stringVal\" : \"udzkl2ily181i07xs08xdmfn3pp1ywqvry4tl7z1ip2mq730zza2xfuabz5lsli83lkvsotx7hul7nqw5jff0lw81ddskhllyq6nbl893ffbx8juv5und9pcm01hcco9pkoq2akig8i\",\n      \"mapVal\" : [ { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 381312821,\n      \"fpVal\" : 8.176817165273379E307,\n      \"stringVal\" : \"6aris6egsvyxklf528hmhmkozta\",\n      \"mapVal\" : [ { }, { } ]\n    } ]\n  }, {\n    \"originDataSourceId\" : \"56er\",\n    \"endTimeNanos\" : \"2023-03-11T09:03:02.813935Z\",\n    \"dataTypeName\" : \"Lourdes Douglas\",\n    \"startTimeNanos\" : \"2022-07-03T11:15:02.81401Z\",\n    \"modifiedTimeMillis\" : \"2022-05-27T11:23:02.814037Z\",\n    \"rawTimestampNanos\" : \"2022-05-07T09:55:02.814064Z\",\n    \"computationTimeMillis\" : \"2022-03-28T09:16:02.814092Z\",\n    \"value\" : [ {\n      \"intVal\" : 332529379,\n      \"fpVal\" : 1.529771493369029E308,\n      \"stringVal\" : \"50sou2iy7gsurq3fio7pftyjy7lw5tbnc5cy3zuss0wmalrbii790qi8upkzdk3apahp0s8szt6oascatmpwn0782tuqhis9g\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 277871960,\n      \"fpVal\" : 8.2598647333442E305,\n      \"stringVal\" : \"194eyjkb67givknlkadjo123t8cwd6lhkyi8pwe1aj047c946hion4xlfjmyb4xsvx7yo1r7wn0bgxtxw284zkwt1sts04mbfvb3jyt2fnscuqn6cvzd5uucsv703qs958yh89h2l6kt3vpm7prs8h0d286ztzein4hqu822kxwflc5rdr9h8tqhz2k1s6p4urygy2\",\n      \"mapVal\" : [ { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 19960523,\n      \"fpVal\" : 1.3114327229536624E308,\n      \"stringVal\" : \"7p7vl6lgscebnekvi1cqm41j9qj6l099s6ajewqzayl74ske42rhgswe0qf3nr5zrkya2v13opia46joy5i8kgswtyflnjdgx9syphebheq89aaq9h\",\n      \"mapVal\" : [ { } ]\n    }, {\n      \"intVal\" : 2110973692,\n      \"fpVal\" : 6.132191231368855E307,\n      \"stringVal\" : \"ib352h4dcrvkg4qsuggt9ho15mvx3i8r9ilk7x48k90qjmiu7341p1pf9kksb9351a80najbmsttdvu2qhnkasj4has7dlxwhzvn5ktipe55s3uzg6vlnvyz0hzmk9g6hl6zmwejdeyeed2zr6zlx1quu\",\n      \"mapVal\" : [ { }, { }, { } ]\n    }, {\n      \"intVal\" : 1383435772,\n      \"fpVal\" : 1.3999863809724488E308,\n      \"stringVal\" : \"vgs9ayz\",\n      \"mapVal\" : [ { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1258924792,\n      \"fpVal\" : 4.153981315224277E307,\n      \"stringVal\" : \"fdf1bwslbz3grcdj8aj2ypmpsyyyu57gxjr11rkddvt8lzwt4eweu6h1gfs88c91kq5o6d67i2x572emoibfj0n1i5vhey8b\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 477619431,\n      \"fpVal\" : 8.583128963939846E307,\n      \"stringVal\" : \"xss0xoxmb5hfkpjzduk0f7w3qvyfmd3wjt5o8llv05ypjmkzgmu98s032minxt2nwmxycrh69ciymjvnroc9j7ffbbcv7\",\n      \"mapVal\" : [ { }, { }, { } ]\n    }, {\n      \"intVal\" : 1133152474,\n      \"fpVal\" : 8.202369286575693E307,\n      \"stringVal\" : \"ehynt9hod8llr0uu7xv7gaherpe0suh1tob2yzh9ki7s9hl4mzq9lxhnuvqfg9ywwqn53la3q8q94yu47e7u7aln421avlzqs7q0jqhi6ilajbl5ntdcj0llag9jk8q3di8zfi6hvws\",\n      \"mapVal\" : [ { } ]\n    } ]\n  }, {\n    \"originDataSourceId\" : \"95uu\",\n    \"endTimeNanos\" : \"2022-08-08T08:35:02.814436Z\",\n    \"dataTypeName\" : \"Dr. Leilani Bernier\",\n    \"startTimeNanos\" : \"2022-12-28T10:57:02.814519Z\",\n    \"modifiedTimeMillis\" : \"2022-07-26T08:34:02.814548Z\",\n    \"rawTimestampNanos\" : \"2023-03-03T10:21:02.814577Z\",\n    \"computationTimeMillis\" : \"2022-07-16T09:17:02.814607Z\",\n    \"value\" : [ {\n      \"intVal\" : 1925793634,\n      \"fpVal\" : 3.6342261798315955E307,\n      \"stringVal\" : \"7v684xf3x5hozdfccirs18ka44cezu7m2at27fxj9\",\n      \"mapVal\" : [ { } ]\n    }, {\n      \"intVal\" : 1432676131,\n      \"fpVal\" : 1.2422868045985342E307,\n      \"stringVal\" : \"7paqtjxma5jfce578ozqp5a63avo2jmolaczbljzkwnxys6e1fyrigbwguo3fhybgxo47n3ipymrcfedleb17y7113l9u2fzeld8apd3hau1yrtvlc0p1h07ws3i365oeebpwztf012pj0vg259qb7w1ox0p1hgmcx298lukuyzlje88q6oiemk7tj6i13rdcx7s\",\n      \"mapVal\" : [ { }, { } ]\n    } ]\n  }, {\n    \"originDataSourceId\" : \"uz1e\",\n    \"endTimeNanos\" : \"2022-04-03T09:54:02.814762Z\",\n    \"dataTypeName\" : \"Weldon Wyman\",\n    \"startTimeNanos\" : \"2022-05-10T09:02:02.814837Z\",\n    \"modifiedTimeMillis\" : \"2022-09-13T07:59:02.814866Z\",\n    \"rawTimestampNanos\" : \"2022-12-09T11:33:02.814892Z\",\n    \"computationTimeMillis\" : \"2022-09-16T09:59:02.814922Z\",\n    \"value\" : [ {\n      \"intVal\" : 1446039215,\n      \"fpVal\" : 1.7278902413175003E308,\n      \"stringVal\" : \"awk8vh921sa4nf9eu72jmrt39h7wv6z8o6iqr6cu90uev09k14xur5feqtteo3zn6mnn6z6s5dv1b6poa85um5i4u1cnc7lanjzzqrfoecjdlsuwdypj33zepsytk1d7co9qi34hbtas7r3ihwfqfyg4uwd2ylw7s3u5qqcth7ijj2wer8teg\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 406299292,\n      \"fpVal\" : 7.444991367400785E307,\n      \"stringVal\" : \"7fmstafrjy\",\n      \"mapVal\" : [ { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 2000256869,\n      \"fpVal\" : 1.1986433539305562E308,\n      \"stringVal\" : \"gd8dppyg5jpu3rrm5zamcuoke7eemlagf578qu2y2ka6uj9ky3xmwq6c2eex0ewz3t3qlai2qe0qkbqkuden3r7k6tv63eg95pajals2j2z50msyap15ihqb1nu52nxsjmia43y8ejsp7uoywsrz0wgx5shia6tvek2cf8lnvqub1uawq\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1960336685,\n      \"fpVal\" : 3.5919874962095744E307,\n      \"stringVal\" : \"6w9yhndzqbm8yf65go3aqhey9kwm2x1oxvzr0jdlt15d9aosrhsetiwxls05rb05vhk33bq3s0kku7nj52yaulcan22mozmz3rbwrqfztvejskplrkg6hygj5j5wwqgzhjtgzl16yeblflhce86fncqdt9ifkvuhxfxq08tc2lgnpnja5pdsw8owiic08ek47tkraqt\",\n      \"mapVal\" : [ { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 904158662,\n      \"fpVal\" : 8.356507536477892E306,\n      \"stringVal\" : \"j4033j9qdiwv95o18ssy8ckgf0ljtarvcgowxm7am3is\",\n      \"mapVal\" : [ { } ]\n    } ]\n  }, {\n    \"originDataSourceId\" : \"u770\",\n    \"endTimeNanos\" : \"2022-10-11T10:35:02.815173Z\",\n    \"dataTypeName\" : \"Ms. Alfredo Franecki\",\n    \"startTimeNanos\" : \"2022-08-24T09:20:02.815251Z\",\n    \"modifiedTimeMillis\" : \"2022-03-30T10:32:02.81528Z\",\n    \"rawTimestampNanos\" : \"2023-01-06T09:37:02.815307Z\",\n    \"computationTimeMillis\" : \"2023-02-11T09:38:02.815336Z\",\n    \"value\" : [ {\n      \"intVal\" : 1037878120,\n      \"fpVal\" : 4.657559759115089E307,\n      \"stringVal\" : \"rwrypqksj7mw5l9hx2chodlxjotookqpogntjjbkr26xepxg3l1x4d33inky6jgok49qar6b2o5xlgj7hduoy2dza7oa3db8qqeldnzw0rgh9ln2k78sndmzf1q6nhxee\",\n      \"mapVal\" : [ { } ]\n    }, {\n      \"intVal\" : 1586711962,\n      \"fpVal\" : 9.41720262788563E307,\n      \"stringVal\" : \"b4oe7ie01ot2xylqc7jo3cy36klhsvkbr1cst6iti1s7y6rinlx84hmuahrps63oi6x5q1c7ene0uu4l3yqrbu7n31pfa3fw7vdkyvghyiqs75os30kf204c6ow6ax5\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    } ]\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "3413394b-fccb-447e-9fa2-eadb85ee1a30",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:02.815732Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "fitness.users.dataSources.datasets.get",
          "schema" : {
            "description" : "A dataset represents a projection container for data points. They do not carry any info of their own. Datasets represent a set of data points from a particular data source. A data point can be found in more than one dataset.",
            "properties" : {
              "dataSourceId" : {
                "description" : "The data stream ID of the data source that created the points in this dataset.",
                "type" : "string"
              },
              "maxEndTimeNs" : {
                "description" : "The largest end time of all data points in this possibly partial representation of the dataset. Time is in nanoseconds from epoch. This should also match the second part of the dataset identifier.",
                "format" : "int64",
                "type" : "string"
              },
              "minStartTimeNs" : {
                "description" : "The smallest start time of all data points in this possibly partial representation of the dataset. Time is in nanoseconds from epoch. This should also match the first part of the dataset identifier.",
                "format" : "int64",
                "type" : "string"
              },
              "nextPageToken" : {
                "description" : "This token will be set when a dataset is received in response to a GET request and the dataset is too large to be included in a single response. Provide this value in a subsequent GET request to return the next page of data points within this dataset.",
                "type" : "string"
              },
              "point" : {
                "description" : "A partial list of data points contained in the dataset, ordered by endTimeNanos. This list is considered complete when retrieving a small dataset and partial when patching a dataset or retrieving a dataset that is too large to include in a single response.",
                "items" : {
                  "$ref" : "#/components/schemas/DataPoint"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 5
  }, {
    "id" : "625b0864-9413-4fcb-af83-34330a795122",
    "name" : "Performs an inclusive delete of all data points whose start and end times have a... - 200",
    "request" : {
      "urlPath" : "/9d2t/dataSources/79ur/datasets/2ah7",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200
    },
    "uuid" : "625b0864-9413-4fcb-af83-34330a795122",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:02.813183Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "fitness.users.dataSources.datasets.delete"
        }
      }
    },
    "insertionIndex" : 6
  }, {
    "id" : "a437beea-d1fd-4d2a-99a4-fa2b50b8809e",
    "name" : "Queries for user's data point changes for a particular data source.",
    "request" : {
      "urlPath" : "/yusn/dataSources/0ixg/dataPointChanges",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"dataSourceId\" : \"1e6w\",\n  \"deletedDataPoint\" : [ {\n    \"originDataSourceId\" : \"qz39\",\n    \"endTimeNanos\" : \"2022-11-19T08:06:02.811601Z\",\n    \"dataTypeName\" : \"Kristopher Pfeffer\",\n    \"startTimeNanos\" : \"2022-04-13T10:32:02.811687Z\",\n    \"modifiedTimeMillis\" : \"2023-01-11T10:08:02.811719Z\",\n    \"rawTimestampNanos\" : \"2023-02-21T07:57:02.811749Z\",\n    \"computationTimeMillis\" : \"2022-08-31T08:36:02.811782Z\",\n    \"value\" : [ {\n      \"intVal\" : 172545558,\n      \"fpVal\" : 1.6328557640375813E308,\n      \"stringVal\" : \"fusuk6o621u9ajzsmw3rt8wsyb6vyopqkx1o1dn7l9se8\",\n      \"mapVal\" : [ { } ]\n    } ]\n  } ],\n  \"nextPageToken\" : \"2zfxmjlxwn9w92vjzd6psiam3hbdhdy114qetga5r0ey5k1fupv6u0zc44gk2oo6dbqt4w2d4efr61u3tw2ze6zy2nf0j04m0vlaryw8wjdwsd5zn6qhc8w6sn923wpsv0zqhhpmmms0ff4ndbcoclpjnbpttxjror680mr6\",\n  \"insertedDataPoint\" : [ {\n    \"originDataSourceId\" : \"058l\",\n    \"endTimeNanos\" : \"2022-08-09T10:24:02.811959Z\",\n    \"dataTypeName\" : \"Dionna Wisoky I\",\n    \"startTimeNanos\" : \"2022-06-17T10:35:02.81204Z\",\n    \"modifiedTimeMillis\" : \"2022-05-14T09:57:02.812069Z\",\n    \"rawTimestampNanos\" : \"2022-08-28T08:12:02.812097Z\",\n    \"computationTimeMillis\" : \"2022-10-08T09:27:02.812126Z\",\n    \"value\" : [ {\n      \"intVal\" : 1991433370,\n      \"fpVal\" : 3.755094637038033E307,\n      \"stringVal\" : \"c2h3wcqcj6pfupdodfxjozeiyq0b7ygcqlprpyj3l84hr80sli8bf3yfiv80r29qt52sni2k5khm6ykbcj\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1173588268,\n      \"fpVal\" : 1.740440741238831E308,\n      \"stringVal\" : \"cl7q6v3w59m2hmbxue1r6vam1l2w11pc556niil517wb\",\n      \"mapVal\" : [ { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 377341655,\n      \"fpVal\" : 4.984343494645359E307,\n      \"stringVal\" : \"oycsr04bcpko9fvvrkhoyy\",\n      \"mapVal\" : [ { } ]\n    }, {\n      \"intVal\" : 618150990,\n      \"fpVal\" : 1.5794859713548656E308,\n      \"stringVal\" : \"xnp985nw3xgokwcn8c7ggaujy44v2ef0we3q5wmsm1rmcksctc27gl6u5t6rk33yoal74ockuwq4w7pf\",\n      \"mapVal\" : [ { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 566973231,\n      \"fpVal\" : 1.627842608466487E308,\n      \"stringVal\" : \"p7ri8cfng4ec262nz05n2q5h7w4dpwwljm74k91p5qbzv9ddu1zj4ty0n51nj6bksddj9gt1h37wn42ud9eyl5lp96x0dqjjr72f3xaxdjz7tt5gt02syltqod\",\n      \"mapVal\" : [ { }, { }, { } ]\n    }, {\n      \"intVal\" : 1400452035,\n      \"fpVal\" : 4.1152701043586845E307,\n      \"stringVal\" : \"ju9y8o2gscp1p8pb12x7dhxwserhypc8dkescotmrclw0nfvbuq3eyyxr0ccu0wl7v2umplnzr3dxv3mn20hljuutqrzuy8wj0bh825ut5dvggfxixsljhnhc4tp1jeh6z8c7ftgti0lhad4c9ispq\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1010573988,\n      \"fpVal\" : 9.578707332307158E307,\n      \"stringVal\" : \"ldjc4vpv2oxcoxnobhxgmdh54jxobfbpdz1dxv81ixmghnto5xkhomdyknhbj7lmpz2m51b3zlmc5kddgl76ii1kaoe1h7vw04gd72sbcvdj5gefolng5zrgkxhozpd9nzhcb4c83hojk\",\n      \"mapVal\" : [ { }, { }, { }, { }, { } ]\n    }, {\n      \"intVal\" : 1324850204,\n      \"fpVal\" : 1.1489016188601738E308,\n      \"stringVal\" : \"2t90o3ul8c5jazzqfv8yxoii27i9gs9icmlbgyd2z4jhk6hwqjz9mh68vo7lwgwwxdszwa7fv70sm8ezmjavdi7saj55egs85f5wn376yuoi8brt3g6wd9occ6co24meh0s261y164fgc5vsqdmr76eq3ohktwu6niq8c8cru969jkkf1u21b7ph8ybmn\",\n      \"mapVal\" : [ { } ]\n    } ]\n  }, {\n    \"originDataSourceId\" : \"8y3e\",\n    \"endTimeNanos\" : \"2022-10-18T08:52:02.812475Z\",\n    \"dataTypeName\" : \"Scottie Kozey\",\n    \"startTimeNanos\" : \"2022-10-01T11:44:02.812552Z\",\n    \"modifiedTimeMillis\" : \"2022-03-30T08:30:02.812581Z\",\n    \"rawTimestampNanos\" : \"2022-11-15T08:36:02.812609Z\",\n    \"computationTimeMillis\" : \"2022-04-30T11:17:02.812638Z\",\n    \"value\" : [ {\n      \"intVal\" : 1003870696,\n      \"fpVal\" : 1.2978121537730727E308,\n      \"stringVal\" : \"4n3s6q05p01mj7oj3fofwzbamopm91l8u37h0p23cxnj61yopsat5c5ljl18t62vwdgp0elog8xv0mues0rsauli7vy0qwi52x3srh0xhxifpu4kt418v8kgq6ced86xoe9m8u0qj2e8m6\",\n      \"mapVal\" : [ { } ]\n    }, {\n      \"intVal\" : 267626829,\n      \"fpVal\" : 7.923789269858169E307,\n      \"stringVal\" : \"zjetv0sugirxyqp4ccjhqwf5ymwp5ode4tatey7b0pqroancd\",\n      \"mapVal\" : [ { } ]\n    }, {\n      \"intVal\" : 14573563,\n      \"fpVal\" : 3.6192629499023187E307,\n      \"stringVal\" : \"eps4a6s45rreaj4ouhv58nrnxhlpaafzjnnngo39vedalqbtcs89mlz7w6y9qbg52jvmku4tkq5fouhxpjg0y0iv8seo4v1pzt51ntrm4d3kywmkz5gbpuao5pvp7e7dis7f\",\n      \"mapVal\" : [ { }, { }, { }, { }, { }, { }, { }, { } ]\n    } ]\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "a437beea-d1fd-4d2a-99a4-fa2b50b8809e",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:02.812965Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "fitness.users.dataSources.dataPointChanges.list",
          "schema" : {
            "properties" : {
              "dataSourceId" : {
                "description" : "The data stream ID of the data source with data point changes.",
                "type" : "string"
              },
              "deletedDataPoint" : {
                "description" : "Deleted data points for the user. Note, for modifications this should be parsed before handling insertions.",
                "items" : {
                  "$ref" : "#/components/schemas/DataPoint"
                },
                "type" : "array"
              },
              "insertedDataPoint" : {
                "description" : "Inserted data points for the user.",
                "items" : {
                  "$ref" : "#/components/schemas/DataPoint"
                },
                "type" : "array"
              },
              "nextPageToken" : {
                "description" : "The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 7
  }, {
    "id" : "4a8198b3-c80c-458d-be2b-12cdd22aa77b",
    "name" : "Updates the specified data source. The dataStreamId, dataType, type, dataStreamN...",
    "request" : {
      "urlPath" : "/5250/dataSources/ob51",
      "method" : "PUT"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"dataStreamName\" : \"Sydney Windler I\",\n  \"application\" : {\n    \"detailsUrl\" : \"https://web.example.mocklab.io/955700\",\n    \"name\" : \"Mrs. Luther Ondricka\",\n    \"packageName\" : \"Timothy Rohan\",\n    \"version\" : \"k7jngz2hlvpsuyztt8hzfoisin67uhi6jwf2bb49gscxlvdfmv8etchll3e1r1zf4i6b2fe\"\n  },\n  \"dataType\" : {\n    \"field\" : [ {\n      \"format\" : \"floatPoint\",\n      \"name\" : \"Jolene Fritsch\",\n      \"optional\" : true\n    }, {\n      \"format\" : \"integerList\",\n      \"name\" : \"See Johnston\",\n      \"optional\" : true\n    }, {\n      \"format\" : \"floatPoint\",\n      \"name\" : \"Mrs. Franklin Beahan\",\n      \"optional\" : true\n    }, {\n      \"format\" : \"integer\",\n      \"name\" : \"Jay Rodriguez\",\n      \"optional\" : true\n    }, {\n      \"format\" : \"string\",\n      \"name\" : \"Dannielle Fritsch\",\n      \"optional\" : false\n    }, {\n      \"format\" : \"blob\",\n      \"name\" : \"Tessie Bosco\",\n      \"optional\" : false\n    }, {\n      \"format\" : \"floatPoint\",\n      \"name\" : \"Mr. Lashonda Lockman\",\n      \"optional\" : false\n    } ],\n    \"name\" : \"Dean Deckow\"\n  },\n  \"name\" : \"Lucienne Howell\",\n  \"dataQualityStandard\" : [ \"dataQualityBloodPressureBhsBB\", \"dataQualityUnknown\", \"dataQualityUnknown\", \"dataQualityBloodPressureEsh2010\" ],\n  \"type\" : \"raw\",\n  \"device\" : {\n    \"uid\" : \"ct78\",\n    \"model\" : \"qyhi1rxc8ka0kbvvlbbjh39yoh3oen2hwd84h7hb58cwd461qqxotz6xkgpqu6rm99y5hutgma2wzppi9ksvy3tx7mlmi7lbitr2txcjguph5vk15cjea1l04lqgxjipbjqi1nib2c2qttkjvo43spyewn\",\n    \"type\" : \"phone\",\n    \"version\" : \"wjsq8ln67xtkry1rvq02e8m4nteppu8ykc8pf40ahq8221tn7er8i3bztzdwa01cogx414n0ri7lufbv3jxjj2bt43jyqyl3qu512e548zovykby4dg4yg2s1\",\n    \"manufacturer\" : \"mfb412nb4xd4tjlajzrgetwz6rpokkcf84l8kihsh2hzdy916zjsja3ttl6nc01xow8gv0n08wf4ff2m4xul2d9edu72zc4thylouu9xall5pjd8uqpd6jtou6i3a4rl00nox6cnzi5jpc5vvmx6t5choqdfk8eo9a4r\"\n  },\n  \"dataStreamId\" : \"r4r8\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "4a8198b3-c80c-458d-be2b-12cdd22aa77b",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:02.811396Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "fitness.users.dataSources.update",
          "schema" : {
            "description" : "Definition of a unique source of sensor data. Data sources can expose raw data coming from hardware sensors on local or companion devices. They can also expose derived data, created by transforming or merging other data sources. Multiple data sources can exist for the same data type. Every data point inserted into or read from this service has an associated data source. The data source contains enough information to uniquely identify its data, including the hardware device and the application that collected and/or transformed the data. It also holds useful metadata, such as the hardware and application versions, and the device type. Each data source produces a unique stream of data, with a unique identifier. Not all changes to data source affect the stream identifier, so that data collected by updated versions of the same application/device can still be considered to belong to the same data stream.",
            "properties" : {
              "application" : {
                "$ref" : "#/components/schemas/Application"
              },
              "dataQualityStandard" : {
                "description" : "DO NOT POPULATE THIS FIELD. It is never populated in responses from the platform, and is ignored in queries. It will be removed in a future version entirely.",
                "items" : {
                  "enum" : [ "dataQualityUnknown", "dataQualityBloodPressureEsh2002", "dataQualityBloodPressureEsh2010", "dataQualityBloodPressureAami", "dataQualityBloodPressureBhsAA", "dataQualityBloodPressureBhsAB", "dataQualityBloodPressureBhsBA", "dataQualityBloodPressureBhsBB", "dataQualityBloodGlucoseIso151972003", "dataQualityBloodGlucoseIso151972013" ],
                  "type" : "string"
                },
                "type" : "array"
              },
              "dataStreamId" : {
                "description" : "A unique identifier for the data stream produced by this data source. The identifier includes: - The physical device's manufacturer, model, and serial number (UID). - The application's package name or name. Package name is used when the data source was created by an Android application. The developer project number is used when the data source was created by a REST client. - The data source's type. - The data source's stream name. Note that not all attributes of the data source are used as part of the stream identifier. In particular, the version of the hardware/the application isn't used. This allows us to preserve the same stream through version updates. This also means that two DataSource objects may represent the same data stream even if they're not equal. The exact format of the data stream ID created by an Android application is: type:dataType.name:application.packageName:device.manufacturer:device.model:device.uid:dataStreamName The exact format of the data stream ID created by a REST client is: type:dataType.name:developer project number:device.manufacturer:device.model:device.uid:dataStreamName When any of the optional fields that make up the data stream ID are absent, they will be omitted from the data stream ID. The minimum viable data stream ID would be: type:dataType.name:developer project number Finally, the developer project number and device UID are obfuscated when read by any REST or Android client that did not create the data source. Only the data source creator will see the developer project number in clear and normal form. This means a client will see a different set of data_stream_ids than another client with different credentials.",
                "type" : "string"
              },
              "dataStreamName" : {
                "description" : "The stream name uniquely identifies this particular data source among other data sources of the same type from the same underlying producer. Setting the stream name is optional, but should be done whenever an application exposes two streams for the same data type, or when a device has two equivalent sensors.",
                "type" : "string"
              },
              "dataType" : {
                "$ref" : "#/components/schemas/DataType"
              },
              "device" : {
                "$ref" : "#/components/schemas/Device"
              },
              "name" : {
                "description" : "An end-user visible name for this data source.",
                "type" : "string"
              },
              "type" : {
                "description" : "A constant describing the type of this data source. Indicates whether this data source produces raw or derived data.",
                "enum" : [ "raw", "derived" ],
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 8
  }, {
    "id" : "5e954c6e-2b2e-46a1-8ea4-c4294a03c417",
    "name" : "Returns the specified data source.",
    "request" : {
      "urlPath" : "/mlrf/dataSources/53z7",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"dataStreamName\" : \"Mrs. Spencer Von\",\n  \"application\" : {\n    \"detailsUrl\" : \"https://web.example.mocklab.io/684078\",\n    \"name\" : \"Porter Mann\",\n    \"packageName\" : \"Kizzie Mueller\",\n    \"version\" : \"jjzopq40a8qjedcu8ta8qcinepcrvfhwp1c0u7hwzpgf7gdlcpmdo3sbalcpxtmki0pov9rcw5a571s3jlwayiu28eqgg7khy8wd21imhw5t1ip7swa9aos04k2yqqqpo7zfucaqh5bzm1uhx2lmej\"\n  },\n  \"dataType\" : {\n    \"field\" : [ {\n      \"format\" : \"string\",\n      \"name\" : \"Allan Leuschke\",\n      \"optional\" : false\n    }, {\n      \"format\" : \"blob\",\n      \"name\" : \"Billy Streich\",\n      \"optional\" : false\n    }, {\n      \"format\" : \"integer\",\n      \"name\" : \"Willodean Wolff II\",\n      \"optional\" : false\n    }, {\n      \"format\" : \"string\",\n      \"name\" : \"Dario Runte\",\n      \"optional\" : true\n    }, {\n      \"format\" : \"blob\",\n      \"name\" : \"Dorie Friesen DDS\",\n      \"optional\" : true\n    }, {\n      \"format\" : \"map\",\n      \"name\" : \"Demetrius Hintz\",\n      \"optional\" : true\n    }, {\n      \"format\" : \"integerList\",\n      \"name\" : \"Kaye Gleason Jr.\",\n      \"optional\" : false\n    } ],\n    \"name\" : \"Frances Hettinger DVM\"\n  },\n  \"name\" : \"So Corwin\",\n  \"dataQualityStandard\" : [ \"dataQualityBloodGlucoseIso151972003\", \"dataQualityBloodPressureEsh2010\", \"dataQualityBloodPressureEsh2002\", \"dataQualityBloodPressureEsh2002\", \"dataQualityBloodPressureEsh2002\", \"dataQualityBloodPressureBhsBA\", \"dataQualityBloodGlucoseIso151972013\", \"dataQualityBloodGlucoseIso151972013\" ],\n  \"type\" : \"raw\",\n  \"device\" : {\n    \"uid\" : \"th0g\",\n    \"model\" : \"6ybeqc4oxachwt5sh3gygluahj4g1jvn8mdx44ogfj82zs5d2e3dab9brpmp0aaoxx213678e8linptfmu38q127hqu5n6p8z7ijuh7sfp5ht1\",\n    \"type\" : \"chestStrap\",\n    \"version\" : \"awvbtzyx21chfd2x7\",\n    \"manufacturer\" : \"8nndbv5ywmsqfyk95jrz12kn8cl7wbcdm26h5h8fmj6ljvp2kbjecveu\"\n  },\n  \"dataStreamId\" : \"3223\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "5e954c6e-2b2e-46a1-8ea4-c4294a03c417",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:02.810208Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "fitness.users.dataSources.get",
          "schema" : {
            "description" : "Definition of a unique source of sensor data. Data sources can expose raw data coming from hardware sensors on local or companion devices. They can also expose derived data, created by transforming or merging other data sources. Multiple data sources can exist for the same data type. Every data point inserted into or read from this service has an associated data source. The data source contains enough information to uniquely identify its data, including the hardware device and the application that collected and/or transformed the data. It also holds useful metadata, such as the hardware and application versions, and the device type. Each data source produces a unique stream of data, with a unique identifier. Not all changes to data source affect the stream identifier, so that data collected by updated versions of the same application/device can still be considered to belong to the same data stream.",
            "properties" : {
              "application" : {
                "$ref" : "#/components/schemas/Application"
              },
              "dataQualityStandard" : {
                "description" : "DO NOT POPULATE THIS FIELD. It is never populated in responses from the platform, and is ignored in queries. It will be removed in a future version entirely.",
                "items" : {
                  "enum" : [ "dataQualityUnknown", "dataQualityBloodPressureEsh2002", "dataQualityBloodPressureEsh2010", "dataQualityBloodPressureAami", "dataQualityBloodPressureBhsAA", "dataQualityBloodPressureBhsAB", "dataQualityBloodPressureBhsBA", "dataQualityBloodPressureBhsBB", "dataQualityBloodGlucoseIso151972003", "dataQualityBloodGlucoseIso151972013" ],
                  "type" : "string"
                },
                "type" : "array"
              },
              "dataStreamId" : {
                "description" : "A unique identifier for the data stream produced by this data source. The identifier includes: - The physical device's manufacturer, model, and serial number (UID). - The application's package name or name. Package name is used when the data source was created by an Android application. The developer project number is used when the data source was created by a REST client. - The data source's type. - The data source's stream name. Note that not all attributes of the data source are used as part of the stream identifier. In particular, the version of the hardware/the application isn't used. This allows us to preserve the same stream through version updates. This also means that two DataSource objects may represent the same data stream even if they're not equal. The exact format of the data stream ID created by an Android application is: type:dataType.name:application.packageName:device.manufacturer:device.model:device.uid:dataStreamName The exact format of the data stream ID created by a REST client is: type:dataType.name:developer project number:device.manufacturer:device.model:device.uid:dataStreamName When any of the optional fields that make up the data stream ID are absent, they will be omitted from the data stream ID. The minimum viable data stream ID would be: type:dataType.name:developer project number Finally, the developer project number and device UID are obfuscated when read by any REST or Android client that did not create the data source. Only the data source creator will see the developer project number in clear and normal form. This means a client will see a different set of data_stream_ids than another client with different credentials.",
                "type" : "string"
              },
              "dataStreamName" : {
                "description" : "The stream name uniquely identifies this particular data source among other data sources of the same type from the same underlying producer. Setting the stream name is optional, but should be done whenever an application exposes two streams for the same data type, or when a device has two equivalent sensors.",
                "type" : "string"
              },
              "dataType" : {
                "$ref" : "#/components/schemas/DataType"
              },
              "device" : {
                "$ref" : "#/components/schemas/Device"
              },
              "name" : {
                "description" : "An end-user visible name for this data source.",
                "type" : "string"
              },
              "type" : {
                "description" : "A constant describing the type of this data source. Indicates whether this data source produces raw or derived data.",
                "enum" : [ "raw", "derived" ],
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 9
  }, {
    "id" : "e8d0ed7a-587b-4f41-836f-cc7825988cb7",
    "name" : "Deletes the specified data source. The request will fail if the data source cont...",
    "request" : {
      "urlPath" : "/h3s7/dataSources/15v5",
      "method" : "DELETE"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"dataStreamName\" : \"Blossom Armstrong\",\n  \"application\" : {\n    \"detailsUrl\" : \"https://web.example.mocklab.io/665722\",\n    \"name\" : \"Harold Ratke\",\n    \"packageName\" : \"Corey Doyle\",\n    \"version\" : \"skn2hrx5xe171m6ddx2sp7xz3fhdoyfnhmkforgbxvdx74mofp3x3mkv4k4t6drjhwdgdiknola81ufrhnt4xat5yx7p16u673y3u4fkvyviyw9qc3p24305\"\n  },\n  \"dataType\" : {\n    \"field\" : [ {\n      \"format\" : \"map\",\n      \"name\" : \"Julienne Howe\",\n      \"optional\" : false\n    }, {\n      \"format\" : \"integerList\",\n      \"name\" : \"Rudy Borer\",\n      \"optional\" : false\n    } ],\n    \"name\" : \"Joann Huels\"\n  },\n  \"name\" : \"Cherish Kohler\",\n  \"dataQualityStandard\" : [ \"dataQualityBloodPressureBhsBB\", \"dataQualityBloodGlucoseIso151972003\", \"dataQualityBloodGlucoseIso151972003\", \"dataQualityBloodPressureBhsBA\", \"dataQualityBloodPressureBhsAB\", \"dataQualityBloodPressureAami\", \"dataQualityBloodPressureEsh2010\", \"dataQualityBloodGlucoseIso151972013\" ],\n  \"type\" : \"raw\",\n  \"device\" : {\n    \"uid\" : \"bq19\",\n    \"model\" : \"b127gwiakvlpgdyy8z\",\n    \"type\" : \"unknown\",\n    \"version\" : \"o4vh5q27znoqddr3fcfjvnfgq0k8qmaj3maluu5hu6ua6hjd0xeoo27iu578rcrkzb74zqaddqamkvelwqpyjpr4iwexnnt5ja1mlgtethd203x4x0vl5juegc24wihavkcbknr9jwni6xeptbl9u4i626up09twg4liw36p267limiozr6tqk2vs6\",\n    \"manufacturer\" : \"oy5as8pqzoxu1dc\"\n  },\n  \"dataStreamId\" : \"ymok\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "e8d0ed7a-587b-4f41-836f-cc7825988cb7",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:02.809013Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "fitness.users.dataSources.delete",
          "schema" : {
            "description" : "Definition of a unique source of sensor data. Data sources can expose raw data coming from hardware sensors on local or companion devices. They can also expose derived data, created by transforming or merging other data sources. Multiple data sources can exist for the same data type. Every data point inserted into or read from this service has an associated data source. The data source contains enough information to uniquely identify its data, including the hardware device and the application that collected and/or transformed the data. It also holds useful metadata, such as the hardware and application versions, and the device type. Each data source produces a unique stream of data, with a unique identifier. Not all changes to data source affect the stream identifier, so that data collected by updated versions of the same application/device can still be considered to belong to the same data stream.",
            "properties" : {
              "application" : {
                "$ref" : "#/components/schemas/Application"
              },
              "dataQualityStandard" : {
                "description" : "DO NOT POPULATE THIS FIELD. It is never populated in responses from the platform, and is ignored in queries. It will be removed in a future version entirely.",
                "items" : {
                  "enum" : [ "dataQualityUnknown", "dataQualityBloodPressureEsh2002", "dataQualityBloodPressureEsh2010", "dataQualityBloodPressureAami", "dataQualityBloodPressureBhsAA", "dataQualityBloodPressureBhsAB", "dataQualityBloodPressureBhsBA", "dataQualityBloodPressureBhsBB", "dataQualityBloodGlucoseIso151972003", "dataQualityBloodGlucoseIso151972013" ],
                  "type" : "string"
                },
                "type" : "array"
              },
              "dataStreamId" : {
                "description" : "A unique identifier for the data stream produced by this data source. The identifier includes: - The physical device's manufacturer, model, and serial number (UID). - The application's package name or name. Package name is used when the data source was created by an Android application. The developer project number is used when the data source was created by a REST client. - The data source's type. - The data source's stream name. Note that not all attributes of the data source are used as part of the stream identifier. In particular, the version of the hardware/the application isn't used. This allows us to preserve the same stream through version updates. This also means that two DataSource objects may represent the same data stream even if they're not equal. The exact format of the data stream ID created by an Android application is: type:dataType.name:application.packageName:device.manufacturer:device.model:device.uid:dataStreamName The exact format of the data stream ID created by a REST client is: type:dataType.name:developer project number:device.manufacturer:device.model:device.uid:dataStreamName When any of the optional fields that make up the data stream ID are absent, they will be omitted from the data stream ID. The minimum viable data stream ID would be: type:dataType.name:developer project number Finally, the developer project number and device UID are obfuscated when read by any REST or Android client that did not create the data source. Only the data source creator will see the developer project number in clear and normal form. This means a client will see a different set of data_stream_ids than another client with different credentials.",
                "type" : "string"
              },
              "dataStreamName" : {
                "description" : "The stream name uniquely identifies this particular data source among other data sources of the same type from the same underlying producer. Setting the stream name is optional, but should be done whenever an application exposes two streams for the same data type, or when a device has two equivalent sensors.",
                "type" : "string"
              },
              "dataType" : {
                "$ref" : "#/components/schemas/DataType"
              },
              "device" : {
                "$ref" : "#/components/schemas/Device"
              },
              "name" : {
                "description" : "An end-user visible name for this data source.",
                "type" : "string"
              },
              "type" : {
                "description" : "A constant describing the type of this data source. Indicates whether this data source produces raw or derived data.",
                "enum" : [ "raw", "derived" ],
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 10
  }, {
    "id" : "0ba1cfd6-6676-4084-a005-b37df2187f34",
    "name" : "Creates a new data source that is unique across all data sources belonging to th...",
    "request" : {
      "urlPath" : "/dw54/dataSources",
      "method" : "POST"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"dataStreamName\" : \"Mrs. Lynn Fay\",\n  \"application\" : {\n    \"detailsUrl\" : \"https://web.example.mocklab.io/274167\",\n    \"name\" : \"Mrs. Kimbery Stanton\",\n    \"packageName\" : \"Richard Streich\",\n    \"version\" : \"tjlhlzu2iscsrv9bn5391apl02v31hvlnflu2bv6wlqdt461h14i46e9t7rd06r2rvzp\"\n  },\n  \"dataType\" : {\n    \"field\" : [ {\n      \"format\" : \"blob\",\n      \"name\" : \"Mr. Arnulfo Marks\",\n      \"optional\" : true\n    }, {\n      \"format\" : \"integerList\",\n      \"name\" : \"Vernon Kub\",\n      \"optional\" : false\n    }, {\n      \"format\" : \"blob\",\n      \"name\" : \"Mario Gerhold\",\n      \"optional\" : true\n    }, {\n      \"format\" : \"integer\",\n      \"name\" : \"Philomena Smitham\",\n      \"optional\" : true\n    }, {\n      \"format\" : \"string\",\n      \"name\" : \"Ross Hodkiewicz\",\n      \"optional\" : true\n    }, {\n      \"format\" : \"string\",\n      \"name\" : \"Astrid McGlynn Sr.\",\n      \"optional\" : false\n    } ],\n    \"name\" : \"Miss Osvaldo Frami\"\n  },\n  \"name\" : \"Michale Collier\",\n  \"dataQualityStandard\" : [ \"dataQualityBloodPressureBhsAA\", \"dataQualityBloodPressureBhsBB\", \"dataQualityBloodPressureBhsBA\", \"dataQualityUnknown\" ],\n  \"type\" : \"derived\",\n  \"device\" : {\n    \"uid\" : \"a8z6\",\n    \"model\" : \"m32rv3op5xrw1oygxokv\",\n    \"type\" : \"tablet\",\n    \"version\" : \"82gmqvssdh8ucr5rf8gbhazu2wuelj3c21dw53w4zluc6spviv2hj3v51uteqnh3x17ryi6bbe77ndh5etzmkd49notrvi8gtewsssaicajm6u972fkf8p5o5ii3lwt42xfq3zxd8sm6ftte4zx0fz3ditvlvs4k3kc6wcj9dk8l7ozjtb73eq5b4nymd7\",\n    \"manufacturer\" : \"mmp6q27z6wocqs9de5g8nuec93extmkmxun99ec0t2lg1qzjo815ityhppkjztv0fpogthgg8liozeounx7jtj127vey2ie949lm7e5krak9wfkqj\"\n  },\n  \"dataStreamId\" : \"6201\"\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "0ba1cfd6-6676-4084-a005-b37df2187f34",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:02.808156Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "fitness.users.dataSources.create",
          "schema" : {
            "description" : "Definition of a unique source of sensor data. Data sources can expose raw data coming from hardware sensors on local or companion devices. They can also expose derived data, created by transforming or merging other data sources. Multiple data sources can exist for the same data type. Every data point inserted into or read from this service has an associated data source. The data source contains enough information to uniquely identify its data, including the hardware device and the application that collected and/or transformed the data. It also holds useful metadata, such as the hardware and application versions, and the device type. Each data source produces a unique stream of data, with a unique identifier. Not all changes to data source affect the stream identifier, so that data collected by updated versions of the same application/device can still be considered to belong to the same data stream.",
            "properties" : {
              "application" : {
                "$ref" : "#/components/schemas/Application"
              },
              "dataQualityStandard" : {
                "description" : "DO NOT POPULATE THIS FIELD. It is never populated in responses from the platform, and is ignored in queries. It will be removed in a future version entirely.",
                "items" : {
                  "enum" : [ "dataQualityUnknown", "dataQualityBloodPressureEsh2002", "dataQualityBloodPressureEsh2010", "dataQualityBloodPressureAami", "dataQualityBloodPressureBhsAA", "dataQualityBloodPressureBhsAB", "dataQualityBloodPressureBhsBA", "dataQualityBloodPressureBhsBB", "dataQualityBloodGlucoseIso151972003", "dataQualityBloodGlucoseIso151972013" ],
                  "type" : "string"
                },
                "type" : "array"
              },
              "dataStreamId" : {
                "description" : "A unique identifier for the data stream produced by this data source. The identifier includes: - The physical device's manufacturer, model, and serial number (UID). - The application's package name or name. Package name is used when the data source was created by an Android application. The developer project number is used when the data source was created by a REST client. - The data source's type. - The data source's stream name. Note that not all attributes of the data source are used as part of the stream identifier. In particular, the version of the hardware/the application isn't used. This allows us to preserve the same stream through version updates. This also means that two DataSource objects may represent the same data stream even if they're not equal. The exact format of the data stream ID created by an Android application is: type:dataType.name:application.packageName:device.manufacturer:device.model:device.uid:dataStreamName The exact format of the data stream ID created by a REST client is: type:dataType.name:developer project number:device.manufacturer:device.model:device.uid:dataStreamName When any of the optional fields that make up the data stream ID are absent, they will be omitted from the data stream ID. The minimum viable data stream ID would be: type:dataType.name:developer project number Finally, the developer project number and device UID are obfuscated when read by any REST or Android client that did not create the data source. Only the data source creator will see the developer project number in clear and normal form. This means a client will see a different set of data_stream_ids than another client with different credentials.",
                "type" : "string"
              },
              "dataStreamName" : {
                "description" : "The stream name uniquely identifies this particular data source among other data sources of the same type from the same underlying producer. Setting the stream name is optional, but should be done whenever an application exposes two streams for the same data type, or when a device has two equivalent sensors.",
                "type" : "string"
              },
              "dataType" : {
                "$ref" : "#/components/schemas/DataType"
              },
              "device" : {
                "$ref" : "#/components/schemas/Device"
              },
              "name" : {
                "description" : "An end-user visible name for this data source.",
                "type" : "string"
              },
              "type" : {
                "description" : "A constant describing the type of this data source. Indicates whether this data source produces raw or derived data.",
                "enum" : [ "raw", "derived" ],
                "type" : "string"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 11
  }, {
    "id" : "27324dc7-cc71-447e-98ed-3ef84baf4559",
    "name" : "Lists all data sources that are visible to the developer, using the OAuth scopes...",
    "request" : {
      "urlPath" : "/5419/dataSources",
      "method" : "GET"
    },
    "response" : {
      "status" : 200,
      "body" : "{\n  \"dataSource\" : [ {\n    \"dataStreamName\" : \"Paris Emmerich MD\",\n    \"application\" : {\n      \"detailsUrl\" : \"https://web.example.mocklab.io/231369\",\n      \"name\" : \"Mr. Linette Connelly\",\n      \"packageName\" : \"Dana Kuhn\",\n      \"version\" : \"ddv3496570ol2dpldx008dj4sxmusezkegjzx2jc5mt5h4jsmj33s9e7qxag7nvuwj1z2204kae5youy91qcj7ulnig46z1xl3mxj5cxb0qujd8eddm235jfay8mrh1c1pu3kg0lb7any6npelml1dipw2hbgdf053owpame09ek1bim23stqn2qky9x3sw49mx4\"\n    },\n    \"dataType\" : {\n      \"field\" : [ {\n        \"format\" : \"floatPoint\",\n        \"name\" : \"Clarice Fadel\",\n        \"optional\" : true\n      }, {\n        \"format\" : \"floatList\",\n        \"name\" : \"Foster Heller\",\n        \"optional\" : true\n      } ],\n      \"name\" : \"Jim Denesik\"\n    },\n    \"name\" : \"Dr. Farah Kovacek\",\n    \"dataQualityStandard\" : [ \"dataQualityBloodGlucoseIso151972013\", \"dataQualityBloodGlucoseIso151972013\", \"dataQualityBloodPressureAami\", \"dataQualityBloodPressureBhsBB\", \"dataQualityBloodGlucoseIso151972003\" ],\n    \"type\" : \"raw\",\n    \"device\" : {\n      \"uid\" : \"1zdl\",\n      \"model\" : \"lsmwzjz286u3purczvnpd59l6ews5nh5dujncyarc7fnq2et7harwwqb9fzly01c6xi62r9fni05o9v7auebx39rsgywmlve5hnpg9dgc7onnap6yih95xe6hlzmhe5ge5mbe0thkciurk8vdc912ium6t\",\n      \"type\" : \"tablet\",\n      \"version\" : \"66tb5wpwvslzijinz8z8rfdaye8kr1ai0b2genb7tlwtcvsrzkzri8f0jh18tywgg3pb04q55zh3ip8gb9hit643kuy0cz3xkxkvl\",\n      \"manufacturer\" : \"j50wcj84tl2rwizg2xpdkbgky1ha04of3s2dxo9ql84xa9qdcaazm01n2nlpqk2hz7fn5mjb7piu5aky0dsz5g9ausqkufwwgvffodq9ir\"\n    },\n    \"dataStreamId\" : \"o478\"\n  }, {\n    \"dataStreamName\" : \"Monty Kulas\",\n    \"application\" : {\n      \"detailsUrl\" : \"https://web.example.mocklab.io/441059\",\n      \"name\" : \"Melissa Abbott\",\n      \"packageName\" : \"Carey Kessler\",\n      \"version\" : \"xdm690c60k52p8v0ajkvlsnusoapzg34nqtfiviuune3xdvt5tg7czhmf2x8l3j01trckzx1t1r5yvsl3qqqz1l071qjjpuak69dwbrixteglynx8s9v0tg2yozw539xntum4km6g1xlmje1jl6l1jkx89ac7c3ejycf69utrntq2978hyt6s0bwi2k4l4sts\"\n    },\n    \"dataType\" : {\n      \"field\" : [ {\n        \"format\" : \"string\",\n        \"name\" : \"Shirlene Mitchell\",\n        \"optional\" : true\n      }, {\n        \"format\" : \"integer\",\n        \"name\" : \"Margo Rogahn\",\n        \"optional\" : false\n      }, {\n        \"format\" : \"integer\",\n        \"name\" : \"Geraldo Dibbert\",\n        \"optional\" : false\n      }, {\n        \"format\" : \"floatPoint\",\n        \"name\" : \"Harry Jerde\",\n        \"optional\" : false\n      }, {\n        \"format\" : \"integerList\",\n        \"name\" : \"Blaine Pacocha Sr.\",\n        \"optional\" : false\n      }, {\n        \"format\" : \"floatPoint\",\n        \"name\" : \"Napoleon Mayert\",\n        \"optional\" : false\n      }, {\n        \"format\" : \"floatList\",\n        \"name\" : \"Milford Sipes\",\n        \"optional\" : true\n      } ],\n      \"name\" : \"Terica Corkery\"\n    },\n    \"name\" : \"Cruz Feil\",\n    \"dataQualityStandard\" : [ \"dataQualityBloodPressureEsh2010\", \"dataQualityUnknown\", \"dataQualityBloodPressureAami\", \"dataQualityBloodPressureBhsBA\", \"dataQualityBloodGlucoseIso151972013\", \"dataQualityBloodPressureBhsBA\" ],\n    \"type\" : \"raw\",\n    \"device\" : {\n      \"uid\" : \"67h9\",\n      \"model\" : \"7i33y3ewjiy7jgm6i1gmkt3nhlkk4296izt9n81\",\n      \"type\" : \"headMounted\",\n      \"version\" : \"85a0agjbjlr05e0yx5zcdc7yv84r7f9x2yjalgk02d1niy0ofyqyw85pwsyqk0h22vy8vt5agylgcxaz2xl1ir5yjj9ltp6lcpqe5nm4k08hwqeojzwea\",\n      \"manufacturer\" : \"ny2fozm280wpk1hbh0gtt8j7lv4s4yugiv4qkdwnvle6g4gt29agcp3qum6lzmjfa5u3pubpwv5vj7xxqtq9i7t0wlvsvo4e7o1ftir4bnh0oyvkdb06najl53ccfxd99z4ep9zgcwn98wzwng5roan\"\n    },\n    \"dataStreamId\" : \"gy1u\"\n  }, {\n    \"dataStreamName\" : \"Moshe Swift MD\",\n    \"application\" : {\n      \"detailsUrl\" : \"https://web.example.mocklab.io/350517\",\n      \"name\" : \"Fidel Cronin\",\n      \"packageName\" : \"Zena Heidenreich\",\n      \"version\" : \"k8onvvd18wxq1tvbmpr1bmm0pzhrdsg1eblza3h81wuaihlyuqccjecmam1f5pt8xvzuntqv2mbru4gjcjxkzjl29pmxiz2izxo3rhf1d8uflqksczjlvk44jedt133v19n89ghv0wp7coe9d4wjk5qvwnl\"\n    },\n    \"dataType\" : {\n      \"field\" : [ {\n        \"format\" : \"blob\",\n        \"name\" : \"Lawrence Runte\",\n        \"optional\" : true\n      }, {\n        \"format\" : \"string\",\n        \"name\" : \"Amos Miller\",\n        \"optional\" : true\n      }, {\n        \"format\" : \"map\",\n        \"name\" : \"Linnie Farrell\",\n        \"optional\" : false\n      }, {\n        \"format\" : \"integerList\",\n        \"name\" : \"Dorotha Kreiger\",\n        \"optional\" : true\n      }, {\n        \"format\" : \"floatList\",\n        \"name\" : \"Latina Gislason Sr.\",\n        \"optional\" : true\n      }, {\n        \"format\" : \"floatPoint\",\n        \"name\" : \"Carmelo Douglas\",\n        \"optional\" : false\n      }, {\n        \"format\" : \"integer\",\n        \"name\" : \"Ms. Mike Howell\",\n        \"optional\" : true\n      }, {\n        \"format\" : \"blob\",\n        \"name\" : \"Jacques O'Conner\",\n        \"optional\" : true\n      } ],\n      \"name\" : \"Yung Gulgowski\"\n    },\n    \"name\" : \"Pat Sawayn IV\",\n    \"dataQualityStandard\" : [ \"dataQualityBloodPressureBhsBB\", \"dataQualityBloodGlucoseIso151972003\", \"dataQualityUnknown\", \"dataQualityBloodPressureBhsBB\", \"dataQualityBloodPressureBhsAA\" ],\n    \"type\" : \"derived\",\n    \"device\" : {\n      \"uid\" : \"6083\",\n      \"model\" : \"3bhozemdkkgqc48utpzr6zl2f127ebmas8ynqzdnxcm0inm9csebrxv3h12g5hkdxqu6y4f32m7a0yl5gip\",\n      \"type\" : \"chestStrap\",\n      \"version\" : \"u8kkn0qx0mgob0f9\",\n      \"manufacturer\" : \"8pkivnkkigpe2yc860zybmh8efzroldo8\"\n    },\n    \"dataStreamId\" : \"2gh1\"\n  }, {\n    \"dataStreamName\" : \"Micheline Strosin\",\n    \"application\" : {\n      \"detailsUrl\" : \"https://web.example.mocklab.io/101404\",\n      \"name\" : \"Roosevelt Von\",\n      \"packageName\" : \"Mr. Jeffry Hyatt\",\n      \"version\" : \"42shakkgt9xbfls71q2gp0no\"\n    },\n    \"dataType\" : {\n      \"field\" : [ {\n        \"format\" : \"integerList\",\n        \"name\" : \"Verlene Leannon\",\n        \"optional\" : true\n      }, {\n        \"format\" : \"string\",\n        \"name\" : \"Magnolia Steuber\",\n        \"optional\" : false\n      }, {\n        \"format\" : \"string\",\n        \"name\" : \"Ethan Berge\",\n        \"optional\" : true\n      }, {\n        \"format\" : \"string\",\n        \"name\" : \"Mr. Ileen Orn\",\n        \"optional\" : true\n      } ],\n      \"name\" : \"Belle Hagenes\"\n    },\n    \"name\" : \"Casey Greenfelder II\",\n    \"dataQualityStandard\" : [ \"dataQualityBloodPressureAami\", \"dataQualityBloodPressureBhsAA\", \"dataQualityBloodGlucoseIso151972003\", \"dataQualityBloodPressureBhsBA\", \"dataQualityBloodPressureBhsAA\" ],\n    \"type\" : \"derived\",\n    \"device\" : {\n      \"uid\" : \"9cyv\",\n      \"model\" : \"f141pco04z6wxoudfwh4rj5pnqw0py5ve9j7tvagajgkxjpgcnjqm8l3davxvcnt9cba5s0a2b0euicmc5zgwyz5kqdmcwhg6wdn5grxtpe704k\",\n      \"type\" : \"unknown\",\n      \"version\" : \"nqhcndp1kkr0uvwdbxvt0n25pf25dhxz3kh8efqygz1sappzsm8l9ccokd3qu28o15zi24t4olufc8w4gkliwqsg5pp573fjl9gvjwt6boem4fh15fnf72co7jl1rhfjb471k8ta9a2km7oumf4xobexeriqj7ehb2hb2wmuqxiytzc63dn38q4kmlwcmfl\",\n      \"manufacturer\" : \"ltjxdpth34rzn1457d812cg3rh73881xi41rn8i5mvwgob6p4na72xs0bfrwhq8rvhcd54itus47lgwjarz6i1xgzgupvft2vqojthdi70gfusunui2w79yny2x9o6cogorhj0ngxtewy6fphtzokk1lw4z0lcliy44\"\n    },\n    \"dataStreamId\" : \"1cf4\"\n  }, {\n    \"dataStreamName\" : \"Elina Rempel\",\n    \"application\" : {\n      \"detailsUrl\" : \"https://web.example.mocklab.io/541396\",\n      \"name\" : \"Mr. Granville Huels\",\n      \"packageName\" : \"Chong Weber DVM\",\n      \"version\" : \"h9ne2tg8ywr6etx6m03zhei0qbjiniqva0q4zv3gwygf92k9\"\n    },\n    \"dataType\" : {\n      \"field\" : [ {\n        \"format\" : \"integerList\",\n        \"name\" : \"Susanne Satterfield\",\n        \"optional\" : true\n      }, {\n        \"format\" : \"floatList\",\n        \"name\" : \"Jeanice Treutel\",\n        \"optional\" : false\n      }, {\n        \"format\" : \"blob\",\n        \"name\" : \"Henry Gerhold\",\n        \"optional\" : false\n      }, {\n        \"format\" : \"integer\",\n        \"name\" : \"Marcel Roberts\",\n        \"optional\" : false\n      }, {\n        \"format\" : \"floatPoint\",\n        \"name\" : \"Carlton Schumm DDS\",\n        \"optional\" : false\n      }, {\n        \"format\" : \"integer\",\n        \"name\" : \"Ozzie Green\",\n        \"optional\" : false\n      }, {\n        \"format\" : \"blob\",\n        \"name\" : \"Noble Spencer\",\n        \"optional\" : false\n      }, {\n        \"format\" : \"blob\",\n        \"name\" : \"Natalie Dicki\",\n        \"optional\" : true\n      } ],\n      \"name\" : \"Miss Buena Thiel\"\n    },\n    \"name\" : \"Dr. Garret Carroll\",\n    \"dataQualityStandard\" : [ \"dataQualityBloodPressureEsh2002\", \"dataQualityBloodGlucoseIso151972003\", \"dataQualityBloodPressureBhsBA\", \"dataQualityBloodPressureBhsAA\", \"dataQualityBloodPressureEsh2010\", \"dataQualityUnknown\" ],\n    \"type\" : \"raw\",\n    \"device\" : {\n      \"uid\" : \"x41d\",\n      \"model\" : \"3vcmrqlqgxhn1zlcx40evmlhv5zqnxsipsosebb89lvwm7lhy4p77d144yc283xoxdoe1t3koz5mc1s1y3do2vyib5\",\n      \"type\" : \"phone\",\n      \"version\" : \"lhhboj8ejzmuiduxlbnoepq827sxn29qidz0asrd6k1dyj7wl45y420mng56m4zpue\",\n      \"manufacturer\" : \"3iziago9h7s2ihkpyuigehfig51ktb2arbbf831593hc9eczjxiao4daezaapn323907eagr7fkz3h3azlm4whiuwlkph2xj33f5631tmmq16iph5tp\"\n    },\n    \"dataStreamId\" : \"02pk\"\n  }, {\n    \"dataStreamName\" : \"Ed Jones\",\n    \"application\" : {\n      \"detailsUrl\" : \"https://web.example.mocklab.io/396311\",\n      \"name\" : \"Florentina Bernhard\",\n      \"packageName\" : \"Terresa Homenick\",\n      \"version\" : \"p0x6wk98xwel4hpj0uuaq30s4y08ygekqu60keqnm2p1vtpm7q2nzev\"\n    },\n    \"dataType\" : {\n      \"field\" : [ {\n        \"format\" : \"integerList\",\n        \"name\" : \"Ms. Izola Hansen\",\n        \"optional\" : false\n      }, {\n        \"format\" : \"floatPoint\",\n        \"name\" : \"Shayne Treutel\",\n        \"optional\" : false\n      }, {\n        \"format\" : \"floatList\",\n        \"name\" : \"Russ Volkman II\",\n        \"optional\" : false\n      }, {\n        \"format\" : \"floatPoint\",\n        \"name\" : \"Tai Ernser\",\n        \"optional\" : true\n      }, {\n        \"format\" : \"string\",\n        \"name\" : \"Mr. Eveline Nolan\",\n        \"optional\" : true\n      }, {\n        \"format\" : \"map\",\n        \"name\" : \"Wade Emmerich\",\n        \"optional\" : false\n      }, {\n        \"format\" : \"integerList\",\n        \"name\" : \"Terresa Blick\",\n        \"optional\" : false\n      } ],\n      \"name\" : \"Sheree Moen\"\n    },\n    \"name\" : \"Wyatt Corwin\",\n    \"dataQualityStandard\" : [ \"dataQualityBloodPressureBhsBA\", \"dataQualityBloodPressureBhsAA\", \"dataQualityBloodPressureBhsAA\", \"dataQualityBloodGlucoseIso151972003\", \"dataQualityBloodPressureEsh2010\", \"dataQualityBloodGlucoseIso151972013\" ],\n    \"type\" : \"derived\",\n    \"device\" : {\n      \"uid\" : \"o330\",\n      \"model\" : \"hnnpdte3o01hiwlco8nzcbewhbjw0el1nejg87921vcss93ea9fwf8i5t8\",\n      \"type\" : \"watch\",\n      \"version\" : \"6ctu76jhms6l6elidbejxcagowyj6sjbeucwseb1upu2ducvzn6xrlruikwtp5hasz189gysixjsduglickxtmyhw6qe84etk1xl0at0hh69kxn1dq07ts125pfug9x27uvhfeacbgz0d1n9cbvutry6uhksn0qbw1ho4gro5b6bss3zs5tvbnojxnxlu\",\n      \"manufacturer\" : \"z43ixrxo39m9l9hm4r\"\n    },\n    \"dataStreamId\" : \"dr02\"\n  } ]\n}",
      "headers" : {
        "Content-Type" : "application/json"
      }
    },
    "uuid" : "27324dc7-cc71-447e-98ed-3ef84baf4559",
    "persistent" : true,
    "metadata" : {
      "mocklab" : {
        "created" : {
          "at" : "2023-03-13T11:54:02.80699Z",
          "via" : "OAS3_IMPORT"
        },
        "oas" : {
          "operationId" : "fitness.users.dataSources.list",
          "schema" : {
            "properties" : {
              "dataSource" : {
                "description" : "A previously created data source.",
                "items" : {
                  "$ref" : "#/components/schemas/DataSource"
                },
                "type" : "array"
              }
            },
            "type" : "object"
          }
        }
      }
    },
    "insertionIndex" : 12
  } ]
}